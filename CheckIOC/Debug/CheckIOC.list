
CheckIOC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000428c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001548  08004344  08004344  00005344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800588c  0800588c  00007094  2**0
                  CONTENTS
  4 .ARM          00000000  0800588c  0800588c  00007094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800588c  0800588c  00007094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800588c  0800588c  0000688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005890  08005890  00006890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08005894  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000094  08005928  00007094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007c8  08005928  000077c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bdd3  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9c  00000000  00000000  00012e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d8  00000000  00000000  00014d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006d0  00000000  00000000  00015608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015536  00000000  00000000  00015cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c12f  00000000  00000000  0002b20e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084350  00000000  00000000  0003733d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb68d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002344  00000000  00000000  000bb6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000bda14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000094 	.word	0x20000094
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800432c 	.word	0x0800432c

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000098 	.word	0x20000098
 80000fc:	0800432c 	.word	0x0800432c

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f806 	bl	8000238 <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__aeabi_idiv0>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b085      	sub	sp, #20
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 ffb9 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f8d5 	bl	80003f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f983 	bl	8000554 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800024e:	f000 f919 	bl	8000484 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000252:	f000 f94b 	bl	80004ec <MX_USART4_UART_Init>
HXMy8QKBgALoOyjA4OM6E/addbhYgr7NfizU2M/7LU73Z3YRHqvzbT1mibHfQYp+\n\
ODuWXHRRTonXJLqVnRSsnszcqzeOkzZcleI4/0p7oWW5RWqEyHsa7OSwGqH9T0Cf\n\
L3hf30HuwtvmHlz/86avjZWig+Ww78pdo9jnsT8pXIOkH3Aj+Q+r\n\
-----END RSA PRIVATE KEY-----\n\
";
  bool cert1_status = false;
 8000256:	230f      	movs	r3, #15
 8000258:	18fb      	adds	r3, r7, r3
 800025a:	2200      	movs	r2, #0
 800025c:	701a      	strb	r2, [r3, #0]
  bool cert2_status = false;
 800025e:	230e      	movs	r3, #14
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	2200      	movs	r2, #0
 8000264:	701a      	strb	r2, [r3, #0]
  bool cert3_status = false;
 8000266:	230d      	movs	r3, #13
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	2200      	movs	r2, #0
 800026c:	701a      	strb	r2, [r3, #0]
  //Quecteloff();
  Quectelon();
 800026e:	f000 fabf 	bl	80007f0 <Quectelon>



  while (!cert1_status){
 8000272:	e008      	b.n	8000286 <main+0x4a>
	  cert1_status =  uploadcertificate1(ca_cert);
 8000274:	4b56      	ldr	r3, [pc, #344]	@ (80003d0 <main+0x194>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	220f      	movs	r2, #15
 800027a:	18bc      	adds	r4, r7, r2
 800027c:	0018      	movs	r0, r3
 800027e:	f000 fae1 	bl	8000844 <uploadcertificate1>
 8000282:	0003      	movs	r3, r0
 8000284:	7023      	strb	r3, [r4, #0]
  while (!cert1_status){
 8000286:	230f      	movs	r3, #15
 8000288:	18fb      	adds	r3, r7, r3
 800028a:	781b      	ldrb	r3, [r3, #0]
 800028c:	2201      	movs	r2, #1
 800028e:	4053      	eors	r3, r2
 8000290:	b2db      	uxtb	r3, r3
 8000292:	2b00      	cmp	r3, #0
 8000294:	d1ee      	bne.n	8000274 <main+0x38>
  }
  while (!cert2_status){
 8000296:	e008      	b.n	80002aa <main+0x6e>
	  cert2_status =  uploadcertificate2(client_cert);
 8000298:	4b4e      	ldr	r3, [pc, #312]	@ (80003d4 <main+0x198>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	220e      	movs	r2, #14
 800029e:	18bc      	adds	r4, r7, r2
 80002a0:	0018      	movs	r0, r3
 80002a2:	f000 fb2b 	bl	80008fc <uploadcertificate2>
 80002a6:	0003      	movs	r3, r0
 80002a8:	7023      	strb	r3, [r4, #0]
  while (!cert2_status){
 80002aa:	230e      	movs	r3, #14
 80002ac:	18fb      	adds	r3, r7, r3
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	2201      	movs	r2, #1
 80002b2:	4053      	eors	r3, r2
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d1ee      	bne.n	8000298 <main+0x5c>
  }
  while (!cert3_status){
 80002ba:	e008      	b.n	80002ce <main+0x92>
	  cert3_status =  uploadcertificate3(private_key);
 80002bc:	4b46      	ldr	r3, [pc, #280]	@ (80003d8 <main+0x19c>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	220d      	movs	r2, #13
 80002c2:	18bc      	adds	r4, r7, r2
 80002c4:	0018      	movs	r0, r3
 80002c6:	f000 fb75 	bl	80009b4 <uploadcertificate3>
 80002ca:	0003      	movs	r3, r0
 80002cc:	7023      	strb	r3, [r4, #0]
  while (!cert3_status){
 80002ce:	230d      	movs	r3, #13
 80002d0:	18fb      	adds	r3, r7, r3
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2201      	movs	r2, #1
 80002d6:	4053      	eors	r3, r2
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d1ee      	bne.n	80002bc <main+0x80>
  }
  assignPDPcontext();
 80002de:	f000 fa35 	bl	800074c <assignPDPcontext>
  checkConnection();
 80002e2:	f000 fbc3 	bl	8000a6c <checkConnection>
  initializeMQTT();
 80002e6:	f000 fc37 	bl	8000b58 <initializeMQTT>
//		  rcvmessage = receiveMessage(400, 30000);
//		  HAL_Delay(30000);
//	  }
//	  UnsubscribefromTopic("testpub1");

	  bool TransmitDataMqtt_flag = false;
 80002ea:	230b      	movs	r3, #11
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	2200      	movs	r2, #0
 80002f0:	701a      	strb	r2, [r3, #0]

//
	  HAL_StatusTypeDef Inverter_receive_status=HAL_TIMEOUT;
 80002f2:	230c      	movs	r3, #12
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	2203      	movs	r2, #3
 80002f8:	701a      	strb	r2, [r3, #0]
	  while(Inverter_receive_status!=HAL_OK){
 80002fa:	e015      	b.n	8000328 <main+0xec>
		  HAL_UART_Transmit_IT(&huart4, txData, sizeof(txData));
 80002fc:	4937      	ldr	r1, [pc, #220]	@ (80003dc <main+0x1a0>)
 80002fe:	4b38      	ldr	r3, [pc, #224]	@ (80003e0 <main+0x1a4>)
 8000300:	2203      	movs	r2, #3
 8000302:	0018      	movs	r0, r3
 8000304:	f002 f98a 	bl	800261c <HAL_UART_Transmit_IT>
	  	  Inverter_receive_status=HAL_UART_Receive(&huart4, data, 70,3000);
 8000308:	230c      	movs	r3, #12
 800030a:	18fc      	adds	r4, r7, r3
 800030c:	4b35      	ldr	r3, [pc, #212]	@ (80003e4 <main+0x1a8>)
 800030e:	4936      	ldr	r1, [pc, #216]	@ (80003e8 <main+0x1ac>)
 8000310:	4833      	ldr	r0, [pc, #204]	@ (80003e0 <main+0x1a4>)
 8000312:	2246      	movs	r2, #70	@ 0x46
 8000314:	f002 f89c 	bl	8002450 <HAL_UART_Receive>
 8000318:	0003      	movs	r3, r0
 800031a:	7023      	strb	r3, [r4, #0]
	  	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800031c:	23a0      	movs	r3, #160	@ 0xa0
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	2120      	movs	r1, #32
 8000322:	0018      	movs	r0, r3
 8000324:	f001 fb1d 	bl	8001962 <HAL_GPIO_TogglePin>
	  while(Inverter_receive_status!=HAL_OK){
 8000328:	230c      	movs	r3, #12
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1e4      	bne.n	80002fc <main+0xc0>
	  }
	    // Transmit Data via MQTT through Quectel
	  uint8_t debug = 1;
 8000332:	1cfb      	adds	r3, r7, #3
 8000334:	2201      	movs	r2, #1
 8000336:	701a      	strb	r2, [r3, #0]

	    TransmitDataMqtt_flag = TransmitDataMqtt(data,PACKET_DATA_LENGTH,&debug);
 8000338:	230b      	movs	r3, #11
 800033a:	18fc      	adds	r4, r7, r3
 800033c:	1cfa      	adds	r2, r7, #3
 800033e:	4b2a      	ldr	r3, [pc, #168]	@ (80003e8 <main+0x1ac>)
 8000340:	2146      	movs	r1, #70	@ 0x46
 8000342:	0018      	movs	r0, r3
 8000344:	f000 fdae 	bl	8000ea4 <TransmitDataMqtt>
 8000348:	0003      	movs	r3, r0
 800034a:	7023      	strb	r3, [r4, #0]


	    uint32_t last_tick = HAL_GetTick(); // Initialize the last tick time
 800034c:	f000 ffb0 	bl	80012b0 <HAL_GetTick>
 8000350:	0003      	movs	r3, r0
 8000352:	607b      	str	r3, [r7, #4]
	    while (((HAL_GetTick() - last_tick)) < MINUTES_INTERVAL)
 8000354:	e033      	b.n	80003be <main+0x182>
	    {
	      if (TransmitDataMqtt_flag)
 8000356:	230b      	movs	r3, #11
 8000358:	18fb      	adds	r3, r7, r3
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	d018      	beq.n	8000392 <main+0x156>
	      {

	        // Transmission Successful
	        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000360:	23a0      	movs	r3, #160	@ 0xa0
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	2201      	movs	r2, #1
 8000366:	2120      	movs	r1, #32
 8000368:	0018      	movs	r0, r3
 800036a:	f001 fadd 	bl	8001928 <HAL_GPIO_WritePin>
	        HAL_Delay(500);
 800036e:	23fa      	movs	r3, #250	@ 0xfa
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	0018      	movs	r0, r3
 8000374:	f000 ffa6 	bl	80012c4 <HAL_Delay>
	        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000378:	23a0      	movs	r3, #160	@ 0xa0
 800037a:	05db      	lsls	r3, r3, #23
 800037c:	2200      	movs	r2, #0
 800037e:	2120      	movs	r1, #32
 8000380:	0018      	movs	r0, r3
 8000382:	f001 fad1 	bl	8001928 <HAL_GPIO_WritePin>
	        HAL_Delay(500);
 8000386:	23fa      	movs	r3, #250	@ 0xfa
 8000388:	005b      	lsls	r3, r3, #1
 800038a:	0018      	movs	r0, r3
 800038c:	f000 ff9a 	bl	80012c4 <HAL_Delay>
 8000390:	e015      	b.n	80003be <main+0x182>
	      }
	      else
	      {
	        // Transmission Failed
	        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 8000392:	23a0      	movs	r3, #160	@ 0xa0
 8000394:	05db      	lsls	r3, r3, #23
 8000396:	2201      	movs	r2, #1
 8000398:	2120      	movs	r1, #32
 800039a:	0018      	movs	r0, r3
 800039c:	f001 fac4 	bl	8001928 <HAL_GPIO_WritePin>
	        HAL_Delay(1500);
 80003a0:	4b12      	ldr	r3, [pc, #72]	@ (80003ec <main+0x1b0>)
 80003a2:	0018      	movs	r0, r3
 80003a4:	f000 ff8e 	bl	80012c4 <HAL_Delay>
	        HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80003a8:	23a0      	movs	r3, #160	@ 0xa0
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	2200      	movs	r2, #0
 80003ae:	2120      	movs	r1, #32
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fab9 	bl	8001928 <HAL_GPIO_WritePin>
	        HAL_Delay(1500);
 80003b6:	4b0d      	ldr	r3, [pc, #52]	@ (80003ec <main+0x1b0>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f000 ff83 	bl	80012c4 <HAL_Delay>
	    while (((HAL_GetTick() - last_tick)) < MINUTES_INTERVAL)
 80003be:	f000 ff77 	bl	80012b0 <HAL_GetTick>
 80003c2:	0002      	movs	r2, r0
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	1ad3      	subs	r3, r2, r3
 80003c8:	4a09      	ldr	r2, [pc, #36]	@ (80003f0 <main+0x1b4>)
 80003ca:	4293      	cmp	r3, r2
 80003cc:	d9c3      	bls.n	8000356 <main+0x11a>
  {
 80003ce:	e78c      	b.n	80002ea <main+0xae>
 80003d0:	20000004 	.word	0x20000004
 80003d4:	20000008 	.word	0x20000008
 80003d8:	2000000c 	.word	0x2000000c
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000144 	.word	0x20000144
 80003e4:	00000bb8 	.word	0x00000bb8
 80003e8:	200001d8 	.word	0x200001d8
 80003ec:	000005dc 	.word	0x000005dc
 80003f0:	0000ea5f 	.word	0x0000ea5f

080003f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b093      	sub	sp, #76	@ 0x4c
 80003f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fa:	2414      	movs	r4, #20
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	0018      	movs	r0, r3
 8000400:	2334      	movs	r3, #52	@ 0x34
 8000402:	001a      	movs	r2, r3
 8000404:	2100      	movs	r1, #0
 8000406:	f003 faef 	bl	80039e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	0018      	movs	r0, r3
 800040e:	2310      	movs	r3, #16
 8000410:	001a      	movs	r2, r3
 8000412:	2100      	movs	r1, #0
 8000414:	f003 fae8 	bl	80039e8 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000418:	2380      	movs	r3, #128	@ 0x80
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	0018      	movs	r0, r3
 800041e:	f001 fabb 	bl	8001998 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000422:	193b      	adds	r3, r7, r4
 8000424:	2202      	movs	r2, #2
 8000426:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000428:	193b      	adds	r3, r7, r4
 800042a:	2280      	movs	r2, #128	@ 0x80
 800042c:	0052      	lsls	r2, r2, #1
 800042e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000430:	193b      	adds	r3, r7, r4
 8000432:	2200      	movs	r2, #0
 8000434:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000436:	193b      	adds	r3, r7, r4
 8000438:	2240      	movs	r2, #64	@ 0x40
 800043a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000442:	193b      	adds	r3, r7, r4
 8000444:	0018      	movs	r0, r3
 8000446:	f001 faf3 	bl	8001a30 <HAL_RCC_OscConfig>
 800044a:	1e03      	subs	r3, r0, #0
 800044c:	d001      	beq.n	8000452 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800044e:	f000 f8f9 	bl	8000644 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000452:	1d3b      	adds	r3, r7, #4
 8000454:	2207      	movs	r2, #7
 8000456:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000458:	1d3b      	adds	r3, r7, #4
 800045a:	2200      	movs	r2, #0
 800045c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2200      	movs	r2, #0
 8000462:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2100      	movs	r1, #0
 800046e:	0018      	movs	r0, r3
 8000470:	f001 fdee 	bl	8002050 <HAL_RCC_ClockConfig>
 8000474:	1e03      	subs	r3, r0, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000478:	f000 f8e4 	bl	8000644 <Error_Handler>
  }
}
 800047c:	46c0      	nop			@ (mov r8, r8)
 800047e:	46bd      	mov	sp, r7
 8000480:	b013      	add	sp, #76	@ 0x4c
 8000482:	bd90      	pop	{r4, r7, pc}

08000484 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000488:	4b16      	ldr	r3, [pc, #88]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 800048a:	4a17      	ldr	r2, [pc, #92]	@ (80004e8 <MX_USART3_UART_Init+0x64>)
 800048c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800048e:	4b15      	ldr	r3, [pc, #84]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 8000490:	22e1      	movs	r2, #225	@ 0xe1
 8000492:	0252      	lsls	r2, r2, #9
 8000494:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000496:	4b13      	ldr	r3, [pc, #76]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 8000498:	2200      	movs	r2, #0
 800049a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800049c:	4b11      	ldr	r3, [pc, #68]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 800049e:	2200      	movs	r2, #0
 80004a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004a2:	4b10      	ldr	r3, [pc, #64]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004a8:	4b0e      	ldr	r3, [pc, #56]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004aa:	220c      	movs	r2, #12
 80004ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ae:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b4:	4b0b      	ldr	r3, [pc, #44]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ba:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004c0:	4b08      	ldr	r3, [pc, #32]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c6:	4b07      	ldr	r3, [pc, #28]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <MX_USART3_UART_Init+0x60>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f001 ff68 	bl	80023a4 <HAL_UART_Init>
 80004d4:	1e03      	subs	r3, r0, #0
 80004d6:	d001      	beq.n	80004dc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80004d8:	f000 f8b4 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004dc:	46c0      	nop			@ (mov r8, r8)
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)
 80004e4:	200000b0 	.word	0x200000b0
 80004e8:	40004800 	.word	0x40004800

080004ec <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80004f0:	4b16      	ldr	r3, [pc, #88]	@ (800054c <MX_USART4_UART_Init+0x60>)
 80004f2:	4a17      	ldr	r2, [pc, #92]	@ (8000550 <MX_USART4_UART_Init+0x64>)
 80004f4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80004f6:	4b15      	ldr	r3, [pc, #84]	@ (800054c <MX_USART4_UART_Init+0x60>)
 80004f8:	2296      	movs	r2, #150	@ 0x96
 80004fa:	0192      	lsls	r2, r2, #6
 80004fc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004fe:	4b13      	ldr	r3, [pc, #76]	@ (800054c <MX_USART4_UART_Init+0x60>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000504:	4b11      	ldr	r3, [pc, #68]	@ (800054c <MX_USART4_UART_Init+0x60>)
 8000506:	2200      	movs	r2, #0
 8000508:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <MX_USART4_UART_Init+0x60>)
 800050c:	2200      	movs	r2, #0
 800050e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000510:	4b0e      	ldr	r3, [pc, #56]	@ (800054c <MX_USART4_UART_Init+0x60>)
 8000512:	220c      	movs	r2, #12
 8000514:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000516:	4b0d      	ldr	r3, [pc, #52]	@ (800054c <MX_USART4_UART_Init+0x60>)
 8000518:	2200      	movs	r2, #0
 800051a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800051c:	4b0b      	ldr	r3, [pc, #44]	@ (800054c <MX_USART4_UART_Init+0x60>)
 800051e:	2200      	movs	r2, #0
 8000520:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000522:	4b0a      	ldr	r3, [pc, #40]	@ (800054c <MX_USART4_UART_Init+0x60>)
 8000524:	2200      	movs	r2, #0
 8000526:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000528:	4b08      	ldr	r3, [pc, #32]	@ (800054c <MX_USART4_UART_Init+0x60>)
 800052a:	2200      	movs	r2, #0
 800052c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800052e:	4b07      	ldr	r3, [pc, #28]	@ (800054c <MX_USART4_UART_Init+0x60>)
 8000530:	2200      	movs	r2, #0
 8000532:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000534:	4b05      	ldr	r3, [pc, #20]	@ (800054c <MX_USART4_UART_Init+0x60>)
 8000536:	0018      	movs	r0, r3
 8000538:	f001 ff34 	bl	80023a4 <HAL_UART_Init>
 800053c:	1e03      	subs	r3, r0, #0
 800053e:	d001      	beq.n	8000544 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000540:	f000 f880 	bl	8000644 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			@ (mov r8, r8)
 800054c:	20000144 	.word	0x20000144
 8000550:	40004c00 	.word	0x40004c00

08000554 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000554:	b590      	push	{r4, r7, lr}
 8000556:	b08b      	sub	sp, #44	@ 0x2c
 8000558:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055a:	2414      	movs	r4, #20
 800055c:	193b      	adds	r3, r7, r4
 800055e:	0018      	movs	r0, r3
 8000560:	2314      	movs	r3, #20
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f003 fa3f 	bl	80039e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056a:	4b34      	ldr	r3, [pc, #208]	@ (800063c <MX_GPIO_Init+0xe8>)
 800056c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800056e:	4b33      	ldr	r3, [pc, #204]	@ (800063c <MX_GPIO_Init+0xe8>)
 8000570:	2104      	movs	r1, #4
 8000572:	430a      	orrs	r2, r1
 8000574:	635a      	str	r2, [r3, #52]	@ 0x34
 8000576:	4b31      	ldr	r3, [pc, #196]	@ (800063c <MX_GPIO_Init+0xe8>)
 8000578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800057a:	2204      	movs	r2, #4
 800057c:	4013      	ands	r3, r2
 800057e:	613b      	str	r3, [r7, #16]
 8000580:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <MX_GPIO_Init+0xe8>)
 8000584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000586:	4b2d      	ldr	r3, [pc, #180]	@ (800063c <MX_GPIO_Init+0xe8>)
 8000588:	2120      	movs	r1, #32
 800058a:	430a      	orrs	r2, r1
 800058c:	635a      	str	r2, [r3, #52]	@ 0x34
 800058e:	4b2b      	ldr	r3, [pc, #172]	@ (800063c <MX_GPIO_Init+0xe8>)
 8000590:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000592:	2220      	movs	r2, #32
 8000594:	4013      	ands	r3, r2
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	4b28      	ldr	r3, [pc, #160]	@ (800063c <MX_GPIO_Init+0xe8>)
 800059c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800059e:	4b27      	ldr	r3, [pc, #156]	@ (800063c <MX_GPIO_Init+0xe8>)
 80005a0:	2101      	movs	r1, #1
 80005a2:	430a      	orrs	r2, r1
 80005a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80005a6:	4b25      	ldr	r3, [pc, #148]	@ (800063c <MX_GPIO_Init+0xe8>)
 80005a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005aa:	2201      	movs	r2, #1
 80005ac:	4013      	ands	r3, r2
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b2:	4b22      	ldr	r3, [pc, #136]	@ (800063c <MX_GPIO_Init+0xe8>)
 80005b4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005b6:	4b21      	ldr	r3, [pc, #132]	@ (800063c <MX_GPIO_Init+0xe8>)
 80005b8:	2102      	movs	r1, #2
 80005ba:	430a      	orrs	r2, r1
 80005bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <MX_GPIO_Init+0xe8>)
 80005c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005c2:	2202      	movs	r2, #2
 80005c4:	4013      	ands	r3, r2
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80005ca:	23a0      	movs	r3, #160	@ 0xa0
 80005cc:	05db      	lsls	r3, r3, #23
 80005ce:	2200      	movs	r2, #0
 80005d0:	2120      	movs	r1, #32
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 f9a8 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80005d8:	23c0      	movs	r3, #192	@ 0xc0
 80005da:	005b      	lsls	r3, r3, #1
 80005dc:	4818      	ldr	r0, [pc, #96]	@ (8000640 <MX_GPIO_Init+0xec>)
 80005de:	2200      	movs	r2, #0
 80005e0:	0019      	movs	r1, r3
 80005e2:	f001 f9a1 	bl	8001928 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80005e6:	193b      	adds	r3, r7, r4
 80005e8:	2220      	movs	r2, #32
 80005ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	2201      	movs	r2, #1
 80005f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	193b      	adds	r3, r7, r4
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	2202      	movs	r2, #2
 80005fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 80005fe:	193a      	adds	r2, r7, r4
 8000600:	23a0      	movs	r3, #160	@ 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f001 f82a 	bl	8001660 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800060c:	0021      	movs	r1, r4
 800060e:	187b      	adds	r3, r7, r1
 8000610:	22c0      	movs	r2, #192	@ 0xc0
 8000612:	0052      	lsls	r2, r2, #1
 8000614:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000616:	187b      	adds	r3, r7, r1
 8000618:	2201      	movs	r2, #1
 800061a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	187b      	adds	r3, r7, r1
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	187b      	adds	r3, r7, r1
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000628:	187b      	adds	r3, r7, r1
 800062a:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <MX_GPIO_Init+0xec>)
 800062c:	0019      	movs	r1, r3
 800062e:	0010      	movs	r0, r2
 8000630:	f001 f816 	bl	8001660 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b00b      	add	sp, #44	@ 0x2c
 800063a:	bd90      	pop	{r4, r7, pc}
 800063c:	40021000 	.word	0x40021000
 8000640:	50000400 	.word	0x50000400

08000644 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000648:	b672      	cpsid	i
}
 800064a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800064c:	46c0      	nop			@ (mov r8, r8)
 800064e:	e7fd      	b.n	800064c <Error_Handler+0x8>

08000650 <hex_to_json>:
char json_string[300]; // Global declaration

//The hex_to_json function converts the hexadecimal values that are being received from the display into
//a json packet consisting of an object called data that can be identified by the amplify application and this data can be pushed into the database.
void hex_to_json(uint8_t *data, int data_length)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
	// Construct JSON string
	sprintf(json_string, "{\"data\": [");
 800065a:	4a23      	ldr	r2, [pc, #140]	@ (80006e8 <hex_to_json+0x98>)
 800065c:	4b23      	ldr	r3, [pc, #140]	@ (80006ec <hex_to_json+0x9c>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f003 f9a1 	bl	80039a8 <siprintf>

	for (int i = 0; i < data_length; i++)
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	e026      	b.n	80006ba <hex_to_json+0x6a>
			{
		// Convert each byte from hexadecimal to decimal and add to JSON string
		sprintf(json_string + strlen(json_string), "%d", data[i]);
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <hex_to_json+0x9c>)
 800066e:	0018      	movs	r0, r3
 8000670:	f7ff fd46 	bl	8000100 <strlen>
 8000674:	0002      	movs	r2, r0
 8000676:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <hex_to_json+0x9c>)
 8000678:	18d0      	adds	r0, r2, r3
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	687a      	ldr	r2, [r7, #4]
 800067e:	18d3      	adds	r3, r2, r3
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	001a      	movs	r2, r3
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <hex_to_json+0xa0>)
 8000686:	0019      	movs	r1, r3
 8000688:	f003 f98e 	bl	80039a8 <siprintf>

		if (i < data_length - 1)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	3b01      	subs	r3, #1
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	429a      	cmp	r2, r3
 8000694:	da0e      	bge.n	80006b4 <hex_to_json+0x64>
				{
			strcat(json_string, ",");
 8000696:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <hex_to_json+0x9c>)
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff fd31 	bl	8000100 <strlen>
 800069e:	0003      	movs	r3, r0
 80006a0:	001a      	movs	r2, r3
 80006a2:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <hex_to_json+0x9c>)
 80006a4:	18d2      	adds	r2, r2, r3
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <hex_to_json+0xa4>)
 80006a8:	0010      	movs	r0, r2
 80006aa:	0019      	movs	r1, r3
 80006ac:	2302      	movs	r3, #2
 80006ae:	001a      	movs	r2, r3
 80006b0:	f003 f9f2 	bl	8003a98 <memcpy>
	for (int i = 0; i < data_length; i++)
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	3301      	adds	r3, #1
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	68fa      	ldr	r2, [r7, #12]
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	429a      	cmp	r2, r3
 80006c0:	dbd4      	blt.n	800066c <hex_to_json+0x1c>
		}
	}

	strcat(json_string, "]}");
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <hex_to_json+0x9c>)
 80006c4:	0018      	movs	r0, r3
 80006c6:	f7ff fd1b 	bl	8000100 <strlen>
 80006ca:	0003      	movs	r3, r0
 80006cc:	001a      	movs	r2, r3
 80006ce:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <hex_to_json+0x9c>)
 80006d0:	18d2      	adds	r2, r2, r3
 80006d2:	4b09      	ldr	r3, [pc, #36]	@ (80006f8 <hex_to_json+0xa8>)
 80006d4:	0010      	movs	r0, r2
 80006d6:	0019      	movs	r1, r3
 80006d8:	2303      	movs	r3, #3
 80006da:	001a      	movs	r2, r3
 80006dc:	f003 f9dc 	bl	8003a98 <memcpy>

	// No need to return the JSON string
}
 80006e0:	46c0      	nop			@ (mov r8, r8)
 80006e2:	46bd      	mov	sp, r7
 80006e4:	b004      	add	sp, #16
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	08005490 	.word	0x08005490
 80006ec:	2000054c 	.word	0x2000054c
 80006f0:	0800549c 	.word	0x0800549c
 80006f4:	080054a0 	.word	0x080054a0
 80006f8:	080054a4 	.word	0x080054a4

080006fc <SIMTransmit>:
//The rcv_len and rcv_timeout functions are specific to the HAL_UART_Receive function for defining variable rcv_len and rcv_timeouts for different AT commands.
//The timeouts and reception length for different ATcommands used in the code are defined on observing the module responses with 2G and 4G networks.
//The timeouts and reception length can be optimized further while testing.

void SIMTransmit(const char *cmd, uint32_t rcv_len, uint32_t rcv_timeout)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b084      	sub	sp, #16
 8000700:	af00      	add	r7, sp, #0
 8000702:	60f8      	str	r0, [r7, #12]
 8000704:	60b9      	str	r1, [r7, #8]
 8000706:	607a      	str	r2, [r7, #4]
	//  memset(ATcommand,0,sizeof(ATcommand));

	memset(buffer, 0, sizeof(buffer));
 8000708:	23c8      	movs	r3, #200	@ 0xc8
 800070a:	005a      	lsls	r2, r3, #1
 800070c:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <SIMTransmit+0x48>)
 800070e:	2100      	movs	r1, #0
 8000710:	0018      	movs	r0, r3
 8000712:	f003 f969 	bl	80039e8 <memset>

	HAL_UART_Transmit_IT(&huart3, (uint8_t*) cmd, strlen(cmd));
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff fcf1 	bl	8000100 <strlen>
 800071e:	0003      	movs	r3, r0
 8000720:	b29a      	uxth	r2, r3
 8000722:	68f9      	ldr	r1, [r7, #12]
 8000724:	4b08      	ldr	r3, [pc, #32]	@ (8000748 <SIMTransmit+0x4c>)
 8000726:	0018      	movs	r0, r3
 8000728:	f001 ff78 	bl	800261c <HAL_UART_Transmit_IT>
	//  HAL_Delay(2000);
	HAL_UART_Receive(&huart3, buffer, rcv_len, rcv_timeout);
 800072c:	68bb      	ldr	r3, [r7, #8]
 800072e:	b29a      	uxth	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	4904      	ldr	r1, [pc, #16]	@ (8000744 <SIMTransmit+0x48>)
 8000734:	4804      	ldr	r0, [pc, #16]	@ (8000748 <SIMTransmit+0x4c>)
 8000736:	f001 fe8b 	bl	8002450 <HAL_UART_Receive>

}
 800073a:	46c0      	nop			@ (mov r8, r8)
 800073c:	46bd      	mov	sp, r7
 800073e:	b004      	add	sp, #16
 8000740:	bd80      	pop	{r7, pc}
 8000742:	46c0      	nop			@ (mov r8, r8)
 8000744:	200003b0 	.word	0x200003b0
 8000748:	200000b0 	.word	0x200000b0

0800074c <assignPDPcontext>:
}



bool assignPDPcontext(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	SIMTransmit("AT+QICSGP=1,1,\"airtelgprs.com\",\"\",\"\",0\r\n", 100, 3000);
 8000750:	4a20      	ldr	r2, [pc, #128]	@ (80007d4 <assignPDPcontext+0x88>)
 8000752:	4b21      	ldr	r3, [pc, #132]	@ (80007d8 <assignPDPcontext+0x8c>)
 8000754:	2164      	movs	r1, #100	@ 0x64
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff ffd0 	bl	80006fc <SIMTransmit>
	if (strstr((char*) buffer, "OK"))
 800075c:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <assignPDPcontext+0x90>)
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <assignPDPcontext+0x94>)
 8000760:	0011      	movs	r1, r2
 8000762:	0018      	movs	r0, r3
 8000764:	f003 f956 	bl	8003a14 <strstr>
 8000768:	1e03      	subs	r3, r0, #0
 800076a:	d01d      	beq.n	80007a8 <assignPDPcontext+0x5c>
			{
		SIMTransmit("AT+QIACT=1\r\n", 100, 3000);
 800076c:	4a19      	ldr	r2, [pc, #100]	@ (80007d4 <assignPDPcontext+0x88>)
 800076e:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <assignPDPcontext+0x98>)
 8000770:	2164      	movs	r1, #100	@ 0x64
 8000772:	0018      	movs	r0, r3
 8000774:	f7ff ffc2 	bl	80006fc <SIMTransmit>
		if (strstr((char*) buffer, "OK"))
 8000778:	4a18      	ldr	r2, [pc, #96]	@ (80007dc <assignPDPcontext+0x90>)
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <assignPDPcontext+0x94>)
 800077c:	0011      	movs	r1, r2
 800077e:	0018      	movs	r0, r3
 8000780:	f003 f948 	bl	8003a14 <strstr>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d021      	beq.n	80007cc <assignPDPcontext+0x80>
				{
			SIMTransmit("AT+QIACT?\r\n", 100, 3000);
 8000788:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <assignPDPcontext+0x88>)
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <assignPDPcontext+0x9c>)
 800078c:	2164      	movs	r1, #100	@ 0x64
 800078e:	0018      	movs	r0, r3
 8000790:	f7ff ffb4 	bl	80006fc <SIMTransmit>

			if (strstr((char*) buffer, "+QIACT: 1,1,1"))
 8000794:	4a15      	ldr	r2, [pc, #84]	@ (80007ec <assignPDPcontext+0xa0>)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <assignPDPcontext+0x94>)
 8000798:	0011      	movs	r1, r2
 800079a:	0018      	movs	r0, r3
 800079c:	f003 f93a 	bl	8003a14 <strstr>
 80007a0:	1e03      	subs	r3, r0, #0
 80007a2:	d013      	beq.n	80007cc <assignPDPcontext+0x80>
					{
				return true;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e012      	b.n	80007ce <assignPDPcontext+0x82>
			}
		}
	}
	else
	{
		SIMTransmit("AT+QIACT?\r\n", 100, 3000);
 80007a8:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <assignPDPcontext+0x88>)
 80007aa:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <assignPDPcontext+0x9c>)
 80007ac:	2164      	movs	r1, #100	@ 0x64
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff ffa4 	bl	80006fc <SIMTransmit>

		if (strstr((char*) buffer, "+QIACT: 1,1,1"))
 80007b4:	4a0d      	ldr	r2, [pc, #52]	@ (80007ec <assignPDPcontext+0xa0>)
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <assignPDPcontext+0x94>)
 80007b8:	0011      	movs	r1, r2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f003 f92a 	bl	8003a14 <strstr>
 80007c0:	1e03      	subs	r3, r0, #0
 80007c2:	d001      	beq.n	80007c8 <assignPDPcontext+0x7c>
				{
			return true;
 80007c4:	2301      	movs	r3, #1
 80007c6:	e002      	b.n	80007ce <assignPDPcontext+0x82>
		}
		return true;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e000      	b.n	80007ce <assignPDPcontext+0x82>
	}
	return false;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	00000bb8 	.word	0x00000bb8
 80007d8:	08005524 	.word	0x08005524
 80007dc:	08005550 	.word	0x08005550
 80007e0:	200003b0 	.word	0x200003b0
 80007e4:	08005554 	.word	0x08005554
 80007e8:	08005564 	.word	0x08005564
 80007ec:	08005570 	.word	0x08005570

080007f0 <Quectelon>:

bool Quectelon(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
    // Set PB7 high to power on the module
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80007f4:	4b11      	ldr	r3, [pc, #68]	@ (800083c <Quectelon+0x4c>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	2180      	movs	r1, #128	@ 0x80
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 f894 	bl	8001928 <HAL_GPIO_WritePin>

    // Delay for 3 seconds (if needed for power stabilization)
    HAL_Delay(3000);
 8000800:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <Quectelon+0x50>)
 8000802:	0018      	movs	r0, r3
 8000804:	f000 fd5e 	bl	80012c4 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <Quectelon+0x4c>)
 800080a:	2200      	movs	r2, #0
 800080c:	2180      	movs	r1, #128	@ 0x80
 800080e:	0018      	movs	r0, r3
 8000810:	f001 f88a 	bl	8001928 <HAL_GPIO_WritePin>

    HAL_Delay(3000);
 8000814:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <Quectelon+0x50>)
 8000816:	0018      	movs	r0, r3
 8000818:	f000 fd54 	bl	80012c4 <HAL_Delay>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800081c:	4b07      	ldr	r3, [pc, #28]	@ (800083c <Quectelon+0x4c>)
 800081e:	2201      	movs	r2, #1
 8000820:	2180      	movs	r1, #128	@ 0x80
 8000822:	0018      	movs	r0, r3
 8000824:	f001 f880 	bl	8001928 <HAL_GPIO_WritePin>

    HAL_Delay(2000);
 8000828:	23fa      	movs	r3, #250	@ 0xfa
 800082a:	00db      	lsls	r3, r3, #3
 800082c:	0018      	movs	r0, r3
 800082e:	f000 fd49 	bl	80012c4 <HAL_Delay>

    // Leave PB7 high (do not reset it) if it needs to stay high to keep the module on
    // Return true to indicate the module is powered on
    return true;
 8000832:	2301      	movs	r3, #1
}
 8000834:	0018      	movs	r0, r3
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	46c0      	nop			@ (mov r8, r8)
 800083c:	50000400 	.word	0x50000400
 8000840:	00000bb8 	.word	0x00000bb8

08000844 <uploadcertificate1>:
//    HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin); // Toggle buzzer state
//    HAL_Delay(500); // Delay for 500 ms
//}

bool uploadcertificate1(const char *cert)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
	uint32_t cert_len = strlen(cert);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff fc56 	bl	8000100 <strlen>
 8000854:	0003      	movs	r3, r0
 8000856:	60fb      	str	r3, [r7, #12]
	SIMTransmit("AT+QFUPL=\"UFS:root\",1187,5\r\n", 80, 3000);
 8000858:	4a20      	ldr	r2, [pc, #128]	@ (80008dc <uploadcertificate1+0x98>)
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <uploadcertificate1+0x9c>)
 800085c:	2150      	movs	r1, #80	@ 0x50
 800085e:	0018      	movs	r0, r3
 8000860:	f7ff ff4c 	bl	80006fc <SIMTransmit>

	if (strstr((char*) buffer, "CONNECT"))
 8000864:	4a1f      	ldr	r2, [pc, #124]	@ (80008e4 <uploadcertificate1+0xa0>)
 8000866:	4b20      	ldr	r3, [pc, #128]	@ (80008e8 <uploadcertificate1+0xa4>)
 8000868:	0011      	movs	r1, r2
 800086a:	0018      	movs	r0, r3
 800086c:	f003 f8d2 	bl	8003a14 <strstr>
 8000870:	1e03      	subs	r3, r0, #0
 8000872:	d011      	beq.n	8000898 <uploadcertificate1+0x54>
			{
		SIMTransmit((char*) cert, cert_len, 3000);
 8000874:	4a19      	ldr	r2, [pc, #100]	@ (80008dc <uploadcertificate1+0x98>)
 8000876:	68f9      	ldr	r1, [r7, #12]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	0018      	movs	r0, r3
 800087c:	f7ff ff3e 	bl	80006fc <SIMTransmit>
		if (strstr((char*) buffer, "+QFUPL: 1187,2d19"))
 8000880:	4a1a      	ldr	r2, [pc, #104]	@ (80008ec <uploadcertificate1+0xa8>)
 8000882:	4b19      	ldr	r3, [pc, #100]	@ (80008e8 <uploadcertificate1+0xa4>)
 8000884:	0011      	movs	r1, r2
 8000886:	0018      	movs	r0, r3
 8000888:	f003 f8c4 	bl	8003a14 <strstr>
 800088c:	1e03      	subs	r3, r0, #0
 800088e:	d001      	beq.n	8000894 <uploadcertificate1+0x50>
				{
			return true;
 8000890:	2301      	movs	r3, #1
 8000892:	e01f      	b.n	80008d4 <uploadcertificate1+0x90>
		}
		return false;
 8000894:	2300      	movs	r3, #0
 8000896:	e01d      	b.n	80008d4 <uploadcertificate1+0x90>
	}
	else if (strstr((char*) buffer, "+CME ERROR: 407"))
 8000898:	4a15      	ldr	r2, [pc, #84]	@ (80008f0 <uploadcertificate1+0xac>)
 800089a:	4b13      	ldr	r3, [pc, #76]	@ (80008e8 <uploadcertificate1+0xa4>)
 800089c:	0011      	movs	r1, r2
 800089e:	0018      	movs	r0, r3
 80008a0:	f003 f8b8 	bl	8003a14 <strstr>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d014      	beq.n	80008d2 <uploadcertificate1+0x8e>
			{
		SIMTransmit("AT+QFDEL=\"UFS:root\"\r\n", 50, 2000);
 80008a8:	23fa      	movs	r3, #250	@ 0xfa
 80008aa:	00da      	lsls	r2, r3, #3
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <uploadcertificate1+0xb0>)
 80008ae:	2132      	movs	r1, #50	@ 0x32
 80008b0:	0018      	movs	r0, r3
 80008b2:	f7ff ff23 	bl	80006fc <SIMTransmit>
		if (strstr((char*) buffer, "OK"))
 80008b6:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <uploadcertificate1+0xb4>)
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <uploadcertificate1+0xa4>)
 80008ba:	0011      	movs	r1, r2
 80008bc:	0018      	movs	r0, r3
 80008be:	f003 f8a9 	bl	8003a14 <strstr>
 80008c2:	1e03      	subs	r3, r0, #0
 80008c4:	d005      	beq.n	80008d2 <uploadcertificate1+0x8e>
				{
			return uploadcertificate1(cert); // Fixed to return the recursive call result
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	0018      	movs	r0, r3
 80008ca:	f7ff ffbb 	bl	8000844 <uploadcertificate1>
 80008ce:	0003      	movs	r3, r0
 80008d0:	e000      	b.n	80008d4 <uploadcertificate1+0x90>
		}
	}
	return false;
 80008d2:	2300      	movs	r3, #0
}
 80008d4:	0018      	movs	r0, r3
 80008d6:	46bd      	mov	sp, r7
 80008d8:	b004      	add	sp, #16
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	00000bb8 	.word	0x00000bb8
 80008e0:	08005580 	.word	0x08005580
 80008e4:	080055a0 	.word	0x080055a0
 80008e8:	200003b0 	.word	0x200003b0
 80008ec:	080055a8 	.word	0x080055a8
 80008f0:	080055bc 	.word	0x080055bc
 80008f4:	080055cc 	.word	0x080055cc
 80008f8:	08005550 	.word	0x08005550

080008fc <uploadcertificate2>:

bool uploadcertificate2(const char *cert) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
	uint32_t cert_len = strlen(cert);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	0018      	movs	r0, r3
 8000908:	f7ff fbfa 	bl	8000100 <strlen>
 800090c:	0003      	movs	r3, r0
 800090e:	60fb      	str	r3, [r7, #12]
	SIMTransmit("AT+QFUPL=\"UFS:cert\",1224,7\r\n", 80, 3000);
 8000910:	4a20      	ldr	r2, [pc, #128]	@ (8000994 <uploadcertificate2+0x98>)
 8000912:	4b21      	ldr	r3, [pc, #132]	@ (8000998 <uploadcertificate2+0x9c>)
 8000914:	2150      	movs	r1, #80	@ 0x50
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff fef0 	bl	80006fc <SIMTransmit>

	if (strstr((char*) buffer, "CONNECT")) {
 800091c:	4a1f      	ldr	r2, [pc, #124]	@ (800099c <uploadcertificate2+0xa0>)
 800091e:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <uploadcertificate2+0xa4>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f003 f876 	bl	8003a14 <strstr>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d011      	beq.n	8000950 <uploadcertificate2+0x54>
		SIMTransmit((char*) cert, cert_len, 3000);
 800092c:	4a19      	ldr	r2, [pc, #100]	@ (8000994 <uploadcertificate2+0x98>)
 800092e:	68f9      	ldr	r1, [r7, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fee2 	bl	80006fc <SIMTransmit>

		if (strstr((char*) buffer, "+QFUPL: 1224,3977")) {
 8000938:	4a1a      	ldr	r2, [pc, #104]	@ (80009a4 <uploadcertificate2+0xa8>)
 800093a:	4b19      	ldr	r3, [pc, #100]	@ (80009a0 <uploadcertificate2+0xa4>)
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f003 f868 	bl	8003a14 <strstr>
 8000944:	1e03      	subs	r3, r0, #0
 8000946:	d001      	beq.n	800094c <uploadcertificate2+0x50>
			return true;
 8000948:	2301      	movs	r3, #1
 800094a:	e01f      	b.n	800098c <uploadcertificate2+0x90>
		}
		return false;
 800094c:	2300      	movs	r3, #0
 800094e:	e01d      	b.n	800098c <uploadcertificate2+0x90>
	} else if (strstr((char*) buffer, "+CME ERROR: 407")) {
 8000950:	4a15      	ldr	r2, [pc, #84]	@ (80009a8 <uploadcertificate2+0xac>)
 8000952:	4b13      	ldr	r3, [pc, #76]	@ (80009a0 <uploadcertificate2+0xa4>)
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f003 f85c 	bl	8003a14 <strstr>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d014      	beq.n	800098a <uploadcertificate2+0x8e>
		SIMTransmit("AT+QFDEL=\"UFS:cert\"\r\n", 50, 2000);
 8000960:	23fa      	movs	r3, #250	@ 0xfa
 8000962:	00da      	lsls	r2, r3, #3
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <uploadcertificate2+0xb0>)
 8000966:	2132      	movs	r1, #50	@ 0x32
 8000968:	0018      	movs	r0, r3
 800096a:	f7ff fec7 	bl	80006fc <SIMTransmit>
		if (strstr((char*) buffer, "OK")) {
 800096e:	4a10      	ldr	r2, [pc, #64]	@ (80009b0 <uploadcertificate2+0xb4>)
 8000970:	4b0b      	ldr	r3, [pc, #44]	@ (80009a0 <uploadcertificate2+0xa4>)
 8000972:	0011      	movs	r1, r2
 8000974:	0018      	movs	r0, r3
 8000976:	f003 f84d 	bl	8003a14 <strstr>
 800097a:	1e03      	subs	r3, r0, #0
 800097c:	d005      	beq.n	800098a <uploadcertificate2+0x8e>
			return uploadcertificate2(cert); // Fixed to return the recursive call result
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	0018      	movs	r0, r3
 8000982:	f7ff ffbb 	bl	80008fc <uploadcertificate2>
 8000986:	0003      	movs	r3, r0
 8000988:	e000      	b.n	800098c <uploadcertificate2+0x90>
		}
	}
	return false;
 800098a:	2300      	movs	r3, #0
}
 800098c:	0018      	movs	r0, r3
 800098e:	46bd      	mov	sp, r7
 8000990:	b004      	add	sp, #16
 8000992:	bd80      	pop	{r7, pc}
 8000994:	00000bb8 	.word	0x00000bb8
 8000998:	080055e4 	.word	0x080055e4
 800099c:	080055a0 	.word	0x080055a0
 80009a0:	200003b0 	.word	0x200003b0
 80009a4:	08005604 	.word	0x08005604
 80009a8:	080055bc 	.word	0x080055bc
 80009ac:	08005618 	.word	0x08005618
 80009b0:	08005550 	.word	0x08005550

080009b4 <uploadcertificate3>:

bool uploadcertificate3(const char *cert) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	uint32_t cert_len = strlen(cert);
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	0018      	movs	r0, r3
 80009c0:	f7ff fb9e 	bl	8000100 <strlen>
 80009c4:	0003      	movs	r3, r0
 80009c6:	60fb      	str	r3, [r7, #12]
	SIMTransmit("AT+QFUPL=\"UFS:key\",1675,7\r\n", 80, 3000);
 80009c8:	4a20      	ldr	r2, [pc, #128]	@ (8000a4c <uploadcertificate3+0x98>)
 80009ca:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <uploadcertificate3+0x9c>)
 80009cc:	2150      	movs	r1, #80	@ 0x50
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fe94 	bl	80006fc <SIMTransmit>

	if (strstr((char*) buffer, "CONNECT")) {
 80009d4:	4a1f      	ldr	r2, [pc, #124]	@ (8000a54 <uploadcertificate3+0xa0>)
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <uploadcertificate3+0xa4>)
 80009d8:	0011      	movs	r1, r2
 80009da:	0018      	movs	r0, r3
 80009dc:	f003 f81a 	bl	8003a14 <strstr>
 80009e0:	1e03      	subs	r3, r0, #0
 80009e2:	d011      	beq.n	8000a08 <uploadcertificate3+0x54>
		SIMTransmit((char*) cert, cert_len, 3000);
 80009e4:	4a19      	ldr	r2, [pc, #100]	@ (8000a4c <uploadcertificate3+0x98>)
 80009e6:	68f9      	ldr	r1, [r7, #12]
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	0018      	movs	r0, r3
 80009ec:	f7ff fe86 	bl	80006fc <SIMTransmit>

		if (strstr((char*) buffer, "+QFUPL: 1675,6a3b")) {
 80009f0:	4a1a      	ldr	r2, [pc, #104]	@ (8000a5c <uploadcertificate3+0xa8>)
 80009f2:	4b19      	ldr	r3, [pc, #100]	@ (8000a58 <uploadcertificate3+0xa4>)
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f003 f80c 	bl	8003a14 <strstr>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d001      	beq.n	8000a04 <uploadcertificate3+0x50>
			return true;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e01f      	b.n	8000a44 <uploadcertificate3+0x90>
		}
		return false;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e01d      	b.n	8000a44 <uploadcertificate3+0x90>
	} else if (strstr((char*) buffer, "+CME ERROR: 407")) {
 8000a08:	4a15      	ldr	r2, [pc, #84]	@ (8000a60 <uploadcertificate3+0xac>)
 8000a0a:	4b13      	ldr	r3, [pc, #76]	@ (8000a58 <uploadcertificate3+0xa4>)
 8000a0c:	0011      	movs	r1, r2
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f003 f800 	bl	8003a14 <strstr>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d014      	beq.n	8000a42 <uploadcertificate3+0x8e>
		SIMTransmit("AT+QFDEL=\"UFS:key\"\r\n", 50, 2000);
 8000a18:	23fa      	movs	r3, #250	@ 0xfa
 8000a1a:	00da      	lsls	r2, r3, #3
 8000a1c:	4b11      	ldr	r3, [pc, #68]	@ (8000a64 <uploadcertificate3+0xb0>)
 8000a1e:	2132      	movs	r1, #50	@ 0x32
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fe6b 	bl	80006fc <SIMTransmit>
		if (strstr((char*) buffer, "OK")) {
 8000a26:	4a10      	ldr	r2, [pc, #64]	@ (8000a68 <uploadcertificate3+0xb4>)
 8000a28:	4b0b      	ldr	r3, [pc, #44]	@ (8000a58 <uploadcertificate3+0xa4>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f002 fff1 	bl	8003a14 <strstr>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d005      	beq.n	8000a42 <uploadcertificate3+0x8e>
			return uploadcertificate3(cert); // Fixed to return the recursive call result
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff ffbb 	bl	80009b4 <uploadcertificate3>
 8000a3e:	0003      	movs	r3, r0
 8000a40:	e000      	b.n	8000a44 <uploadcertificate3+0x90>
		}
	}
	return false;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	0018      	movs	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	b004      	add	sp, #16
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	00000bb8 	.word	0x00000bb8
 8000a50:	08005630 	.word	0x08005630
 8000a54:	080055a0 	.word	0x080055a0
 8000a58:	200003b0 	.word	0x200003b0
 8000a5c:	0800564c 	.word	0x0800564c
 8000a60:	080055bc 	.word	0x080055bc
 8000a64:	08005660 	.word	0x08005660
 8000a68:	08005550 	.word	0x08005550

08000a6c <checkConnection>:
//The checkConnection function firstly checks the response of the module by sending an AT command continuously and waiting for either the timeout to occur or the module to response an OK response.
//After the module returns OK to the basic connection command it confirms the module's connectivity with the microController, now the function checks for the network registration of the module by the second AT command
//which is "AT+CGREG?\r\n" , the response of this command must either be "+CGREG:0,1" for local network connectivity and "+CGREG:0,5" for roaming connectivity.
//If the module don't respond or if the module is not able to find any network connection within the timeout period then the function response with a false output.
bool checkConnection(void)
{
 8000a6c:	b5b0      	push	{r4, r5, r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	ATisOK = 0;
 8000a70:	4b2f      	ldr	r3, [pc, #188]	@ (8000b30 <checkConnection+0xc4>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	701a      	strb	r2, [r3, #0]
	CGREGisOK = 0;
 8000a76:	4b2f      	ldr	r3, [pc, #188]	@ (8000b34 <checkConnection+0xc8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	701a      	strb	r2, [r3, #0]

	// Check for OK response for AT
	previousTick = HAL_GetTick();
 8000a7c:	f000 fc18 	bl	80012b0 <HAL_GetTick>
 8000a80:	0002      	movs	r2, r0
 8000a82:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <checkConnection+0xcc>)
 8000a84:	601a      	str	r2, [r3, #0]
	while (!ATisOK && previousTick + conn_timeout > HAL_GetTick())
 8000a86:	e016      	b.n	8000ab6 <checkConnection+0x4a>
	{
		count++;
 8000a88:	4b2c      	ldr	r3, [pc, #176]	@ (8000b3c <checkConnection+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	1c5a      	adds	r2, r3, #1
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b3c <checkConnection+0xd0>)
 8000a90:	601a      	str	r2, [r3, #0]
		SIMTransmit("AT\r\n", 100, 2000);
 8000a92:	23fa      	movs	r3, #250	@ 0xfa
 8000a94:	00da      	lsls	r2, r3, #3
 8000a96:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <checkConnection+0xd4>)
 8000a98:	2164      	movs	r1, #100	@ 0x64
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f7ff fe2e 	bl	80006fc <SIMTransmit>

		if (strstr((char*) buffer, "OK"))
 8000aa0:	4a28      	ldr	r2, [pc, #160]	@ (8000b44 <checkConnection+0xd8>)
 8000aa2:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <checkConnection+0xdc>)
 8000aa4:	0011      	movs	r1, r2
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 ffb4 	bl	8003a14 <strstr>
 8000aac:	1e03      	subs	r3, r0, #0
 8000aae:	d002      	beq.n	8000ab6 <checkConnection+0x4a>
				{
			ATisOK = 1;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <checkConnection+0xc4>)
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	701a      	strb	r2, [r3, #0]
	while (!ATisOK && previousTick + conn_timeout > HAL_GetTick())
 8000ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8000b30 <checkConnection+0xc4>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d108      	bne.n	8000ad0 <checkConnection+0x64>
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <checkConnection+0xcc>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a22      	ldr	r2, [pc, #136]	@ (8000b4c <checkConnection+0xe0>)
 8000ac4:	189c      	adds	r4, r3, r2
 8000ac6:	f000 fbf3 	bl	80012b0 <HAL_GetTick>
 8000aca:	0003      	movs	r3, r0
 8000acc:	429c      	cmp	r4, r3
 8000ace:	d8db      	bhi.n	8000a88 <checkConnection+0x1c>
		}
	}

	// Check for network registration.
	if (ATisOK)
 8000ad0:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <checkConnection+0xc4>)
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d026      	beq.n	8000b26 <checkConnection+0xba>
	{
		previousTick = HAL_GetTick();
 8000ad8:	f000 fbea 	bl	80012b0 <HAL_GetTick>
 8000adc:	0002      	movs	r2, r0
 8000ade:	4b16      	ldr	r3, [pc, #88]	@ (8000b38 <checkConnection+0xcc>)
 8000ae0:	601a      	str	r2, [r3, #0]
		while (!CGREGisOK && previousTick + conn_timeout > HAL_GetTick())
 8000ae2:	e013      	b.n	8000b0c <checkConnection+0xa0>
		{
			SIMTransmit("AT+CGREG?\r\n", 100, 2000);
 8000ae4:	23fa      	movs	r3, #250	@ 0xfa
 8000ae6:	00da      	lsls	r2, r3, #3
 8000ae8:	4b19      	ldr	r3, [pc, #100]	@ (8000b50 <checkConnection+0xe4>)
 8000aea:	2164      	movs	r1, #100	@ 0x64
 8000aec:	0018      	movs	r0, r3
 8000aee:	f7ff fe05 	bl	80006fc <SIMTransmit>
			if (strstr((char*) buffer, "+CGREG: 0,1")) // Use 0,5 For Roaming
 8000af2:	4a18      	ldr	r2, [pc, #96]	@ (8000b54 <checkConnection+0xe8>)
 8000af4:	4b14      	ldr	r3, [pc, #80]	@ (8000b48 <checkConnection+0xdc>)
 8000af6:	0011      	movs	r1, r2
 8000af8:	0018      	movs	r0, r3
 8000afa:	f002 ff8b 	bl	8003a14 <strstr>
 8000afe:	1e03      	subs	r3, r0, #0
 8000b00:	d004      	beq.n	8000b0c <checkConnection+0xa0>
					{
				CGREGisOK = 1;
 8000b02:	4b0c      	ldr	r3, [pc, #48]	@ (8000b34 <checkConnection+0xc8>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
				return true;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e00d      	b.n	8000b28 <checkConnection+0xbc>
		while (!CGREGisOK && previousTick + conn_timeout > HAL_GetTick())
 8000b0c:	4b09      	ldr	r3, [pc, #36]	@ (8000b34 <checkConnection+0xc8>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d108      	bne.n	8000b26 <checkConnection+0xba>
 8000b14:	4b08      	ldr	r3, [pc, #32]	@ (8000b38 <checkConnection+0xcc>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a0c      	ldr	r2, [pc, #48]	@ (8000b4c <checkConnection+0xe0>)
 8000b1a:	189c      	adds	r4, r3, r2
 8000b1c:	f000 fbc8 	bl	80012b0 <HAL_GetTick>
 8000b20:	0003      	movs	r3, r0
 8000b22:	429c      	cmp	r4, r3
 8000b24:	d8de      	bhi.n	8000ae4 <checkConnection+0x78>
			}
		}
	}
	return false;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000b2e:	46c0      	nop			@ (mov r8, r8)
 8000b30:	20000540 	.word	0x20000540
 8000b34:	20000541 	.word	0x20000541
 8000b38:	20000544 	.word	0x20000544
 8000b3c:	20000548 	.word	0x20000548
 8000b40:	08005678 	.word	0x08005678
 8000b44:	08005550 	.word	0x08005550
 8000b48:	200003b0 	.word	0x200003b0
 8000b4c:	00009c40 	.word	0x00009c40
 8000b50:	08005680 	.word	0x08005680
 8000b54:	0800568c 	.word	0x0800568c

08000b58 <initializeMQTT>:
// There is a timeout defined for each command named conn_timeout that is same as the checkConnection()function.
// Each command is repeatively send to the Quectel module for execution until the module responses with an OK response.
// If there is a timeout for any command the function will stop executing further and then return false as output.
// If all commands are executed successfully then the function returns true.
bool initializeMQTT(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8000b5e:	f000 fba7 	bl	80012b0 <HAL_GetTick>
 8000b62:	0003      	movs	r3, r0
 8000b64:	60bb      	str	r3, [r7, #8]
	const uint32_t timeout = 10000;
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <initializeMQTT+0x68>)
 8000b68:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick() - startTime < timeout)
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	f000 fba0 	bl	80012b0 <HAL_GetTick>
 8000b70:	0002      	movs	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	687a      	ldr	r2, [r7, #4]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d91b      	bls.n	8000bb4 <initializeMQTT+0x5c>
	{
		for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e013      	b.n	8000baa <initializeMQTT+0x52>
				{
			SIMTransmit(commands[i], 400, 3000);
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <initializeMQTT+0x6c>)
 8000b84:	68fa      	ldr	r2, [r7, #12]
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	58d3      	ldr	r3, [r2, r3]
 8000b8a:	480f      	ldr	r0, [pc, #60]	@ (8000bc8 <initializeMQTT+0x70>)
 8000b8c:	22c8      	movs	r2, #200	@ 0xc8
 8000b8e:	0051      	lsls	r1, r2, #1
 8000b90:	0002      	movs	r2, r0
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff fdb2 	bl	80006fc <SIMTransmit>
			if (!strstr((char*) buffer, "OK"))
 8000b98:	4a0c      	ldr	r2, [pc, #48]	@ (8000bcc <initializeMQTT+0x74>)
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd0 <initializeMQTT+0x78>)
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 ff38 	bl	8003a14 <strstr>
		for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2b09      	cmp	r3, #9
 8000bae:	d9e8      	bls.n	8000b82 <initializeMQTT+0x2a>
					{
				continue;
			}
		}
		return true;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	e000      	b.n	8000bb6 <initializeMQTT+0x5e>

	}
	return false;
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b004      	add	sp, #16
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	00002710 	.word	0x00002710
 8000bc4:	20000010 	.word	0x20000010
 8000bc8:	00000bb8 	.word	0x00000bb8
 8000bcc:	08005550 	.word	0x08005550
 8000bd0:	200003b0 	.word	0x200003b0

08000bd4 <openMQTT>:
// This function also handles the responses of both of the commands, the details of the responses can be seen from the MQTT application note mentioned in the start.
// If a response of "+QMTOPEN: 0,2" is received it means that either the connection is being made or already a connection is established. But as the module was not able to transmit the message,
// So the previous connection is closed using "AT+QMTCLOSE" AT command and the loop is continued to try to connect to the server again.

bool openMQTT(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8000bda:	f000 fb69 	bl	80012b0 <HAL_GetTick>
 8000bde:	0003      	movs	r3, r0
 8000be0:	607b      	str	r3, [r7, #4]
	const uint32_t timeout = 100000;
 8000be2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <openMQTT+0x10c>)
 8000be4:	603b      	str	r3, [r7, #0]

	while (HAL_GetTick() - startTime < timeout)
 8000be6:	e06e      	b.n	8000cc6 <openMQTT+0xf2>
	{
		// Send the command to open an MQTT connection
		SIMTransmit(
 8000be8:	4a3e      	ldr	r2, [pc, #248]	@ (8000ce4 <openMQTT+0x110>)
 8000bea:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce8 <openMQTT+0x114>)
 8000bec:	2164      	movs	r1, #100	@ 0x64
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff fd84 	bl	80006fc <SIMTransmit>
				"AT+QMTOPEN=0,\"a2wusdljipwadj-ats.iot.ap-south-1.amazonaws.com\",8883\r\n",
				100, 50000);

		if (strstr((char*) buffer, "+QMTOPEN: 0,0"))
 8000bf4:	4a3d      	ldr	r2, [pc, #244]	@ (8000cec <openMQTT+0x118>)
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <openMQTT+0x11c>)
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f002 ff0a 	bl	8003a14 <strstr>
 8000c00:	1e03      	subs	r3, r0, #0
 8000c02:	d001      	beq.n	8000c08 <openMQTT+0x34>
				{
			// Successfully opened, proceed to connect
			return true;
 8000c04:	2301      	movs	r3, #1
 8000c06:	e067      	b.n	8000cd8 <openMQTT+0x104>

		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,-1"))
 8000c08:	4a3a      	ldr	r2, [pc, #232]	@ (8000cf4 <openMQTT+0x120>)
 8000c0a:	4b39      	ldr	r3, [pc, #228]	@ (8000cf0 <openMQTT+0x11c>)
 8000c0c:	0011      	movs	r1, r2
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f002 ff00 	bl	8003a14 <strstr>
 8000c14:	1e03      	subs	r3, r0, #0
 8000c16:	d008      	beq.n	8000c2a <openMQTT+0x56>
				{
			// Connection failed, close and retry
			if (disconnectMQTT())
 8000c18:	f000 f8b6 	bl	8000d88 <disconnectMQTT>
 8000c1c:	1e03      	subs	r3, r0, #0
 8000c1e:	d000      	beq.n	8000c22 <openMQTT+0x4e>
			{
				continue;
 8000c20:	e051      	b.n	8000cc6 <openMQTT+0xf2>
			}
			else
			{
				return connectMQTT();
 8000c22:	f000 f873 	bl	8000d0c <connectMQTT>
 8000c26:	0003      	movs	r3, r0
 8000c28:	e056      	b.n	8000cd8 <openMQTT+0x104>

			}
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,1"))
 8000c2a:	4a33      	ldr	r2, [pc, #204]	@ (8000cf8 <openMQTT+0x124>)
 8000c2c:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <openMQTT+0x11c>)
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 feef 	bl	8003a14 <strstr>
 8000c36:	1e03      	subs	r3, r0, #0
 8000c38:	d005      	beq.n	8000c46 <openMQTT+0x72>
				{
			// MQTT client identifier not valid, reinitialize and retry
			initializeMQTT();
 8000c3a:	f7ff ff8d 	bl	8000b58 <initializeMQTT>
			return openMQTT();
 8000c3e:	f7ff ffc9 	bl	8000bd4 <openMQTT>
 8000c42:	0003      	movs	r3, r0
 8000c44:	e048      	b.n	8000cd8 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,2"))
 8000c46:	4a2d      	ldr	r2, [pc, #180]	@ (8000cfc <openMQTT+0x128>)
 8000c48:	4b29      	ldr	r3, [pc, #164]	@ (8000cf0 <openMQTT+0x11c>)
 8000c4a:	0011      	movs	r1, r2
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 fee1 	bl	8003a14 <strstr>
 8000c52:	1e03      	subs	r3, r0, #0
 8000c54:	d005      	beq.n	8000c62 <openMQTT+0x8e>
				{
			// Server is unavailable, close and retry
			disconnectMQTT();
 8000c56:	f000 f897 	bl	8000d88 <disconnectMQTT>
			return openMQTT();
 8000c5a:	f7ff ffbb 	bl	8000bd4 <openMQTT>
 8000c5e:	0003      	movs	r3, r0
 8000c60:	e03a      	b.n	8000cd8 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,3"))
 8000c62:	4a27      	ldr	r2, [pc, #156]	@ (8000d00 <openMQTT+0x12c>)
 8000c64:	4b22      	ldr	r3, [pc, #136]	@ (8000cf0 <openMQTT+0x11c>)
 8000c66:	0011      	movs	r1, r2
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f002 fed3 	bl	8003a14 <strstr>
 8000c6e:	1e03      	subs	r3, r0, #0
 8000c70:	d007      	beq.n	8000c82 <openMQTT+0xae>
				{
			// Connection rejected, assign PDP context and retry
			assignPDPcontext();
 8000c72:	f7ff fd6b 	bl	800074c <assignPDPcontext>
			initializeMQTT();
 8000c76:	f7ff ff6f 	bl	8000b58 <initializeMQTT>
			return openMQTT();
 8000c7a:	f7ff ffab 	bl	8000bd4 <openMQTT>
 8000c7e:	0003      	movs	r3, r0
 8000c80:	e02a      	b.n	8000cd8 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,4"))
 8000c82:	4a20      	ldr	r2, [pc, #128]	@ (8000d04 <openMQTT+0x130>)
 8000c84:	4b1a      	ldr	r3, [pc, #104]	@ (8000cf0 <openMQTT+0x11c>)
 8000c86:	0011      	movs	r1, r2
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f002 fec3 	bl	8003a14 <strstr>
 8000c8e:	1e03      	subs	r3, r0, #0
 8000c90:	d005      	beq.n	8000c9e <openMQTT+0xca>
				{
			// TCP/IP connection failure, initialize and retry
			initializeMQTT();
 8000c92:	f7ff ff61 	bl	8000b58 <initializeMQTT>
			return openMQTT();
 8000c96:	f7ff ff9d 	bl	8000bd4 <openMQTT>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	e01c      	b.n	8000cd8 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,5"))
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d08 <openMQTT+0x134>)
 8000ca0:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <openMQTT+0x11c>)
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f002 feb5 	bl	8003a14 <strstr>
 8000caa:	1e03      	subs	r3, r0, #0
 8000cac:	d009      	beq.n	8000cc2 <openMQTT+0xee>
				{
			// Protocol not supported, check connection and retry
			checkConnection();
 8000cae:	f7ff fedd 	bl	8000a6c <checkConnection>
			assignPDPcontext();
 8000cb2:	f7ff fd4b 	bl	800074c <assignPDPcontext>
			initializeMQTT();
 8000cb6:	f7ff ff4f 	bl	8000b58 <initializeMQTT>
			return openMQTT();
 8000cba:	f7ff ff8b 	bl	8000bd4 <openMQTT>
 8000cbe:	0003      	movs	r3, r0
 8000cc0:	e00a      	b.n	8000cd8 <openMQTT+0x104>
		}
		else
		{
			// Unknown error, return false
			return false;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e008      	b.n	8000cd8 <openMQTT+0x104>
	while (HAL_GetTick() - startTime < timeout)
 8000cc6:	f000 faf3 	bl	80012b0 <HAL_GetTick>
 8000cca:	0002      	movs	r2, r0
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	683a      	ldr	r2, [r7, #0]
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d888      	bhi.n	8000be8 <openMQTT+0x14>
		}

		// Delay between retries
	}
	return false;  // Timeout occurred
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	0018      	movs	r0, r3
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b002      	add	sp, #8
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	000186a0 	.word	0x000186a0
 8000ce4:	0000c350 	.word	0x0000c350
 8000ce8:	08005698 	.word	0x08005698
 8000cec:	080056e0 	.word	0x080056e0
 8000cf0:	200003b0 	.word	0x200003b0
 8000cf4:	080056f0 	.word	0x080056f0
 8000cf8:	08005700 	.word	0x08005700
 8000cfc:	08005710 	.word	0x08005710
 8000d00:	08005720 	.word	0x08005720
 8000d04:	08005730 	.word	0x08005730
 8000d08:	08005740 	.word	0x08005740

08000d0c <connectMQTT>:
bool connectMQTT(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8000d12:	f000 facd 	bl	80012b0 <HAL_GetTick>
 8000d16:	0003      	movs	r3, r0
 8000d18:	607b      	str	r3, [r7, #4]
	const uint32_t timeout = 10000;
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <connectMQTT+0x64>)
 8000d1c:	603b      	str	r3, [r7, #0]

	while (HAL_GetTick() - startTime < timeout)
 8000d1e:	e019      	b.n	8000d54 <connectMQTT+0x48>
	{
		SIMTransmit("AT+QMTCONN=0,\"test2\"\r\n", 100, 3000);
 8000d20:	4a14      	ldr	r2, [pc, #80]	@ (8000d74 <connectMQTT+0x68>)
 8000d22:	4b15      	ldr	r3, [pc, #84]	@ (8000d78 <connectMQTT+0x6c>)
 8000d24:	2164      	movs	r1, #100	@ 0x64
 8000d26:	0018      	movs	r0, r3
 8000d28:	f7ff fce8 	bl	80006fc <SIMTransmit>

		if (strstr((char*) buffer, "+QMTCONN: 0,0,0"))
 8000d2c:	4a13      	ldr	r2, [pc, #76]	@ (8000d7c <connectMQTT+0x70>)
 8000d2e:	4b14      	ldr	r3, [pc, #80]	@ (8000d80 <connectMQTT+0x74>)
 8000d30:	0011      	movs	r1, r2
 8000d32:	0018      	movs	r0, r3
 8000d34:	f002 fe6e 	bl	8003a14 <strstr>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <connectMQTT+0x34>
				{
			return true;  // Connection successful
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e012      	b.n	8000d66 <connectMQTT+0x5a>
		}
		else if (strstr((char*) buffer, "+QMTCONN: 0,1"))
 8000d40:	4a10      	ldr	r2, [pc, #64]	@ (8000d84 <connectMQTT+0x78>)
 8000d42:	4b0f      	ldr	r3, [pc, #60]	@ (8000d80 <connectMQTT+0x74>)
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f002 fe64 	bl	8003a14 <strstr>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <connectMQTT+0x48>
				{
			return false;
 8000d50:	2300      	movs	r3, #0
 8000d52:	e008      	b.n	8000d66 <connectMQTT+0x5a>
	while (HAL_GetTick() - startTime < timeout)
 8000d54:	f000 faac 	bl	80012b0 <HAL_GetTick>
 8000d58:	0002      	movs	r2, r0
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	429a      	cmp	r2, r3
 8000d62:	d8dd      	bhi.n	8000d20 <connectMQTT+0x14>

		}
	}
	return false;
 8000d64:	2300      	movs	r3, #0

}
 8000d66:	0018      	movs	r0, r3
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	b002      	add	sp, #8
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	46c0      	nop			@ (mov r8, r8)
 8000d70:	00002710 	.word	0x00002710
 8000d74:	00000bb8 	.word	0x00000bb8
 8000d78:	08005750 	.word	0x08005750
 8000d7c:	08005768 	.word	0x08005768
 8000d80:	200003b0 	.word	0x200003b0
 8000d84:	08005778 	.word	0x08005778

08000d88 <disconnectMQTT>:

// Function to disconnect from MQTT broker
bool disconnectMQTT(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8000d8e:	f000 fa8f 	bl	80012b0 <HAL_GetTick>
 8000d92:	0003      	movs	r3, r0
 8000d94:	607b      	str	r3, [r7, #4]
	const uint32_t timeout = 10000; // 10 seconds timeout
 8000d96:	4b12      	ldr	r3, [pc, #72]	@ (8000de0 <disconnectMQTT+0x58>)
 8000d98:	603b      	str	r3, [r7, #0]

	while (HAL_GetTick() - startTime < timeout)
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	f000 fa88 	bl	80012b0 <HAL_GetTick>
 8000da0:	0002      	movs	r2, r0
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	683a      	ldr	r2, [r7, #0]
 8000da8:	429a      	cmp	r2, r3
 8000daa:	d913      	bls.n	8000dd4 <disconnectMQTT+0x4c>
	{
		SIMTransmit("AT+QMTCLOSE=0\r\n", 400, 2000);
 8000dac:	23fa      	movs	r3, #250	@ 0xfa
 8000dae:	00da      	lsls	r2, r3, #3
 8000db0:	23c8      	movs	r3, #200	@ 0xc8
 8000db2:	0059      	lsls	r1, r3, #1
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <disconnectMQTT+0x5c>)
 8000db6:	0018      	movs	r0, r3
 8000db8:	f7ff fca0 	bl	80006fc <SIMTransmit>

		if (strstr((char*) buffer, "+QMTCLOSE: 0,0"))
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000de8 <disconnectMQTT+0x60>)
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000dec <disconnectMQTT+0x64>)
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 fe26 	bl	8003a14 <strstr>
 8000dc8:	1e03      	subs	r3, r0, #0
 8000dca:	d001      	beq.n	8000dd0 <disconnectMQTT+0x48>
				{
			// Successful disconnect
			return true;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e002      	b.n	8000dd6 <disconnectMQTT+0x4e>
		}
		else
		{
			// Error occurred, you might want to handle this differently
			return false;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	e000      	b.n	8000dd6 <disconnectMQTT+0x4e>
		}
	}

	// Timeout occurred
	return false;
 8000dd4:	2300      	movs	r3, #0
}
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b002      	add	sp, #8
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	00002710 	.word	0x00002710
 8000de4:	08005788 	.word	0x08005788
 8000de8:	08005798 	.word	0x08005798
 8000dec:	200003b0 	.word	0x200003b0

08000df0 <publishToTopic>:
// The data is sent to the hexTojson function to convert the data in a json format that is defined in the function.
// Next the json data is sent to the module using the SimTransmit function with a terminating character '0xla' to indicate the module that the message is completed and transmit it.
// If the response is not "+QMTPUB: 0,1,0" it states that the message transmission is not successful and send a terminate character in case if the module has not terminated the message.

bool publishToTopic(uint8_t *data, int data_length)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
	if (data == NULL || data_length == 0)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d002      	beq.n	8000e06 <publishToTopic+0x16>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <publishToTopic+0x1a>
			{
		return false; // Handle invalid input
 8000e06:	2300      	movs	r3, #0
 8000e08:	e039      	b.n	8000e7e <publishToTopic+0x8e>
	}
	HAL_Delay(100);
 8000e0a:	2064      	movs	r0, #100	@ 0x64
 8000e0c:	f000 fa5a 	bl	80012c4 <HAL_Delay>
	SIMTransmit("AT+QMTPUB=0,2,1,1,\"testsub\"\r\n", 400, 2000);
 8000e10:	23fa      	movs	r3, #250	@ 0xfa
 8000e12:	00da      	lsls	r2, r3, #3
 8000e14:	23c8      	movs	r3, #200	@ 0xc8
 8000e16:	0059      	lsls	r1, r3, #1
 8000e18:	4b1b      	ldr	r3, [pc, #108]	@ (8000e88 <publishToTopic+0x98>)
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f7ff fc6e 	bl	80006fc <SIMTransmit>
	HAL_Delay(1000);
 8000e20:	23fa      	movs	r3, #250	@ 0xfa
 8000e22:	009b      	lsls	r3, r3, #2
 8000e24:	0018      	movs	r0, r3
 8000e26:	f000 fa4d 	bl	80012c4 <HAL_Delay>

	if (strstr((char*) buffer, ">"))
 8000e2a:	4b18      	ldr	r3, [pc, #96]	@ (8000e8c <publishToTopic+0x9c>)
 8000e2c:	213e      	movs	r1, #62	@ 0x3e
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f002 fde2 	bl	80039f8 <strchr>
 8000e34:	1e03      	subs	r3, r0, #0
 8000e36:	d021      	beq.n	8000e7c <publishToTopic+0x8c>
			{
		hex_to_json(data, data_length);
 8000e38:	683a      	ldr	r2, [r7, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	0011      	movs	r1, r2
 8000e3e:	0018      	movs	r0, r3
 8000e40:	f7ff fc06 	bl	8000650 <hex_to_json>
		sprintf(ATcommand, "%s%c", json_string, 0x1a);
 8000e44:	4a12      	ldr	r2, [pc, #72]	@ (8000e90 <publishToTopic+0xa0>)
 8000e46:	4913      	ldr	r1, [pc, #76]	@ (8000e94 <publishToTopic+0xa4>)
 8000e48:	4813      	ldr	r0, [pc, #76]	@ (8000e98 <publishToTopic+0xa8>)
 8000e4a:	231a      	movs	r3, #26
 8000e4c:	f002 fdac 	bl	80039a8 <siprintf>
		SIMTransmit(ATcommand, 400, 5000);
 8000e50:	4a12      	ldr	r2, [pc, #72]	@ (8000e9c <publishToTopic+0xac>)
 8000e52:	23c8      	movs	r3, #200	@ 0xc8
 8000e54:	0059      	lsls	r1, r3, #1
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <publishToTopic+0xa8>)
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f7ff fc4f 	bl	80006fc <SIMTransmit>
		HAL_Delay(500);
 8000e5e:	23fa      	movs	r3, #250	@ 0xfa
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fa2e 	bl	80012c4 <HAL_Delay>
		if (strstr((char*) buffer, "+QMTPUB: 0,2,0"))
 8000e68:	4a0d      	ldr	r2, [pc, #52]	@ (8000ea0 <publishToTopic+0xb0>)
 8000e6a:	4b08      	ldr	r3, [pc, #32]	@ (8000e8c <publishToTopic+0x9c>)
 8000e6c:	0011      	movs	r1, r2
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f002 fdd0 	bl	8003a14 <strstr>
 8000e74:	1e03      	subs	r3, r0, #0
 8000e76:	d001      	beq.n	8000e7c <publishToTopic+0x8c>
				{
			//		       disconnectMQTT();
			return true;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	e000      	b.n	8000e7e <publishToTopic+0x8e>
		}

	}

	return false;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	0018      	movs	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b002      	add	sp, #8
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	46c0      	nop			@ (mov r8, r8)
 8000e88:	080057a8 	.word	0x080057a8
 8000e8c:	200003b0 	.word	0x200003b0
 8000e90:	2000054c 	.word	0x2000054c
 8000e94:	080057c8 	.word	0x080057c8
 8000e98:	20000220 	.word	0x20000220
 8000e9c:	00001388 	.word	0x00001388
 8000ea0:	080057d0 	.word	0x080057d0

08000ea4 <TransmitDataMqtt>:
bool TransmitDataMqtt(uint8_t *data, int data_length, uint8_t *a)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
	*a = 1;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
	if (checkConnection())
 8000eb6:	f7ff fdd9 	bl	8000a6c <checkConnection>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d02c      	beq.n	8000f18 <TransmitDataMqtt+0x74>
	{
		if (initializeMQTT())
 8000ebe:	f7ff fe4b 	bl	8000b58 <initializeMQTT>
 8000ec2:	1e03      	subs	r3, r0, #0
 8000ec4:	d026      	beq.n	8000f14 <TransmitDataMqtt+0x70>
		{
			if (openMQTT())
 8000ec6:	f7ff fe85 	bl	8000bd4 <openMQTT>
 8000eca:	1e03      	subs	r3, r0, #0
 8000ecc:	d020      	beq.n	8000f10 <TransmitDataMqtt+0x6c>
			{
				*a = 3;
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	2203      	movs	r2, #3
 8000ed2:	701a      	strb	r2, [r3, #0]
				if (connectMQTT())
 8000ed4:	f7ff ff1a 	bl	8000d0c <connectMQTT>
 8000ed8:	1e03      	subs	r3, r0, #0
 8000eda:	d017      	beq.n	8000f0c <TransmitDataMqtt+0x68>
				{
					*a = 4;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2204      	movs	r2, #4
 8000ee0:	701a      	strb	r2, [r3, #0]
					if (publishToTopic(data, data_length))
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	0011      	movs	r1, r2
 8000ee8:	0018      	movs	r0, r3
 8000eea:	f7ff ff81 	bl	8000df0 <publishToTopic>
 8000eee:	1e03      	subs	r3, r0, #0
 8000ef0:	d00a      	beq.n	8000f08 <TransmitDataMqtt+0x64>
							{
						*a = 5;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2205      	movs	r2, #5
 8000ef6:	701a      	strb	r2, [r3, #0]
						if (disconnectMQTT())
 8000ef8:	f7ff ff46 	bl	8000d88 <disconnectMQTT>
 8000efc:	1e03      	subs	r3, r0, #0
 8000efe:	d001      	beq.n	8000f04 <TransmitDataMqtt+0x60>
						{
							return true;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e00a      	b.n	8000f1a <TransmitDataMqtt+0x76>

						}
						return false;
 8000f04:	2300      	movs	r3, #0
 8000f06:	e008      	b.n	8000f1a <TransmitDataMqtt+0x76>
					}
					return false;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	e006      	b.n	8000f1a <TransmitDataMqtt+0x76>
				}

				return false;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	e004      	b.n	8000f1a <TransmitDataMqtt+0x76>
			}
			return false;
 8000f10:	2300      	movs	r3, #0
 8000f12:	e002      	b.n	8000f1a <TransmitDataMqtt+0x76>
		}
		return false;
 8000f14:	2300      	movs	r3, #0
 8000f16:	e000      	b.n	8000f1a <TransmitDataMqtt+0x76>
	}
	return false;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f36:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f42:	4b09      	ldr	r3, [pc, #36]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f46:	4b08      	ldr	r3, [pc, #32]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f48:	2180      	movs	r1, #128	@ 0x80
 8000f4a:	0549      	lsls	r1, r1, #21
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f50:	4b05      	ldr	r3, [pc, #20]	@ (8000f68 <HAL_MspInit+0x44>)
 8000f52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f54:	2380      	movs	r3, #128	@ 0x80
 8000f56:	055b      	lsls	r3, r3, #21
 8000f58:	4013      	ands	r3, r2
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f5e:	46c0      	nop			@ (mov r8, r8)
 8000f60:	46bd      	mov	sp, r7
 8000f62:	b002      	add	sp, #8
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	46c0      	nop			@ (mov r8, r8)
 8000f68:	40021000 	.word	0x40021000

08000f6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b08d      	sub	sp, #52	@ 0x34
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	241c      	movs	r4, #28
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f002 fd32 	bl	80039e8 <memset>
  if(huart->Instance==USART3)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a3e      	ldr	r2, [pc, #248]	@ (8001084 <HAL_UART_MspInit+0x118>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d138      	bne.n	8001000 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8000f90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f92:	4b3d      	ldr	r3, [pc, #244]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8000f94:	2180      	movs	r1, #128	@ 0x80
 8000f96:	02c9      	lsls	r1, r1, #11
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8000f9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	02db      	lsls	r3, r3, #11
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
 8000fa8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	4b37      	ldr	r3, [pc, #220]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8000fac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fae:	4b36      	ldr	r3, [pc, #216]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fb6:	4b34      	ldr	r3, [pc, #208]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8000fb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fba:	2202      	movs	r2, #2
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB0     ------> USART3_RX
    PB2     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000fc2:	0021      	movs	r1, r4
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2205      	movs	r2, #5
 8000fc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	2202      	movs	r2, #2
 8000fce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	187b      	adds	r3, r7, r1
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2200      	movs	r2, #0
 8000fda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2204      	movs	r2, #4
 8000fe0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	4a29      	ldr	r2, [pc, #164]	@ (800108c <HAL_UART_MspInit+0x120>)
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	0010      	movs	r0, r2
 8000fea:	f000 fb39 	bl	8001660 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	201d      	movs	r0, #29
 8000ff4:	f000 fa36 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000ff8:	201d      	movs	r0, #29
 8000ffa:	f000 fa48 	bl	800148e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000ffe:	e03d      	b.n	800107c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART4)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a22      	ldr	r2, [pc, #136]	@ (8001090 <HAL_UART_MspInit+0x124>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d138      	bne.n	800107c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART4_CLK_ENABLE();
 800100a:	4b1f      	ldr	r3, [pc, #124]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 800100c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800100e:	4b1e      	ldr	r3, [pc, #120]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8001010:	2180      	movs	r1, #128	@ 0x80
 8001012:	0309      	lsls	r1, r1, #12
 8001014:	430a      	orrs	r2, r1
 8001016:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001018:	4b1b      	ldr	r3, [pc, #108]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 800101a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800101c:	2380      	movs	r3, #128	@ 0x80
 800101e:	031b      	lsls	r3, r3, #12
 8001020:	4013      	ands	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4b18      	ldr	r3, [pc, #96]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8001028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800102a:	4b17      	ldr	r3, [pc, #92]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 800102c:	2101      	movs	r1, #1
 800102e:	430a      	orrs	r2, r1
 8001030:	635a      	str	r2, [r3, #52]	@ 0x34
 8001032:	4b15      	ldr	r3, [pc, #84]	@ (8001088 <HAL_UART_MspInit+0x11c>)
 8001034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001036:	2201      	movs	r2, #1
 8001038:	4013      	ands	r3, r2
 800103a:	60fb      	str	r3, [r7, #12]
 800103c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800103e:	211c      	movs	r1, #28
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2203      	movs	r2, #3
 8001044:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	187b      	adds	r3, r7, r1
 8001048:	2202      	movs	r2, #2
 800104a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	187b      	adds	r3, r7, r1
 800104e:	2200      	movs	r2, #0
 8001050:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001052:	187b      	adds	r3, r7, r1
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8001058:	187b      	adds	r3, r7, r1
 800105a:	2204      	movs	r2, #4
 800105c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	187a      	adds	r2, r7, r1
 8001060:	23a0      	movs	r3, #160	@ 0xa0
 8001062:	05db      	lsls	r3, r3, #23
 8001064:	0011      	movs	r1, r2
 8001066:	0018      	movs	r0, r3
 8001068:	f000 fafa 	bl	8001660 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800106c:	2200      	movs	r2, #0
 800106e:	2100      	movs	r1, #0
 8001070:	201d      	movs	r0, #29
 8001072:	f000 f9f7 	bl	8001464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001076:	201d      	movs	r0, #29
 8001078:	f000 fa09 	bl	800148e <HAL_NVIC_EnableIRQ>
}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b00d      	add	sp, #52	@ 0x34
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	40004800 	.word	0x40004800
 8001088:	40021000 	.word	0x40021000
 800108c:	50000400 	.word	0x50000400
 8001090:	40004c00 	.word	0x40004c00

08001094 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001098:	46c0      	nop			@ (mov r8, r8)
 800109a:	e7fd      	b.n	8001098 <NMI_Handler+0x4>

0800109c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	e7fd      	b.n	80010a0 <HardFault_Handler+0x4>

080010a4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010bc:	f000 f8e6 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <USART3_4_IRQHandler+0x1c>)
 80010ce:	0018      	movs	r0, r3
 80010d0:	f001 fb4c 	bl	800276c <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <USART3_4_IRQHandler+0x20>)
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fb48 	bl	800276c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80010dc:	46c0      	nop			@ (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	200000b0 	.word	0x200000b0
 80010e8:	20000144 	.word	0x20000144

080010ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010f4:	4a14      	ldr	r2, [pc, #80]	@ (8001148 <_sbrk+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	@ (800114c <_sbrk+0x60>)
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001100:	4b13      	ldr	r3, [pc, #76]	@ (8001150 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d102      	bne.n	800110e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001108:	4b11      	ldr	r3, [pc, #68]	@ (8001150 <_sbrk+0x64>)
 800110a:	4a12      	ldr	r2, [pc, #72]	@ (8001154 <_sbrk+0x68>)
 800110c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800110e:	4b10      	ldr	r3, [pc, #64]	@ (8001150 <_sbrk+0x64>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	18d3      	adds	r3, r2, r3
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	429a      	cmp	r2, r3
 800111a:	d207      	bcs.n	800112c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800111c:	f002 fc90 	bl	8003a40 <__errno>
 8001120:	0003      	movs	r3, r0
 8001122:	220c      	movs	r2, #12
 8001124:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001126:	2301      	movs	r3, #1
 8001128:	425b      	negs	r3, r3
 800112a:	e009      	b.n	8001140 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800112c:	4b08      	ldr	r3, [pc, #32]	@ (8001150 <_sbrk+0x64>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001132:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <_sbrk+0x64>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	18d2      	adds	r2, r2, r3
 800113a:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <_sbrk+0x64>)
 800113c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b006      	add	sp, #24
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20009000 	.word	0x20009000
 800114c:	00000400 	.word	0x00000400
 8001150:	20000678 	.word	0x20000678
 8001154:	200007c8 	.word	0x200007c8

08001158 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	46c0      	nop			@ (mov r8, r8)
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001164:	480d      	ldr	r0, [pc, #52]	@ (800119c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001166:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001168:	f7ff fff6 	bl	8001158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	@ (80011a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	@ (80011a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	@ (80011a8 <LoopForever+0xe>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	@ (80011ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	@ (80011b0 <LoopForever+0x16>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001192:	f002 fc5b 	bl	8003a4c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001196:	f7ff f851 	bl	800023c <main>

0800119a <LoopForever>:

LoopForever:
  b LoopForever
 800119a:	e7fe      	b.n	800119a <LoopForever>
  ldr   r0, =_estack
 800119c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80011a8:	08005894 	.word	0x08005894
  ldr r2, =_sbss
 80011ac:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80011b0:	200007c8 	.word	0x200007c8

080011b4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC1_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011be:	1dfb      	adds	r3, r7, #7
 80011c0:	2200      	movs	r2, #0
 80011c2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_Init+0x3c>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b0a      	ldr	r3, [pc, #40]	@ (80011f4 <HAL_Init+0x3c>)
 80011ca:	2180      	movs	r1, #128	@ 0x80
 80011cc:	0049      	lsls	r1, r1, #1
 80011ce:	430a      	orrs	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011d2:	2003      	movs	r0, #3
 80011d4:	f000 f810 	bl	80011f8 <HAL_InitTick>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d003      	beq.n	80011e4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	2201      	movs	r2, #1
 80011e0:	701a      	strb	r2, [r3, #0]
 80011e2:	e001      	b.n	80011e8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80011e4:	f7ff fe9e 	bl	8000f24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	781b      	ldrb	r3, [r3, #0]
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40022000 	.word	0x40022000

080011f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001208:	4b1d      	ldr	r3, [pc, #116]	@ (8001280 <HAL_InitTick+0x88>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d02b      	beq.n	8001268 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001210:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <HAL_InitTick+0x8c>)
 8001212:	681c      	ldr	r4, [r3, #0]
 8001214:	4b1a      	ldr	r3, [pc, #104]	@ (8001280 <HAL_InitTick+0x88>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	0019      	movs	r1, r3
 800121a:	23fa      	movs	r3, #250	@ 0xfa
 800121c:	0098      	lsls	r0, r3, #2
 800121e:	f7fe ff81 	bl	8000124 <__udivsi3>
 8001222:	0003      	movs	r3, r0
 8001224:	0019      	movs	r1, r3
 8001226:	0020      	movs	r0, r4
 8001228:	f7fe ff7c 	bl	8000124 <__udivsi3>
 800122c:	0003      	movs	r3, r0
 800122e:	0018      	movs	r0, r3
 8001230:	f000 f93d 	bl	80014ae <HAL_SYSTICK_Config>
 8001234:	1e03      	subs	r3, r0, #0
 8001236:	d112      	bne.n	800125e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b03      	cmp	r3, #3
 800123c:	d80a      	bhi.n	8001254 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	2301      	movs	r3, #1
 8001242:	425b      	negs	r3, r3
 8001244:	2200      	movs	r2, #0
 8001246:	0018      	movs	r0, r3
 8001248:	f000 f90c 	bl	8001464 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124c:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_InitTick+0x90>)
 800124e:	687a      	ldr	r2, [r7, #4]
 8001250:	601a      	str	r2, [r3, #0]
 8001252:	e00d      	b.n	8001270 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001254:	230f      	movs	r3, #15
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	2201      	movs	r2, #1
 800125a:	701a      	strb	r2, [r3, #0]
 800125c:	e008      	b.n	8001270 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800125e:	230f      	movs	r3, #15
 8001260:	18fb      	adds	r3, r7, r3
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
 8001266:	e003      	b.n	8001270 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001268:	230f      	movs	r3, #15
 800126a:	18fb      	adds	r3, r7, r3
 800126c:	2201      	movs	r2, #1
 800126e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001270:	230f      	movs	r3, #15
 8001272:	18fb      	adds	r3, r7, r3
 8001274:	781b      	ldrb	r3, [r3, #0]
}
 8001276:	0018      	movs	r0, r3
 8001278:	46bd      	mov	sp, r7
 800127a:	b005      	add	sp, #20
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	20000040 	.word	0x20000040
 8001284:	20000038 	.word	0x20000038
 8001288:	2000003c 	.word	0x2000003c

0800128c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_IncTick+0x1c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	001a      	movs	r2, r3
 8001296:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <HAL_IncTick+0x20>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	18d2      	adds	r2, r2, r3
 800129c:	4b03      	ldr	r3, [pc, #12]	@ (80012ac <HAL_IncTick+0x20>)
 800129e:	601a      	str	r2, [r3, #0]
}
 80012a0:	46c0      	nop			@ (mov r8, r8)
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	46c0      	nop			@ (mov r8, r8)
 80012a8:	20000040 	.word	0x20000040
 80012ac:	2000067c 	.word	0x2000067c

080012b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  return uwTick;
 80012b4:	4b02      	ldr	r3, [pc, #8]	@ (80012c0 <HAL_GetTick+0x10>)
 80012b6:	681b      	ldr	r3, [r3, #0]
}
 80012b8:	0018      	movs	r0, r3
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	2000067c 	.word	0x2000067c

080012c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012cc:	f7ff fff0 	bl	80012b0 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	3301      	adds	r3, #1
 80012dc:	d005      	beq.n	80012ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_Delay+0x44>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	001a      	movs	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	189b      	adds	r3, r3, r2
 80012e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012ea:	46c0      	nop			@ (mov r8, r8)
 80012ec:	f7ff ffe0 	bl	80012b0 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d8f7      	bhi.n	80012ec <HAL_Delay+0x28>
  {
  }
}
 80012fc:	46c0      	nop			@ (mov r8, r8)
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	46bd      	mov	sp, r7
 8001302:	b004      	add	sp, #16
 8001304:	bd80      	pop	{r7, pc}
 8001306:	46c0      	nop			@ (mov r8, r8)
 8001308:	20000040 	.word	0x20000040

0800130c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	0002      	movs	r2, r0
 8001314:	1dfb      	adds	r3, r7, #7
 8001316:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b7f      	cmp	r3, #127	@ 0x7f
 800131e:	d809      	bhi.n	8001334 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001320:	1dfb      	adds	r3, r7, #7
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	001a      	movs	r2, r3
 8001326:	231f      	movs	r3, #31
 8001328:	401a      	ands	r2, r3
 800132a:	4b04      	ldr	r3, [pc, #16]	@ (800133c <__NVIC_EnableIRQ+0x30>)
 800132c:	2101      	movs	r1, #1
 800132e:	4091      	lsls	r1, r2
 8001330:	000a      	movs	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001334:	46c0      	nop			@ (mov r8, r8)
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	e000e100 	.word	0xe000e100

08001340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	0002      	movs	r2, r0
 8001348:	6039      	str	r1, [r7, #0]
 800134a:	1dfb      	adds	r3, r7, #7
 800134c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b7f      	cmp	r3, #127	@ 0x7f
 8001354:	d828      	bhi.n	80013a8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001356:	4a2f      	ldr	r2, [pc, #188]	@ (8001414 <__NVIC_SetPriority+0xd4>)
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	b25b      	sxtb	r3, r3
 800135e:	089b      	lsrs	r3, r3, #2
 8001360:	33c0      	adds	r3, #192	@ 0xc0
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	589b      	ldr	r3, [r3, r2]
 8001366:	1dfa      	adds	r2, r7, #7
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	0011      	movs	r1, r2
 800136c:	2203      	movs	r2, #3
 800136e:	400a      	ands	r2, r1
 8001370:	00d2      	lsls	r2, r2, #3
 8001372:	21ff      	movs	r1, #255	@ 0xff
 8001374:	4091      	lsls	r1, r2
 8001376:	000a      	movs	r2, r1
 8001378:	43d2      	mvns	r2, r2
 800137a:	401a      	ands	r2, r3
 800137c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	019b      	lsls	r3, r3, #6
 8001382:	22ff      	movs	r2, #255	@ 0xff
 8001384:	401a      	ands	r2, r3
 8001386:	1dfb      	adds	r3, r7, #7
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	0018      	movs	r0, r3
 800138c:	2303      	movs	r3, #3
 800138e:	4003      	ands	r3, r0
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001394:	481f      	ldr	r0, [pc, #124]	@ (8001414 <__NVIC_SetPriority+0xd4>)
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	089b      	lsrs	r3, r3, #2
 800139e:	430a      	orrs	r2, r1
 80013a0:	33c0      	adds	r3, #192	@ 0xc0
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013a6:	e031      	b.n	800140c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001418 <__NVIC_SetPriority+0xd8>)
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	0019      	movs	r1, r3
 80013b0:	230f      	movs	r3, #15
 80013b2:	400b      	ands	r3, r1
 80013b4:	3b08      	subs	r3, #8
 80013b6:	089b      	lsrs	r3, r3, #2
 80013b8:	3306      	adds	r3, #6
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	3304      	adds	r3, #4
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	1dfa      	adds	r2, r7, #7
 80013c4:	7812      	ldrb	r2, [r2, #0]
 80013c6:	0011      	movs	r1, r2
 80013c8:	2203      	movs	r2, #3
 80013ca:	400a      	ands	r2, r1
 80013cc:	00d2      	lsls	r2, r2, #3
 80013ce:	21ff      	movs	r1, #255	@ 0xff
 80013d0:	4091      	lsls	r1, r2
 80013d2:	000a      	movs	r2, r1
 80013d4:	43d2      	mvns	r2, r2
 80013d6:	401a      	ands	r2, r3
 80013d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	019b      	lsls	r3, r3, #6
 80013de:	22ff      	movs	r2, #255	@ 0xff
 80013e0:	401a      	ands	r2, r3
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	0018      	movs	r0, r3
 80013e8:	2303      	movs	r3, #3
 80013ea:	4003      	ands	r3, r0
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f0:	4809      	ldr	r0, [pc, #36]	@ (8001418 <__NVIC_SetPriority+0xd8>)
 80013f2:	1dfb      	adds	r3, r7, #7
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	001c      	movs	r4, r3
 80013f8:	230f      	movs	r3, #15
 80013fa:	4023      	ands	r3, r4
 80013fc:	3b08      	subs	r3, #8
 80013fe:	089b      	lsrs	r3, r3, #2
 8001400:	430a      	orrs	r2, r1
 8001402:	3306      	adds	r3, #6
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	18c3      	adds	r3, r0, r3
 8001408:	3304      	adds	r3, #4
 800140a:	601a      	str	r2, [r3, #0]
}
 800140c:	46c0      	nop			@ (mov r8, r8)
 800140e:	46bd      	mov	sp, r7
 8001410:	b003      	add	sp, #12
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	e000e100 	.word	0xe000e100
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	1e5a      	subs	r2, r3, #1
 8001428:	2380      	movs	r3, #128	@ 0x80
 800142a:	045b      	lsls	r3, r3, #17
 800142c:	429a      	cmp	r2, r3
 800142e:	d301      	bcc.n	8001434 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001430:	2301      	movs	r3, #1
 8001432:	e010      	b.n	8001456 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001434:	4b0a      	ldr	r3, [pc, #40]	@ (8001460 <SysTick_Config+0x44>)
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	3a01      	subs	r2, #1
 800143a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800143c:	2301      	movs	r3, #1
 800143e:	425b      	negs	r3, r3
 8001440:	2103      	movs	r1, #3
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ff7c 	bl	8001340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001448:	4b05      	ldr	r3, [pc, #20]	@ (8001460 <SysTick_Config+0x44>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144e:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <SysTick_Config+0x44>)
 8001450:	2207      	movs	r2, #7
 8001452:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001454:	2300      	movs	r3, #0
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	e000e010 	.word	0xe000e010

08001464 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af00      	add	r7, sp, #0
 800146a:	60b9      	str	r1, [r7, #8]
 800146c:	607a      	str	r2, [r7, #4]
 800146e:	210f      	movs	r1, #15
 8001470:	187b      	adds	r3, r7, r1
 8001472:	1c02      	adds	r2, r0, #0
 8001474:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	187b      	adds	r3, r7, r1
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	b25b      	sxtb	r3, r3
 800147e:	0011      	movs	r1, r2
 8001480:	0018      	movs	r0, r3
 8001482:	f7ff ff5d 	bl	8001340 <__NVIC_SetPriority>
}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	46bd      	mov	sp, r7
 800148a:	b004      	add	sp, #16
 800148c:	bd80      	pop	{r7, pc}

0800148e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800148e:	b580      	push	{r7, lr}
 8001490:	b082      	sub	sp, #8
 8001492:	af00      	add	r7, sp, #0
 8001494:	0002      	movs	r2, r0
 8001496:	1dfb      	adds	r3, r7, #7
 8001498:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	b25b      	sxtb	r3, r3
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff ff33 	bl	800130c <__NVIC_EnableIRQ>
}
 80014a6:	46c0      	nop			@ (mov r8, r8)
 80014a8:	46bd      	mov	sp, r7
 80014aa:	b002      	add	sp, #8
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b082      	sub	sp, #8
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff ffaf 	bl	800141c <SysTick_Config>
 80014be:	0003      	movs	r3, r0
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b002      	add	sp, #8
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e050      	b.n	800157c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2225      	movs	r2, #37	@ 0x25
 80014de:	5c9b      	ldrb	r3, [r3, r2]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d008      	beq.n	80014f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2204      	movs	r2, #4
 80014ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2224      	movs	r2, #36	@ 0x24
 80014f0:	2100      	movs	r1, #0
 80014f2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e041      	b.n	800157c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	210e      	movs	r1, #14
 8001504:	438a      	bics	r2, r1
 8001506:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	491c      	ldr	r1, [pc, #112]	@ (8001584 <HAL_DMA_Abort+0xbc>)
 8001514:	400a      	ands	r2, r1
 8001516:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2101      	movs	r1, #1
 8001524:	438a      	bics	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <HAL_DMA_Abort+0xc0>)
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001530:	221c      	movs	r2, #28
 8001532:	4013      	ands	r3, r2
 8001534:	2201      	movs	r2, #1
 8001536:	409a      	lsls	r2, r3
 8001538:	4b13      	ldr	r3, [pc, #76]	@ (8001588 <HAL_DMA_Abort+0xc0>)
 800153a:	430a      	orrs	r2, r1
 800153c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001546:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800154c:	2b00      	cmp	r3, #0
 800154e:	d00c      	beq.n	800156a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800155a:	490a      	ldr	r1, [pc, #40]	@ (8001584 <HAL_DMA_Abort+0xbc>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001564:	687a      	ldr	r2, [r7, #4]
 8001566:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001568:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2225      	movs	r2, #37	@ 0x25
 800156e:	2101      	movs	r1, #1
 8001570:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2224      	movs	r2, #36	@ 0x24
 8001576:	2100      	movs	r1, #0
 8001578:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	0018      	movs	r0, r3
 800157e:	46bd      	mov	sp, r7
 8001580:	b002      	add	sp, #8
 8001582:	bd80      	pop	{r7, pc}
 8001584:	fffffeff 	.word	0xfffffeff
 8001588:	40020000 	.word	0x40020000

0800158c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001594:	210f      	movs	r1, #15
 8001596:	187b      	adds	r3, r7, r1
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2225      	movs	r2, #37	@ 0x25
 80015a0:	5c9b      	ldrb	r3, [r3, r2]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d006      	beq.n	80015b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2204      	movs	r2, #4
 80015ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80015ae:	187b      	adds	r3, r7, r1
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e049      	b.n	800164a <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	210e      	movs	r1, #14
 80015c2:	438a      	bics	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2101      	movs	r1, #1
 80015d2:	438a      	bics	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e0:	491d      	ldr	r1, [pc, #116]	@ (8001658 <HAL_DMA_Abort_IT+0xcc>)
 80015e2:	400a      	ands	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80015e6:	4b1d      	ldr	r3, [pc, #116]	@ (800165c <HAL_DMA_Abort_IT+0xd0>)
 80015e8:	6859      	ldr	r1, [r3, #4]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	221c      	movs	r2, #28
 80015f0:	4013      	ands	r3, r2
 80015f2:	2201      	movs	r2, #1
 80015f4:	409a      	lsls	r2, r3
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <HAL_DMA_Abort_IT+0xd0>)
 80015f8:	430a      	orrs	r2, r1
 80015fa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001600:	687a      	ldr	r2, [r7, #4]
 8001602:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001604:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160a:	2b00      	cmp	r3, #0
 800160c:	d00c      	beq.n	8001628 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001618:	490f      	ldr	r1, [pc, #60]	@ (8001658 <HAL_DMA_Abort_IT+0xcc>)
 800161a:	400a      	ands	r2, r1
 800161c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001626:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2225      	movs	r2, #37	@ 0x25
 800162c:	2101      	movs	r1, #1
 800162e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2224      	movs	r2, #36	@ 0x24
 8001634:	2100      	movs	r1, #0
 8001636:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800163c:	2b00      	cmp	r3, #0
 800163e:	d004      	beq.n	800164a <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	0010      	movs	r0, r2
 8001648:	4798      	blx	r3
    }
  }
  return status;
 800164a:	230f      	movs	r3, #15
 800164c:	18fb      	adds	r3, r7, r3
 800164e:	781b      	ldrb	r3, [r3, #0]
}
 8001650:	0018      	movs	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	b004      	add	sp, #16
 8001656:	bd80      	pop	{r7, pc}
 8001658:	fffffeff 	.word	0xfffffeff
 800165c:	40020000 	.word	0x40020000

08001660 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800166e:	e147      	b.n	8001900 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2101      	movs	r1, #1
 8001676:	697a      	ldr	r2, [r7, #20]
 8001678:	4091      	lsls	r1, r2
 800167a:	000a      	movs	r2, r1
 800167c:	4013      	ands	r3, r2
 800167e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d100      	bne.n	8001688 <HAL_GPIO_Init+0x28>
 8001686:	e138      	b.n	80018fa <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	2203      	movs	r2, #3
 800168e:	4013      	ands	r3, r2
 8001690:	2b01      	cmp	r3, #1
 8001692:	d005      	beq.n	80016a0 <HAL_GPIO_Init+0x40>
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2203      	movs	r2, #3
 800169a:	4013      	ands	r3, r2
 800169c:	2b02      	cmp	r3, #2
 800169e:	d130      	bne.n	8001702 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	409a      	lsls	r2, r3
 80016ae:	0013      	movs	r3, r2
 80016b0:	43da      	mvns	r2, r3
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	68da      	ldr	r2, [r3, #12]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0013      	movs	r3, r2
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016d6:	2201      	movs	r2, #1
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	43da      	mvns	r2, r3
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	4013      	ands	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	091b      	lsrs	r3, r3, #4
 80016ec:	2201      	movs	r2, #1
 80016ee:	401a      	ands	r2, r3
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	409a      	lsls	r2, r3
 80016f4:	0013      	movs	r3, r2
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	2203      	movs	r2, #3
 8001708:	4013      	ands	r3, r2
 800170a:	2b03      	cmp	r3, #3
 800170c:	d017      	beq.n	800173e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	2203      	movs	r2, #3
 800171a:	409a      	lsls	r2, r3
 800171c:	0013      	movs	r3, r2
 800171e:	43da      	mvns	r2, r3
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	4013      	ands	r3, r2
 8001724:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	409a      	lsls	r2, r3
 8001730:	0013      	movs	r3, r2
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2203      	movs	r2, #3
 8001744:	4013      	ands	r3, r2
 8001746:	2b02      	cmp	r3, #2
 8001748:	d123      	bne.n	8001792 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	08da      	lsrs	r2, r3, #3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	3208      	adds	r2, #8
 8001752:	0092      	lsls	r2, r2, #2
 8001754:	58d3      	ldr	r3, [r2, r3]
 8001756:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	2207      	movs	r2, #7
 800175c:	4013      	ands	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	409a      	lsls	r2, r3
 8001764:	0013      	movs	r3, r2
 8001766:	43da      	mvns	r2, r3
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	691a      	ldr	r2, [r3, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	2107      	movs	r1, #7
 8001776:	400b      	ands	r3, r1
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	409a      	lsls	r2, r3
 800177c:	0013      	movs	r3, r2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	08da      	lsrs	r2, r3, #3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3208      	adds	r2, #8
 800178c:	0092      	lsls	r2, r2, #2
 800178e:	6939      	ldr	r1, [r7, #16]
 8001790:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	2203      	movs	r2, #3
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	43da      	mvns	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2203      	movs	r2, #3
 80017b0:	401a      	ands	r2, r3
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	23c0      	movs	r3, #192	@ 0xc0
 80017cc:	029b      	lsls	r3, r3, #10
 80017ce:	4013      	ands	r3, r2
 80017d0:	d100      	bne.n	80017d4 <HAL_GPIO_Init+0x174>
 80017d2:	e092      	b.n	80018fa <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80017d4:	4a50      	ldr	r2, [pc, #320]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3318      	adds	r3, #24
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	589b      	ldr	r3, [r3, r2]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	2203      	movs	r2, #3
 80017e6:	4013      	ands	r3, r2
 80017e8:	00db      	lsls	r3, r3, #3
 80017ea:	220f      	movs	r2, #15
 80017ec:	409a      	lsls	r2, r3
 80017ee:	0013      	movs	r3, r2
 80017f0:	43da      	mvns	r2, r3
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4013      	ands	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	23a0      	movs	r3, #160	@ 0xa0
 80017fc:	05db      	lsls	r3, r3, #23
 80017fe:	429a      	cmp	r2, r3
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x1ca>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a45      	ldr	r2, [pc, #276]	@ (800191c <HAL_GPIO_Init+0x2bc>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x1c6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a44      	ldr	r2, [pc, #272]	@ (8001920 <HAL_GPIO_Init+0x2c0>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x1c2>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a43      	ldr	r2, [pc, #268]	@ (8001924 <HAL_GPIO_Init+0x2c4>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x1be>
 800181a:	2303      	movs	r3, #3
 800181c:	e006      	b.n	800182c <HAL_GPIO_Init+0x1cc>
 800181e:	2305      	movs	r3, #5
 8001820:	e004      	b.n	800182c <HAL_GPIO_Init+0x1cc>
 8001822:	2302      	movs	r3, #2
 8001824:	e002      	b.n	800182c <HAL_GPIO_Init+0x1cc>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <HAL_GPIO_Init+0x1cc>
 800182a:	2300      	movs	r3, #0
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	2103      	movs	r1, #3
 8001830:	400a      	ands	r2, r1
 8001832:	00d2      	lsls	r2, r2, #3
 8001834:	4093      	lsls	r3, r2
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800183c:	4936      	ldr	r1, [pc, #216]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3318      	adds	r3, #24
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	693a      	ldr	r2, [r7, #16]
 8001848:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800184a:	4b33      	ldr	r3, [pc, #204]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43da      	mvns	r2, r3
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4013      	ands	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	@ 0x80
 8001860:	035b      	lsls	r3, r3, #13
 8001862:	4013      	ands	r3, r2
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800186e:	4b2a      	ldr	r3, [pc, #168]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001874:	4b28      	ldr	r3, [pc, #160]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	43da      	mvns	r2, r3
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685a      	ldr	r2, [r3, #4]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	039b      	lsls	r3, r3, #14
 800188c:	4013      	ands	r3, r2
 800188e:	d003      	beq.n	8001898 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001898:	4b1f      	ldr	r3, [pc, #124]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800189e:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80018a0:	2384      	movs	r3, #132	@ 0x84
 80018a2:	58d3      	ldr	r3, [r2, r3]
 80018a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	@ 0x80
 80018b6:	029b      	lsls	r3, r3, #10
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018c4:	4914      	ldr	r1, [pc, #80]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80018c6:	2284      	movs	r2, #132	@ 0x84
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80018cc:	4a12      	ldr	r2, [pc, #72]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80018ce:	2380      	movs	r3, #128	@ 0x80
 80018d0:	58d3      	ldr	r3, [r2, r3]
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	43da      	mvns	r2, r3
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4013      	ands	r3, r2
 80018dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	2380      	movs	r3, #128	@ 0x80
 80018e4:	025b      	lsls	r3, r3, #9
 80018e6:	4013      	ands	r3, r2
 80018e8:	d003      	beq.n	80018f2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f2:	4909      	ldr	r1, [pc, #36]	@ (8001918 <HAL_GPIO_Init+0x2b8>)
 80018f4:	2280      	movs	r2, #128	@ 0x80
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	3301      	adds	r3, #1
 80018fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	40da      	lsrs	r2, r3
 8001908:	1e13      	subs	r3, r2, #0
 800190a:	d000      	beq.n	800190e <HAL_GPIO_Init+0x2ae>
 800190c:	e6b0      	b.n	8001670 <HAL_GPIO_Init+0x10>
  }
}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	46c0      	nop			@ (mov r8, r8)
 8001912:	46bd      	mov	sp, r7
 8001914:	b006      	add	sp, #24
 8001916:	bd80      	pop	{r7, pc}
 8001918:	40021800 	.word	0x40021800
 800191c:	50000400 	.word	0x50000400
 8001920:	50000800 	.word	0x50000800
 8001924:	50000c00 	.word	0x50000c00

08001928 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	0008      	movs	r0, r1
 8001932:	0011      	movs	r1, r2
 8001934:	1cbb      	adds	r3, r7, #2
 8001936:	1c02      	adds	r2, r0, #0
 8001938:	801a      	strh	r2, [r3, #0]
 800193a:	1c7b      	adds	r3, r7, #1
 800193c:	1c0a      	adds	r2, r1, #0
 800193e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001940:	1c7b      	adds	r3, r7, #1
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d004      	beq.n	8001952 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001948:	1cbb      	adds	r3, r7, #2
 800194a:	881a      	ldrh	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001952:	1cbb      	adds	r3, r7, #2
 8001954:	881a      	ldrh	r2, [r3, #0]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800195a:	46c0      	nop			@ (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b002      	add	sp, #8
 8001960:	bd80      	pop	{r7, pc}

08001962 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
 800196a:	000a      	movs	r2, r1
 800196c:	1cbb      	adds	r3, r7, #2
 800196e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	695b      	ldr	r3, [r3, #20]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001976:	1cbb      	adds	r3, r7, #2
 8001978:	881b      	ldrh	r3, [r3, #0]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	041a      	lsls	r2, r3, #16
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	1cb9      	adds	r1, r7, #2
 8001986:	8809      	ldrh	r1, [r1, #0]
 8001988:	400b      	ands	r3, r1
 800198a:	431a      	orrs	r2, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	619a      	str	r2, [r3, #24]
}
 8001990:	46c0      	nop			@ (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	b004      	add	sp, #16
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019a0:	4b19      	ldr	r3, [pc, #100]	@ (8001a08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a19      	ldr	r2, [pc, #100]	@ (8001a0c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019a6:	4013      	ands	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	4b17      	ldr	r3, [pc, #92]	@ (8001a08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	2380      	movs	r3, #128	@ 0x80
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d11f      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80019bc:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	0013      	movs	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	189b      	adds	r3, r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4912      	ldr	r1, [pc, #72]	@ (8001a14 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019ca:	0018      	movs	r0, r3
 80019cc:	f7fe fbaa 	bl	8000124 <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d6:	e008      	b.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d003      	beq.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3b01      	subs	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	e001      	b.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e009      	b.n	80019fe <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019ea:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019ec:	695a      	ldr	r2, [r3, #20]
 80019ee:	2380      	movs	r3, #128	@ 0x80
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	401a      	ands	r2, r3
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d0ed      	beq.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80019fc:	2300      	movs	r3, #0
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b004      	add	sp, #16
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	fffff9ff 	.word	0xfffff9ff
 8001a10:	20000038 	.word	0x20000038
 8001a14:	000f4240 	.word	0x000f4240

08001a18 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a1c:	4b03      	ldr	r3, [pc, #12]	@ (8001a2c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a1e:	689a      	ldr	r2, [r3, #8]
 8001a20:	23e0      	movs	r3, #224	@ 0xe0
 8001a22:	01db      	lsls	r3, r3, #7
 8001a24:	4013      	ands	r3, r2
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40021000 	.word	0x40021000

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e2f3      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <HAL_RCC_OscConfig+0x1e>
 8001a4c:	e07c      	b.n	8001b48 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4e:	4bc3      	ldr	r3, [pc, #780]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2238      	movs	r2, #56	@ 0x38
 8001a54:	4013      	ands	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a58:	4bc0      	ldr	r3, [pc, #768]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	2b10      	cmp	r3, #16
 8001a66:	d102      	bne.n	8001a6e <HAL_RCC_OscConfig+0x3e>
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d10b      	bne.n	8001a8c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a74:	4bb9      	ldr	r3, [pc, #740]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	2380      	movs	r3, #128	@ 0x80
 8001a7a:	029b      	lsls	r3, r3, #10
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d062      	beq.n	8001b46 <HAL_RCC_OscConfig+0x116>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d15e      	bne.n	8001b46 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e2ce      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685a      	ldr	r2, [r3, #4]
 8001a90:	2380      	movs	r3, #128	@ 0x80
 8001a92:	025b      	lsls	r3, r3, #9
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d107      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x78>
 8001a98:	4bb0      	ldr	r3, [pc, #704]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4baf      	ldr	r3, [pc, #700]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001a9e:	2180      	movs	r1, #128	@ 0x80
 8001aa0:	0249      	lsls	r1, r1, #9
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e020      	b.n	8001aea <HAL_RCC_OscConfig+0xba>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	23a0      	movs	r3, #160	@ 0xa0
 8001aae:	02db      	lsls	r3, r3, #11
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d10e      	bne.n	8001ad2 <HAL_RCC_OscConfig+0xa2>
 8001ab4:	4ba9      	ldr	r3, [pc, #676]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4ba8      	ldr	r3, [pc, #672]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001aba:	2180      	movs	r1, #128	@ 0x80
 8001abc:	02c9      	lsls	r1, r1, #11
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	4ba6      	ldr	r3, [pc, #664]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4ba5      	ldr	r3, [pc, #660]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ac8:	2180      	movs	r1, #128	@ 0x80
 8001aca:	0249      	lsls	r1, r1, #9
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	e00b      	b.n	8001aea <HAL_RCC_OscConfig+0xba>
 8001ad2:	4ba2      	ldr	r3, [pc, #648]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	4ba1      	ldr	r3, [pc, #644]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ad8:	49a1      	ldr	r1, [pc, #644]	@ (8001d60 <HAL_RCC_OscConfig+0x330>)
 8001ada:	400a      	ands	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	4b9f      	ldr	r3, [pc, #636]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4b9e      	ldr	r3, [pc, #632]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	499f      	ldr	r1, [pc, #636]	@ (8001d64 <HAL_RCC_OscConfig+0x334>)
 8001ae6:	400a      	ands	r2, r1
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d014      	beq.n	8001b1c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff fbdd 	bl	80012b0 <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff fbd8 	bl	80012b0 <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	@ 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e28d      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b0e:	4b93      	ldr	r3, [pc, #588]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	@ 0x80
 8001b14:	029b      	lsls	r3, r3, #10
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0xcc>
 8001b1a:	e015      	b.n	8001b48 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fbc8 	bl	80012b0 <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b24:	e008      	b.n	8001b38 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b26:	f7ff fbc3 	bl	80012b0 <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b64      	cmp	r3, #100	@ 0x64
 8001b32:	d901      	bls.n	8001b38 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e278      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b38:	4b88      	ldr	r3, [pc, #544]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	@ 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0xf6>
 8001b44:	e000      	b.n	8001b48 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b46:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d100      	bne.n	8001b54 <HAL_RCC_OscConfig+0x124>
 8001b52:	e099      	b.n	8001c88 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b54:	4b81      	ldr	r3, [pc, #516]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	2238      	movs	r2, #56	@ 0x38
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5e:	4b7f      	ldr	r3, [pc, #508]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2203      	movs	r2, #3
 8001b64:	4013      	ands	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b10      	cmp	r3, #16
 8001b6c:	d102      	bne.n	8001b74 <HAL_RCC_OscConfig+0x144>
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d002      	beq.n	8001b7a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001b74:	69bb      	ldr	r3, [r7, #24]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d135      	bne.n	8001be6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b7a:	4b78      	ldr	r3, [pc, #480]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	00db      	lsls	r3, r3, #3
 8001b82:	4013      	ands	r3, r2
 8001b84:	d005      	beq.n	8001b92 <HAL_RCC_OscConfig+0x162>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e24b      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b92:	4b72      	ldr	r3, [pc, #456]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	4a74      	ldr	r2, [pc, #464]	@ (8001d68 <HAL_RCC_OscConfig+0x338>)
 8001b98:	4013      	ands	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	021a      	lsls	r2, r3, #8
 8001ba2:	4b6e      	ldr	r3, [pc, #440]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ba4:	430a      	orrs	r2, r1
 8001ba6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d112      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bae:	4b6b      	ldr	r3, [pc, #428]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d6c <HAL_RCC_OscConfig+0x33c>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	4b67      	ldr	r3, [pc, #412]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bc2:	4b66      	ldr	r3, [pc, #408]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	0adb      	lsrs	r3, r3, #11
 8001bc8:	2207      	movs	r2, #7
 8001bca:	4013      	ands	r3, r2
 8001bcc:	4a68      	ldr	r2, [pc, #416]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001bce:	40da      	lsrs	r2, r3
 8001bd0:	4b68      	ldr	r3, [pc, #416]	@ (8001d74 <HAL_RCC_OscConfig+0x344>)
 8001bd2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bd4:	4b68      	ldr	r3, [pc, #416]	@ (8001d78 <HAL_RCC_OscConfig+0x348>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	0018      	movs	r0, r3
 8001bda:	f7ff fb0d 	bl	80011f8 <HAL_InitTick>
 8001bde:	1e03      	subs	r3, r0, #0
 8001be0:	d051      	beq.n	8001c86 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e221      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d030      	beq.n	8001c50 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bee:	4b5b      	ldr	r3, [pc, #364]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a5e      	ldr	r2, [pc, #376]	@ (8001d6c <HAL_RCC_OscConfig+0x33c>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	0019      	movs	r1, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691a      	ldr	r2, [r3, #16]
 8001bfc:	4b57      	ldr	r3, [pc, #348]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c02:	4b56      	ldr	r3, [pc, #344]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	4b55      	ldr	r3, [pc, #340]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c08:	2180      	movs	r1, #128	@ 0x80
 8001c0a:	0049      	lsls	r1, r1, #1
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff fb4e 	bl	80012b0 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb49 	bl	80012b0 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1fe      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	2380      	movs	r3, #128	@ 0x80
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4013      	ands	r3, r2
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b48      	ldr	r3, [pc, #288]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d68 <HAL_RCC_OscConfig+0x338>)
 8001c3e:	4013      	ands	r3, r2
 8001c40:	0019      	movs	r1, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	695b      	ldr	r3, [r3, #20]
 8001c46:	021a      	lsls	r2, r3, #8
 8001c48:	4b44      	ldr	r3, [pc, #272]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	e01b      	b.n	8001c88 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c50:	4b42      	ldr	r3, [pc, #264]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	4b41      	ldr	r3, [pc, #260]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c56:	4949      	ldr	r1, [pc, #292]	@ (8001d7c <HAL_RCC_OscConfig+0x34c>)
 8001c58:	400a      	ands	r2, r1
 8001c5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff fb28 	bl	80012b0 <HAL_GetTick>
 8001c60:	0003      	movs	r3, r0
 8001c62:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fb23 	bl	80012b0 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1d8      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c78:	4b38      	ldr	r3, [pc, #224]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	@ 0x80
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4013      	ands	r3, r2
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x236>
 8001c84:	e000      	b.n	8001c88 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c86:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2208      	movs	r2, #8
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d047      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001c92:	4b32      	ldr	r3, [pc, #200]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2238      	movs	r2, #56	@ 0x38
 8001c98:	4013      	ands	r3, r2
 8001c9a:	2b18      	cmp	r3, #24
 8001c9c:	d10a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d03c      	beq.n	8001d22 <HAL_RCC_OscConfig+0x2f2>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d138      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e1ba      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	699b      	ldr	r3, [r3, #24]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d019      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cbc:	4b27      	ldr	r3, [pc, #156]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cc0:	4b26      	ldr	r3, [pc, #152]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff faf2 	bl	80012b0 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd2:	f7ff faed 	bl	80012b0 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e1a2      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ce4:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce8:	2202      	movs	r2, #2
 8001cea:	4013      	ands	r3, r2
 8001cec:	d0f1      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x2a2>
 8001cee:	e018      	b.n	8001d22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001cf2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cf4:	4b19      	ldr	r3, [pc, #100]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	438a      	bics	r2, r1
 8001cfa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fad8 	bl	80012b0 <HAL_GetTick>
 8001d00:	0003      	movs	r3, r0
 8001d02:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d06:	f7ff fad3 	bl	80012b0 <HAL_GetTick>
 8001d0a:	0002      	movs	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e188      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d18:	4b10      	ldr	r3, [pc, #64]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d1c:	2202      	movs	r2, #2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d1f1      	bne.n	8001d06 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2204      	movs	r2, #4
 8001d28:	4013      	ands	r3, r2
 8001d2a:	d100      	bne.n	8001d2e <HAL_RCC_OscConfig+0x2fe>
 8001d2c:	e0c6      	b.n	8001ebc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	231f      	movs	r3, #31
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2200      	movs	r2, #0
 8001d34:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	2238      	movs	r2, #56	@ 0x38
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	2b20      	cmp	r3, #32
 8001d40:	d11e      	bne.n	8001d80 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_RCC_OscConfig+0x32c>)
 8001d44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d46:	2202      	movs	r2, #2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	d100      	bne.n	8001d4e <HAL_RCC_OscConfig+0x31e>
 8001d4c:	e0b6      	b.n	8001ebc <HAL_RCC_OscConfig+0x48c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d000      	beq.n	8001d58 <HAL_RCC_OscConfig+0x328>
 8001d56:	e0b1      	b.n	8001ebc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e166      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	fffeffff 	.word	0xfffeffff
 8001d64:	fffbffff 	.word	0xfffbffff
 8001d68:	ffff80ff 	.word	0xffff80ff
 8001d6c:	ffffc7ff 	.word	0xffffc7ff
 8001d70:	00f42400 	.word	0x00f42400
 8001d74:	20000038 	.word	0x20000038
 8001d78:	2000003c 	.word	0x2000003c
 8001d7c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d80:	4bac      	ldr	r3, [pc, #688]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	055b      	lsls	r3, r3, #21
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_RCC_OscConfig+0x360>
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x362>
 8001d90:	2300      	movs	r3, #0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d011      	beq.n	8001dba <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001d96:	4ba7      	ldr	r3, [pc, #668]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001d98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001d9a:	4ba6      	ldr	r3, [pc, #664]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001d9c:	2180      	movs	r1, #128	@ 0x80
 8001d9e:	0549      	lsls	r1, r1, #21
 8001da0:	430a      	orrs	r2, r1
 8001da2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001da4:	4ba3      	ldr	r3, [pc, #652]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001da6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001da8:	2380      	movs	r3, #128	@ 0x80
 8001daa:	055b      	lsls	r3, r3, #21
 8001dac:	4013      	ands	r3, r2
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001db2:	231f      	movs	r3, #31
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	2201      	movs	r2, #1
 8001db8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dba:	4b9f      	ldr	r3, [pc, #636]	@ (8002038 <HAL_RCC_OscConfig+0x608>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	2380      	movs	r3, #128	@ 0x80
 8001dc0:	005b      	lsls	r3, r3, #1
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	d11a      	bne.n	8001dfc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dc6:	4b9c      	ldr	r3, [pc, #624]	@ (8002038 <HAL_RCC_OscConfig+0x608>)
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	4b9b      	ldr	r3, [pc, #620]	@ (8002038 <HAL_RCC_OscConfig+0x608>)
 8001dcc:	2180      	movs	r1, #128	@ 0x80
 8001dce:	0049      	lsls	r1, r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001dd4:	f7ff fa6c 	bl	80012b0 <HAL_GetTick>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dde:	f7ff fa67 	bl	80012b0 <HAL_GetTick>
 8001de2:	0002      	movs	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e11c      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df0:	4b91      	ldr	r3, [pc, #580]	@ (8002038 <HAL_RCC_OscConfig+0x608>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	2380      	movs	r3, #128	@ 0x80
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	4013      	ands	r3, r2
 8001dfa:	d0f0      	beq.n	8001dde <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x3e2>
 8001e04:	4b8b      	ldr	r3, [pc, #556]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e08:	4b8a      	ldr	r3, [pc, #552]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e10:	e01c      	b.n	8001e4c <HAL_RCC_OscConfig+0x41c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x404>
 8001e1a:	4b86      	ldr	r3, [pc, #536]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e1c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e1e:	4b85      	ldr	r3, [pc, #532]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e20:	2104      	movs	r1, #4
 8001e22:	430a      	orrs	r2, r1
 8001e24:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e26:	4b83      	ldr	r3, [pc, #524]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e2a:	4b82      	ldr	r3, [pc, #520]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e32:	e00b      	b.n	8001e4c <HAL_RCC_OscConfig+0x41c>
 8001e34:	4b7f      	ldr	r3, [pc, #508]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e36:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e38:	4b7e      	ldr	r3, [pc, #504]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	438a      	bics	r2, r1
 8001e3e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e40:	4b7c      	ldr	r3, [pc, #496]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e42:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e44:	4b7b      	ldr	r3, [pc, #492]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e46:	2104      	movs	r1, #4
 8001e48:	438a      	bics	r2, r1
 8001e4a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d014      	beq.n	8001e7e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e54:	f7ff fa2c 	bl	80012b0 <HAL_GetTick>
 8001e58:	0003      	movs	r3, r0
 8001e5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5c:	e009      	b.n	8001e72 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5e:	f7ff fa27 	bl	80012b0 <HAL_GetTick>
 8001e62:	0002      	movs	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	4a74      	ldr	r2, [pc, #464]	@ (800203c <HAL_RCC_OscConfig+0x60c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e0db      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b70      	ldr	r3, [pc, #448]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e76:	2202      	movs	r2, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0f0      	beq.n	8001e5e <HAL_RCC_OscConfig+0x42e>
 8001e7c:	e013      	b.n	8001ea6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e7e:	f7ff fa17 	bl	80012b0 <HAL_GetTick>
 8001e82:	0003      	movs	r3, r0
 8001e84:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e86:	e009      	b.n	8001e9c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e88:	f7ff fa12 	bl	80012b0 <HAL_GetTick>
 8001e8c:	0002      	movs	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	4a6a      	ldr	r2, [pc, #424]	@ (800203c <HAL_RCC_OscConfig+0x60c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0c6      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e9c:	4b65      	ldr	r3, [pc, #404]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ea0:	2202      	movs	r2, #2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ea6:	231f      	movs	r3, #31
 8001ea8:	18fb      	adds	r3, r7, r3
 8001eaa:	781b      	ldrb	r3, [r3, #0]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d105      	bne.n	8001ebc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001eb0:	4b60      	ldr	r3, [pc, #384]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001eb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eb4:	4b5f      	ldr	r3, [pc, #380]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001eb6:	4962      	ldr	r1, [pc, #392]	@ (8002040 <HAL_RCC_OscConfig+0x610>)
 8001eb8:	400a      	ands	r2, r1
 8001eba:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d100      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x496>
 8001ec4:	e0b0      	b.n	8002028 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2238      	movs	r2, #56	@ 0x38
 8001ecc:	4013      	ands	r3, r2
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d100      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x4a4>
 8001ed2:	e078      	b.n	8001fc6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d153      	bne.n	8001f84 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001edc:	4b55      	ldr	r3, [pc, #340]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	4b54      	ldr	r3, [pc, #336]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001ee2:	4958      	ldr	r1, [pc, #352]	@ (8002044 <HAL_RCC_OscConfig+0x614>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff f9e2 	bl	80012b0 <HAL_GetTick>
 8001eec:	0003      	movs	r3, r0
 8001eee:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ef0:	e008      	b.n	8001f04 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ef2:	f7ff f9dd 	bl	80012b0 <HAL_GetTick>
 8001ef6:	0002      	movs	r2, r0
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d901      	bls.n	8001f04 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f00:	2303      	movs	r3, #3
 8001f02:	e092      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f04:	4b4b      	ldr	r3, [pc, #300]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	2380      	movs	r3, #128	@ 0x80
 8001f0a:	049b      	lsls	r3, r3, #18
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	d1f0      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f10:	4b48      	ldr	r3, [pc, #288]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a4c      	ldr	r2, [pc, #304]	@ (8002048 <HAL_RCC_OscConfig+0x618>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	0019      	movs	r1, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a1a      	ldr	r2, [r3, #32]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	431a      	orrs	r2, r3
 8001f38:	4b3e      	ldr	r3, [pc, #248]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f3e:	4b3d      	ldr	r3, [pc, #244]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	4b3c      	ldr	r3, [pc, #240]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	0449      	lsls	r1, r1, #17
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f4c:	4b39      	ldr	r3, [pc, #228]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f4e:	68da      	ldr	r2, [r3, #12]
 8001f50:	4b38      	ldr	r3, [pc, #224]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f52:	2180      	movs	r1, #128	@ 0x80
 8001f54:	0549      	lsls	r1, r1, #21
 8001f56:	430a      	orrs	r2, r1
 8001f58:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5a:	f7ff f9a9 	bl	80012b0 <HAL_GetTick>
 8001f5e:	0003      	movs	r3, r0
 8001f60:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f64:	f7ff f9a4 	bl	80012b0 <HAL_GetTick>
 8001f68:	0002      	movs	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e059      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f76:	4b2f      	ldr	r3, [pc, #188]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	2380      	movs	r3, #128	@ 0x80
 8001f7c:	049b      	lsls	r3, r3, #18
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x534>
 8001f82:	e051      	b.n	8002028 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f84:	4b2b      	ldr	r3, [pc, #172]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b2a      	ldr	r3, [pc, #168]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001f8a:	492e      	ldr	r1, [pc, #184]	@ (8002044 <HAL_RCC_OscConfig+0x614>)
 8001f8c:	400a      	ands	r2, r1
 8001f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f90:	f7ff f98e 	bl	80012b0 <HAL_GetTick>
 8001f94:	0003      	movs	r3, r0
 8001f96:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f98:	e008      	b.n	8001fac <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9a:	f7ff f989 	bl	80012b0 <HAL_GetTick>
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b02      	cmp	r3, #2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e03e      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fac:	4b21      	ldr	r3, [pc, #132]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	049b      	lsls	r3, r3, #18
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001fbe:	4923      	ldr	r1, [pc, #140]	@ (800204c <HAL_RCC_OscConfig+0x61c>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]
 8001fc4:	e030      	b.n	8002028 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d101      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e02b      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001fd2:	4b18      	ldr	r3, [pc, #96]	@ (8002034 <HAL_RCC_OscConfig+0x604>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	2203      	movs	r2, #3
 8001fdc:	401a      	ands	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d11e      	bne.n	8002024 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	2270      	movs	r2, #112	@ 0x70
 8001fea:	401a      	ands	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	d117      	bne.n	8002024 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	23fe      	movs	r3, #254	@ 0xfe
 8001ff8:	01db      	lsls	r3, r3, #7
 8001ffa:	401a      	ands	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002000:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002002:	429a      	cmp	r2, r3
 8002004:	d10e      	bne.n	8002024 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	23f8      	movs	r3, #248	@ 0xf8
 800200a:	039b      	lsls	r3, r3, #14
 800200c:	401a      	ands	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d106      	bne.n	8002024 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	0f5b      	lsrs	r3, r3, #29
 800201a:	075a      	lsls	r2, r3, #29
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002020:	429a      	cmp	r2, r3
 8002022:	d001      	beq.n	8002028 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e000      	b.n	800202a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b008      	add	sp, #32
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			@ (mov r8, r8)
 8002034:	40021000 	.word	0x40021000
 8002038:	40007000 	.word	0x40007000
 800203c:	00001388 	.word	0x00001388
 8002040:	efffffff 	.word	0xefffffff
 8002044:	feffffff 	.word	0xfeffffff
 8002048:	1fc1808c 	.word	0x1fc1808c
 800204c:	effefffc 	.word	0xeffefffc

08002050 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d101      	bne.n	8002064 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e0e9      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002064:	4b76      	ldr	r3, [pc, #472]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2207      	movs	r2, #7
 800206a:	4013      	ands	r3, r2
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d91e      	bls.n	80020b0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002072:	4b73      	ldr	r3, [pc, #460]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	2207      	movs	r2, #7
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	4b70      	ldr	r3, [pc, #448]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 800207e:	683a      	ldr	r2, [r7, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002084:	f7ff f914 	bl	80012b0 <HAL_GetTick>
 8002088:	0003      	movs	r3, r0
 800208a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800208c:	e009      	b.n	80020a2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800208e:	f7ff f90f 	bl	80012b0 <HAL_GetTick>
 8002092:	0002      	movs	r2, r0
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	4a6a      	ldr	r2, [pc, #424]	@ (8002244 <HAL_RCC_ClockConfig+0x1f4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d901      	bls.n	80020a2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800209e:	2303      	movs	r3, #3
 80020a0:	e0ca      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020a2:	4b67      	ldr	r3, [pc, #412]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2207      	movs	r2, #7
 80020a8:	4013      	ands	r3, r2
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d1ee      	bne.n	800208e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2202      	movs	r2, #2
 80020b6:	4013      	ands	r3, r2
 80020b8:	d015      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2204      	movs	r2, #4
 80020c0:	4013      	ands	r3, r2
 80020c2:	d006      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020c4:	4b60      	ldr	r3, [pc, #384]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	4b5f      	ldr	r3, [pc, #380]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 80020ca:	21e0      	movs	r1, #224	@ 0xe0
 80020cc:	01c9      	lsls	r1, r1, #7
 80020ce:	430a      	orrs	r2, r1
 80020d0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	4a5d      	ldr	r2, [pc, #372]	@ (800224c <HAL_RCC_ClockConfig+0x1fc>)
 80020d8:	4013      	ands	r3, r2
 80020da:	0019      	movs	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	4b59      	ldr	r3, [pc, #356]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4013      	ands	r3, r2
 80020ee:	d057      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d107      	bne.n	8002108 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020f8:	4b53      	ldr	r3, [pc, #332]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2380      	movs	r3, #128	@ 0x80
 80020fe:	029b      	lsls	r3, r3, #10
 8002100:	4013      	ands	r3, r2
 8002102:	d12b      	bne.n	800215c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e097      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d107      	bne.n	8002120 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002110:	4b4d      	ldr	r3, [pc, #308]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	@ 0x80
 8002116:	049b      	lsls	r3, r3, #18
 8002118:	4013      	ands	r3, r2
 800211a:	d11f      	bne.n	800215c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e08b      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d107      	bne.n	8002138 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002128:	4b47      	ldr	r3, [pc, #284]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4013      	ands	r3, r2
 8002132:	d113      	bne.n	800215c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e07f      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b03      	cmp	r3, #3
 800213e:	d106      	bne.n	800214e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002140:	4b41      	ldr	r3, [pc, #260]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 8002142:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002144:	2202      	movs	r2, #2
 8002146:	4013      	ands	r3, r2
 8002148:	d108      	bne.n	800215c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e074      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214e:	4b3e      	ldr	r3, [pc, #248]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	2202      	movs	r2, #2
 8002154:	4013      	ands	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e06d      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800215c:	4b3a      	ldr	r3, [pc, #232]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2207      	movs	r2, #7
 8002162:	4393      	bics	r3, r2
 8002164:	0019      	movs	r1, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4b37      	ldr	r3, [pc, #220]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002170:	f7ff f89e 	bl	80012b0 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002178:	e009      	b.n	800218e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800217a:	f7ff f899 	bl	80012b0 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	4a2f      	ldr	r2, [pc, #188]	@ (8002244 <HAL_RCC_ClockConfig+0x1f4>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e054      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800218e:	4b2e      	ldr	r3, [pc, #184]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2238      	movs	r2, #56	@ 0x38
 8002194:	401a      	ands	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	429a      	cmp	r2, r3
 800219e:	d1ec      	bne.n	800217a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021a0:	4b27      	ldr	r3, [pc, #156]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2207      	movs	r2, #7
 80021a6:	4013      	ands	r3, r2
 80021a8:	683a      	ldr	r2, [r7, #0]
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d21e      	bcs.n	80021ec <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ae:	4b24      	ldr	r3, [pc, #144]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2207      	movs	r2, #7
 80021b4:	4393      	bics	r3, r2
 80021b6:	0019      	movs	r1, r3
 80021b8:	4b21      	ldr	r3, [pc, #132]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021c0:	f7ff f876 	bl	80012b0 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021c8:	e009      	b.n	80021de <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021ca:	f7ff f871 	bl	80012b0 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	4a1b      	ldr	r2, [pc, #108]	@ (8002244 <HAL_RCC_ClockConfig+0x1f4>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e02c      	b.n	8002238 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2207      	movs	r2, #7
 80021e4:	4013      	ands	r3, r2
 80021e6:	683a      	ldr	r2, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d1ee      	bne.n	80021ca <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2204      	movs	r2, #4
 80021f2:	4013      	ands	r3, r2
 80021f4:	d009      	beq.n	800220a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80021f6:	4b14      	ldr	r3, [pc, #80]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4a15      	ldr	r2, [pc, #84]	@ (8002250 <HAL_RCC_ClockConfig+0x200>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	0019      	movs	r1, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68da      	ldr	r2, [r3, #12]
 8002204:	4b10      	ldr	r3, [pc, #64]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 8002206:	430a      	orrs	r2, r1
 8002208:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800220a:	f000 f829 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 800220e:	0001      	movs	r1, r0
 8002210:	4b0d      	ldr	r3, [pc, #52]	@ (8002248 <HAL_RCC_ClockConfig+0x1f8>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	220f      	movs	r2, #15
 8002218:	401a      	ands	r2, r3
 800221a:	4b0e      	ldr	r3, [pc, #56]	@ (8002254 <HAL_RCC_ClockConfig+0x204>)
 800221c:	0092      	lsls	r2, r2, #2
 800221e:	58d3      	ldr	r3, [r2, r3]
 8002220:	221f      	movs	r2, #31
 8002222:	4013      	ands	r3, r2
 8002224:	000a      	movs	r2, r1
 8002226:	40da      	lsrs	r2, r3
 8002228:	4b0b      	ldr	r3, [pc, #44]	@ (8002258 <HAL_RCC_ClockConfig+0x208>)
 800222a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_RCC_ClockConfig+0x20c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f7fe ffe1 	bl	80011f8 <HAL_InitTick>
 8002236:	0003      	movs	r3, r0
}
 8002238:	0018      	movs	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	b004      	add	sp, #16
 800223e:	bd80      	pop	{r7, pc}
 8002240:	40022000 	.word	0x40022000
 8002244:	00001388 	.word	0x00001388
 8002248:	40021000 	.word	0x40021000
 800224c:	fffff0ff 	.word	0xfffff0ff
 8002250:	ffff8fff 	.word	0xffff8fff
 8002254:	080057e0 	.word	0x080057e0
 8002258:	20000038 	.word	0x20000038
 800225c:	2000003c 	.word	0x2000003c

08002260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b086      	sub	sp, #24
 8002264:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b3c      	ldr	r3, [pc, #240]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	2238      	movs	r2, #56	@ 0x38
 800226c:	4013      	ands	r3, r2
 800226e:	d10f      	bne.n	8002290 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002270:	4b39      	ldr	r3, [pc, #228]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	0adb      	lsrs	r3, r3, #11
 8002276:	2207      	movs	r2, #7
 8002278:	4013      	ands	r3, r2
 800227a:	2201      	movs	r2, #1
 800227c:	409a      	lsls	r2, r3
 800227e:	0013      	movs	r3, r2
 8002280:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002282:	6839      	ldr	r1, [r7, #0]
 8002284:	4835      	ldr	r0, [pc, #212]	@ (800235c <HAL_RCC_GetSysClockFreq+0xfc>)
 8002286:	f7fd ff4d 	bl	8000124 <__udivsi3>
 800228a:	0003      	movs	r3, r0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	e05d      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002290:	4b31      	ldr	r3, [pc, #196]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2238      	movs	r2, #56	@ 0x38
 8002296:	4013      	ands	r3, r2
 8002298:	2b08      	cmp	r3, #8
 800229a:	d102      	bne.n	80022a2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800229c:	4b30      	ldr	r3, [pc, #192]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x100>)
 800229e:	613b      	str	r3, [r7, #16]
 80022a0:	e054      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022a2:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	2238      	movs	r2, #56	@ 0x38
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b10      	cmp	r3, #16
 80022ac:	d138      	bne.n	8002320 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2203      	movs	r2, #3
 80022b4:	4013      	ands	r3, r2
 80022b6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022b8:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	091b      	lsrs	r3, r3, #4
 80022be:	2207      	movs	r2, #7
 80022c0:	4013      	ands	r3, r2
 80022c2:	3301      	adds	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	4824      	ldr	r0, [pc, #144]	@ (8002360 <HAL_RCC_GetSysClockFreq+0x100>)
 80022d0:	f7fd ff28 	bl	8000124 <__udivsi3>
 80022d4:	0003      	movs	r3, r0
 80022d6:	0019      	movs	r1, r3
 80022d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	227f      	movs	r2, #127	@ 0x7f
 80022e0:	4013      	ands	r3, r2
 80022e2:	434b      	muls	r3, r1
 80022e4:	617b      	str	r3, [r7, #20]
        break;
 80022e6:	e00d      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80022e8:	68b9      	ldr	r1, [r7, #8]
 80022ea:	481c      	ldr	r0, [pc, #112]	@ (800235c <HAL_RCC_GetSysClockFreq+0xfc>)
 80022ec:	f7fd ff1a 	bl	8000124 <__udivsi3>
 80022f0:	0003      	movs	r3, r0
 80022f2:	0019      	movs	r1, r3
 80022f4:	4b18      	ldr	r3, [pc, #96]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	227f      	movs	r2, #127	@ 0x7f
 80022fc:	4013      	ands	r3, r2
 80022fe:	434b      	muls	r3, r1
 8002300:	617b      	str	r3, [r7, #20]
        break;
 8002302:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002304:	4b14      	ldr	r3, [pc, #80]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	0f5b      	lsrs	r3, r3, #29
 800230a:	2207      	movs	r2, #7
 800230c:	4013      	ands	r3, r2
 800230e:	3301      	adds	r3, #1
 8002310:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	6978      	ldr	r0, [r7, #20]
 8002316:	f7fd ff05 	bl	8000124 <__udivsi3>
 800231a:	0003      	movs	r3, r0
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	e015      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002320:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2238      	movs	r2, #56	@ 0x38
 8002326:	4013      	ands	r3, r2
 8002328:	2b20      	cmp	r3, #32
 800232a:	d103      	bne.n	8002334 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800232c:	2380      	movs	r3, #128	@ 0x80
 800232e:	021b      	lsls	r3, r3, #8
 8002330:	613b      	str	r3, [r7, #16]
 8002332:	e00b      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002334:	4b08      	ldr	r3, [pc, #32]	@ (8002358 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2238      	movs	r2, #56	@ 0x38
 800233a:	4013      	ands	r3, r2
 800233c:	2b18      	cmp	r3, #24
 800233e:	d103      	bne.n	8002348 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002340:	23fa      	movs	r3, #250	@ 0xfa
 8002342:	01db      	lsls	r3, r3, #7
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	e001      	b.n	800234c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800234c:	693b      	ldr	r3, [r7, #16]
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b006      	add	sp, #24
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	40021000 	.word	0x40021000
 800235c:	00f42400 	.word	0x00f42400
 8002360:	007a1200 	.word	0x007a1200

08002364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002368:	4b02      	ldr	r3, [pc, #8]	@ (8002374 <HAL_RCC_GetHCLKFreq+0x10>)
 800236a:	681b      	ldr	r3, [r3, #0]
}
 800236c:	0018      	movs	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	46c0      	nop			@ (mov r8, r8)
 8002374:	20000038 	.word	0x20000038

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800237c:	f7ff fff2 	bl	8002364 <HAL_RCC_GetHCLKFreq>
 8002380:	0004      	movs	r4, r0
 8002382:	f7ff fb49 	bl	8001a18 <LL_RCC_GetAPB1Prescaler>
 8002386:	0003      	movs	r3, r0
 8002388:	0b1a      	lsrs	r2, r3, #12
 800238a:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800238c:	0092      	lsls	r2, r2, #2
 800238e:	58d3      	ldr	r3, [r2, r3]
 8002390:	221f      	movs	r2, #31
 8002392:	4013      	ands	r3, r2
 8002394:	40dc      	lsrs	r4, r3
 8002396:	0023      	movs	r3, r4
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	bdb0      	pop	{r4, r5, r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	08005820 	.word	0x08005820

080023a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b082      	sub	sp, #8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e046      	b.n	8002444 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2288      	movs	r2, #136	@ 0x88
 80023ba:	589b      	ldr	r3, [r3, r2]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d107      	bne.n	80023d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2284      	movs	r2, #132	@ 0x84
 80023c4:	2100      	movs	r1, #0
 80023c6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	0018      	movs	r0, r3
 80023cc:	f7fe fdce 	bl	8000f6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2288      	movs	r2, #136	@ 0x88
 80023d4:	2124      	movs	r1, #36	@ 0x24
 80023d6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	438a      	bics	r2, r1
 80023e6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fea0 	bl	8003138 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	0018      	movs	r0, r3
 80023fc:	f000 fcf8 	bl	8002df0 <UART_SetConfig>
 8002400:	0003      	movs	r3, r0
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e01c      	b.n	8002444 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	490d      	ldr	r1, [pc, #52]	@ (800244c <HAL_UART_Init+0xa8>)
 8002416:	400a      	ands	r2, r1
 8002418:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	212a      	movs	r1, #42	@ 0x2a
 8002426:	438a      	bics	r2, r1
 8002428:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2101      	movs	r1, #1
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	0018      	movs	r0, r3
 800243e:	f000 ff2f 	bl	80032a0 <UART_CheckIdleState>
 8002442:	0003      	movs	r3, r0
}
 8002444:	0018      	movs	r0, r3
 8002446:	46bd      	mov	sp, r7
 8002448:	b002      	add	sp, #8
 800244a:	bd80      	pop	{r7, pc}
 800244c:	ffffb7ff 	.word	0xffffb7ff

08002450 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b08a      	sub	sp, #40	@ 0x28
 8002454:	af02      	add	r7, sp, #8
 8002456:	60f8      	str	r0, [r7, #12]
 8002458:	60b9      	str	r1, [r7, #8]
 800245a:	603b      	str	r3, [r7, #0]
 800245c:	1dbb      	adds	r3, r7, #6
 800245e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	228c      	movs	r2, #140	@ 0x8c
 8002464:	589b      	ldr	r3, [r3, r2]
 8002466:	2b20      	cmp	r3, #32
 8002468:	d000      	beq.n	800246c <HAL_UART_Receive+0x1c>
 800246a:	e0d0      	b.n	800260e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_UART_Receive+0x2a>
 8002472:	1dbb      	adds	r3, r7, #6
 8002474:	881b      	ldrh	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0c8      	b.n	8002610 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689a      	ldr	r2, [r3, #8]
 8002482:	2380      	movs	r3, #128	@ 0x80
 8002484:	015b      	lsls	r3, r3, #5
 8002486:	429a      	cmp	r2, r3
 8002488:	d109      	bne.n	800249e <HAL_UART_Receive+0x4e>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	2201      	movs	r2, #1
 8002496:	4013      	ands	r3, r2
 8002498:	d001      	beq.n	800249e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0b8      	b.n	8002610 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2290      	movs	r2, #144	@ 0x90
 80024a2:	2100      	movs	r1, #0
 80024a4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	228c      	movs	r2, #140	@ 0x8c
 80024aa:	2122      	movs	r1, #34	@ 0x22
 80024ac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80024b4:	f7fe fefc 	bl	80012b0 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	1dba      	adds	r2, r7, #6
 80024c0:	215c      	movs	r1, #92	@ 0x5c
 80024c2:	8812      	ldrh	r2, [r2, #0]
 80024c4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1dba      	adds	r2, r7, #6
 80024ca:	215e      	movs	r1, #94	@ 0x5e
 80024cc:	8812      	ldrh	r2, [r2, #0]
 80024ce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	2380      	movs	r3, #128	@ 0x80
 80024d6:	015b      	lsls	r3, r3, #5
 80024d8:	429a      	cmp	r2, r3
 80024da:	d10d      	bne.n	80024f8 <HAL_UART_Receive+0xa8>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	691b      	ldr	r3, [r3, #16]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d104      	bne.n	80024ee <HAL_UART_Receive+0x9e>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2260      	movs	r2, #96	@ 0x60
 80024e8:	494b      	ldr	r1, [pc, #300]	@ (8002618 <HAL_UART_Receive+0x1c8>)
 80024ea:	5299      	strh	r1, [r3, r2]
 80024ec:	e02e      	b.n	800254c <HAL_UART_Receive+0xfc>
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2260      	movs	r2, #96	@ 0x60
 80024f2:	21ff      	movs	r1, #255	@ 0xff
 80024f4:	5299      	strh	r1, [r3, r2]
 80024f6:	e029      	b.n	800254c <HAL_UART_Receive+0xfc>
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10d      	bne.n	800251c <HAL_UART_Receive+0xcc>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d104      	bne.n	8002512 <HAL_UART_Receive+0xc2>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2260      	movs	r2, #96	@ 0x60
 800250c:	21ff      	movs	r1, #255	@ 0xff
 800250e:	5299      	strh	r1, [r3, r2]
 8002510:	e01c      	b.n	800254c <HAL_UART_Receive+0xfc>
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2260      	movs	r2, #96	@ 0x60
 8002516:	217f      	movs	r1, #127	@ 0x7f
 8002518:	5299      	strh	r1, [r3, r2]
 800251a:	e017      	b.n	800254c <HAL_UART_Receive+0xfc>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	2380      	movs	r3, #128	@ 0x80
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	429a      	cmp	r2, r3
 8002526:	d10d      	bne.n	8002544 <HAL_UART_Receive+0xf4>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d104      	bne.n	800253a <HAL_UART_Receive+0xea>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2260      	movs	r2, #96	@ 0x60
 8002534:	217f      	movs	r1, #127	@ 0x7f
 8002536:	5299      	strh	r1, [r3, r2]
 8002538:	e008      	b.n	800254c <HAL_UART_Receive+0xfc>
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2260      	movs	r2, #96	@ 0x60
 800253e:	213f      	movs	r1, #63	@ 0x3f
 8002540:	5299      	strh	r1, [r3, r2]
 8002542:	e003      	b.n	800254c <HAL_UART_Receive+0xfc>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2260      	movs	r2, #96	@ 0x60
 8002548:	2100      	movs	r1, #0
 800254a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800254c:	2312      	movs	r3, #18
 800254e:	18fb      	adds	r3, r7, r3
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	2160      	movs	r1, #96	@ 0x60
 8002554:	5a52      	ldrh	r2, [r2, r1]
 8002556:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	689a      	ldr	r2, [r3, #8]
 800255c:	2380      	movs	r3, #128	@ 0x80
 800255e:	015b      	lsls	r3, r3, #5
 8002560:	429a      	cmp	r2, r3
 8002562:	d108      	bne.n	8002576 <HAL_UART_Receive+0x126>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d104      	bne.n	8002576 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 800256c:	2300      	movs	r3, #0
 800256e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	61bb      	str	r3, [r7, #24]
 8002574:	e003      	b.n	800257e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800257a:	2300      	movs	r3, #0
 800257c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800257e:	e03a      	b.n	80025f6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	9300      	str	r3, [sp, #0]
 8002588:	0013      	movs	r3, r2
 800258a:	2200      	movs	r2, #0
 800258c:	2120      	movs	r1, #32
 800258e:	f000 ff31 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8002592:	1e03      	subs	r3, r0, #0
 8002594:	d005      	beq.n	80025a2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	228c      	movs	r2, #140	@ 0x8c
 800259a:	2120      	movs	r1, #32
 800259c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e036      	b.n	8002610 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10e      	bne.n	80025c6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2212      	movs	r2, #18
 80025b2:	18ba      	adds	r2, r7, r2
 80025b4:	8812      	ldrh	r2, [r2, #0]
 80025b6:	4013      	ands	r3, r2
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	3302      	adds	r3, #2
 80025c2:	61bb      	str	r3, [r7, #24]
 80025c4:	e00e      	b.n	80025e4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2212      	movs	r2, #18
 80025d0:	18ba      	adds	r2, r7, r2
 80025d2:	8812      	ldrh	r2, [r2, #0]
 80025d4:	b2d2      	uxtb	r2, r2
 80025d6:	4013      	ands	r3, r2
 80025d8:	b2da      	uxtb	r2, r3
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3301      	adds	r3, #1
 80025e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	225e      	movs	r2, #94	@ 0x5e
 80025e8:	5a9b      	ldrh	r3, [r3, r2]
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b299      	uxth	r1, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	225e      	movs	r2, #94	@ 0x5e
 80025f4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	225e      	movs	r2, #94	@ 0x5e
 80025fa:	5a9b      	ldrh	r3, [r3, r2]
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1be      	bne.n	8002580 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	228c      	movs	r2, #140	@ 0x8c
 8002606:	2120      	movs	r1, #32
 8002608:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800260a:	2300      	movs	r3, #0
 800260c:	e000      	b.n	8002610 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800260e:	2302      	movs	r3, #2
  }
}
 8002610:	0018      	movs	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	b008      	add	sp, #32
 8002616:	bd80      	pop	{r7, pc}
 8002618:	000001ff 	.word	0x000001ff

0800261c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08c      	sub	sp, #48	@ 0x30
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	1dbb      	adds	r3, r7, #6
 8002628:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2288      	movs	r2, #136	@ 0x88
 800262e:	589b      	ldr	r3, [r3, r2]
 8002630:	2b20      	cmp	r3, #32
 8002632:	d000      	beq.n	8002636 <HAL_UART_Transmit_IT+0x1a>
 8002634:	e08d      	b.n	8002752 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d003      	beq.n	8002644 <HAL_UART_Transmit_IT+0x28>
 800263c:	1dbb      	adds	r3, r7, #6
 800263e:	881b      	ldrh	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e085      	b.n	8002754 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	689a      	ldr	r2, [r3, #8]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	015b      	lsls	r3, r3, #5
 8002650:	429a      	cmp	r2, r3
 8002652:	d109      	bne.n	8002668 <HAL_UART_Transmit_IT+0x4c>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d105      	bne.n	8002668 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	2201      	movs	r2, #1
 8002660:	4013      	ands	r3, r2
 8002662:	d001      	beq.n	8002668 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002664:	2301      	movs	r3, #1
 8002666:	e075      	b.n	8002754 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	68ba      	ldr	r2, [r7, #8]
 800266c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	1dba      	adds	r2, r7, #6
 8002672:	2154      	movs	r1, #84	@ 0x54
 8002674:	8812      	ldrh	r2, [r2, #0]
 8002676:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	1dba      	adds	r2, r7, #6
 800267c:	2156      	movs	r1, #86	@ 0x56
 800267e:	8812      	ldrh	r2, [r2, #0]
 8002680:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2290      	movs	r2, #144	@ 0x90
 800268c:	2100      	movs	r1, #0
 800268e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2288      	movs	r2, #136	@ 0x88
 8002694:	2121      	movs	r1, #33	@ 0x21
 8002696:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800269c:	2380      	movs	r3, #128	@ 0x80
 800269e:	059b      	lsls	r3, r3, #22
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d12a      	bne.n	80026fa <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	2380      	movs	r3, #128	@ 0x80
 80026aa:	015b      	lsls	r3, r3, #5
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d107      	bne.n	80026c0 <HAL_UART_Transmit_IT+0xa4>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	4a28      	ldr	r2, [pc, #160]	@ (800275c <HAL_UART_Transmit_IT+0x140>)
 80026bc:	679a      	str	r2, [r3, #120]	@ 0x78
 80026be:	e002      	b.n	80026c6 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	4a27      	ldr	r2, [pc, #156]	@ (8002760 <HAL_UART_Transmit_IT+0x144>)
 80026c4:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026c6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80026cc:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80026d0:	2301      	movs	r3, #1
 80026d2:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	f383 8810 	msr	PRIMASK, r3
}
 80026da:	46c0      	nop			@ (mov r8, r8)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	689a      	ldr	r2, [r3, #8]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	2180      	movs	r1, #128	@ 0x80
 80026e8:	0409      	lsls	r1, r1, #16
 80026ea:	430a      	orrs	r2, r1
 80026ec:	609a      	str	r2, [r3, #8]
 80026ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f4:	f383 8810 	msr	PRIMASK, r3
}
 80026f8:	e029      	b.n	800274e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	689a      	ldr	r2, [r3, #8]
 80026fe:	2380      	movs	r3, #128	@ 0x80
 8002700:	015b      	lsls	r3, r3, #5
 8002702:	429a      	cmp	r2, r3
 8002704:	d107      	bne.n	8002716 <HAL_UART_Transmit_IT+0xfa>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d103      	bne.n	8002716 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4a14      	ldr	r2, [pc, #80]	@ (8002764 <HAL_UART_Transmit_IT+0x148>)
 8002712:	679a      	str	r2, [r3, #120]	@ 0x78
 8002714:	e002      	b.n	800271c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a13      	ldr	r2, [pc, #76]	@ (8002768 <HAL_UART_Transmit_IT+0x14c>)
 800271a:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271c:	f3ef 8310 	mrs	r3, PRIMASK
 8002720:	613b      	str	r3, [r7, #16]
  return(result);
 8002722:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002726:	2301      	movs	r3, #1
 8002728:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f383 8810 	msr	PRIMASK, r3
}
 8002730:	46c0      	nop			@ (mov r8, r8)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2180      	movs	r1, #128	@ 0x80
 800273e:	430a      	orrs	r2, r1
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002744:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	f383 8810 	msr	PRIMASK, r3
}
 800274c:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	e000      	b.n	8002754 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002752:	2302      	movs	r3, #2
  }
}
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	b00c      	add	sp, #48	@ 0x30
 800275a:	bd80      	pop	{r7, pc}
 800275c:	0800382d 	.word	0x0800382d
 8002760:	08003741 	.word	0x08003741
 8002764:	08003683 	.word	0x08003683
 8002768:	080035cf 	.word	0x080035cf

0800276c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800276c:	b5b0      	push	{r4, r5, r7, lr}
 800276e:	b0aa      	sub	sp, #168	@ 0xa8
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	22a4      	movs	r2, #164	@ 0xa4
 800277c:	18b9      	adds	r1, r7, r2
 800277e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	20a0      	movs	r0, #160	@ 0xa0
 8002788:	1839      	adds	r1, r7, r0
 800278a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	249c      	movs	r4, #156	@ 0x9c
 8002794:	1939      	adds	r1, r7, r4
 8002796:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002798:	0011      	movs	r1, r2
 800279a:	18bb      	adds	r3, r7, r2
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4aa2      	ldr	r2, [pc, #648]	@ (8002a28 <HAL_UART_IRQHandler+0x2bc>)
 80027a0:	4013      	ands	r3, r2
 80027a2:	2298      	movs	r2, #152	@ 0x98
 80027a4:	18bd      	adds	r5, r7, r2
 80027a6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80027a8:	18bb      	adds	r3, r7, r2
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11a      	bne.n	80027e6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2220      	movs	r2, #32
 80027b6:	4013      	ands	r3, r2
 80027b8:	d015      	beq.n	80027e6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80027ba:	183b      	adds	r3, r7, r0
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	2220      	movs	r2, #32
 80027c0:	4013      	ands	r3, r2
 80027c2:	d105      	bne.n	80027d0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80027c4:	193b      	adds	r3, r7, r4
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	055b      	lsls	r3, r3, #21
 80027cc:	4013      	ands	r3, r2
 80027ce:	d00a      	beq.n	80027e6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d100      	bne.n	80027da <HAL_UART_IRQHandler+0x6e>
 80027d8:	e2dc      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	0010      	movs	r0, r2
 80027e2:	4798      	blx	r3
      }
      return;
 80027e4:	e2d6      	b.n	8002d94 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80027e6:	2398      	movs	r3, #152	@ 0x98
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d100      	bne.n	80027f2 <HAL_UART_IRQHandler+0x86>
 80027f0:	e122      	b.n	8002a38 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80027f2:	239c      	movs	r3, #156	@ 0x9c
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a8c      	ldr	r2, [pc, #560]	@ (8002a2c <HAL_UART_IRQHandler+0x2c0>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	d106      	bne.n	800280c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80027fe:	23a0      	movs	r3, #160	@ 0xa0
 8002800:	18fb      	adds	r3, r7, r3
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a8a      	ldr	r2, [pc, #552]	@ (8002a30 <HAL_UART_IRQHandler+0x2c4>)
 8002806:	4013      	ands	r3, r2
 8002808:	d100      	bne.n	800280c <HAL_UART_IRQHandler+0xa0>
 800280a:	e115      	b.n	8002a38 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800280c:	23a4      	movs	r3, #164	@ 0xa4
 800280e:	18fb      	adds	r3, r7, r3
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2201      	movs	r2, #1
 8002814:	4013      	ands	r3, r2
 8002816:	d012      	beq.n	800283e <HAL_UART_IRQHandler+0xd2>
 8002818:	23a0      	movs	r3, #160	@ 0xa0
 800281a:	18fb      	adds	r3, r7, r3
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	@ 0x80
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	4013      	ands	r3, r2
 8002824:	d00b      	beq.n	800283e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2201      	movs	r2, #1
 800282c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2290      	movs	r2, #144	@ 0x90
 8002832:	589b      	ldr	r3, [r3, r2]
 8002834:	2201      	movs	r2, #1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2190      	movs	r1, #144	@ 0x90
 800283c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800283e:	23a4      	movs	r3, #164	@ 0xa4
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2202      	movs	r2, #2
 8002846:	4013      	ands	r3, r2
 8002848:	d011      	beq.n	800286e <HAL_UART_IRQHandler+0x102>
 800284a:	239c      	movs	r3, #156	@ 0x9c
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2201      	movs	r2, #1
 8002852:	4013      	ands	r3, r2
 8002854:	d00b      	beq.n	800286e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2290      	movs	r2, #144	@ 0x90
 8002862:	589b      	ldr	r3, [r3, r2]
 8002864:	2204      	movs	r2, #4
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2190      	movs	r1, #144	@ 0x90
 800286c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800286e:	23a4      	movs	r3, #164	@ 0xa4
 8002870:	18fb      	adds	r3, r7, r3
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2204      	movs	r2, #4
 8002876:	4013      	ands	r3, r2
 8002878:	d011      	beq.n	800289e <HAL_UART_IRQHandler+0x132>
 800287a:	239c      	movs	r3, #156	@ 0x9c
 800287c:	18fb      	adds	r3, r7, r3
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2201      	movs	r2, #1
 8002882:	4013      	ands	r3, r2
 8002884:	d00b      	beq.n	800289e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2204      	movs	r2, #4
 800288c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2290      	movs	r2, #144	@ 0x90
 8002892:	589b      	ldr	r3, [r3, r2]
 8002894:	2202      	movs	r2, #2
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2190      	movs	r1, #144	@ 0x90
 800289c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800289e:	23a4      	movs	r3, #164	@ 0xa4
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2208      	movs	r2, #8
 80028a6:	4013      	ands	r3, r2
 80028a8:	d017      	beq.n	80028da <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028aa:	23a0      	movs	r3, #160	@ 0xa0
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2220      	movs	r2, #32
 80028b2:	4013      	ands	r3, r2
 80028b4:	d105      	bne.n	80028c2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80028b6:	239c      	movs	r3, #156	@ 0x9c
 80028b8:	18fb      	adds	r3, r7, r3
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a5b      	ldr	r2, [pc, #364]	@ (8002a2c <HAL_UART_IRQHandler+0x2c0>)
 80028be:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80028c0:	d00b      	beq.n	80028da <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2208      	movs	r2, #8
 80028c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2290      	movs	r2, #144	@ 0x90
 80028ce:	589b      	ldr	r3, [r3, r2]
 80028d0:	2208      	movs	r2, #8
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2190      	movs	r1, #144	@ 0x90
 80028d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80028da:	23a4      	movs	r3, #164	@ 0xa4
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	2380      	movs	r3, #128	@ 0x80
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	4013      	ands	r3, r2
 80028e6:	d013      	beq.n	8002910 <HAL_UART_IRQHandler+0x1a4>
 80028e8:	23a0      	movs	r3, #160	@ 0xa0
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	2380      	movs	r3, #128	@ 0x80
 80028f0:	04db      	lsls	r3, r3, #19
 80028f2:	4013      	ands	r3, r2
 80028f4:	d00c      	beq.n	8002910 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2280      	movs	r2, #128	@ 0x80
 80028fc:	0112      	lsls	r2, r2, #4
 80028fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2290      	movs	r2, #144	@ 0x90
 8002904:	589b      	ldr	r3, [r3, r2]
 8002906:	2220      	movs	r2, #32
 8002908:	431a      	orrs	r2, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2190      	movs	r1, #144	@ 0x90
 800290e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2290      	movs	r2, #144	@ 0x90
 8002914:	589b      	ldr	r3, [r3, r2]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d100      	bne.n	800291c <HAL_UART_IRQHandler+0x1b0>
 800291a:	e23d      	b.n	8002d98 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800291c:	23a4      	movs	r3, #164	@ 0xa4
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2220      	movs	r2, #32
 8002924:	4013      	ands	r3, r2
 8002926:	d015      	beq.n	8002954 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002928:	23a0      	movs	r3, #160	@ 0xa0
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2220      	movs	r2, #32
 8002930:	4013      	ands	r3, r2
 8002932:	d106      	bne.n	8002942 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002934:	239c      	movs	r3, #156	@ 0x9c
 8002936:	18fb      	adds	r3, r7, r3
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	2380      	movs	r3, #128	@ 0x80
 800293c:	055b      	lsls	r3, r3, #21
 800293e:	4013      	ands	r3, r2
 8002940:	d008      	beq.n	8002954 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002946:	2b00      	cmp	r3, #0
 8002948:	d004      	beq.n	8002954 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	0010      	movs	r0, r2
 8002952:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2290      	movs	r2, #144	@ 0x90
 8002958:	589b      	ldr	r3, [r3, r2]
 800295a:	2194      	movs	r1, #148	@ 0x94
 800295c:	187a      	adds	r2, r7, r1
 800295e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2240      	movs	r2, #64	@ 0x40
 8002968:	4013      	ands	r3, r2
 800296a:	2b40      	cmp	r3, #64	@ 0x40
 800296c:	d004      	beq.n	8002978 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800296e:	187b      	adds	r3, r7, r1
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2228      	movs	r2, #40	@ 0x28
 8002974:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002976:	d04c      	beq.n	8002a12 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 fdaa 	bl	80034d4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2240      	movs	r2, #64	@ 0x40
 8002988:	4013      	ands	r3, r2
 800298a:	2b40      	cmp	r3, #64	@ 0x40
 800298c:	d13c      	bne.n	8002a08 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298e:	f3ef 8310 	mrs	r3, PRIMASK
 8002992:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002994:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002996:	2090      	movs	r0, #144	@ 0x90
 8002998:	183a      	adds	r2, r7, r0
 800299a:	6013      	str	r3, [r2, #0]
 800299c:	2301      	movs	r3, #1
 800299e:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80029a2:	f383 8810 	msr	PRIMASK, r3
}
 80029a6:	46c0      	nop			@ (mov r8, r8)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2140      	movs	r1, #64	@ 0x40
 80029b4:	438a      	bics	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
 80029b8:	183b      	adds	r3, r7, r0
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80029c0:	f383 8810 	msr	PRIMASK, r3
}
 80029c4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	589b      	ldr	r3, [r3, r2]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d016      	beq.n	80029fe <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2280      	movs	r2, #128	@ 0x80
 80029d4:	589b      	ldr	r3, [r3, r2]
 80029d6:	4a17      	ldr	r2, [pc, #92]	@ (8002a34 <HAL_UART_IRQHandler+0x2c8>)
 80029d8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2280      	movs	r2, #128	@ 0x80
 80029de:	589b      	ldr	r3, [r3, r2]
 80029e0:	0018      	movs	r0, r3
 80029e2:	f7fe fdd3 	bl	800158c <HAL_DMA_Abort_IT>
 80029e6:	1e03      	subs	r3, r0, #0
 80029e8:	d01c      	beq.n	8002a24 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2280      	movs	r2, #128	@ 0x80
 80029ee:	589b      	ldr	r3, [r3, r2]
 80029f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	2180      	movs	r1, #128	@ 0x80
 80029f6:	5852      	ldr	r2, [r2, r1]
 80029f8:	0010      	movs	r0, r2
 80029fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029fc:	e012      	b.n	8002a24 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	0018      	movs	r0, r3
 8002a02:	f000 f9e1 	bl	8002dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a06:	e00d      	b.n	8002a24 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	f000 f9dc 	bl	8002dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a10:	e008      	b.n	8002a24 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	0018      	movs	r0, r3
 8002a16:	f000 f9d7 	bl	8002dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2290      	movs	r2, #144	@ 0x90
 8002a1e:	2100      	movs	r1, #0
 8002a20:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a22:	e1b9      	b.n	8002d98 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a24:	46c0      	nop			@ (mov r8, r8)
    return;
 8002a26:	e1b7      	b.n	8002d98 <HAL_UART_IRQHandler+0x62c>
 8002a28:	0000080f 	.word	0x0000080f
 8002a2c:	10000001 	.word	0x10000001
 8002a30:	04000120 	.word	0x04000120
 8002a34:	080035a1 	.word	0x080035a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d000      	beq.n	8002a42 <HAL_UART_IRQHandler+0x2d6>
 8002a40:	e13e      	b.n	8002cc0 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002a42:	23a4      	movs	r3, #164	@ 0xa4
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d100      	bne.n	8002a50 <HAL_UART_IRQHandler+0x2e4>
 8002a4e:	e137      	b.n	8002cc0 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002a50:	23a0      	movs	r3, #160	@ 0xa0
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2210      	movs	r2, #16
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <HAL_UART_IRQHandler+0x2f2>
 8002a5c:	e130      	b.n	8002cc0 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2210      	movs	r2, #16
 8002a64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2240      	movs	r2, #64	@ 0x40
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b40      	cmp	r3, #64	@ 0x40
 8002a72:	d000      	beq.n	8002a76 <HAL_UART_IRQHandler+0x30a>
 8002a74:	e0a4      	b.n	8002bc0 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2280      	movs	r2, #128	@ 0x80
 8002a7a:	589b      	ldr	r3, [r3, r2]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685a      	ldr	r2, [r3, #4]
 8002a80:	217e      	movs	r1, #126	@ 0x7e
 8002a82:	187b      	adds	r3, r7, r1
 8002a84:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002a86:	187b      	adds	r3, r7, r1
 8002a88:	881b      	ldrh	r3, [r3, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d100      	bne.n	8002a90 <HAL_UART_IRQHandler+0x324>
 8002a8e:	e185      	b.n	8002d9c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	225c      	movs	r2, #92	@ 0x5c
 8002a94:	5a9b      	ldrh	r3, [r3, r2]
 8002a96:	187a      	adds	r2, r7, r1
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d300      	bcc.n	8002aa0 <HAL_UART_IRQHandler+0x334>
 8002a9e:	e17d      	b.n	8002d9c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	187a      	adds	r2, r7, r1
 8002aa4:	215e      	movs	r1, #94	@ 0x5e
 8002aa6:	8812      	ldrh	r2, [r2, #0]
 8002aa8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2280      	movs	r2, #128	@ 0x80
 8002aae:	589b      	ldr	r3, [r3, r2]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2220      	movs	r2, #32
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	d170      	bne.n	8002b9c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aba:	f3ef 8310 	mrs	r3, PRIMASK
 8002abe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ac2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ac8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002aca:	f383 8810 	msr	PRIMASK, r3
}
 8002ace:	46c0      	nop			@ (mov r8, r8)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	49b4      	ldr	r1, [pc, #720]	@ (8002dac <HAL_UART_IRQHandler+0x640>)
 8002adc:	400a      	ands	r2, r1
 8002ade:	601a      	str	r2, [r3, #0]
 8002ae0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae6:	f383 8810 	msr	PRIMASK, r3
}
 8002aea:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002aec:	f3ef 8310 	mrs	r3, PRIMASK
 8002af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002af2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002af4:	677b      	str	r3, [r7, #116]	@ 0x74
 8002af6:	2301      	movs	r3, #1
 8002af8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002afa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002afc:	f383 8810 	msr	PRIMASK, r3
}
 8002b00:	46c0      	nop			@ (mov r8, r8)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	689a      	ldr	r2, [r3, #8]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	438a      	bics	r2, r1
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b14:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b18:	f383 8810 	msr	PRIMASK, r3
}
 8002b1c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b22:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002b24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b26:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b28:	2301      	movs	r3, #1
 8002b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b2e:	f383 8810 	msr	PRIMASK, r3
}
 8002b32:	46c0      	nop			@ (mov r8, r8)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2140      	movs	r1, #64	@ 0x40
 8002b40:	438a      	bics	r2, r1
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b46:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b4a:	f383 8810 	msr	PRIMASK, r3
}
 8002b4e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	228c      	movs	r2, #140	@ 0x8c
 8002b54:	2120      	movs	r1, #32
 8002b56:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002b62:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b66:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002b68:	2301      	movs	r3, #1
 8002b6a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b6c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002b6e:	f383 8810 	msr	PRIMASK, r3
}
 8002b72:	46c0      	nop			@ (mov r8, r8)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2110      	movs	r1, #16
 8002b80:	438a      	bics	r2, r1
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b86:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002b8a:	f383 8810 	msr	PRIMASK, r3
}
 8002b8e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2280      	movs	r2, #128	@ 0x80
 8002b94:	589b      	ldr	r3, [r3, r2]
 8002b96:	0018      	movs	r0, r3
 8002b98:	f7fe fc96 	bl	80014c8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	225c      	movs	r2, #92	@ 0x5c
 8002ba6:	5a9a      	ldrh	r2, [r3, r2]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	215e      	movs	r1, #94	@ 0x5e
 8002bac:	5a5b      	ldrh	r3, [r3, r1]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	0011      	movs	r1, r2
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f000 f90d 	bl	8002dd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bbe:	e0ed      	b.n	8002d9c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	225c      	movs	r2, #92	@ 0x5c
 8002bc4:	5a99      	ldrh	r1, [r3, r2]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	225e      	movs	r2, #94	@ 0x5e
 8002bca:	5a9b      	ldrh	r3, [r3, r2]
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	208e      	movs	r0, #142	@ 0x8e
 8002bd0:	183b      	adds	r3, r7, r0
 8002bd2:	1a8a      	subs	r2, r1, r2
 8002bd4:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	225e      	movs	r2, #94	@ 0x5e
 8002bda:	5a9b      	ldrh	r3, [r3, r2]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d100      	bne.n	8002be4 <HAL_UART_IRQHandler+0x478>
 8002be2:	e0dd      	b.n	8002da0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002be4:	183b      	adds	r3, r7, r0
 8002be6:	881b      	ldrh	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d100      	bne.n	8002bee <HAL_UART_IRQHandler+0x482>
 8002bec:	e0d8      	b.n	8002da0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bee:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf2:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bf6:	2488      	movs	r4, #136	@ 0x88
 8002bf8:	193a      	adds	r2, r7, r4
 8002bfa:	6013      	str	r3, [r2, #0]
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4967      	ldr	r1, [pc, #412]	@ (8002db0 <HAL_UART_IRQHandler+0x644>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	f383 8810 	msr	PRIMASK, r3
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c26:	f3ef 8310 	mrs	r3, PRIMASK
 8002c2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002c2c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002c2e:	2484      	movs	r4, #132	@ 0x84
 8002c30:	193a      	adds	r2, r7, r4
 8002c32:	6013      	str	r3, [r2, #0]
 8002c34:	2301      	movs	r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f383 8810 	msr	PRIMASK, r3
}
 8002c3e:	46c0      	nop			@ (mov r8, r8)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	495a      	ldr	r1, [pc, #360]	@ (8002db4 <HAL_UART_IRQHandler+0x648>)
 8002c4c:	400a      	ands	r2, r1
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	f383 8810 	msr	PRIMASK, r3
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	228c      	movs	r2, #140	@ 0x8c
 8002c62:	2120      	movs	r1, #32
 8002c64:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c72:	f3ef 8310 	mrs	r3, PRIMASK
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c7a:	2480      	movs	r4, #128	@ 0x80
 8002c7c:	193a      	adds	r2, r7, r4
 8002c7e:	6013      	str	r3, [r2, #0]
 8002c80:	2301      	movs	r3, #1
 8002c82:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c86:	f383 8810 	msr	PRIMASK, r3
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2110      	movs	r1, #16
 8002c98:	438a      	bics	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	193b      	adds	r3, r7, r4
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca4:	f383 8810 	msr	PRIMASK, r3
}
 8002ca8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2202      	movs	r2, #2
 8002cae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002cb0:	183b      	adds	r3, r7, r0
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	0011      	movs	r1, r2
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f000 f88d 	bl	8002dd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002cbe:	e06f      	b.n	8002da0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002cc0:	23a4      	movs	r3, #164	@ 0xa4
 8002cc2:	18fb      	adds	r3, r7, r3
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2380      	movs	r3, #128	@ 0x80
 8002cc8:	035b      	lsls	r3, r3, #13
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d010      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x584>
 8002cce:	239c      	movs	r3, #156	@ 0x9c
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	03db      	lsls	r3, r3, #15
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2280      	movs	r2, #128	@ 0x80
 8002ce2:	0352      	lsls	r2, r2, #13
 8002ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	0018      	movs	r0, r3
 8002cea:	f000 fe45 	bl	8003978 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cee:	e05a      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002cf0:	23a4      	movs	r3, #164	@ 0xa4
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2280      	movs	r2, #128	@ 0x80
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d016      	beq.n	8002d2a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002cfc:	23a0      	movs	r3, #160	@ 0xa0
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2280      	movs	r2, #128	@ 0x80
 8002d04:	4013      	ands	r3, r2
 8002d06:	d106      	bne.n	8002d16 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002d08:	239c      	movs	r3, #156	@ 0x9c
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	041b      	lsls	r3, r3, #16
 8002d12:	4013      	ands	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d042      	beq.n	8002da4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	0010      	movs	r0, r2
 8002d26:	4798      	blx	r3
    }
    return;
 8002d28:	e03c      	b.n	8002da4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002d2a:	23a4      	movs	r3, #164	@ 0xa4
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2240      	movs	r2, #64	@ 0x40
 8002d32:	4013      	ands	r3, r2
 8002d34:	d00a      	beq.n	8002d4c <HAL_UART_IRQHandler+0x5e0>
 8002d36:	23a0      	movs	r3, #160	@ 0xa0
 8002d38:	18fb      	adds	r3, r7, r3
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2240      	movs	r2, #64	@ 0x40
 8002d3e:	4013      	ands	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	0018      	movs	r0, r3
 8002d46:	f000 fdeb 	bl	8003920 <UART_EndTransmit_IT>
    return;
 8002d4a:	e02c      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002d4c:	23a4      	movs	r3, #164	@ 0xa4
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	2380      	movs	r3, #128	@ 0x80
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	4013      	ands	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <HAL_UART_IRQHandler+0x606>
 8002d5a:	23a0      	movs	r3, #160	@ 0xa0
 8002d5c:	18fb      	adds	r3, r7, r3
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	2380      	movs	r3, #128	@ 0x80
 8002d62:	05db      	lsls	r3, r3, #23
 8002d64:	4013      	ands	r3, r2
 8002d66:	d004      	beq.n	8002d72 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f000 fe14 	bl	8003998 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d70:	e019      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002d72:	23a4      	movs	r3, #164	@ 0xa4
 8002d74:	18fb      	adds	r3, r7, r3
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	2380      	movs	r3, #128	@ 0x80
 8002d7a:	045b      	lsls	r3, r3, #17
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d012      	beq.n	8002da6 <HAL_UART_IRQHandler+0x63a>
 8002d80:	23a0      	movs	r3, #160	@ 0xa0
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	da0d      	bge.n	8002da6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f000 fdfb 	bl	8003988 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002d92:	e008      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	e006      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	e004      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002d9c:	46c0      	nop			@ (mov r8, r8)
 8002d9e:	e002      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002da0:	46c0      	nop			@ (mov r8, r8)
 8002da2:	e000      	b.n	8002da6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002da4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002da6:	46bd      	mov	sp, r7
 8002da8:	b02a      	add	sp, #168	@ 0xa8
 8002daa:	bdb0      	pop	{r4, r5, r7, pc}
 8002dac:	fffffeff 	.word	0xfffffeff
 8002db0:	fffffedf 	.word	0xfffffedf
 8002db4:	effffffe 	.word	0xeffffffe

08002db8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	000a      	movs	r2, r1
 8002de2:	1cbb      	adds	r3, r7, #2
 8002de4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002de6:	46c0      	nop			@ (mov r8, r8)
 8002de8:	46bd      	mov	sp, r7
 8002dea:	b002      	add	sp, #8
 8002dec:	bd80      	pop	{r7, pc}
	...

08002df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b088      	sub	sp, #32
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002df8:	231a      	movs	r3, #26
 8002dfa:	18fb      	adds	r3, r7, r3
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4abc      	ldr	r2, [pc, #752]	@ (8003110 <UART_SetConfig+0x320>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	0019      	movs	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69fa      	ldr	r2, [r7, #28]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	4ab7      	ldr	r2, [pc, #732]	@ (8003114 <UART_SetConfig+0x324>)
 8002e36:	4013      	ands	r3, r2
 8002e38:	0019      	movs	r1, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	4aae      	ldr	r2, [pc, #696]	@ (8003118 <UART_SetConfig+0x328>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	0019      	movs	r1, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	430a      	orrs	r2, r1
 8002e6a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e72:	220f      	movs	r2, #15
 8002e74:	4393      	bics	r3, r2
 8002e76:	0019      	movs	r1, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4aa4      	ldr	r2, [pc, #656]	@ (800311c <UART_SetConfig+0x32c>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d127      	bne.n	8002ede <UART_SetConfig+0xee>
 8002e8e:	4ba4      	ldr	r3, [pc, #656]	@ (8003120 <UART_SetConfig+0x330>)
 8002e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e92:	2203      	movs	r2, #3
 8002e94:	4013      	ands	r3, r2
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d017      	beq.n	8002eca <UART_SetConfig+0xda>
 8002e9a:	d81b      	bhi.n	8002ed4 <UART_SetConfig+0xe4>
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d00a      	beq.n	8002eb6 <UART_SetConfig+0xc6>
 8002ea0:	d818      	bhi.n	8002ed4 <UART_SetConfig+0xe4>
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d002      	beq.n	8002eac <UART_SetConfig+0xbc>
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d00a      	beq.n	8002ec0 <UART_SetConfig+0xd0>
 8002eaa:	e013      	b.n	8002ed4 <UART_SetConfig+0xe4>
 8002eac:	231b      	movs	r3, #27
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
 8002eb4:	e058      	b.n	8002f68 <UART_SetConfig+0x178>
 8002eb6:	231b      	movs	r3, #27
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	2202      	movs	r2, #2
 8002ebc:	701a      	strb	r2, [r3, #0]
 8002ebe:	e053      	b.n	8002f68 <UART_SetConfig+0x178>
 8002ec0:	231b      	movs	r3, #27
 8002ec2:	18fb      	adds	r3, r7, r3
 8002ec4:	2204      	movs	r2, #4
 8002ec6:	701a      	strb	r2, [r3, #0]
 8002ec8:	e04e      	b.n	8002f68 <UART_SetConfig+0x178>
 8002eca:	231b      	movs	r3, #27
 8002ecc:	18fb      	adds	r3, r7, r3
 8002ece:	2208      	movs	r2, #8
 8002ed0:	701a      	strb	r2, [r3, #0]
 8002ed2:	e049      	b.n	8002f68 <UART_SetConfig+0x178>
 8002ed4:	231b      	movs	r3, #27
 8002ed6:	18fb      	adds	r3, r7, r3
 8002ed8:	2210      	movs	r2, #16
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e044      	b.n	8002f68 <UART_SetConfig+0x178>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a90      	ldr	r2, [pc, #576]	@ (8003124 <UART_SetConfig+0x334>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d127      	bne.n	8002f38 <UART_SetConfig+0x148>
 8002ee8:	4b8d      	ldr	r3, [pc, #564]	@ (8003120 <UART_SetConfig+0x330>)
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	220c      	movs	r2, #12
 8002eee:	4013      	ands	r3, r2
 8002ef0:	2b0c      	cmp	r3, #12
 8002ef2:	d017      	beq.n	8002f24 <UART_SetConfig+0x134>
 8002ef4:	d81b      	bhi.n	8002f2e <UART_SetConfig+0x13e>
 8002ef6:	2b08      	cmp	r3, #8
 8002ef8:	d00a      	beq.n	8002f10 <UART_SetConfig+0x120>
 8002efa:	d818      	bhi.n	8002f2e <UART_SetConfig+0x13e>
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <UART_SetConfig+0x116>
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d00a      	beq.n	8002f1a <UART_SetConfig+0x12a>
 8002f04:	e013      	b.n	8002f2e <UART_SetConfig+0x13e>
 8002f06:	231b      	movs	r3, #27
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]
 8002f0e:	e02b      	b.n	8002f68 <UART_SetConfig+0x178>
 8002f10:	231b      	movs	r3, #27
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	2202      	movs	r2, #2
 8002f16:	701a      	strb	r2, [r3, #0]
 8002f18:	e026      	b.n	8002f68 <UART_SetConfig+0x178>
 8002f1a:	231b      	movs	r3, #27
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	2204      	movs	r2, #4
 8002f20:	701a      	strb	r2, [r3, #0]
 8002f22:	e021      	b.n	8002f68 <UART_SetConfig+0x178>
 8002f24:	231b      	movs	r3, #27
 8002f26:	18fb      	adds	r3, r7, r3
 8002f28:	2208      	movs	r2, #8
 8002f2a:	701a      	strb	r2, [r3, #0]
 8002f2c:	e01c      	b.n	8002f68 <UART_SetConfig+0x178>
 8002f2e:	231b      	movs	r3, #27
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2210      	movs	r2, #16
 8002f34:	701a      	strb	r2, [r3, #0]
 8002f36:	e017      	b.n	8002f68 <UART_SetConfig+0x178>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a7a      	ldr	r2, [pc, #488]	@ (8003128 <UART_SetConfig+0x338>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d104      	bne.n	8002f4c <UART_SetConfig+0x15c>
 8002f42:	231b      	movs	r3, #27
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	2200      	movs	r2, #0
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	e00d      	b.n	8002f68 <UART_SetConfig+0x178>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a76      	ldr	r2, [pc, #472]	@ (800312c <UART_SetConfig+0x33c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d104      	bne.n	8002f60 <UART_SetConfig+0x170>
 8002f56:	231b      	movs	r3, #27
 8002f58:	18fb      	adds	r3, r7, r3
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
 8002f5e:	e003      	b.n	8002f68 <UART_SetConfig+0x178>
 8002f60:	231b      	movs	r3, #27
 8002f62:	18fb      	adds	r3, r7, r3
 8002f64:	2210      	movs	r2, #16
 8002f66:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69da      	ldr	r2, [r3, #28]
 8002f6c:	2380      	movs	r3, #128	@ 0x80
 8002f6e:	021b      	lsls	r3, r3, #8
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d000      	beq.n	8002f76 <UART_SetConfig+0x186>
 8002f74:	e065      	b.n	8003042 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002f76:	231b      	movs	r3, #27
 8002f78:	18fb      	adds	r3, r7, r3
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b08      	cmp	r3, #8
 8002f7e:	d015      	beq.n	8002fac <UART_SetConfig+0x1bc>
 8002f80:	dc18      	bgt.n	8002fb4 <UART_SetConfig+0x1c4>
 8002f82:	2b04      	cmp	r3, #4
 8002f84:	d00d      	beq.n	8002fa2 <UART_SetConfig+0x1b2>
 8002f86:	dc15      	bgt.n	8002fb4 <UART_SetConfig+0x1c4>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d002      	beq.n	8002f92 <UART_SetConfig+0x1a2>
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d005      	beq.n	8002f9c <UART_SetConfig+0x1ac>
 8002f90:	e010      	b.n	8002fb4 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f92:	f7ff f9f1 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8002f96:	0003      	movs	r3, r0
 8002f98:	617b      	str	r3, [r7, #20]
        break;
 8002f9a:	e012      	b.n	8002fc2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f9c:	4b64      	ldr	r3, [pc, #400]	@ (8003130 <UART_SetConfig+0x340>)
 8002f9e:	617b      	str	r3, [r7, #20]
        break;
 8002fa0:	e00f      	b.n	8002fc2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fa2:	f7ff f95d 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8002fa6:	0003      	movs	r3, r0
 8002fa8:	617b      	str	r3, [r7, #20]
        break;
 8002faa:	e00a      	b.n	8002fc2 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fac:	2380      	movs	r3, #128	@ 0x80
 8002fae:	021b      	lsls	r3, r3, #8
 8002fb0:	617b      	str	r3, [r7, #20]
        break;
 8002fb2:	e006      	b.n	8002fc2 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002fb8:	231a      	movs	r3, #26
 8002fba:	18fb      	adds	r3, r7, r3
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
        break;
 8002fc0:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d100      	bne.n	8002fca <UART_SetConfig+0x1da>
 8002fc8:	e08d      	b.n	80030e6 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fce:	4b59      	ldr	r3, [pc, #356]	@ (8003134 <UART_SetConfig+0x344>)
 8002fd0:	0052      	lsls	r2, r2, #1
 8002fd2:	5ad3      	ldrh	r3, [r2, r3]
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	6978      	ldr	r0, [r7, #20]
 8002fd8:	f7fd f8a4 	bl	8000124 <__udivsi3>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	005a      	lsls	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	085b      	lsrs	r3, r3, #1
 8002fe6:	18d2      	adds	r2, r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	0019      	movs	r1, r3
 8002fee:	0010      	movs	r0, r2
 8002ff0:	f7fd f898 	bl	8000124 <__udivsi3>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b0f      	cmp	r3, #15
 8002ffc:	d91c      	bls.n	8003038 <UART_SetConfig+0x248>
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	2380      	movs	r3, #128	@ 0x80
 8003002:	025b      	lsls	r3, r3, #9
 8003004:	429a      	cmp	r2, r3
 8003006:	d217      	bcs.n	8003038 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	b29a      	uxth	r2, r3
 800300c:	200e      	movs	r0, #14
 800300e:	183b      	adds	r3, r7, r0
 8003010:	210f      	movs	r1, #15
 8003012:	438a      	bics	r2, r1
 8003014:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	085b      	lsrs	r3, r3, #1
 800301a:	b29b      	uxth	r3, r3
 800301c:	2207      	movs	r2, #7
 800301e:	4013      	ands	r3, r2
 8003020:	b299      	uxth	r1, r3
 8003022:	183b      	adds	r3, r7, r0
 8003024:	183a      	adds	r2, r7, r0
 8003026:	8812      	ldrh	r2, [r2, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	183a      	adds	r2, r7, r0
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	60da      	str	r2, [r3, #12]
 8003036:	e056      	b.n	80030e6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003038:	231a      	movs	r3, #26
 800303a:	18fb      	adds	r3, r7, r3
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e051      	b.n	80030e6 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003042:	231b      	movs	r3, #27
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b08      	cmp	r3, #8
 800304a:	d015      	beq.n	8003078 <UART_SetConfig+0x288>
 800304c:	dc18      	bgt.n	8003080 <UART_SetConfig+0x290>
 800304e:	2b04      	cmp	r3, #4
 8003050:	d00d      	beq.n	800306e <UART_SetConfig+0x27e>
 8003052:	dc15      	bgt.n	8003080 <UART_SetConfig+0x290>
 8003054:	2b00      	cmp	r3, #0
 8003056:	d002      	beq.n	800305e <UART_SetConfig+0x26e>
 8003058:	2b02      	cmp	r3, #2
 800305a:	d005      	beq.n	8003068 <UART_SetConfig+0x278>
 800305c:	e010      	b.n	8003080 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800305e:	f7ff f98b 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8003062:	0003      	movs	r3, r0
 8003064:	617b      	str	r3, [r7, #20]
        break;
 8003066:	e012      	b.n	800308e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003068:	4b31      	ldr	r3, [pc, #196]	@ (8003130 <UART_SetConfig+0x340>)
 800306a:	617b      	str	r3, [r7, #20]
        break;
 800306c:	e00f      	b.n	800308e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800306e:	f7ff f8f7 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8003072:	0003      	movs	r3, r0
 8003074:	617b      	str	r3, [r7, #20]
        break;
 8003076:	e00a      	b.n	800308e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003078:	2380      	movs	r3, #128	@ 0x80
 800307a:	021b      	lsls	r3, r3, #8
 800307c:	617b      	str	r3, [r7, #20]
        break;
 800307e:	e006      	b.n	800308e <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003084:	231a      	movs	r3, #26
 8003086:	18fb      	adds	r3, r7, r3
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
        break;
 800308c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d028      	beq.n	80030e6 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003098:	4b26      	ldr	r3, [pc, #152]	@ (8003134 <UART_SetConfig+0x344>)
 800309a:	0052      	lsls	r2, r2, #1
 800309c:	5ad3      	ldrh	r3, [r2, r3]
 800309e:	0019      	movs	r1, r3
 80030a0:	6978      	ldr	r0, [r7, #20]
 80030a2:	f7fd f83f 	bl	8000124 <__udivsi3>
 80030a6:	0003      	movs	r3, r0
 80030a8:	001a      	movs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	18d2      	adds	r2, r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	0019      	movs	r1, r3
 80030b8:	0010      	movs	r0, r2
 80030ba:	f7fd f833 	bl	8000124 <__udivsi3>
 80030be:	0003      	movs	r3, r0
 80030c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	2b0f      	cmp	r3, #15
 80030c6:	d90a      	bls.n	80030de <UART_SetConfig+0x2ee>
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	2380      	movs	r3, #128	@ 0x80
 80030cc:	025b      	lsls	r3, r3, #9
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d205      	bcs.n	80030de <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	60da      	str	r2, [r3, #12]
 80030dc:	e003      	b.n	80030e6 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80030de:	231a      	movs	r3, #26
 80030e0:	18fb      	adds	r3, r7, r3
 80030e2:	2201      	movs	r2, #1
 80030e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	226a      	movs	r2, #106	@ 0x6a
 80030ea:	2101      	movs	r1, #1
 80030ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2268      	movs	r2, #104	@ 0x68
 80030f2:	2101      	movs	r1, #1
 80030f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003102:	231a      	movs	r3, #26
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	781b      	ldrb	r3, [r3, #0]
}
 8003108:	0018      	movs	r0, r3
 800310a:	46bd      	mov	sp, r7
 800310c:	b008      	add	sp, #32
 800310e:	bd80      	pop	{r7, pc}
 8003110:	cfff69f3 	.word	0xcfff69f3
 8003114:	ffffcfff 	.word	0xffffcfff
 8003118:	11fff4ff 	.word	0x11fff4ff
 800311c:	40013800 	.word	0x40013800
 8003120:	40021000 	.word	0x40021000
 8003124:	40004400 	.word	0x40004400
 8003128:	40004800 	.word	0x40004800
 800312c:	40004c00 	.word	0x40004c00
 8003130:	00f42400 	.word	0x00f42400
 8003134:	08005840 	.word	0x08005840

08003138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003144:	2208      	movs	r2, #8
 8003146:	4013      	ands	r3, r2
 8003148:	d00b      	beq.n	8003162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	4a4a      	ldr	r2, [pc, #296]	@ (800327c <UART_AdvFeatureConfig+0x144>)
 8003152:	4013      	ands	r3, r2
 8003154:	0019      	movs	r1, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003166:	2201      	movs	r2, #1
 8003168:	4013      	ands	r3, r2
 800316a:	d00b      	beq.n	8003184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	4a43      	ldr	r2, [pc, #268]	@ (8003280 <UART_AdvFeatureConfig+0x148>)
 8003174:	4013      	ands	r3, r2
 8003176:	0019      	movs	r1, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	2202      	movs	r2, #2
 800318a:	4013      	ands	r3, r2
 800318c:	d00b      	beq.n	80031a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4a3b      	ldr	r2, [pc, #236]	@ (8003284 <UART_AdvFeatureConfig+0x14c>)
 8003196:	4013      	ands	r3, r2
 8003198:	0019      	movs	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	430a      	orrs	r2, r1
 80031a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031aa:	2204      	movs	r2, #4
 80031ac:	4013      	ands	r3, r2
 80031ae:	d00b      	beq.n	80031c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	4a34      	ldr	r2, [pc, #208]	@ (8003288 <UART_AdvFeatureConfig+0x150>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	0019      	movs	r1, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031cc:	2210      	movs	r2, #16
 80031ce:	4013      	ands	r3, r2
 80031d0:	d00b      	beq.n	80031ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	4a2c      	ldr	r2, [pc, #176]	@ (800328c <UART_AdvFeatureConfig+0x154>)
 80031da:	4013      	ands	r3, r2
 80031dc:	0019      	movs	r1, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ee:	2220      	movs	r2, #32
 80031f0:	4013      	ands	r3, r2
 80031f2:	d00b      	beq.n	800320c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	4a25      	ldr	r2, [pc, #148]	@ (8003290 <UART_AdvFeatureConfig+0x158>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	0019      	movs	r1, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	430a      	orrs	r2, r1
 800320a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003210:	2240      	movs	r2, #64	@ 0x40
 8003212:	4013      	ands	r3, r2
 8003214:	d01d      	beq.n	8003252 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	4a1d      	ldr	r2, [pc, #116]	@ (8003294 <UART_AdvFeatureConfig+0x15c>)
 800321e:	4013      	ands	r3, r2
 8003220:	0019      	movs	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003232:	2380      	movs	r3, #128	@ 0x80
 8003234:	035b      	lsls	r3, r3, #13
 8003236:	429a      	cmp	r2, r3
 8003238:	d10b      	bne.n	8003252 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4a15      	ldr	r2, [pc, #84]	@ (8003298 <UART_AdvFeatureConfig+0x160>)
 8003242:	4013      	ands	r3, r2
 8003244:	0019      	movs	r1, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	4013      	ands	r3, r2
 800325a:	d00b      	beq.n	8003274 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4a0e      	ldr	r2, [pc, #56]	@ (800329c <UART_AdvFeatureConfig+0x164>)
 8003264:	4013      	ands	r3, r2
 8003266:	0019      	movs	r1, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	605a      	str	r2, [r3, #4]
  }
}
 8003274:	46c0      	nop			@ (mov r8, r8)
 8003276:	46bd      	mov	sp, r7
 8003278:	b002      	add	sp, #8
 800327a:	bd80      	pop	{r7, pc}
 800327c:	ffff7fff 	.word	0xffff7fff
 8003280:	fffdffff 	.word	0xfffdffff
 8003284:	fffeffff 	.word	0xfffeffff
 8003288:	fffbffff 	.word	0xfffbffff
 800328c:	ffffefff 	.word	0xffffefff
 8003290:	ffffdfff 	.word	0xffffdfff
 8003294:	ffefffff 	.word	0xffefffff
 8003298:	ff9fffff 	.word	0xff9fffff
 800329c:	fff7ffff 	.word	0xfff7ffff

080032a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b092      	sub	sp, #72	@ 0x48
 80032a4:	af02      	add	r7, sp, #8
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2290      	movs	r2, #144	@ 0x90
 80032ac:	2100      	movs	r1, #0
 80032ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032b0:	f7fd fffe 	bl	80012b0 <HAL_GetTick>
 80032b4:	0003      	movs	r3, r0
 80032b6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2208      	movs	r2, #8
 80032c0:	4013      	ands	r3, r2
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d12d      	bne.n	8003322 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032c8:	2280      	movs	r2, #128	@ 0x80
 80032ca:	0391      	lsls	r1, r2, #14
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	4a47      	ldr	r2, [pc, #284]	@ (80033ec <UART_CheckIdleState+0x14c>)
 80032d0:	9200      	str	r2, [sp, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f000 f88e 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 80032d8:	1e03      	subs	r3, r0, #0
 80032da:	d022      	beq.n	8003322 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80032e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032e6:	2301      	movs	r3, #1
 80032e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2180      	movs	r1, #128	@ 0x80
 80032fe:	438a      	bics	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2288      	movs	r2, #136	@ 0x88
 8003312:	2120      	movs	r1, #32
 8003314:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2284      	movs	r2, #132	@ 0x84
 800331a:	2100      	movs	r1, #0
 800331c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e060      	b.n	80033e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	2204      	movs	r2, #4
 800332a:	4013      	ands	r3, r2
 800332c:	2b04      	cmp	r3, #4
 800332e:	d146      	bne.n	80033be <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003332:	2280      	movs	r2, #128	@ 0x80
 8003334:	03d1      	lsls	r1, r2, #15
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	4a2c      	ldr	r2, [pc, #176]	@ (80033ec <UART_CheckIdleState+0x14c>)
 800333a:	9200      	str	r2, [sp, #0]
 800333c:	2200      	movs	r2, #0
 800333e:	f000 f859 	bl	80033f4 <UART_WaitOnFlagUntilTimeout>
 8003342:	1e03      	subs	r3, r0, #0
 8003344:	d03b      	beq.n	80033be <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	60fb      	str	r3, [r7, #12]
  return(result);
 800334c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800334e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003350:	2301      	movs	r3, #1
 8003352:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f383 8810 	msr	PRIMASK, r3
}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4922      	ldr	r1, [pc, #136]	@ (80033f0 <UART_CheckIdleState+0x150>)
 8003368:	400a      	ands	r2, r1
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800336e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003378:	f3ef 8310 	mrs	r3, PRIMASK
 800337c:	61bb      	str	r3, [r7, #24]
  return(result);
 800337e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003380:	633b      	str	r3, [r7, #48]	@ 0x30
 8003382:	2301      	movs	r3, #1
 8003384:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689a      	ldr	r2, [r3, #8]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2101      	movs	r1, #1
 800339a:	438a      	bics	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
 800339e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	228c      	movs	r2, #140	@ 0x8c
 80033ae:	2120      	movs	r1, #32
 80033b0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2284      	movs	r2, #132	@ 0x84
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e012      	b.n	80033e4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2288      	movs	r2, #136	@ 0x88
 80033c2:	2120      	movs	r1, #32
 80033c4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	228c      	movs	r2, #140	@ 0x8c
 80033ca:	2120      	movs	r1, #32
 80033cc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2284      	movs	r2, #132	@ 0x84
 80033de:	2100      	movs	r1, #0
 80033e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	0018      	movs	r0, r3
 80033e6:	46bd      	mov	sp, r7
 80033e8:	b010      	add	sp, #64	@ 0x40
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	01ffffff 	.word	0x01ffffff
 80033f0:	fffffedf 	.word	0xfffffedf

080033f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	60f8      	str	r0, [r7, #12]
 80033fc:	60b9      	str	r1, [r7, #8]
 80033fe:	603b      	str	r3, [r7, #0]
 8003400:	1dfb      	adds	r3, r7, #7
 8003402:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003404:	e051      	b.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	3301      	adds	r3, #1
 800340a:	d04e      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340c:	f7fd ff50 	bl	80012b0 <HAL_GetTick>
 8003410:	0002      	movs	r2, r0
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	429a      	cmp	r2, r3
 800341a:	d302      	bcc.n	8003422 <UART_WaitOnFlagUntilTimeout+0x2e>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e051      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2204      	movs	r2, #4
 800342e:	4013      	ands	r3, r2
 8003430:	d03b      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2b80      	cmp	r3, #128	@ 0x80
 8003436:	d038      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb6>
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b40      	cmp	r3, #64	@ 0x40
 800343c:	d035      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	69db      	ldr	r3, [r3, #28]
 8003444:	2208      	movs	r2, #8
 8003446:	4013      	ands	r3, r2
 8003448:	2b08      	cmp	r3, #8
 800344a:	d111      	bne.n	8003470 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2208      	movs	r2, #8
 8003452:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 f83c 	bl	80034d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2290      	movs	r2, #144	@ 0x90
 8003460:	2108      	movs	r1, #8
 8003462:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2284      	movs	r2, #132	@ 0x84
 8003468:	2100      	movs	r1, #0
 800346a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e02c      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	2380      	movs	r3, #128	@ 0x80
 8003478:	011b      	lsls	r3, r3, #4
 800347a:	401a      	ands	r2, r3
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	429a      	cmp	r2, r3
 8003482:	d112      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2280      	movs	r2, #128	@ 0x80
 800348a:	0112      	lsls	r2, r2, #4
 800348c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	0018      	movs	r0, r3
 8003492:	f000 f81f 	bl	80034d4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2290      	movs	r2, #144	@ 0x90
 800349a:	2120      	movs	r1, #32
 800349c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2284      	movs	r2, #132	@ 0x84
 80034a2:	2100      	movs	r1, #0
 80034a4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e00f      	b.n	80034ca <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	425a      	negs	r2, r3
 80034ba:	4153      	adcs	r3, r2
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	001a      	movs	r2, r3
 80034c0:	1dfb      	adds	r3, r7, #7
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d09e      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	0018      	movs	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b08e      	sub	sp, #56	@ 0x38
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034dc:	f3ef 8310 	mrs	r3, PRIMASK
 80034e0:	617b      	str	r3, [r7, #20]
  return(result);
 80034e2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	f383 8810 	msr	PRIMASK, r3
}
 80034f0:	46c0      	nop			@ (mov r8, r8)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4926      	ldr	r1, [pc, #152]	@ (8003598 <UART_EndRxTransfer+0xc4>)
 80034fe:	400a      	ands	r2, r1
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003504:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f383 8810 	msr	PRIMASK, r3
}
 800350c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350e:	f3ef 8310 	mrs	r3, PRIMASK
 8003512:	623b      	str	r3, [r7, #32]
  return(result);
 8003514:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003516:	633b      	str	r3, [r7, #48]	@ 0x30
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	f383 8810 	msr	PRIMASK, r3
}
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	491b      	ldr	r1, [pc, #108]	@ (800359c <UART_EndRxTransfer+0xc8>)
 8003530:	400a      	ands	r2, r1
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003544:	2b01      	cmp	r3, #1
 8003546:	d118      	bne.n	800357a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003548:	f3ef 8310 	mrs	r3, PRIMASK
 800354c:	60bb      	str	r3, [r7, #8]
  return(result);
 800354e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003550:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003552:	2301      	movs	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f383 8810 	msr	PRIMASK, r3
}
 800355c:	46c0      	nop			@ (mov r8, r8)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2110      	movs	r1, #16
 800356a:	438a      	bics	r2, r1
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003570:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f383 8810 	msr	PRIMASK, r3
}
 8003578:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	228c      	movs	r2, #140	@ 0x8c
 800357e:	2120      	movs	r1, #32
 8003580:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2200      	movs	r2, #0
 800358c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	46bd      	mov	sp, r7
 8003592:	b00e      	add	sp, #56	@ 0x38
 8003594:	bd80      	pop	{r7, pc}
 8003596:	46c0      	nop			@ (mov r8, r8)
 8003598:	fffffedf 	.word	0xfffffedf
 800359c:	effffffe 	.word	0xeffffffe

080035a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	225e      	movs	r2, #94	@ 0x5e
 80035b2:	2100      	movs	r1, #0
 80035b4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2256      	movs	r2, #86	@ 0x56
 80035ba:	2100      	movs	r1, #0
 80035bc:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff fc01 	bl	8002dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c6:	46c0      	nop			@ (mov r8, r8)
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bd80      	pop	{r7, pc}

080035ce <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b08a      	sub	sp, #40	@ 0x28
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2288      	movs	r2, #136	@ 0x88
 80035da:	589b      	ldr	r3, [r3, r2]
 80035dc:	2b21      	cmp	r3, #33	@ 0x21
 80035de:	d14c      	bne.n	800367a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2256      	movs	r2, #86	@ 0x56
 80035e4:	5a9b      	ldrh	r3, [r3, r2]
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d132      	bne.n	8003652 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ec:	f3ef 8310 	mrs	r3, PRIMASK
 80035f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80035f2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80035f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f6:	2301      	movs	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f383 8810 	msr	PRIMASK, r3
}
 8003600:	46c0      	nop			@ (mov r8, r8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2180      	movs	r1, #128	@ 0x80
 800360e:	438a      	bics	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	f383 8810 	msr	PRIMASK, r3
}
 800361c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800361e:	f3ef 8310 	mrs	r3, PRIMASK
 8003622:	617b      	str	r3, [r7, #20]
  return(result);
 8003624:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003626:	623b      	str	r3, [r7, #32]
 8003628:	2301      	movs	r3, #1
 800362a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	f383 8810 	msr	PRIMASK, r3
}
 8003632:	46c0      	nop			@ (mov r8, r8)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2140      	movs	r1, #64	@ 0x40
 8003640:	430a      	orrs	r2, r1
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f383 8810 	msr	PRIMASK, r3
}
 800364e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003650:	e013      	b.n	800367a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003656:	781a      	ldrb	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2256      	movs	r2, #86	@ 0x56
 800366c:	5a9b      	ldrh	r3, [r3, r2]
 800366e:	b29b      	uxth	r3, r3
 8003670:	3b01      	subs	r3, #1
 8003672:	b299      	uxth	r1, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2256      	movs	r2, #86	@ 0x56
 8003678:	5299      	strh	r1, [r3, r2]
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	46bd      	mov	sp, r7
 800367e:	b00a      	add	sp, #40	@ 0x28
 8003680:	bd80      	pop	{r7, pc}

08003682 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b08c      	sub	sp, #48	@ 0x30
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2288      	movs	r2, #136	@ 0x88
 800368e:	589b      	ldr	r3, [r3, r2]
 8003690:	2b21      	cmp	r3, #33	@ 0x21
 8003692:	d151      	bne.n	8003738 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2256      	movs	r2, #86	@ 0x56
 8003698:	5a9b      	ldrh	r3, [r3, r2]
 800369a:	b29b      	uxth	r3, r3
 800369c:	2b00      	cmp	r3, #0
 800369e:	d132      	bne.n	8003706 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a0:	f3ef 8310 	mrs	r3, PRIMASK
 80036a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80036a6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80036a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036aa:	2301      	movs	r3, #1
 80036ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	f383 8810 	msr	PRIMASK, r3
}
 80036b4:	46c0      	nop			@ (mov r8, r8)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2180      	movs	r1, #128	@ 0x80
 80036c2:	438a      	bics	r2, r1
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	f383 8810 	msr	PRIMASK, r3
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036d2:	f3ef 8310 	mrs	r3, PRIMASK
 80036d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80036d8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036da:	627b      	str	r3, [r7, #36]	@ 0x24
 80036dc:	2301      	movs	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f383 8810 	msr	PRIMASK, r3
}
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	2140      	movs	r1, #64	@ 0x40
 80036f4:	430a      	orrs	r2, r1
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003704:	e018      	b.n	8003738 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800370a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800370c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	001a      	movs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	05d2      	lsls	r2, r2, #23
 8003718:	0dd2      	lsrs	r2, r2, #23
 800371a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2256      	movs	r2, #86	@ 0x56
 800372a:	5a9b      	ldrh	r3, [r3, r2]
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b299      	uxth	r1, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2256      	movs	r2, #86	@ 0x56
 8003736:	5299      	strh	r1, [r3, r2]
}
 8003738:	46c0      	nop			@ (mov r8, r8)
 800373a:	46bd      	mov	sp, r7
 800373c:	b00c      	add	sp, #48	@ 0x30
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	@ 0x30
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2288      	movs	r2, #136	@ 0x88
 800374c:	589b      	ldr	r3, [r3, r2]
 800374e:	2b21      	cmp	r3, #33	@ 0x21
 8003750:	d165      	bne.n	800381e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003752:	232e      	movs	r3, #46	@ 0x2e
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	216a      	movs	r1, #106	@ 0x6a
 800375a:	5a52      	ldrh	r2, [r2, r1]
 800375c:	801a      	strh	r2, [r3, #0]
 800375e:	e059      	b.n	8003814 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2256      	movs	r2, #86	@ 0x56
 8003764:	5a9b      	ldrh	r3, [r3, r2]
 8003766:	b29b      	uxth	r3, r3
 8003768:	2b00      	cmp	r3, #0
 800376a:	d133      	bne.n	80037d4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800376c:	f3ef 8310 	mrs	r3, PRIMASK
 8003770:	60fb      	str	r3, [r7, #12]
  return(result);
 8003772:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003776:	2301      	movs	r3, #1
 8003778:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f383 8810 	msr	PRIMASK, r3
}
 8003780:	46c0      	nop			@ (mov r8, r8)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689a      	ldr	r2, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4926      	ldr	r1, [pc, #152]	@ (8003828 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800378e:	400a      	ands	r2, r1
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f383 8810 	msr	PRIMASK, r3
}
 800379c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800379e:	f3ef 8310 	mrs	r3, PRIMASK
 80037a2:	61bb      	str	r3, [r7, #24]
  return(result);
 80037a4:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a8:	2301      	movs	r3, #1
 80037aa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ac:	69fb      	ldr	r3, [r7, #28]
 80037ae:	f383 8810 	msr	PRIMASK, r3
}
 80037b2:	46c0      	nop			@ (mov r8, r8)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2140      	movs	r1, #64	@ 0x40
 80037c0:	430a      	orrs	r2, r1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	f383 8810 	msr	PRIMASK, r3
}
 80037ce:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80037d0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80037d2:	e024      	b.n	800381e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	2280      	movs	r2, #128	@ 0x80
 80037dc:	4013      	ands	r3, r2
 80037de:	d013      	beq.n	8003808 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e4:	781a      	ldrb	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f0:	1c5a      	adds	r2, r3, #1
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2256      	movs	r2, #86	@ 0x56
 80037fa:	5a9b      	ldrh	r3, [r3, r2]
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b299      	uxth	r1, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2256      	movs	r2, #86	@ 0x56
 8003806:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003808:	212e      	movs	r1, #46	@ 0x2e
 800380a:	187b      	adds	r3, r7, r1
 800380c:	881a      	ldrh	r2, [r3, #0]
 800380e:	187b      	adds	r3, r7, r1
 8003810:	3a01      	subs	r2, #1
 8003812:	801a      	strh	r2, [r3, #0]
 8003814:	232e      	movs	r3, #46	@ 0x2e
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	881b      	ldrh	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1a0      	bne.n	8003760 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800381e:	46c0      	nop			@ (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b00c      	add	sp, #48	@ 0x30
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	ff7fffff 	.word	0xff7fffff

0800382c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b08c      	sub	sp, #48	@ 0x30
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2288      	movs	r2, #136	@ 0x88
 8003838:	589b      	ldr	r3, [r3, r2]
 800383a:	2b21      	cmp	r3, #33	@ 0x21
 800383c:	d16a      	bne.n	8003914 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800383e:	232e      	movs	r3, #46	@ 0x2e
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	216a      	movs	r1, #106	@ 0x6a
 8003846:	5a52      	ldrh	r2, [r2, r1]
 8003848:	801a      	strh	r2, [r3, #0]
 800384a:	e05e      	b.n	800390a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2256      	movs	r2, #86	@ 0x56
 8003850:	5a9b      	ldrh	r3, [r3, r2]
 8003852:	b29b      	uxth	r3, r3
 8003854:	2b00      	cmp	r3, #0
 8003856:	d133      	bne.n	80038c0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003858:	f3ef 8310 	mrs	r3, PRIMASK
 800385c:	60bb      	str	r3, [r7, #8]
  return(result);
 800385e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003860:	627b      	str	r3, [r7, #36]	@ 0x24
 8003862:	2301      	movs	r3, #1
 8003864:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4928      	ldr	r1, [pc, #160]	@ (800391c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800387a:	400a      	ands	r2, r1
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	f383 8810 	msr	PRIMASK, r3
}
 8003888:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800388a:	f3ef 8310 	mrs	r3, PRIMASK
 800388e:	617b      	str	r3, [r7, #20]
  return(result);
 8003890:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	2301      	movs	r3, #1
 8003896:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2140      	movs	r1, #64	@ 0x40
 80038ac:	430a      	orrs	r2, r1
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	6a3b      	ldr	r3, [r7, #32]
 80038b2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f383 8810 	msr	PRIMASK, r3
}
 80038ba:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80038bc:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80038be:	e029      	b.n	8003914 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	2280      	movs	r2, #128	@ 0x80
 80038c8:	4013      	ands	r3, r2
 80038ca:	d018      	beq.n	80038fe <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80038d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038d4:	881b      	ldrh	r3, [r3, #0]
 80038d6:	001a      	movs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	05d2      	lsls	r2, r2, #23
 80038de:	0dd2      	lsrs	r2, r2, #23
 80038e0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e6:	1c9a      	adds	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2256      	movs	r2, #86	@ 0x56
 80038f0:	5a9b      	ldrh	r3, [r3, r2]
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b299      	uxth	r1, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2256      	movs	r2, #86	@ 0x56
 80038fc:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038fe:	212e      	movs	r1, #46	@ 0x2e
 8003900:	187b      	adds	r3, r7, r1
 8003902:	881a      	ldrh	r2, [r3, #0]
 8003904:	187b      	adds	r3, r7, r1
 8003906:	3a01      	subs	r2, #1
 8003908:	801a      	strh	r2, [r3, #0]
 800390a:	232e      	movs	r3, #46	@ 0x2e
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	881b      	ldrh	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d19b      	bne.n	800384c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003914:	46c0      	nop			@ (mov r8, r8)
 8003916:	46bd      	mov	sp, r7
 8003918:	b00c      	add	sp, #48	@ 0x30
 800391a:	bd80      	pop	{r7, pc}
 800391c:	ff7fffff 	.word	0xff7fffff

08003920 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003928:	f3ef 8310 	mrs	r3, PRIMASK
 800392c:	60bb      	str	r3, [r7, #8]
  return(result);
 800392e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	2301      	movs	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f383 8810 	msr	PRIMASK, r3
}
 800393c:	46c0      	nop			@ (mov r8, r8)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	2140      	movs	r1, #64	@ 0x40
 800394a:	438a      	bics	r2, r1
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	f383 8810 	msr	PRIMASK, r3
}
 8003958:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2288      	movs	r2, #136	@ 0x88
 800395e:	2120      	movs	r1, #32
 8003960:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	0018      	movs	r0, r3
 800396c:	f7ff fa24 	bl	8002db8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	46bd      	mov	sp, r7
 8003974:	b006      	add	sp, #24
 8003976:	bd80      	pop	{r7, pc}

08003978 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003980:	46c0      	nop			@ (mov r8, r8)
 8003982:	46bd      	mov	sp, r7
 8003984:	b002      	add	sp, #8
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80039a0:	46c0      	nop			@ (mov r8, r8)
 80039a2:	46bd      	mov	sp, r7
 80039a4:	b002      	add	sp, #8
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <siprintf>:
 80039a8:	b40e      	push	{r1, r2, r3}
 80039aa:	b500      	push	{lr}
 80039ac:	490b      	ldr	r1, [pc, #44]	@ (80039dc <siprintf+0x34>)
 80039ae:	b09c      	sub	sp, #112	@ 0x70
 80039b0:	ab1d      	add	r3, sp, #116	@ 0x74
 80039b2:	9002      	str	r0, [sp, #8]
 80039b4:	9006      	str	r0, [sp, #24]
 80039b6:	9107      	str	r1, [sp, #28]
 80039b8:	9104      	str	r1, [sp, #16]
 80039ba:	4809      	ldr	r0, [pc, #36]	@ (80039e0 <siprintf+0x38>)
 80039bc:	4909      	ldr	r1, [pc, #36]	@ (80039e4 <siprintf+0x3c>)
 80039be:	cb04      	ldmia	r3!, {r2}
 80039c0:	9105      	str	r1, [sp, #20]
 80039c2:	6800      	ldr	r0, [r0, #0]
 80039c4:	a902      	add	r1, sp, #8
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	f000 f9cc 	bl	8003d64 <_svfiprintf_r>
 80039cc:	2200      	movs	r2, #0
 80039ce:	9b02      	ldr	r3, [sp, #8]
 80039d0:	701a      	strb	r2, [r3, #0]
 80039d2:	b01c      	add	sp, #112	@ 0x70
 80039d4:	bc08      	pop	{r3}
 80039d6:	b003      	add	sp, #12
 80039d8:	4718      	bx	r3
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	7fffffff 	.word	0x7fffffff
 80039e0:	20000044 	.word	0x20000044
 80039e4:	ffff0208 	.word	0xffff0208

080039e8 <memset>:
 80039e8:	0003      	movs	r3, r0
 80039ea:	1882      	adds	r2, r0, r2
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d100      	bne.n	80039f2 <memset+0xa>
 80039f0:	4770      	bx	lr
 80039f2:	7019      	strb	r1, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	e7f9      	b.n	80039ec <memset+0x4>

080039f8 <strchr>:
 80039f8:	b2c9      	uxtb	r1, r1
 80039fa:	7803      	ldrb	r3, [r0, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d004      	beq.n	8003a0a <strchr+0x12>
 8003a00:	428b      	cmp	r3, r1
 8003a02:	d100      	bne.n	8003a06 <strchr+0xe>
 8003a04:	4770      	bx	lr
 8003a06:	3001      	adds	r0, #1
 8003a08:	e7f7      	b.n	80039fa <strchr+0x2>
 8003a0a:	424b      	negs	r3, r1
 8003a0c:	4159      	adcs	r1, r3
 8003a0e:	4249      	negs	r1, r1
 8003a10:	4008      	ands	r0, r1
 8003a12:	e7f7      	b.n	8003a04 <strchr+0xc>

08003a14 <strstr>:
 8003a14:	780a      	ldrb	r2, [r1, #0]
 8003a16:	b530      	push	{r4, r5, lr}
 8003a18:	2a00      	cmp	r2, #0
 8003a1a:	d10c      	bne.n	8003a36 <strstr+0x22>
 8003a1c:	bd30      	pop	{r4, r5, pc}
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d108      	bne.n	8003a34 <strstr+0x20>
 8003a22:	2301      	movs	r3, #1
 8003a24:	5ccc      	ldrb	r4, [r1, r3]
 8003a26:	2c00      	cmp	r4, #0
 8003a28:	d0f8      	beq.n	8003a1c <strstr+0x8>
 8003a2a:	5cc5      	ldrb	r5, [r0, r3]
 8003a2c:	42a5      	cmp	r5, r4
 8003a2e:	d101      	bne.n	8003a34 <strstr+0x20>
 8003a30:	3301      	adds	r3, #1
 8003a32:	e7f7      	b.n	8003a24 <strstr+0x10>
 8003a34:	3001      	adds	r0, #1
 8003a36:	7803      	ldrb	r3, [r0, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f0      	bne.n	8003a1e <strstr+0xa>
 8003a3c:	0018      	movs	r0, r3
 8003a3e:	e7ed      	b.n	8003a1c <strstr+0x8>

08003a40 <__errno>:
 8003a40:	4b01      	ldr	r3, [pc, #4]	@ (8003a48 <__errno+0x8>)
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	4770      	bx	lr
 8003a46:	46c0      	nop			@ (mov r8, r8)
 8003a48:	20000044 	.word	0x20000044

08003a4c <__libc_init_array>:
 8003a4c:	b570      	push	{r4, r5, r6, lr}
 8003a4e:	2600      	movs	r6, #0
 8003a50:	4c0c      	ldr	r4, [pc, #48]	@ (8003a84 <__libc_init_array+0x38>)
 8003a52:	4d0d      	ldr	r5, [pc, #52]	@ (8003a88 <__libc_init_array+0x3c>)
 8003a54:	1b64      	subs	r4, r4, r5
 8003a56:	10a4      	asrs	r4, r4, #2
 8003a58:	42a6      	cmp	r6, r4
 8003a5a:	d109      	bne.n	8003a70 <__libc_init_array+0x24>
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	f000 fc65 	bl	800432c <_init>
 8003a62:	4c0a      	ldr	r4, [pc, #40]	@ (8003a8c <__libc_init_array+0x40>)
 8003a64:	4d0a      	ldr	r5, [pc, #40]	@ (8003a90 <__libc_init_array+0x44>)
 8003a66:	1b64      	subs	r4, r4, r5
 8003a68:	10a4      	asrs	r4, r4, #2
 8003a6a:	42a6      	cmp	r6, r4
 8003a6c:	d105      	bne.n	8003a7a <__libc_init_array+0x2e>
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	00b3      	lsls	r3, r6, #2
 8003a72:	58eb      	ldr	r3, [r5, r3]
 8003a74:	4798      	blx	r3
 8003a76:	3601      	adds	r6, #1
 8003a78:	e7ee      	b.n	8003a58 <__libc_init_array+0xc>
 8003a7a:	00b3      	lsls	r3, r6, #2
 8003a7c:	58eb      	ldr	r3, [r5, r3]
 8003a7e:	4798      	blx	r3
 8003a80:	3601      	adds	r6, #1
 8003a82:	e7f2      	b.n	8003a6a <__libc_init_array+0x1e>
 8003a84:	0800588c 	.word	0x0800588c
 8003a88:	0800588c 	.word	0x0800588c
 8003a8c:	08005890 	.word	0x08005890
 8003a90:	0800588c 	.word	0x0800588c

08003a94 <__retarget_lock_acquire_recursive>:
 8003a94:	4770      	bx	lr

08003a96 <__retarget_lock_release_recursive>:
 8003a96:	4770      	bx	lr

08003a98 <memcpy>:
 8003a98:	2300      	movs	r3, #0
 8003a9a:	b510      	push	{r4, lr}
 8003a9c:	429a      	cmp	r2, r3
 8003a9e:	d100      	bne.n	8003aa2 <memcpy+0xa>
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	5ccc      	ldrb	r4, [r1, r3]
 8003aa4:	54c4      	strb	r4, [r0, r3]
 8003aa6:	3301      	adds	r3, #1
 8003aa8:	e7f8      	b.n	8003a9c <memcpy+0x4>
	...

08003aac <_free_r>:
 8003aac:	b570      	push	{r4, r5, r6, lr}
 8003aae:	0005      	movs	r5, r0
 8003ab0:	1e0c      	subs	r4, r1, #0
 8003ab2:	d010      	beq.n	8003ad6 <_free_r+0x2a>
 8003ab4:	3c04      	subs	r4, #4
 8003ab6:	6823      	ldr	r3, [r4, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	da00      	bge.n	8003abe <_free_r+0x12>
 8003abc:	18e4      	adds	r4, r4, r3
 8003abe:	0028      	movs	r0, r5
 8003ac0:	f000 f8e0 	bl	8003c84 <__malloc_lock>
 8003ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b3c <_free_r+0x90>)
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d105      	bne.n	8003ad8 <_free_r+0x2c>
 8003acc:	6063      	str	r3, [r4, #4]
 8003ace:	6014      	str	r4, [r2, #0]
 8003ad0:	0028      	movs	r0, r5
 8003ad2:	f000 f8df 	bl	8003c94 <__malloc_unlock>
 8003ad6:	bd70      	pop	{r4, r5, r6, pc}
 8003ad8:	42a3      	cmp	r3, r4
 8003ada:	d908      	bls.n	8003aee <_free_r+0x42>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	1821      	adds	r1, r4, r0
 8003ae0:	428b      	cmp	r3, r1
 8003ae2:	d1f3      	bne.n	8003acc <_free_r+0x20>
 8003ae4:	6819      	ldr	r1, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	1809      	adds	r1, r1, r0
 8003aea:	6021      	str	r1, [r4, #0]
 8003aec:	e7ee      	b.n	8003acc <_free_r+0x20>
 8003aee:	001a      	movs	r2, r3
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d001      	beq.n	8003afa <_free_r+0x4e>
 8003af6:	42a3      	cmp	r3, r4
 8003af8:	d9f9      	bls.n	8003aee <_free_r+0x42>
 8003afa:	6811      	ldr	r1, [r2, #0]
 8003afc:	1850      	adds	r0, r2, r1
 8003afe:	42a0      	cmp	r0, r4
 8003b00:	d10b      	bne.n	8003b1a <_free_r+0x6e>
 8003b02:	6820      	ldr	r0, [r4, #0]
 8003b04:	1809      	adds	r1, r1, r0
 8003b06:	1850      	adds	r0, r2, r1
 8003b08:	6011      	str	r1, [r2, #0]
 8003b0a:	4283      	cmp	r3, r0
 8003b0c:	d1e0      	bne.n	8003ad0 <_free_r+0x24>
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	1841      	adds	r1, r0, r1
 8003b14:	6011      	str	r1, [r2, #0]
 8003b16:	6053      	str	r3, [r2, #4]
 8003b18:	e7da      	b.n	8003ad0 <_free_r+0x24>
 8003b1a:	42a0      	cmp	r0, r4
 8003b1c:	d902      	bls.n	8003b24 <_free_r+0x78>
 8003b1e:	230c      	movs	r3, #12
 8003b20:	602b      	str	r3, [r5, #0]
 8003b22:	e7d5      	b.n	8003ad0 <_free_r+0x24>
 8003b24:	6820      	ldr	r0, [r4, #0]
 8003b26:	1821      	adds	r1, r4, r0
 8003b28:	428b      	cmp	r3, r1
 8003b2a:	d103      	bne.n	8003b34 <_free_r+0x88>
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	1809      	adds	r1, r1, r0
 8003b32:	6021      	str	r1, [r4, #0]
 8003b34:	6063      	str	r3, [r4, #4]
 8003b36:	6054      	str	r4, [r2, #4]
 8003b38:	e7ca      	b.n	8003ad0 <_free_r+0x24>
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	200007c4 	.word	0x200007c4

08003b40 <sbrk_aligned>:
 8003b40:	b570      	push	{r4, r5, r6, lr}
 8003b42:	4e0f      	ldr	r6, [pc, #60]	@ (8003b80 <sbrk_aligned+0x40>)
 8003b44:	000d      	movs	r5, r1
 8003b46:	6831      	ldr	r1, [r6, #0]
 8003b48:	0004      	movs	r4, r0
 8003b4a:	2900      	cmp	r1, #0
 8003b4c:	d102      	bne.n	8003b54 <sbrk_aligned+0x14>
 8003b4e:	f000 fb99 	bl	8004284 <_sbrk_r>
 8003b52:	6030      	str	r0, [r6, #0]
 8003b54:	0029      	movs	r1, r5
 8003b56:	0020      	movs	r0, r4
 8003b58:	f000 fb94 	bl	8004284 <_sbrk_r>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d103      	bne.n	8003b68 <sbrk_aligned+0x28>
 8003b60:	2501      	movs	r5, #1
 8003b62:	426d      	negs	r5, r5
 8003b64:	0028      	movs	r0, r5
 8003b66:	bd70      	pop	{r4, r5, r6, pc}
 8003b68:	2303      	movs	r3, #3
 8003b6a:	1cc5      	adds	r5, r0, #3
 8003b6c:	439d      	bics	r5, r3
 8003b6e:	42a8      	cmp	r0, r5
 8003b70:	d0f8      	beq.n	8003b64 <sbrk_aligned+0x24>
 8003b72:	1a29      	subs	r1, r5, r0
 8003b74:	0020      	movs	r0, r4
 8003b76:	f000 fb85 	bl	8004284 <_sbrk_r>
 8003b7a:	3001      	adds	r0, #1
 8003b7c:	d1f2      	bne.n	8003b64 <sbrk_aligned+0x24>
 8003b7e:	e7ef      	b.n	8003b60 <sbrk_aligned+0x20>
 8003b80:	200007c0 	.word	0x200007c0

08003b84 <_malloc_r>:
 8003b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b86:	2203      	movs	r2, #3
 8003b88:	1ccb      	adds	r3, r1, #3
 8003b8a:	4393      	bics	r3, r2
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	0005      	movs	r5, r0
 8003b90:	001f      	movs	r7, r3
 8003b92:	2b0c      	cmp	r3, #12
 8003b94:	d234      	bcs.n	8003c00 <_malloc_r+0x7c>
 8003b96:	270c      	movs	r7, #12
 8003b98:	42b9      	cmp	r1, r7
 8003b9a:	d833      	bhi.n	8003c04 <_malloc_r+0x80>
 8003b9c:	0028      	movs	r0, r5
 8003b9e:	f000 f871 	bl	8003c84 <__malloc_lock>
 8003ba2:	4e37      	ldr	r6, [pc, #220]	@ (8003c80 <_malloc_r+0xfc>)
 8003ba4:	6833      	ldr	r3, [r6, #0]
 8003ba6:	001c      	movs	r4, r3
 8003ba8:	2c00      	cmp	r4, #0
 8003baa:	d12f      	bne.n	8003c0c <_malloc_r+0x88>
 8003bac:	0039      	movs	r1, r7
 8003bae:	0028      	movs	r0, r5
 8003bb0:	f7ff ffc6 	bl	8003b40 <sbrk_aligned>
 8003bb4:	0004      	movs	r4, r0
 8003bb6:	1c43      	adds	r3, r0, #1
 8003bb8:	d15f      	bne.n	8003c7a <_malloc_r+0xf6>
 8003bba:	6834      	ldr	r4, [r6, #0]
 8003bbc:	9400      	str	r4, [sp, #0]
 8003bbe:	9b00      	ldr	r3, [sp, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d14a      	bne.n	8003c5a <_malloc_r+0xd6>
 8003bc4:	2c00      	cmp	r4, #0
 8003bc6:	d052      	beq.n	8003c6e <_malloc_r+0xea>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	0028      	movs	r0, r5
 8003bcc:	18e3      	adds	r3, r4, r3
 8003bce:	9900      	ldr	r1, [sp, #0]
 8003bd0:	9301      	str	r3, [sp, #4]
 8003bd2:	f000 fb57 	bl	8004284 <_sbrk_r>
 8003bd6:	9b01      	ldr	r3, [sp, #4]
 8003bd8:	4283      	cmp	r3, r0
 8003bda:	d148      	bne.n	8003c6e <_malloc_r+0xea>
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	0028      	movs	r0, r5
 8003be0:	1aff      	subs	r7, r7, r3
 8003be2:	0039      	movs	r1, r7
 8003be4:	f7ff ffac 	bl	8003b40 <sbrk_aligned>
 8003be8:	3001      	adds	r0, #1
 8003bea:	d040      	beq.n	8003c6e <_malloc_r+0xea>
 8003bec:	6823      	ldr	r3, [r4, #0]
 8003bee:	19db      	adds	r3, r3, r7
 8003bf0:	6023      	str	r3, [r4, #0]
 8003bf2:	6833      	ldr	r3, [r6, #0]
 8003bf4:	685a      	ldr	r2, [r3, #4]
 8003bf6:	2a00      	cmp	r2, #0
 8003bf8:	d133      	bne.n	8003c62 <_malloc_r+0xde>
 8003bfa:	9b00      	ldr	r3, [sp, #0]
 8003bfc:	6033      	str	r3, [r6, #0]
 8003bfe:	e019      	b.n	8003c34 <_malloc_r+0xb0>
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	dac9      	bge.n	8003b98 <_malloc_r+0x14>
 8003c04:	230c      	movs	r3, #12
 8003c06:	602b      	str	r3, [r5, #0]
 8003c08:	2000      	movs	r0, #0
 8003c0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003c0c:	6821      	ldr	r1, [r4, #0]
 8003c0e:	1bc9      	subs	r1, r1, r7
 8003c10:	d420      	bmi.n	8003c54 <_malloc_r+0xd0>
 8003c12:	290b      	cmp	r1, #11
 8003c14:	d90a      	bls.n	8003c2c <_malloc_r+0xa8>
 8003c16:	19e2      	adds	r2, r4, r7
 8003c18:	6027      	str	r7, [r4, #0]
 8003c1a:	42a3      	cmp	r3, r4
 8003c1c:	d104      	bne.n	8003c28 <_malloc_r+0xa4>
 8003c1e:	6032      	str	r2, [r6, #0]
 8003c20:	6863      	ldr	r3, [r4, #4]
 8003c22:	6011      	str	r1, [r2, #0]
 8003c24:	6053      	str	r3, [r2, #4]
 8003c26:	e005      	b.n	8003c34 <_malloc_r+0xb0>
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	e7f9      	b.n	8003c20 <_malloc_r+0x9c>
 8003c2c:	6862      	ldr	r2, [r4, #4]
 8003c2e:	42a3      	cmp	r3, r4
 8003c30:	d10e      	bne.n	8003c50 <_malloc_r+0xcc>
 8003c32:	6032      	str	r2, [r6, #0]
 8003c34:	0028      	movs	r0, r5
 8003c36:	f000 f82d 	bl	8003c94 <__malloc_unlock>
 8003c3a:	0020      	movs	r0, r4
 8003c3c:	2207      	movs	r2, #7
 8003c3e:	300b      	adds	r0, #11
 8003c40:	1d23      	adds	r3, r4, #4
 8003c42:	4390      	bics	r0, r2
 8003c44:	1ac2      	subs	r2, r0, r3
 8003c46:	4298      	cmp	r0, r3
 8003c48:	d0df      	beq.n	8003c0a <_malloc_r+0x86>
 8003c4a:	1a1b      	subs	r3, r3, r0
 8003c4c:	50a3      	str	r3, [r4, r2]
 8003c4e:	e7dc      	b.n	8003c0a <_malloc_r+0x86>
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	e7ef      	b.n	8003c34 <_malloc_r+0xb0>
 8003c54:	0023      	movs	r3, r4
 8003c56:	6864      	ldr	r4, [r4, #4]
 8003c58:	e7a6      	b.n	8003ba8 <_malloc_r+0x24>
 8003c5a:	9c00      	ldr	r4, [sp, #0]
 8003c5c:	6863      	ldr	r3, [r4, #4]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	e7ad      	b.n	8003bbe <_malloc_r+0x3a>
 8003c62:	001a      	movs	r2, r3
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	42a3      	cmp	r3, r4
 8003c68:	d1fb      	bne.n	8003c62 <_malloc_r+0xde>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e7da      	b.n	8003c24 <_malloc_r+0xa0>
 8003c6e:	230c      	movs	r3, #12
 8003c70:	0028      	movs	r0, r5
 8003c72:	602b      	str	r3, [r5, #0]
 8003c74:	f000 f80e 	bl	8003c94 <__malloc_unlock>
 8003c78:	e7c6      	b.n	8003c08 <_malloc_r+0x84>
 8003c7a:	6007      	str	r7, [r0, #0]
 8003c7c:	e7da      	b.n	8003c34 <_malloc_r+0xb0>
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	200007c4 	.word	0x200007c4

08003c84 <__malloc_lock>:
 8003c84:	b510      	push	{r4, lr}
 8003c86:	4802      	ldr	r0, [pc, #8]	@ (8003c90 <__malloc_lock+0xc>)
 8003c88:	f7ff ff04 	bl	8003a94 <__retarget_lock_acquire_recursive>
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	200007bc 	.word	0x200007bc

08003c94 <__malloc_unlock>:
 8003c94:	b510      	push	{r4, lr}
 8003c96:	4802      	ldr	r0, [pc, #8]	@ (8003ca0 <__malloc_unlock+0xc>)
 8003c98:	f7ff fefd 	bl	8003a96 <__retarget_lock_release_recursive>
 8003c9c:	bd10      	pop	{r4, pc}
 8003c9e:	46c0      	nop			@ (mov r8, r8)
 8003ca0:	200007bc 	.word	0x200007bc

08003ca4 <__ssputs_r>:
 8003ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ca6:	688e      	ldr	r6, [r1, #8]
 8003ca8:	b085      	sub	sp, #20
 8003caa:	001f      	movs	r7, r3
 8003cac:	000c      	movs	r4, r1
 8003cae:	680b      	ldr	r3, [r1, #0]
 8003cb0:	9002      	str	r0, [sp, #8]
 8003cb2:	9203      	str	r2, [sp, #12]
 8003cb4:	42be      	cmp	r6, r7
 8003cb6:	d830      	bhi.n	8003d1a <__ssputs_r+0x76>
 8003cb8:	210c      	movs	r1, #12
 8003cba:	5e62      	ldrsh	r2, [r4, r1]
 8003cbc:	2190      	movs	r1, #144	@ 0x90
 8003cbe:	00c9      	lsls	r1, r1, #3
 8003cc0:	420a      	tst	r2, r1
 8003cc2:	d028      	beq.n	8003d16 <__ssputs_r+0x72>
 8003cc4:	2003      	movs	r0, #3
 8003cc6:	6921      	ldr	r1, [r4, #16]
 8003cc8:	1a5b      	subs	r3, r3, r1
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	6963      	ldr	r3, [r4, #20]
 8003cce:	4343      	muls	r3, r0
 8003cd0:	9801      	ldr	r0, [sp, #4]
 8003cd2:	0fdd      	lsrs	r5, r3, #31
 8003cd4:	18ed      	adds	r5, r5, r3
 8003cd6:	1c7b      	adds	r3, r7, #1
 8003cd8:	181b      	adds	r3, r3, r0
 8003cda:	106d      	asrs	r5, r5, #1
 8003cdc:	42ab      	cmp	r3, r5
 8003cde:	d900      	bls.n	8003ce2 <__ssputs_r+0x3e>
 8003ce0:	001d      	movs	r5, r3
 8003ce2:	0552      	lsls	r2, r2, #21
 8003ce4:	d528      	bpl.n	8003d38 <__ssputs_r+0x94>
 8003ce6:	0029      	movs	r1, r5
 8003ce8:	9802      	ldr	r0, [sp, #8]
 8003cea:	f7ff ff4b 	bl	8003b84 <_malloc_r>
 8003cee:	1e06      	subs	r6, r0, #0
 8003cf0:	d02c      	beq.n	8003d4c <__ssputs_r+0xa8>
 8003cf2:	9a01      	ldr	r2, [sp, #4]
 8003cf4:	6921      	ldr	r1, [r4, #16]
 8003cf6:	f7ff fecf 	bl	8003a98 <memcpy>
 8003cfa:	89a2      	ldrh	r2, [r4, #12]
 8003cfc:	4b18      	ldr	r3, [pc, #96]	@ (8003d60 <__ssputs_r+0xbc>)
 8003cfe:	401a      	ands	r2, r3
 8003d00:	2380      	movs	r3, #128	@ 0x80
 8003d02:	4313      	orrs	r3, r2
 8003d04:	81a3      	strh	r3, [r4, #12]
 8003d06:	9b01      	ldr	r3, [sp, #4]
 8003d08:	6126      	str	r6, [r4, #16]
 8003d0a:	18f6      	adds	r6, r6, r3
 8003d0c:	6026      	str	r6, [r4, #0]
 8003d0e:	003e      	movs	r6, r7
 8003d10:	6165      	str	r5, [r4, #20]
 8003d12:	1aed      	subs	r5, r5, r3
 8003d14:	60a5      	str	r5, [r4, #8]
 8003d16:	42be      	cmp	r6, r7
 8003d18:	d900      	bls.n	8003d1c <__ssputs_r+0x78>
 8003d1a:	003e      	movs	r6, r7
 8003d1c:	0032      	movs	r2, r6
 8003d1e:	9903      	ldr	r1, [sp, #12]
 8003d20:	6820      	ldr	r0, [r4, #0]
 8003d22:	f000 fa9b 	bl	800425c <memmove>
 8003d26:	2000      	movs	r0, #0
 8003d28:	68a3      	ldr	r3, [r4, #8]
 8003d2a:	1b9b      	subs	r3, r3, r6
 8003d2c:	60a3      	str	r3, [r4, #8]
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	199b      	adds	r3, r3, r6
 8003d32:	6023      	str	r3, [r4, #0]
 8003d34:	b005      	add	sp, #20
 8003d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d38:	002a      	movs	r2, r5
 8003d3a:	9802      	ldr	r0, [sp, #8]
 8003d3c:	f000 fabf 	bl	80042be <_realloc_r>
 8003d40:	1e06      	subs	r6, r0, #0
 8003d42:	d1e0      	bne.n	8003d06 <__ssputs_r+0x62>
 8003d44:	6921      	ldr	r1, [r4, #16]
 8003d46:	9802      	ldr	r0, [sp, #8]
 8003d48:	f7ff feb0 	bl	8003aac <_free_r>
 8003d4c:	230c      	movs	r3, #12
 8003d4e:	2001      	movs	r0, #1
 8003d50:	9a02      	ldr	r2, [sp, #8]
 8003d52:	4240      	negs	r0, r0
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	89a2      	ldrh	r2, [r4, #12]
 8003d58:	3334      	adds	r3, #52	@ 0x34
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	81a3      	strh	r3, [r4, #12]
 8003d5e:	e7e9      	b.n	8003d34 <__ssputs_r+0x90>
 8003d60:	fffffb7f 	.word	0xfffffb7f

08003d64 <_svfiprintf_r>:
 8003d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d66:	b0a1      	sub	sp, #132	@ 0x84
 8003d68:	9003      	str	r0, [sp, #12]
 8003d6a:	001d      	movs	r5, r3
 8003d6c:	898b      	ldrh	r3, [r1, #12]
 8003d6e:	000f      	movs	r7, r1
 8003d70:	0016      	movs	r6, r2
 8003d72:	061b      	lsls	r3, r3, #24
 8003d74:	d511      	bpl.n	8003d9a <_svfiprintf_r+0x36>
 8003d76:	690b      	ldr	r3, [r1, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10e      	bne.n	8003d9a <_svfiprintf_r+0x36>
 8003d7c:	2140      	movs	r1, #64	@ 0x40
 8003d7e:	f7ff ff01 	bl	8003b84 <_malloc_r>
 8003d82:	6038      	str	r0, [r7, #0]
 8003d84:	6138      	str	r0, [r7, #16]
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d105      	bne.n	8003d96 <_svfiprintf_r+0x32>
 8003d8a:	230c      	movs	r3, #12
 8003d8c:	9a03      	ldr	r2, [sp, #12]
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	2001      	movs	r0, #1
 8003d92:	4240      	negs	r0, r0
 8003d94:	e0cf      	b.n	8003f36 <_svfiprintf_r+0x1d2>
 8003d96:	2340      	movs	r3, #64	@ 0x40
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	ac08      	add	r4, sp, #32
 8003d9e:	6163      	str	r3, [r4, #20]
 8003da0:	3320      	adds	r3, #32
 8003da2:	7663      	strb	r3, [r4, #25]
 8003da4:	3310      	adds	r3, #16
 8003da6:	76a3      	strb	r3, [r4, #26]
 8003da8:	9507      	str	r5, [sp, #28]
 8003daa:	0035      	movs	r5, r6
 8003dac:	782b      	ldrb	r3, [r5, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <_svfiprintf_r+0x52>
 8003db2:	2b25      	cmp	r3, #37	@ 0x25
 8003db4:	d148      	bne.n	8003e48 <_svfiprintf_r+0xe4>
 8003db6:	1bab      	subs	r3, r5, r6
 8003db8:	9305      	str	r3, [sp, #20]
 8003dba:	42b5      	cmp	r5, r6
 8003dbc:	d00b      	beq.n	8003dd6 <_svfiprintf_r+0x72>
 8003dbe:	0032      	movs	r2, r6
 8003dc0:	0039      	movs	r1, r7
 8003dc2:	9803      	ldr	r0, [sp, #12]
 8003dc4:	f7ff ff6e 	bl	8003ca4 <__ssputs_r>
 8003dc8:	3001      	adds	r0, #1
 8003dca:	d100      	bne.n	8003dce <_svfiprintf_r+0x6a>
 8003dcc:	e0ae      	b.n	8003f2c <_svfiprintf_r+0x1c8>
 8003dce:	6963      	ldr	r3, [r4, #20]
 8003dd0:	9a05      	ldr	r2, [sp, #20]
 8003dd2:	189b      	adds	r3, r3, r2
 8003dd4:	6163      	str	r3, [r4, #20]
 8003dd6:	782b      	ldrb	r3, [r5, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d100      	bne.n	8003dde <_svfiprintf_r+0x7a>
 8003ddc:	e0a6      	b.n	8003f2c <_svfiprintf_r+0x1c8>
 8003dde:	2201      	movs	r2, #1
 8003de0:	2300      	movs	r3, #0
 8003de2:	4252      	negs	r2, r2
 8003de4:	6062      	str	r2, [r4, #4]
 8003de6:	a904      	add	r1, sp, #16
 8003de8:	3254      	adds	r2, #84	@ 0x54
 8003dea:	1852      	adds	r2, r2, r1
 8003dec:	1c6e      	adds	r6, r5, #1
 8003dee:	6023      	str	r3, [r4, #0]
 8003df0:	60e3      	str	r3, [r4, #12]
 8003df2:	60a3      	str	r3, [r4, #8]
 8003df4:	7013      	strb	r3, [r2, #0]
 8003df6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003df8:	4b54      	ldr	r3, [pc, #336]	@ (8003f4c <_svfiprintf_r+0x1e8>)
 8003dfa:	2205      	movs	r2, #5
 8003dfc:	0018      	movs	r0, r3
 8003dfe:	7831      	ldrb	r1, [r6, #0]
 8003e00:	9305      	str	r3, [sp, #20]
 8003e02:	f000 fa51 	bl	80042a8 <memchr>
 8003e06:	1c75      	adds	r5, r6, #1
 8003e08:	2800      	cmp	r0, #0
 8003e0a:	d11f      	bne.n	8003e4c <_svfiprintf_r+0xe8>
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	06d3      	lsls	r3, r2, #27
 8003e10:	d504      	bpl.n	8003e1c <_svfiprintf_r+0xb8>
 8003e12:	2353      	movs	r3, #83	@ 0x53
 8003e14:	a904      	add	r1, sp, #16
 8003e16:	185b      	adds	r3, r3, r1
 8003e18:	2120      	movs	r1, #32
 8003e1a:	7019      	strb	r1, [r3, #0]
 8003e1c:	0713      	lsls	r3, r2, #28
 8003e1e:	d504      	bpl.n	8003e2a <_svfiprintf_r+0xc6>
 8003e20:	2353      	movs	r3, #83	@ 0x53
 8003e22:	a904      	add	r1, sp, #16
 8003e24:	185b      	adds	r3, r3, r1
 8003e26:	212b      	movs	r1, #43	@ 0x2b
 8003e28:	7019      	strb	r1, [r3, #0]
 8003e2a:	7833      	ldrb	r3, [r6, #0]
 8003e2c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e2e:	d016      	beq.n	8003e5e <_svfiprintf_r+0xfa>
 8003e30:	0035      	movs	r5, r6
 8003e32:	2100      	movs	r1, #0
 8003e34:	200a      	movs	r0, #10
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	782a      	ldrb	r2, [r5, #0]
 8003e3a:	1c6e      	adds	r6, r5, #1
 8003e3c:	3a30      	subs	r2, #48	@ 0x30
 8003e3e:	2a09      	cmp	r2, #9
 8003e40:	d950      	bls.n	8003ee4 <_svfiprintf_r+0x180>
 8003e42:	2900      	cmp	r1, #0
 8003e44:	d111      	bne.n	8003e6a <_svfiprintf_r+0x106>
 8003e46:	e017      	b.n	8003e78 <_svfiprintf_r+0x114>
 8003e48:	3501      	adds	r5, #1
 8003e4a:	e7af      	b.n	8003dac <_svfiprintf_r+0x48>
 8003e4c:	9b05      	ldr	r3, [sp, #20]
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	1ac0      	subs	r0, r0, r3
 8003e52:	2301      	movs	r3, #1
 8003e54:	4083      	lsls	r3, r0
 8003e56:	4313      	orrs	r3, r2
 8003e58:	002e      	movs	r6, r5
 8003e5a:	6023      	str	r3, [r4, #0]
 8003e5c:	e7cc      	b.n	8003df8 <_svfiprintf_r+0x94>
 8003e5e:	9b07      	ldr	r3, [sp, #28]
 8003e60:	1d19      	adds	r1, r3, #4
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	9107      	str	r1, [sp, #28]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	db01      	blt.n	8003e6e <_svfiprintf_r+0x10a>
 8003e6a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003e6c:	e004      	b.n	8003e78 <_svfiprintf_r+0x114>
 8003e6e:	425b      	negs	r3, r3
 8003e70:	60e3      	str	r3, [r4, #12]
 8003e72:	2302      	movs	r3, #2
 8003e74:	4313      	orrs	r3, r2
 8003e76:	6023      	str	r3, [r4, #0]
 8003e78:	782b      	ldrb	r3, [r5, #0]
 8003e7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003e7c:	d10c      	bne.n	8003e98 <_svfiprintf_r+0x134>
 8003e7e:	786b      	ldrb	r3, [r5, #1]
 8003e80:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e82:	d134      	bne.n	8003eee <_svfiprintf_r+0x18a>
 8003e84:	9b07      	ldr	r3, [sp, #28]
 8003e86:	3502      	adds	r5, #2
 8003e88:	1d1a      	adds	r2, r3, #4
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	9207      	str	r2, [sp, #28]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	da01      	bge.n	8003e96 <_svfiprintf_r+0x132>
 8003e92:	2301      	movs	r3, #1
 8003e94:	425b      	negs	r3, r3
 8003e96:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e98:	4e2d      	ldr	r6, [pc, #180]	@ (8003f50 <_svfiprintf_r+0x1ec>)
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	0030      	movs	r0, r6
 8003e9e:	7829      	ldrb	r1, [r5, #0]
 8003ea0:	f000 fa02 	bl	80042a8 <memchr>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d006      	beq.n	8003eb6 <_svfiprintf_r+0x152>
 8003ea8:	2340      	movs	r3, #64	@ 0x40
 8003eaa:	1b80      	subs	r0, r0, r6
 8003eac:	4083      	lsls	r3, r0
 8003eae:	6822      	ldr	r2, [r4, #0]
 8003eb0:	3501      	adds	r5, #1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	6023      	str	r3, [r4, #0]
 8003eb6:	7829      	ldrb	r1, [r5, #0]
 8003eb8:	2206      	movs	r2, #6
 8003eba:	4826      	ldr	r0, [pc, #152]	@ (8003f54 <_svfiprintf_r+0x1f0>)
 8003ebc:	1c6e      	adds	r6, r5, #1
 8003ebe:	7621      	strb	r1, [r4, #24]
 8003ec0:	f000 f9f2 	bl	80042a8 <memchr>
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d038      	beq.n	8003f3a <_svfiprintf_r+0x1d6>
 8003ec8:	4b23      	ldr	r3, [pc, #140]	@ (8003f58 <_svfiprintf_r+0x1f4>)
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d122      	bne.n	8003f14 <_svfiprintf_r+0x1b0>
 8003ece:	2207      	movs	r2, #7
 8003ed0:	9b07      	ldr	r3, [sp, #28]
 8003ed2:	3307      	adds	r3, #7
 8003ed4:	4393      	bics	r3, r2
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	9307      	str	r3, [sp, #28]
 8003eda:	6963      	ldr	r3, [r4, #20]
 8003edc:	9a04      	ldr	r2, [sp, #16]
 8003ede:	189b      	adds	r3, r3, r2
 8003ee0:	6163      	str	r3, [r4, #20]
 8003ee2:	e762      	b.n	8003daa <_svfiprintf_r+0x46>
 8003ee4:	4343      	muls	r3, r0
 8003ee6:	0035      	movs	r5, r6
 8003ee8:	2101      	movs	r1, #1
 8003eea:	189b      	adds	r3, r3, r2
 8003eec:	e7a4      	b.n	8003e38 <_svfiprintf_r+0xd4>
 8003eee:	2300      	movs	r3, #0
 8003ef0:	200a      	movs	r0, #10
 8003ef2:	0019      	movs	r1, r3
 8003ef4:	3501      	adds	r5, #1
 8003ef6:	6063      	str	r3, [r4, #4]
 8003ef8:	782a      	ldrb	r2, [r5, #0]
 8003efa:	1c6e      	adds	r6, r5, #1
 8003efc:	3a30      	subs	r2, #48	@ 0x30
 8003efe:	2a09      	cmp	r2, #9
 8003f00:	d903      	bls.n	8003f0a <_svfiprintf_r+0x1a6>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d0c8      	beq.n	8003e98 <_svfiprintf_r+0x134>
 8003f06:	9109      	str	r1, [sp, #36]	@ 0x24
 8003f08:	e7c6      	b.n	8003e98 <_svfiprintf_r+0x134>
 8003f0a:	4341      	muls	r1, r0
 8003f0c:	0035      	movs	r5, r6
 8003f0e:	2301      	movs	r3, #1
 8003f10:	1889      	adds	r1, r1, r2
 8003f12:	e7f1      	b.n	8003ef8 <_svfiprintf_r+0x194>
 8003f14:	aa07      	add	r2, sp, #28
 8003f16:	9200      	str	r2, [sp, #0]
 8003f18:	0021      	movs	r1, r4
 8003f1a:	003a      	movs	r2, r7
 8003f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <_svfiprintf_r+0x1f8>)
 8003f1e:	9803      	ldr	r0, [sp, #12]
 8003f20:	e000      	b.n	8003f24 <_svfiprintf_r+0x1c0>
 8003f22:	bf00      	nop
 8003f24:	9004      	str	r0, [sp, #16]
 8003f26:	9b04      	ldr	r3, [sp, #16]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	d1d6      	bne.n	8003eda <_svfiprintf_r+0x176>
 8003f2c:	89bb      	ldrh	r3, [r7, #12]
 8003f2e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8003f30:	065b      	lsls	r3, r3, #25
 8003f32:	d500      	bpl.n	8003f36 <_svfiprintf_r+0x1d2>
 8003f34:	e72c      	b.n	8003d90 <_svfiprintf_r+0x2c>
 8003f36:	b021      	add	sp, #132	@ 0x84
 8003f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f3a:	aa07      	add	r2, sp, #28
 8003f3c:	9200      	str	r2, [sp, #0]
 8003f3e:	0021      	movs	r1, r4
 8003f40:	003a      	movs	r2, r7
 8003f42:	4b06      	ldr	r3, [pc, #24]	@ (8003f5c <_svfiprintf_r+0x1f8>)
 8003f44:	9803      	ldr	r0, [sp, #12]
 8003f46:	f000 f87b 	bl	8004040 <_printf_i>
 8003f4a:	e7eb      	b.n	8003f24 <_svfiprintf_r+0x1c0>
 8003f4c:	08005858 	.word	0x08005858
 8003f50:	0800585e 	.word	0x0800585e
 8003f54:	08005862 	.word	0x08005862
 8003f58:	00000000 	.word	0x00000000
 8003f5c:	08003ca5 	.word	0x08003ca5

08003f60 <_printf_common>:
 8003f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f62:	0016      	movs	r6, r2
 8003f64:	9301      	str	r3, [sp, #4]
 8003f66:	688a      	ldr	r2, [r1, #8]
 8003f68:	690b      	ldr	r3, [r1, #16]
 8003f6a:	000c      	movs	r4, r1
 8003f6c:	9000      	str	r0, [sp, #0]
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	da00      	bge.n	8003f74 <_printf_common+0x14>
 8003f72:	0013      	movs	r3, r2
 8003f74:	0022      	movs	r2, r4
 8003f76:	6033      	str	r3, [r6, #0]
 8003f78:	3243      	adds	r2, #67	@ 0x43
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	2a00      	cmp	r2, #0
 8003f7e:	d001      	beq.n	8003f84 <_printf_common+0x24>
 8003f80:	3301      	adds	r3, #1
 8003f82:	6033      	str	r3, [r6, #0]
 8003f84:	6823      	ldr	r3, [r4, #0]
 8003f86:	069b      	lsls	r3, r3, #26
 8003f88:	d502      	bpl.n	8003f90 <_printf_common+0x30>
 8003f8a:	6833      	ldr	r3, [r6, #0]
 8003f8c:	3302      	adds	r3, #2
 8003f8e:	6033      	str	r3, [r6, #0]
 8003f90:	6822      	ldr	r2, [r4, #0]
 8003f92:	2306      	movs	r3, #6
 8003f94:	0015      	movs	r5, r2
 8003f96:	401d      	ands	r5, r3
 8003f98:	421a      	tst	r2, r3
 8003f9a:	d027      	beq.n	8003fec <_printf_common+0x8c>
 8003f9c:	0023      	movs	r3, r4
 8003f9e:	3343      	adds	r3, #67	@ 0x43
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	1e5a      	subs	r2, r3, #1
 8003fa4:	4193      	sbcs	r3, r2
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	0692      	lsls	r2, r2, #26
 8003faa:	d430      	bmi.n	800400e <_printf_common+0xae>
 8003fac:	0022      	movs	r2, r4
 8003fae:	9901      	ldr	r1, [sp, #4]
 8003fb0:	9800      	ldr	r0, [sp, #0]
 8003fb2:	9d08      	ldr	r5, [sp, #32]
 8003fb4:	3243      	adds	r2, #67	@ 0x43
 8003fb6:	47a8      	blx	r5
 8003fb8:	3001      	adds	r0, #1
 8003fba:	d025      	beq.n	8004008 <_printf_common+0xa8>
 8003fbc:	2206      	movs	r2, #6
 8003fbe:	6823      	ldr	r3, [r4, #0]
 8003fc0:	2500      	movs	r5, #0
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b04      	cmp	r3, #4
 8003fc6:	d105      	bne.n	8003fd4 <_printf_common+0x74>
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	68e5      	ldr	r5, [r4, #12]
 8003fcc:	1aed      	subs	r5, r5, r3
 8003fce:	43eb      	mvns	r3, r5
 8003fd0:	17db      	asrs	r3, r3, #31
 8003fd2:	401d      	ands	r5, r3
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	6922      	ldr	r2, [r4, #16]
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	dd01      	ble.n	8003fe0 <_printf_common+0x80>
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	18ed      	adds	r5, r5, r3
 8003fe0:	2600      	movs	r6, #0
 8003fe2:	42b5      	cmp	r5, r6
 8003fe4:	d120      	bne.n	8004028 <_printf_common+0xc8>
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	e010      	b.n	800400c <_printf_common+0xac>
 8003fea:	3501      	adds	r5, #1
 8003fec:	68e3      	ldr	r3, [r4, #12]
 8003fee:	6832      	ldr	r2, [r6, #0]
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	42ab      	cmp	r3, r5
 8003ff4:	ddd2      	ble.n	8003f9c <_printf_common+0x3c>
 8003ff6:	0022      	movs	r2, r4
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	9901      	ldr	r1, [sp, #4]
 8003ffc:	9800      	ldr	r0, [sp, #0]
 8003ffe:	9f08      	ldr	r7, [sp, #32]
 8004000:	3219      	adds	r2, #25
 8004002:	47b8      	blx	r7
 8004004:	3001      	adds	r0, #1
 8004006:	d1f0      	bne.n	8003fea <_printf_common+0x8a>
 8004008:	2001      	movs	r0, #1
 800400a:	4240      	negs	r0, r0
 800400c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800400e:	2030      	movs	r0, #48	@ 0x30
 8004010:	18e1      	adds	r1, r4, r3
 8004012:	3143      	adds	r1, #67	@ 0x43
 8004014:	7008      	strb	r0, [r1, #0]
 8004016:	0021      	movs	r1, r4
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	3145      	adds	r1, #69	@ 0x45
 800401c:	7809      	ldrb	r1, [r1, #0]
 800401e:	18a2      	adds	r2, r4, r2
 8004020:	3243      	adds	r2, #67	@ 0x43
 8004022:	3302      	adds	r3, #2
 8004024:	7011      	strb	r1, [r2, #0]
 8004026:	e7c1      	b.n	8003fac <_printf_common+0x4c>
 8004028:	0022      	movs	r2, r4
 800402a:	2301      	movs	r3, #1
 800402c:	9901      	ldr	r1, [sp, #4]
 800402e:	9800      	ldr	r0, [sp, #0]
 8004030:	9f08      	ldr	r7, [sp, #32]
 8004032:	321a      	adds	r2, #26
 8004034:	47b8      	blx	r7
 8004036:	3001      	adds	r0, #1
 8004038:	d0e6      	beq.n	8004008 <_printf_common+0xa8>
 800403a:	3601      	adds	r6, #1
 800403c:	e7d1      	b.n	8003fe2 <_printf_common+0x82>
	...

08004040 <_printf_i>:
 8004040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004042:	b08b      	sub	sp, #44	@ 0x2c
 8004044:	9206      	str	r2, [sp, #24]
 8004046:	000a      	movs	r2, r1
 8004048:	3243      	adds	r2, #67	@ 0x43
 800404a:	9307      	str	r3, [sp, #28]
 800404c:	9005      	str	r0, [sp, #20]
 800404e:	9203      	str	r2, [sp, #12]
 8004050:	7e0a      	ldrb	r2, [r1, #24]
 8004052:	000c      	movs	r4, r1
 8004054:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004056:	2a78      	cmp	r2, #120	@ 0x78
 8004058:	d809      	bhi.n	800406e <_printf_i+0x2e>
 800405a:	2a62      	cmp	r2, #98	@ 0x62
 800405c:	d80b      	bhi.n	8004076 <_printf_i+0x36>
 800405e:	2a00      	cmp	r2, #0
 8004060:	d100      	bne.n	8004064 <_printf_i+0x24>
 8004062:	e0bc      	b.n	80041de <_printf_i+0x19e>
 8004064:	497b      	ldr	r1, [pc, #492]	@ (8004254 <_printf_i+0x214>)
 8004066:	9104      	str	r1, [sp, #16]
 8004068:	2a58      	cmp	r2, #88	@ 0x58
 800406a:	d100      	bne.n	800406e <_printf_i+0x2e>
 800406c:	e090      	b.n	8004190 <_printf_i+0x150>
 800406e:	0025      	movs	r5, r4
 8004070:	3542      	adds	r5, #66	@ 0x42
 8004072:	702a      	strb	r2, [r5, #0]
 8004074:	e022      	b.n	80040bc <_printf_i+0x7c>
 8004076:	0010      	movs	r0, r2
 8004078:	3863      	subs	r0, #99	@ 0x63
 800407a:	2815      	cmp	r0, #21
 800407c:	d8f7      	bhi.n	800406e <_printf_i+0x2e>
 800407e:	f7fc f847 	bl	8000110 <__gnu_thumb1_case_shi>
 8004082:	0016      	.short	0x0016
 8004084:	fff6001f 	.word	0xfff6001f
 8004088:	fff6fff6 	.word	0xfff6fff6
 800408c:	001ffff6 	.word	0x001ffff6
 8004090:	fff6fff6 	.word	0xfff6fff6
 8004094:	fff6fff6 	.word	0xfff6fff6
 8004098:	003600a1 	.word	0x003600a1
 800409c:	fff60080 	.word	0xfff60080
 80040a0:	00b2fff6 	.word	0x00b2fff6
 80040a4:	0036fff6 	.word	0x0036fff6
 80040a8:	fff6fff6 	.word	0xfff6fff6
 80040ac:	0084      	.short	0x0084
 80040ae:	0025      	movs	r5, r4
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	3542      	adds	r5, #66	@ 0x42
 80040b4:	1d11      	adds	r1, r2, #4
 80040b6:	6019      	str	r1, [r3, #0]
 80040b8:	6813      	ldr	r3, [r2, #0]
 80040ba:	702b      	strb	r3, [r5, #0]
 80040bc:	2301      	movs	r3, #1
 80040be:	e0a0      	b.n	8004202 <_printf_i+0x1c2>
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	6809      	ldr	r1, [r1, #0]
 80040c4:	1d02      	adds	r2, r0, #4
 80040c6:	060d      	lsls	r5, r1, #24
 80040c8:	d50b      	bpl.n	80040e2 <_printf_i+0xa2>
 80040ca:	6806      	ldr	r6, [r0, #0]
 80040cc:	601a      	str	r2, [r3, #0]
 80040ce:	2e00      	cmp	r6, #0
 80040d0:	da03      	bge.n	80040da <_printf_i+0x9a>
 80040d2:	232d      	movs	r3, #45	@ 0x2d
 80040d4:	9a03      	ldr	r2, [sp, #12]
 80040d6:	4276      	negs	r6, r6
 80040d8:	7013      	strb	r3, [r2, #0]
 80040da:	4b5e      	ldr	r3, [pc, #376]	@ (8004254 <_printf_i+0x214>)
 80040dc:	270a      	movs	r7, #10
 80040de:	9304      	str	r3, [sp, #16]
 80040e0:	e018      	b.n	8004114 <_printf_i+0xd4>
 80040e2:	6806      	ldr	r6, [r0, #0]
 80040e4:	601a      	str	r2, [r3, #0]
 80040e6:	0649      	lsls	r1, r1, #25
 80040e8:	d5f1      	bpl.n	80040ce <_printf_i+0x8e>
 80040ea:	b236      	sxth	r6, r6
 80040ec:	e7ef      	b.n	80040ce <_printf_i+0x8e>
 80040ee:	6808      	ldr	r0, [r1, #0]
 80040f0:	6819      	ldr	r1, [r3, #0]
 80040f2:	c940      	ldmia	r1!, {r6}
 80040f4:	0605      	lsls	r5, r0, #24
 80040f6:	d402      	bmi.n	80040fe <_printf_i+0xbe>
 80040f8:	0640      	lsls	r0, r0, #25
 80040fa:	d500      	bpl.n	80040fe <_printf_i+0xbe>
 80040fc:	b2b6      	uxth	r6, r6
 80040fe:	6019      	str	r1, [r3, #0]
 8004100:	4b54      	ldr	r3, [pc, #336]	@ (8004254 <_printf_i+0x214>)
 8004102:	270a      	movs	r7, #10
 8004104:	9304      	str	r3, [sp, #16]
 8004106:	2a6f      	cmp	r2, #111	@ 0x6f
 8004108:	d100      	bne.n	800410c <_printf_i+0xcc>
 800410a:	3f02      	subs	r7, #2
 800410c:	0023      	movs	r3, r4
 800410e:	2200      	movs	r2, #0
 8004110:	3343      	adds	r3, #67	@ 0x43
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	6863      	ldr	r3, [r4, #4]
 8004116:	60a3      	str	r3, [r4, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	db03      	blt.n	8004124 <_printf_i+0xe4>
 800411c:	2104      	movs	r1, #4
 800411e:	6822      	ldr	r2, [r4, #0]
 8004120:	438a      	bics	r2, r1
 8004122:	6022      	str	r2, [r4, #0]
 8004124:	2e00      	cmp	r6, #0
 8004126:	d102      	bne.n	800412e <_printf_i+0xee>
 8004128:	9d03      	ldr	r5, [sp, #12]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00c      	beq.n	8004148 <_printf_i+0x108>
 800412e:	9d03      	ldr	r5, [sp, #12]
 8004130:	0030      	movs	r0, r6
 8004132:	0039      	movs	r1, r7
 8004134:	f7fc f87c 	bl	8000230 <__aeabi_uidivmod>
 8004138:	9b04      	ldr	r3, [sp, #16]
 800413a:	3d01      	subs	r5, #1
 800413c:	5c5b      	ldrb	r3, [r3, r1]
 800413e:	702b      	strb	r3, [r5, #0]
 8004140:	0033      	movs	r3, r6
 8004142:	0006      	movs	r6, r0
 8004144:	429f      	cmp	r7, r3
 8004146:	d9f3      	bls.n	8004130 <_printf_i+0xf0>
 8004148:	2f08      	cmp	r7, #8
 800414a:	d109      	bne.n	8004160 <_printf_i+0x120>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	d506      	bpl.n	8004160 <_printf_i+0x120>
 8004152:	6862      	ldr	r2, [r4, #4]
 8004154:	6923      	ldr	r3, [r4, #16]
 8004156:	429a      	cmp	r2, r3
 8004158:	dc02      	bgt.n	8004160 <_printf_i+0x120>
 800415a:	2330      	movs	r3, #48	@ 0x30
 800415c:	3d01      	subs	r5, #1
 800415e:	702b      	strb	r3, [r5, #0]
 8004160:	9b03      	ldr	r3, [sp, #12]
 8004162:	1b5b      	subs	r3, r3, r5
 8004164:	6123      	str	r3, [r4, #16]
 8004166:	9b07      	ldr	r3, [sp, #28]
 8004168:	0021      	movs	r1, r4
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	9805      	ldr	r0, [sp, #20]
 800416e:	9b06      	ldr	r3, [sp, #24]
 8004170:	aa09      	add	r2, sp, #36	@ 0x24
 8004172:	f7ff fef5 	bl	8003f60 <_printf_common>
 8004176:	3001      	adds	r0, #1
 8004178:	d148      	bne.n	800420c <_printf_i+0x1cc>
 800417a:	2001      	movs	r0, #1
 800417c:	4240      	negs	r0, r0
 800417e:	b00b      	add	sp, #44	@ 0x2c
 8004180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004182:	2220      	movs	r2, #32
 8004184:	6809      	ldr	r1, [r1, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	6022      	str	r2, [r4, #0]
 800418a:	2278      	movs	r2, #120	@ 0x78
 800418c:	4932      	ldr	r1, [pc, #200]	@ (8004258 <_printf_i+0x218>)
 800418e:	9104      	str	r1, [sp, #16]
 8004190:	0021      	movs	r1, r4
 8004192:	3145      	adds	r1, #69	@ 0x45
 8004194:	700a      	strb	r2, [r1, #0]
 8004196:	6819      	ldr	r1, [r3, #0]
 8004198:	6822      	ldr	r2, [r4, #0]
 800419a:	c940      	ldmia	r1!, {r6}
 800419c:	0610      	lsls	r0, r2, #24
 800419e:	d402      	bmi.n	80041a6 <_printf_i+0x166>
 80041a0:	0650      	lsls	r0, r2, #25
 80041a2:	d500      	bpl.n	80041a6 <_printf_i+0x166>
 80041a4:	b2b6      	uxth	r6, r6
 80041a6:	6019      	str	r1, [r3, #0]
 80041a8:	07d3      	lsls	r3, r2, #31
 80041aa:	d502      	bpl.n	80041b2 <_printf_i+0x172>
 80041ac:	2320      	movs	r3, #32
 80041ae:	4313      	orrs	r3, r2
 80041b0:	6023      	str	r3, [r4, #0]
 80041b2:	2e00      	cmp	r6, #0
 80041b4:	d001      	beq.n	80041ba <_printf_i+0x17a>
 80041b6:	2710      	movs	r7, #16
 80041b8:	e7a8      	b.n	800410c <_printf_i+0xcc>
 80041ba:	2220      	movs	r2, #32
 80041bc:	6823      	ldr	r3, [r4, #0]
 80041be:	4393      	bics	r3, r2
 80041c0:	6023      	str	r3, [r4, #0]
 80041c2:	e7f8      	b.n	80041b6 <_printf_i+0x176>
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	680d      	ldr	r5, [r1, #0]
 80041c8:	1d10      	adds	r0, r2, #4
 80041ca:	6949      	ldr	r1, [r1, #20]
 80041cc:	6018      	str	r0, [r3, #0]
 80041ce:	6813      	ldr	r3, [r2, #0]
 80041d0:	062e      	lsls	r6, r5, #24
 80041d2:	d501      	bpl.n	80041d8 <_printf_i+0x198>
 80041d4:	6019      	str	r1, [r3, #0]
 80041d6:	e002      	b.n	80041de <_printf_i+0x19e>
 80041d8:	066d      	lsls	r5, r5, #25
 80041da:	d5fb      	bpl.n	80041d4 <_printf_i+0x194>
 80041dc:	8019      	strh	r1, [r3, #0]
 80041de:	2300      	movs	r3, #0
 80041e0:	9d03      	ldr	r5, [sp, #12]
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	e7bf      	b.n	8004166 <_printf_i+0x126>
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	1d11      	adds	r1, r2, #4
 80041ea:	6019      	str	r1, [r3, #0]
 80041ec:	6815      	ldr	r5, [r2, #0]
 80041ee:	2100      	movs	r1, #0
 80041f0:	0028      	movs	r0, r5
 80041f2:	6862      	ldr	r2, [r4, #4]
 80041f4:	f000 f858 	bl	80042a8 <memchr>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d001      	beq.n	8004200 <_printf_i+0x1c0>
 80041fc:	1b40      	subs	r0, r0, r5
 80041fe:	6060      	str	r0, [r4, #4]
 8004200:	6863      	ldr	r3, [r4, #4]
 8004202:	6123      	str	r3, [r4, #16]
 8004204:	2300      	movs	r3, #0
 8004206:	9a03      	ldr	r2, [sp, #12]
 8004208:	7013      	strb	r3, [r2, #0]
 800420a:	e7ac      	b.n	8004166 <_printf_i+0x126>
 800420c:	002a      	movs	r2, r5
 800420e:	6923      	ldr	r3, [r4, #16]
 8004210:	9906      	ldr	r1, [sp, #24]
 8004212:	9805      	ldr	r0, [sp, #20]
 8004214:	9d07      	ldr	r5, [sp, #28]
 8004216:	47a8      	blx	r5
 8004218:	3001      	adds	r0, #1
 800421a:	d0ae      	beq.n	800417a <_printf_i+0x13a>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	079b      	lsls	r3, r3, #30
 8004220:	d415      	bmi.n	800424e <_printf_i+0x20e>
 8004222:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004224:	68e0      	ldr	r0, [r4, #12]
 8004226:	4298      	cmp	r0, r3
 8004228:	daa9      	bge.n	800417e <_printf_i+0x13e>
 800422a:	0018      	movs	r0, r3
 800422c:	e7a7      	b.n	800417e <_printf_i+0x13e>
 800422e:	0022      	movs	r2, r4
 8004230:	2301      	movs	r3, #1
 8004232:	9906      	ldr	r1, [sp, #24]
 8004234:	9805      	ldr	r0, [sp, #20]
 8004236:	9e07      	ldr	r6, [sp, #28]
 8004238:	3219      	adds	r2, #25
 800423a:	47b0      	blx	r6
 800423c:	3001      	adds	r0, #1
 800423e:	d09c      	beq.n	800417a <_printf_i+0x13a>
 8004240:	3501      	adds	r5, #1
 8004242:	68e3      	ldr	r3, [r4, #12]
 8004244:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	42ab      	cmp	r3, r5
 800424a:	dcf0      	bgt.n	800422e <_printf_i+0x1ee>
 800424c:	e7e9      	b.n	8004222 <_printf_i+0x1e2>
 800424e:	2500      	movs	r5, #0
 8004250:	e7f7      	b.n	8004242 <_printf_i+0x202>
 8004252:	46c0      	nop			@ (mov r8, r8)
 8004254:	08005869 	.word	0x08005869
 8004258:	0800587a 	.word	0x0800587a

0800425c <memmove>:
 800425c:	b510      	push	{r4, lr}
 800425e:	4288      	cmp	r0, r1
 8004260:	d806      	bhi.n	8004270 <memmove+0x14>
 8004262:	2300      	movs	r3, #0
 8004264:	429a      	cmp	r2, r3
 8004266:	d008      	beq.n	800427a <memmove+0x1e>
 8004268:	5ccc      	ldrb	r4, [r1, r3]
 800426a:	54c4      	strb	r4, [r0, r3]
 800426c:	3301      	adds	r3, #1
 800426e:	e7f9      	b.n	8004264 <memmove+0x8>
 8004270:	188b      	adds	r3, r1, r2
 8004272:	4298      	cmp	r0, r3
 8004274:	d2f5      	bcs.n	8004262 <memmove+0x6>
 8004276:	3a01      	subs	r2, #1
 8004278:	d200      	bcs.n	800427c <memmove+0x20>
 800427a:	bd10      	pop	{r4, pc}
 800427c:	5c8b      	ldrb	r3, [r1, r2]
 800427e:	5483      	strb	r3, [r0, r2]
 8004280:	e7f9      	b.n	8004276 <memmove+0x1a>
	...

08004284 <_sbrk_r>:
 8004284:	2300      	movs	r3, #0
 8004286:	b570      	push	{r4, r5, r6, lr}
 8004288:	4d06      	ldr	r5, [pc, #24]	@ (80042a4 <_sbrk_r+0x20>)
 800428a:	0004      	movs	r4, r0
 800428c:	0008      	movs	r0, r1
 800428e:	602b      	str	r3, [r5, #0]
 8004290:	f7fc ff2c 	bl	80010ec <_sbrk>
 8004294:	1c43      	adds	r3, r0, #1
 8004296:	d103      	bne.n	80042a0 <_sbrk_r+0x1c>
 8004298:	682b      	ldr	r3, [r5, #0]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d000      	beq.n	80042a0 <_sbrk_r+0x1c>
 800429e:	6023      	str	r3, [r4, #0]
 80042a0:	bd70      	pop	{r4, r5, r6, pc}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	200007b8 	.word	0x200007b8

080042a8 <memchr>:
 80042a8:	b2c9      	uxtb	r1, r1
 80042aa:	1882      	adds	r2, r0, r2
 80042ac:	4290      	cmp	r0, r2
 80042ae:	d101      	bne.n	80042b4 <memchr+0xc>
 80042b0:	2000      	movs	r0, #0
 80042b2:	4770      	bx	lr
 80042b4:	7803      	ldrb	r3, [r0, #0]
 80042b6:	428b      	cmp	r3, r1
 80042b8:	d0fb      	beq.n	80042b2 <memchr+0xa>
 80042ba:	3001      	adds	r0, #1
 80042bc:	e7f6      	b.n	80042ac <memchr+0x4>

080042be <_realloc_r>:
 80042be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042c0:	0006      	movs	r6, r0
 80042c2:	000c      	movs	r4, r1
 80042c4:	0015      	movs	r5, r2
 80042c6:	2900      	cmp	r1, #0
 80042c8:	d105      	bne.n	80042d6 <_realloc_r+0x18>
 80042ca:	0011      	movs	r1, r2
 80042cc:	f7ff fc5a 	bl	8003b84 <_malloc_r>
 80042d0:	0004      	movs	r4, r0
 80042d2:	0020      	movs	r0, r4
 80042d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80042d6:	2a00      	cmp	r2, #0
 80042d8:	d103      	bne.n	80042e2 <_realloc_r+0x24>
 80042da:	f7ff fbe7 	bl	8003aac <_free_r>
 80042de:	2400      	movs	r4, #0
 80042e0:	e7f7      	b.n	80042d2 <_realloc_r+0x14>
 80042e2:	f000 f81b 	bl	800431c <_malloc_usable_size_r>
 80042e6:	0007      	movs	r7, r0
 80042e8:	4285      	cmp	r5, r0
 80042ea:	d802      	bhi.n	80042f2 <_realloc_r+0x34>
 80042ec:	0843      	lsrs	r3, r0, #1
 80042ee:	42ab      	cmp	r3, r5
 80042f0:	d3ef      	bcc.n	80042d2 <_realloc_r+0x14>
 80042f2:	0029      	movs	r1, r5
 80042f4:	0030      	movs	r0, r6
 80042f6:	f7ff fc45 	bl	8003b84 <_malloc_r>
 80042fa:	9001      	str	r0, [sp, #4]
 80042fc:	2800      	cmp	r0, #0
 80042fe:	d0ee      	beq.n	80042de <_realloc_r+0x20>
 8004300:	002a      	movs	r2, r5
 8004302:	42bd      	cmp	r5, r7
 8004304:	d900      	bls.n	8004308 <_realloc_r+0x4a>
 8004306:	003a      	movs	r2, r7
 8004308:	0021      	movs	r1, r4
 800430a:	9801      	ldr	r0, [sp, #4]
 800430c:	f7ff fbc4 	bl	8003a98 <memcpy>
 8004310:	0021      	movs	r1, r4
 8004312:	0030      	movs	r0, r6
 8004314:	f7ff fbca 	bl	8003aac <_free_r>
 8004318:	9c01      	ldr	r4, [sp, #4]
 800431a:	e7da      	b.n	80042d2 <_realloc_r+0x14>

0800431c <_malloc_usable_size_r>:
 800431c:	1f0b      	subs	r3, r1, #4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	1f18      	subs	r0, r3, #4
 8004322:	2b00      	cmp	r3, #0
 8004324:	da01      	bge.n	800432a <_malloc_usable_size_r+0xe>
 8004326:	580b      	ldr	r3, [r1, r0]
 8004328:	18c0      	adds	r0, r0, r3
 800432a:	4770      	bx	lr

0800432c <_init>:
 800432c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800432e:	46c0      	nop			@ (mov r8, r8)
 8004330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004332:	bc08      	pop	{r3}
 8004334:	469e      	mov	lr, r3
 8004336:	4770      	bx	lr

08004338 <_fini>:
 8004338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800433a:	46c0      	nop			@ (mov r8, r8)
 800433c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800433e:	bc08      	pop	{r3}
 8004340:	469e      	mov	lr, r3
 8004342:	4770      	bx	lr
