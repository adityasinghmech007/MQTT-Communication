
TestFunc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  080045c4  080045c4  000055c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d8  080046d8  00006068  2**0
                  CONTENTS
  4 .ARM          00000000  080046d8  080046d8  00006068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d8  080046d8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d8  080046d8  000056d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080046e0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000042c  20000068  08004748  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08004748  00006494  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b600  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d98  00000000  00000000  00011690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  00013428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006df  00000000  00000000  00013d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e00  00000000  00000000  000143ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc9c  00000000  00000000  0002a1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085d7c  00000000  00000000  00035e9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bbc17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024d8  00000000  00000000  000bbc5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000be134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000068 	.word	0x20000068
 80000d8:	00000000 	.word	0x00000000
 80000dc:	080045ac 	.word	0x080045ac

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000006c 	.word	0x2000006c
 80000fc:	080045ac 	.word	0x080045ac

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <logError>:

    // Leave PB7 high (do not reset it) if it needs to stay high to keep the module on
    // Return true to indicate the module is powered on
    return true;
}
void logError(ErrorCode code) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	0002      	movs	r2, r0
 8000230:	1dfb      	adds	r3, r7, #7
 8000232:	701a      	strb	r2, [r3, #0]
    switch (code) {
 8000234:	1dfb      	adds	r3, r7, #7
 8000236:	781b      	ldrb	r3, [r3, #0]
 8000238:	2b0d      	cmp	r3, #13
 800023a:	d012      	beq.n	8000262 <logError+0x3a>
 800023c:	dc1b      	bgt.n	8000276 <logError+0x4e>
 800023e:	2b0c      	cmp	r3, #12
 8000240:	d014      	beq.n	800026c <logError+0x44>
 8000242:	dc18      	bgt.n	8000276 <logError+0x4e>
 8000244:	2b01      	cmp	r3, #1
 8000246:	d002      	beq.n	800024e <logError+0x26>
 8000248:	2b02      	cmp	r3, #2
 800024a:	d005      	beq.n	8000258 <logError+0x30>
 800024c:	e013      	b.n	8000276 <logError+0x4e>
        case ERROR_UART_TRANSMIT:
            printf("Error: UART transmission failed\n");
 800024e:	4b0e      	ldr	r3, [pc, #56]	@ (8000288 <logError+0x60>)
 8000250:	0018      	movs	r0, r3
 8000252:	f003 fde1 	bl	8003e18 <puts>
            break;
 8000256:	e013      	b.n	8000280 <logError+0x58>
        case ERROR_UART_RECEIVE:
            printf("Error: UART reception failed\n");
 8000258:	4b0c      	ldr	r3, [pc, #48]	@ (800028c <logError+0x64>)
 800025a:	0018      	movs	r0, r3
 800025c:	f003 fddc 	bl	8003e18 <puts>
            break;
 8000260:	e00e      	b.n	8000280 <logError+0x58>
        case ERROR_TRANS_TIMEOUT:
            printf("Error: Transmission timed out\n");
 8000262:	4b0b      	ldr	r3, [pc, #44]	@ (8000290 <logError+0x68>)
 8000264:	0018      	movs	r0, r3
 8000266:	f003 fdd7 	bl	8003e18 <puts>
            break;
 800026a:	e009      	b.n	8000280 <logError+0x58>
        case ERROR_RECV_TIMEOUT:
            printf("Error: Reception timed out\n");
 800026c:	4b09      	ldr	r3, [pc, #36]	@ (8000294 <logError+0x6c>)
 800026e:	0018      	movs	r0, r3
 8000270:	f003 fdd2 	bl	8003e18 <puts>
            break;
 8000274:	e004      	b.n	8000280 <logError+0x58>
        default:
            printf("Unknown error occurred\n");
 8000276:	4b08      	ldr	r3, [pc, #32]	@ (8000298 <logError+0x70>)
 8000278:	0018      	movs	r0, r3
 800027a:	f003 fdcd 	bl	8003e18 <puts>
            break;
 800027e:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000280:	46c0      	nop			@ (mov r8, r8)
 8000282:	46bd      	mov	sp, r7
 8000284:	b002      	add	sp, #8
 8000286:	bd80      	pop	{r7, pc}
 8000288:	080045c4 	.word	0x080045c4
 800028c:	080045e4 	.word	0x080045e4
 8000290:	08004604 	.word	0x08004604
 8000294:	08004624 	.word	0x08004624
 8000298:	08004640 	.word	0x08004640

0800029c <HAL_UART_TxCpltCallback>:
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a04      	ldr	r2, [pc, #16]	@ (80002bc <HAL_UART_TxCpltCallback+0x20>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d102      	bne.n	80002b4 <HAL_UART_TxCpltCallback+0x18>
        uart_tx_complete = 1;  // Set flag when transmission is complete
 80002ae:	4b04      	ldr	r3, [pc, #16]	@ (80002c0 <HAL_UART_TxCpltCallback+0x24>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	701a      	strb	r2, [r3, #0]
    }
}
 80002b4:	46c0      	nop			@ (mov r8, r8)
 80002b6:	46bd      	mov	sp, r7
 80002b8:	b002      	add	sp, #8
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40004800 	.word	0x40004800
 80002c0:	2000033c 	.word	0x2000033c

080002c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <HAL_UART_RxCpltCallback+0x20>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d102      	bne.n	80002dc <HAL_UART_RxCpltCallback+0x18>
        uart_rx_complete = 1;  // Set flag when reception is complete
 80002d6:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <HAL_UART_RxCpltCallback+0x24>)
 80002d8:	2201      	movs	r2, #1
 80002da:	701a      	strb	r2, [r3, #0]
    }
}
 80002dc:	46c0      	nop			@ (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b002      	add	sp, #8
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	40004800 	.word	0x40004800
 80002e8:	2000033d 	.word	0x2000033d

080002ec <SIMTransmit>:


ErrorCode SIMTransmit(char *cmd, uint32_t rcv_len, uint32_t rcv_timeout) {
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	60f8      	str	r0, [r7, #12]
 80002f4:	60b9      	str	r1, [r7, #8]
 80002f6:	607a      	str	r2, [r7, #4]
    memset(buffer, 0, sizeof(buffer));
 80002f8:	23c8      	movs	r3, #200	@ 0xc8
 80002fa:	005a      	lsls	r2, r3, #1
 80002fc:	4b34      	ldr	r3, [pc, #208]	@ (80003d0 <SIMTransmit+0xe4>)
 80002fe:	2100      	movs	r1, #0
 8000300:	0018      	movs	r0, r3
 8000302:	f003 fe7f 	bl	8004004 <memset>
    uart_tx_complete = 0;
 8000306:	4b33      	ldr	r3, [pc, #204]	@ (80003d4 <SIMTransmit+0xe8>)
 8000308:	2200      	movs	r2, #0
 800030a:	701a      	strb	r2, [r3, #0]
    uart_rx_complete = 0;
 800030c:	4b32      	ldr	r3, [pc, #200]	@ (80003d8 <SIMTransmit+0xec>)
 800030e:	2200      	movs	r2, #0
 8000310:	701a      	strb	r2, [r3, #0]

    // Start non-blocking transmission
    if (HAL_UART_Transmit_IT(&huart3, (uint8_t *)cmd, strlen(cmd)) != HAL_OK) {
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	0018      	movs	r0, r3
 8000316:	f7ff fef3 	bl	8000100 <strlen>
 800031a:	0003      	movs	r3, r0
 800031c:	b29a      	uxth	r2, r3
 800031e:	68f9      	ldr	r1, [r7, #12]
 8000320:	4b2e      	ldr	r3, [pc, #184]	@ (80003dc <SIMTransmit+0xf0>)
 8000322:	0018      	movs	r0, r3
 8000324:	f001 fc30 	bl	8001b88 <HAL_UART_Transmit_IT>
 8000328:	1e03      	subs	r3, r0, #0
 800032a:	d004      	beq.n	8000336 <SIMTransmit+0x4a>
        // Handle transmission error
        logError(ERROR_UART_TRANSMIT);
 800032c:	2001      	movs	r0, #1
 800032e:	f7ff ff7b 	bl	8000228 <logError>
        return ERROR_UART_TRANSMIT;
 8000332:	2301      	movs	r3, #1
 8000334:	e048      	b.n	80003c8 <SIMTransmit+0xdc>
    }

    // Wait for transmission to complete with timeout
    uint32_t txstart = HAL_GetTick();
 8000336:	f000 fb95 	bl	8000a64 <HAL_GetTick>
 800033a:	0003      	movs	r3, r0
 800033c:	61fb      	str	r3, [r7, #28]
    const uint32_t txtimeout = 5000; // Timeout in milliseconds
 800033e:	4b28      	ldr	r3, [pc, #160]	@ (80003e0 <SIMTransmit+0xf4>)
 8000340:	61bb      	str	r3, [r7, #24]
    while ((!uart_tx_complete) && ((HAL_GetTick() - txstart < txtimeout))) {
 8000342:	46c0      	nop			@ (mov r8, r8)
 8000344:	4b23      	ldr	r3, [pc, #140]	@ (80003d4 <SIMTransmit+0xe8>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d107      	bne.n	800035e <SIMTransmit+0x72>
 800034e:	f000 fb89 	bl	8000a64 <HAL_GetTick>
 8000352:	0002      	movs	r2, r0
 8000354:	69fb      	ldr	r3, [r7, #28]
 8000356:	1ad3      	subs	r3, r2, r3
 8000358:	69ba      	ldr	r2, [r7, #24]
 800035a:	429a      	cmp	r2, r3
 800035c:	d8f2      	bhi.n	8000344 <SIMTransmit+0x58>
        // Optionally perform other tasks or enter low-power mode
    }

    if (!uart_tx_complete) {
 800035e:	4b1d      	ldr	r3, [pc, #116]	@ (80003d4 <SIMTransmit+0xe8>)
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	b2db      	uxtb	r3, r3
 8000364:	2b00      	cmp	r3, #0
 8000366:	d104      	bne.n	8000372 <SIMTransmit+0x86>
        // Handle timeout scenario
        logError(ERROR_TRANS_TIMEOUT);
 8000368:	200d      	movs	r0, #13
 800036a:	f7ff ff5d 	bl	8000228 <logError>
        return ERROR_TRANS_TIMEOUT;
 800036e:	230d      	movs	r3, #13
 8000370:	e02a      	b.n	80003c8 <SIMTransmit+0xdc>
    }

    // Start non-blocking reception
    if (HAL_UART_Receive_IT(&huart3, buffer, rcv_len) != HAL_OK) {
 8000372:	68bb      	ldr	r3, [r7, #8]
 8000374:	b29a      	uxth	r2, r3
 8000376:	4916      	ldr	r1, [pc, #88]	@ (80003d0 <SIMTransmit+0xe4>)
 8000378:	4b18      	ldr	r3, [pc, #96]	@ (80003dc <SIMTransmit+0xf0>)
 800037a:	0018      	movs	r0, r3
 800037c:	f001 fcac 	bl	8001cd8 <HAL_UART_Receive_IT>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d004      	beq.n	800038e <SIMTransmit+0xa2>
        // Handle reception error
        logError(ERROR_UART_RECEIVE);
 8000384:	2002      	movs	r0, #2
 8000386:	f7ff ff4f 	bl	8000228 <logError>
        return ERROR_UART_RECEIVE;
 800038a:	2302      	movs	r3, #2
 800038c:	e01c      	b.n	80003c8 <SIMTransmit+0xdc>
    }

    // Wait for reception to complete or timeout
    uint32_t rx_start = HAL_GetTick();
 800038e:	f000 fb69 	bl	8000a64 <HAL_GetTick>
 8000392:	0003      	movs	r3, r0
 8000394:	617b      	str	r3, [r7, #20]
    while (!uart_rx_complete && (HAL_GetTick() - rx_start < rcv_timeout)) {
 8000396:	46c0      	nop			@ (mov r8, r8)
 8000398:	4b0f      	ldr	r3, [pc, #60]	@ (80003d8 <SIMTransmit+0xec>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	b2db      	uxtb	r3, r3
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d107      	bne.n	80003b2 <SIMTransmit+0xc6>
 80003a2:	f000 fb5f 	bl	8000a64 <HAL_GetTick>
 80003a6:	0002      	movs	r2, r0
 80003a8:	697b      	ldr	r3, [r7, #20]
 80003aa:	1ad3      	subs	r3, r2, r3
 80003ac:	687a      	ldr	r2, [r7, #4]
 80003ae:	429a      	cmp	r2, r3
 80003b0:	d8f2      	bhi.n	8000398 <SIMTransmit+0xac>
        // Optionally handle other tasks or sleep
    }

    if (!uart_rx_complete) {
 80003b2:	4b09      	ldr	r3, [pc, #36]	@ (80003d8 <SIMTransmit+0xec>)
 80003b4:	781b      	ldrb	r3, [r3, #0]
 80003b6:	b2db      	uxtb	r3, r3
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d104      	bne.n	80003c6 <SIMTransmit+0xda>
        // Handle reception timeout error
        logError(ERROR_RECV_TIMEOUT);
 80003bc:	200c      	movs	r0, #12
 80003be:	f7ff ff33 	bl	8000228 <logError>
        return ERROR_RECV_TIMEOUT;
 80003c2:	230c      	movs	r3, #12
 80003c4:	e000      	b.n	80003c8 <SIMTransmit+0xdc>
    }

    return ERROR_NONE; // Return success if no errors occurred
 80003c6:	2300      	movs	r3, #0
}
 80003c8:	0018      	movs	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	b008      	add	sp, #32
 80003ce:	bd80      	pop	{r7, pc}
 80003d0:	200001ac 	.word	0x200001ac
 80003d4:	2000033c 	.word	0x2000033c
 80003d8:	2000033d 	.word	0x2000033d
 80003dc:	20000084 	.word	0x20000084
 80003e0:	00001388 	.word	0x00001388

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 fac0 	bl	800096c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f812 	bl	8000414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f000 f8c0 	bl	8000574 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80003f4:	f000 f856 	bl	80004a4 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 80003f8:	f000 f888 	bl	800050c <MX_USART4_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SIMTransmit("AT\r\n",40,3000);
 80003fc:	4a03      	ldr	r2, [pc, #12]	@ (800040c <main+0x28>)
 80003fe:	4b04      	ldr	r3, [pc, #16]	@ (8000410 <main+0x2c>)
 8000400:	2128      	movs	r1, #40	@ 0x28
 8000402:	0018      	movs	r0, r3
 8000404:	f7ff ff72 	bl	80002ec <SIMTransmit>
 8000408:	e7f8      	b.n	80003fc <main+0x18>
 800040a:	46c0      	nop			@ (mov r8, r8)
 800040c:	00000bb8 	.word	0x00000bb8
 8000410:	08004658 	.word	0x08004658

08000414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b093      	sub	sp, #76	@ 0x4c
 8000418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800041a:	2414      	movs	r4, #20
 800041c:	193b      	adds	r3, r7, r4
 800041e:	0018      	movs	r0, r3
 8000420:	2334      	movs	r3, #52	@ 0x34
 8000422:	001a      	movs	r2, r3
 8000424:	2100      	movs	r1, #0
 8000426:	f003 fded 	bl	8004004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800042a:	1d3b      	adds	r3, r7, #4
 800042c:	0018      	movs	r0, r3
 800042e:	2310      	movs	r3, #16
 8000430:	001a      	movs	r2, r3
 8000432:	2100      	movs	r1, #0
 8000434:	f003 fde6 	bl	8004004 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000438:	2380      	movs	r3, #128	@ 0x80
 800043a:	009b      	lsls	r3, r3, #2
 800043c:	0018      	movs	r0, r3
 800043e:	f000 fe47 	bl	80010d0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2202      	movs	r2, #2
 8000446:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2280      	movs	r2, #128	@ 0x80
 800044c:	0052      	lsls	r2, r2, #1
 800044e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000450:	193b      	adds	r3, r7, r4
 8000452:	2200      	movs	r2, #0
 8000454:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2240      	movs	r2, #64	@ 0x40
 800045a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000462:	193b      	adds	r3, r7, r4
 8000464:	0018      	movs	r0, r3
 8000466:	f000 fe7f 	bl	8001168 <HAL_RCC_OscConfig>
 800046a:	1e03      	subs	r3, r0, #0
 800046c:	d001      	beq.n	8000472 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800046e:	f000 f8c7 	bl	8000600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	2207      	movs	r2, #7
 8000476:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000478:	1d3b      	adds	r3, r7, #4
 800047a:	2200      	movs	r2, #0
 800047c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800047e:	1d3b      	adds	r3, r7, #4
 8000480:	2200      	movs	r2, #0
 8000482:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800048a:	1d3b      	adds	r3, r7, #4
 800048c:	2100      	movs	r1, #0
 800048e:	0018      	movs	r0, r3
 8000490:	f001 f97a 	bl	8001788 <HAL_RCC_ClockConfig>
 8000494:	1e03      	subs	r3, r0, #0
 8000496:	d001      	beq.n	800049c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000498:	f000 f8b2 	bl	8000600 <Error_Handler>
  }
}
 800049c:	46c0      	nop			@ (mov r8, r8)
 800049e:	46bd      	mov	sp, r7
 80004a0:	b013      	add	sp, #76	@ 0x4c
 80004a2:	bd90      	pop	{r4, r7, pc}

080004a4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80004a8:	4b16      	ldr	r3, [pc, #88]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004aa:	4a17      	ldr	r2, [pc, #92]	@ (8000508 <MX_USART3_UART_Init+0x64>)
 80004ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80004ae:	4b15      	ldr	r3, [pc, #84]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004b0:	22e1      	movs	r2, #225	@ 0xe1
 80004b2:	0252      	lsls	r2, r2, #9
 80004b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80004b6:	4b13      	ldr	r3, [pc, #76]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80004bc:	4b11      	ldr	r3, [pc, #68]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80004c2:	4b10      	ldr	r3, [pc, #64]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80004c8:	4b0e      	ldr	r3, [pc, #56]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004ca:	220c      	movs	r2, #12
 80004cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004e0:	4b08      	ldr	r3, [pc, #32]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004e6:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ec:	4b05      	ldr	r3, [pc, #20]	@ (8000504 <MX_USART3_UART_Init+0x60>)
 80004ee:	0018      	movs	r0, r3
 80004f0:	f001 faf4 	bl	8001adc <HAL_UART_Init>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80004f8:	f000 f882 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004fc:	46c0      	nop			@ (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	20000084 	.word	0x20000084
 8000508:	40004800 	.word	0x40004800

0800050c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000510:	4b16      	ldr	r3, [pc, #88]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000512:	4a17      	ldr	r2, [pc, #92]	@ (8000570 <MX_USART4_UART_Init+0x64>)
 8000514:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000516:	4b15      	ldr	r3, [pc, #84]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000518:	2296      	movs	r2, #150	@ 0x96
 800051a:	0192      	lsls	r2, r2, #6
 800051c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800051e:	4b13      	ldr	r3, [pc, #76]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000520:	2200      	movs	r2, #0
 8000522:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000524:	4b11      	ldr	r3, [pc, #68]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800052a:	4b10      	ldr	r3, [pc, #64]	@ (800056c <MX_USART4_UART_Init+0x60>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000530:	4b0e      	ldr	r3, [pc, #56]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000532:	220c      	movs	r2, #12
 8000534:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000538:	2200      	movs	r2, #0
 800053a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800053c:	4b0b      	ldr	r3, [pc, #44]	@ (800056c <MX_USART4_UART_Init+0x60>)
 800053e:	2200      	movs	r2, #0
 8000540:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000544:	2200      	movs	r2, #0
 8000546:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000548:	4b08      	ldr	r3, [pc, #32]	@ (800056c <MX_USART4_UART_Init+0x60>)
 800054a:	2200      	movs	r2, #0
 800054c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054e:	4b07      	ldr	r3, [pc, #28]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000554:	4b05      	ldr	r3, [pc, #20]	@ (800056c <MX_USART4_UART_Init+0x60>)
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fac0 	bl	8001adc <HAL_UART_Init>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8000560:	f000 f84e 	bl	8000600 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8000564:	46c0      	nop			@ (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)
 800056c:	20000118 	.word	0x20000118
 8000570:	40004c00 	.word	0x40004c00

08000574 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000574:	b590      	push	{r4, r7, lr}
 8000576:	b089      	sub	sp, #36	@ 0x24
 8000578:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800057a:	240c      	movs	r4, #12
 800057c:	193b      	adds	r3, r7, r4
 800057e:	0018      	movs	r0, r3
 8000580:	2314      	movs	r3, #20
 8000582:	001a      	movs	r2, r3
 8000584:	2100      	movs	r1, #0
 8000586:	f003 fd3d 	bl	8004004 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058a:	4b1b      	ldr	r3, [pc, #108]	@ (80005f8 <MX_GPIO_Init+0x84>)
 800058c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800058e:	4b1a      	ldr	r3, [pc, #104]	@ (80005f8 <MX_GPIO_Init+0x84>)
 8000590:	2101      	movs	r1, #1
 8000592:	430a      	orrs	r2, r1
 8000594:	635a      	str	r2, [r3, #52]	@ 0x34
 8000596:	4b18      	ldr	r3, [pc, #96]	@ (80005f8 <MX_GPIO_Init+0x84>)
 8000598:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800059a:	2201      	movs	r2, #1
 800059c:	4013      	ands	r3, r2
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	4b15      	ldr	r3, [pc, #84]	@ (80005f8 <MX_GPIO_Init+0x84>)
 80005a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005a6:	4b14      	ldr	r3, [pc, #80]	@ (80005f8 <MX_GPIO_Init+0x84>)
 80005a8:	2102      	movs	r1, #2
 80005aa:	430a      	orrs	r2, r1
 80005ac:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ae:	4b12      	ldr	r3, [pc, #72]	@ (80005f8 <MX_GPIO_Init+0x84>)
 80005b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005b2:	2202      	movs	r2, #2
 80005b4:	4013      	ands	r3, r2
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 80005ba:	23c0      	movs	r3, #192	@ 0xc0
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	480f      	ldr	r0, [pc, #60]	@ (80005fc <MX_GPIO_Init+0x88>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	0019      	movs	r1, r3
 80005c4:	f000 fd66 	bl	8001094 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80005c8:	193b      	adds	r3, r7, r4
 80005ca:	22c0      	movs	r2, #192	@ 0xc0
 80005cc:	0052      	lsls	r2, r2, #1
 80005ce:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2201      	movs	r2, #1
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005e2:	193b      	adds	r3, r7, r4
 80005e4:	4a05      	ldr	r2, [pc, #20]	@ (80005fc <MX_GPIO_Init+0x88>)
 80005e6:	0019      	movs	r1, r3
 80005e8:	0010      	movs	r0, r2
 80005ea:	f000 fbef 	bl	8000dcc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b009      	add	sp, #36	@ 0x24
 80005f4:	bd90      	pop	{r4, r7, pc}
 80005f6:	46c0      	nop			@ (mov r8, r8)
 80005f8:	40021000 	.word	0x40021000
 80005fc:	50000400 	.word	0x50000400

08000600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000604:	b672      	cpsid	i
}
 8000606:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000608:	46c0      	nop			@ (mov r8, r8)
 800060a:	e7fd      	b.n	8000608 <Error_Handler+0x8>

0800060c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000612:	4b0f      	ldr	r3, [pc, #60]	@ (8000650 <HAL_MspInit+0x44>)
 8000614:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000616:	4b0e      	ldr	r3, [pc, #56]	@ (8000650 <HAL_MspInit+0x44>)
 8000618:	2101      	movs	r1, #1
 800061a:	430a      	orrs	r2, r1
 800061c:	641a      	str	r2, [r3, #64]	@ 0x40
 800061e:	4b0c      	ldr	r3, [pc, #48]	@ (8000650 <HAL_MspInit+0x44>)
 8000620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000622:	2201      	movs	r2, #1
 8000624:	4013      	ands	r3, r2
 8000626:	607b      	str	r3, [r7, #4]
 8000628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800062a:	4b09      	ldr	r3, [pc, #36]	@ (8000650 <HAL_MspInit+0x44>)
 800062c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800062e:	4b08      	ldr	r3, [pc, #32]	@ (8000650 <HAL_MspInit+0x44>)
 8000630:	2180      	movs	r1, #128	@ 0x80
 8000632:	0549      	lsls	r1, r1, #21
 8000634:	430a      	orrs	r2, r1
 8000636:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000638:	4b05      	ldr	r3, [pc, #20]	@ (8000650 <HAL_MspInit+0x44>)
 800063a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800063c:	2380      	movs	r3, #128	@ 0x80
 800063e:	055b      	lsls	r3, r3, #21
 8000640:	4013      	ands	r3, r2
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	b002      	add	sp, #8
 800064c:	bd80      	pop	{r7, pc}
 800064e:	46c0      	nop			@ (mov r8, r8)
 8000650:	40021000 	.word	0x40021000

08000654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b08d      	sub	sp, #52	@ 0x34
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065c:	241c      	movs	r4, #28
 800065e:	193b      	adds	r3, r7, r4
 8000660:	0018      	movs	r0, r3
 8000662:	2314      	movs	r3, #20
 8000664:	001a      	movs	r2, r3
 8000666:	2100      	movs	r1, #0
 8000668:	f003 fccc 	bl	8004004 <memset>
  if(huart->Instance==USART3)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a3e      	ldr	r2, [pc, #248]	@ (800076c <HAL_UART_MspInit+0x118>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d138      	bne.n	80006e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000676:	4b3e      	ldr	r3, [pc, #248]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 8000678:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800067a:	4b3d      	ldr	r3, [pc, #244]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 800067c:	2180      	movs	r1, #128	@ 0x80
 800067e:	02c9      	lsls	r1, r1, #11
 8000680:	430a      	orrs	r2, r1
 8000682:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000684:	4b3a      	ldr	r3, [pc, #232]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 8000686:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000688:	2380      	movs	r3, #128	@ 0x80
 800068a:	02db      	lsls	r3, r3, #11
 800068c:	4013      	ands	r3, r2
 800068e:	61bb      	str	r3, [r7, #24]
 8000690:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000692:	4b37      	ldr	r3, [pc, #220]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000696:	4b36      	ldr	r3, [pc, #216]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 8000698:	2102      	movs	r1, #2
 800069a:	430a      	orrs	r2, r1
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
 800069e:	4b34      	ldr	r3, [pc, #208]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 80006a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006a2:	2202      	movs	r2, #2
 80006a4:	4013      	ands	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB0     ------> USART3_RX
    PB2     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80006aa:	0021      	movs	r1, r4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	2205      	movs	r2, #5
 80006b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	187b      	adds	r3, r7, r1
 80006b4:	2202      	movs	r2, #2
 80006b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	187b      	adds	r3, r7, r1
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	187b      	adds	r3, r7, r1
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2204      	movs	r2, #4
 80006c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	4a29      	ldr	r2, [pc, #164]	@ (8000774 <HAL_UART_MspInit+0x120>)
 80006ce:	0019      	movs	r1, r3
 80006d0:	0010      	movs	r0, r2
 80006d2:	f000 fb7b 	bl	8000dcc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2100      	movs	r1, #0
 80006da:	201d      	movs	r0, #29
 80006dc:	f000 fa78 	bl	8000bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80006e0:	201d      	movs	r0, #29
 80006e2:	f000 fa8a 	bl	8000bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 80006e6:	e03d      	b.n	8000764 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART4)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a22      	ldr	r2, [pc, #136]	@ (8000778 <HAL_UART_MspInit+0x124>)
 80006ee:	4293      	cmp	r3, r2
 80006f0:	d138      	bne.n	8000764 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART4_CLK_ENABLE();
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 80006f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006f6:	4b1e      	ldr	r3, [pc, #120]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 80006f8:	2180      	movs	r1, #128	@ 0x80
 80006fa:	0309      	lsls	r1, r1, #12
 80006fc:	430a      	orrs	r2, r1
 80006fe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000700:	4b1b      	ldr	r3, [pc, #108]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 8000702:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000704:	2380      	movs	r3, #128	@ 0x80
 8000706:	031b      	lsls	r3, r3, #12
 8000708:	4013      	ands	r3, r2
 800070a:	613b      	str	r3, [r7, #16]
 800070c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 8000710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000712:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 8000714:	2101      	movs	r1, #1
 8000716:	430a      	orrs	r2, r1
 8000718:	635a      	str	r2, [r3, #52]	@ 0x34
 800071a:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <HAL_UART_MspInit+0x11c>)
 800071c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800071e:	2201      	movs	r2, #1
 8000720:	4013      	ands	r3, r2
 8000722:	60fb      	str	r3, [r7, #12]
 8000724:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000726:	211c      	movs	r1, #28
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2203      	movs	r2, #3
 800072c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	187b      	adds	r3, r7, r1
 8000730:	2202      	movs	r2, #2
 8000732:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	187b      	adds	r3, r7, r1
 8000736:	2200      	movs	r2, #0
 8000738:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2204      	movs	r2, #4
 8000744:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000746:	187a      	adds	r2, r7, r1
 8000748:	23a0      	movs	r3, #160	@ 0xa0
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	0011      	movs	r1, r2
 800074e:	0018      	movs	r0, r3
 8000750:	f000 fb3c 	bl	8000dcc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000754:	2200      	movs	r2, #0
 8000756:	2100      	movs	r1, #0
 8000758:	201d      	movs	r0, #29
 800075a:	f000 fa39 	bl	8000bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 800075e:	201d      	movs	r0, #29
 8000760:	f000 fa4b 	bl	8000bfa <HAL_NVIC_EnableIRQ>
}
 8000764:	46c0      	nop			@ (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	b00d      	add	sp, #52	@ 0x34
 800076a:	bd90      	pop	{r4, r7, pc}
 800076c:	40004800 	.word	0x40004800
 8000770:	40021000 	.word	0x40021000
 8000774:	50000400 	.word	0x50000400
 8000778:	40004c00 	.word	0x40004c00

0800077c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	e7fd      	b.n	8000780 <NMI_Handler+0x4>

08000784 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000788:	46c0      	nop			@ (mov r8, r8)
 800078a:	e7fd      	b.n	8000788 <HardFault_Handler+0x4>

0800078c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}

08000796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000796:	b580      	push	{r7, lr}
 8000798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a4:	f000 f94c 	bl	8000a40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a8:	46c0      	nop			@ (mov r8, r8)
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
	...

080007b0 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80007b4:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <USART3_4_IRQHandler+0x1c>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f001 fae6 	bl	8001d88 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 80007bc:	4b04      	ldr	r3, [pc, #16]	@ (80007d0 <USART3_4_IRQHandler+0x20>)
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fae2 	bl	8001d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 80007c4:	46c0      	nop			@ (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	20000084 	.word	0x20000084
 80007d0:	20000118 	.word	0x20000118

080007d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	e00a      	b.n	80007fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007e6:	e000      	b.n	80007ea <_read+0x16>
 80007e8:	bf00      	nop
 80007ea:	0001      	movs	r1, r0
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	1c5a      	adds	r2, r3, #1
 80007f0:	60ba      	str	r2, [r7, #8]
 80007f2:	b2ca      	uxtb	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf0      	blt.n	80007e6 <_read+0x12>
  }

  return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	0018      	movs	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	b006      	add	sp, #24
 800080c:	bd80      	pop	{r7, pc}

0800080e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b086      	sub	sp, #24
 8000812:	af00      	add	r7, sp, #0
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	60b9      	str	r1, [r7, #8]
 8000818:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e009      	b.n	8000834 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	1c5a      	adds	r2, r3, #1
 8000824:	60ba      	str	r2, [r7, #8]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	0018      	movs	r0, r3
 800082a:	e000      	b.n	800082e <_write+0x20>
 800082c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800082e:	697b      	ldr	r3, [r7, #20]
 8000830:	3301      	adds	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	697a      	ldr	r2, [r7, #20]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	429a      	cmp	r2, r3
 800083a:	dbf1      	blt.n	8000820 <_write+0x12>
  }
  return len;
 800083c:	687b      	ldr	r3, [r7, #4]
}
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	b006      	add	sp, #24
 8000844:	bd80      	pop	{r7, pc}

08000846 <_close>:

int _close(int file)
{
 8000846:	b580      	push	{r7, lr}
 8000848:	b082      	sub	sp, #8
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800084e:	2301      	movs	r3, #1
 8000850:	425b      	negs	r3, r3
}
 8000852:	0018      	movs	r0, r3
 8000854:	46bd      	mov	sp, r7
 8000856:	b002      	add	sp, #8
 8000858:	bd80      	pop	{r7, pc}

0800085a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
 8000862:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	2280      	movs	r2, #128	@ 0x80
 8000868:	0192      	lsls	r2, r2, #6
 800086a:	605a      	str	r2, [r3, #4]
  return 0;
 800086c:	2300      	movs	r3, #0
}
 800086e:	0018      	movs	r0, r3
 8000870:	46bd      	mov	sp, r7
 8000872:	b002      	add	sp, #8
 8000874:	bd80      	pop	{r7, pc}

08000876 <_isatty>:

int _isatty(int file)
{
 8000876:	b580      	push	{r7, lr}
 8000878:	b082      	sub	sp, #8
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800087e:	2301      	movs	r3, #1
}
 8000880:	0018      	movs	r0, r3
 8000882:	46bd      	mov	sp, r7
 8000884:	b002      	add	sp, #8
 8000886:	bd80      	pop	{r7, pc}

08000888 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000894:	2300      	movs	r3, #0
}
 8000896:	0018      	movs	r0, r3
 8000898:	46bd      	mov	sp, r7
 800089a:	b004      	add	sp, #16
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008a8:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <_sbrk+0x5c>)
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <_sbrk+0x60>)
 80008ac:	1ad3      	subs	r3, r2, r3
 80008ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008b0:	697b      	ldr	r3, [r7, #20]
 80008b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008b4:	4b13      	ldr	r3, [pc, #76]	@ (8000904 <_sbrk+0x64>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d102      	bne.n	80008c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <_sbrk+0x64>)
 80008be:	4a12      	ldr	r2, [pc, #72]	@ (8000908 <_sbrk+0x68>)
 80008c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008c2:	4b10      	ldr	r3, [pc, #64]	@ (8000904 <_sbrk+0x64>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	18d3      	adds	r3, r2, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d207      	bcs.n	80008e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008d0:	f003 fbee 	bl	80040b0 <__errno>
 80008d4:	0003      	movs	r3, r0
 80008d6:	220c      	movs	r2, #12
 80008d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008da:	2301      	movs	r3, #1
 80008dc:	425b      	negs	r3, r3
 80008de:	e009      	b.n	80008f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008e0:	4b08      	ldr	r3, [pc, #32]	@ (8000904 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008e6:	4b07      	ldr	r3, [pc, #28]	@ (8000904 <_sbrk+0x64>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	18d2      	adds	r2, r2, r3
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <_sbrk+0x64>)
 80008f0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80008f2:	68fb      	ldr	r3, [r7, #12]
}
 80008f4:	0018      	movs	r0, r3
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b006      	add	sp, #24
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	20009000 	.word	0x20009000
 8000900:	00000400 	.word	0x00000400
 8000904:	20000340 	.word	0x20000340
 8000908:	20000498 	.word	0x20000498

0800090c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000910:	46c0      	nop			@ (mov r8, r8)
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
	...

08000918 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000918:	480d      	ldr	r0, [pc, #52]	@ (8000950 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800091a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800091c:	f7ff fff6 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000920:	480c      	ldr	r0, [pc, #48]	@ (8000954 <LoopForever+0x6>)
  ldr r1, =_edata
 8000922:	490d      	ldr	r1, [pc, #52]	@ (8000958 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000924:	4a0d      	ldr	r2, [pc, #52]	@ (800095c <LoopForever+0xe>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000928:	e002      	b.n	8000930 <LoopCopyDataInit>

0800092a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800092a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800092c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800092e:	3304      	adds	r3, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000934:	d3f9      	bcc.n	800092a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000936:	4a0a      	ldr	r2, [pc, #40]	@ (8000960 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000938:	4c0a      	ldr	r4, [pc, #40]	@ (8000964 <LoopForever+0x16>)
  movs r3, #0
 800093a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800093c:	e001      	b.n	8000942 <LoopFillZerobss>

0800093e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800093e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000940:	3204      	adds	r2, #4

08000942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000944:	d3fb      	bcc.n	800093e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000946:	f003 fbb9 	bl	80040bc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800094a:	f7ff fd4b 	bl	80003e4 <main>

0800094e <LoopForever>:

LoopForever:
  b LoopForever
 800094e:	e7fe      	b.n	800094e <LoopForever>
  ldr   r0, =_estack
 8000950:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000954:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000958:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800095c:	080046e0 	.word	0x080046e0
  ldr r2, =_sbss
 8000960:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000964:	20000494 	.word	0x20000494

08000968 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000968:	e7fe      	b.n	8000968 <ADC1_IRQHandler>
	...

0800096c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	2200      	movs	r2, #0
 8000976:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000978:	4b0b      	ldr	r3, [pc, #44]	@ (80009a8 <HAL_Init+0x3c>)
 800097a:	681a      	ldr	r2, [r3, #0]
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <HAL_Init+0x3c>)
 800097e:	2180      	movs	r1, #128	@ 0x80
 8000980:	0049      	lsls	r1, r1, #1
 8000982:	430a      	orrs	r2, r1
 8000984:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000986:	2003      	movs	r0, #3
 8000988:	f000 f810 	bl	80009ac <HAL_InitTick>
 800098c:	1e03      	subs	r3, r0, #0
 800098e:	d003      	beq.n	8000998 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000990:	1dfb      	adds	r3, r7, #7
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
 8000996:	e001      	b.n	800099c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000998:	f7ff fe38 	bl	800060c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800099c:	1dfb      	adds	r3, r7, #7
 800099e:	781b      	ldrb	r3, [r3, #0]
}
 80009a0:	0018      	movs	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	b002      	add	sp, #8
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40022000 	.word	0x40022000

080009ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b085      	sub	sp, #20
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	2200      	movs	r2, #0
 80009ba:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80009bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a34 <HAL_InitTick+0x88>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d02b      	beq.n	8000a1c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <HAL_InitTick+0x8c>)
 80009c6:	681c      	ldr	r4, [r3, #0]
 80009c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a34 <HAL_InitTick+0x88>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	0019      	movs	r1, r3
 80009ce:	23fa      	movs	r3, #250	@ 0xfa
 80009d0:	0098      	lsls	r0, r3, #2
 80009d2:	f7ff fb9d 	bl	8000110 <__udivsi3>
 80009d6:	0003      	movs	r3, r0
 80009d8:	0019      	movs	r1, r3
 80009da:	0020      	movs	r0, r4
 80009dc:	f7ff fb98 	bl	8000110 <__udivsi3>
 80009e0:	0003      	movs	r3, r0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f000 f919 	bl	8000c1a <HAL_SYSTICK_Config>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d112      	bne.n	8000a12 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2b03      	cmp	r3, #3
 80009f0:	d80a      	bhi.n	8000a08 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009f2:	6879      	ldr	r1, [r7, #4]
 80009f4:	2301      	movs	r3, #1
 80009f6:	425b      	negs	r3, r3
 80009f8:	2200      	movs	r2, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f000 f8e8 	bl	8000bd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a00:	4b0e      	ldr	r3, [pc, #56]	@ (8000a3c <HAL_InitTick+0x90>)
 8000a02:	687a      	ldr	r2, [r7, #4]
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	e00d      	b.n	8000a24 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000a08:	230f      	movs	r3, #15
 8000a0a:	18fb      	adds	r3, r7, r3
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
 8000a10:	e008      	b.n	8000a24 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a12:	230f      	movs	r3, #15
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	2201      	movs	r2, #1
 8000a18:	701a      	strb	r2, [r3, #0]
 8000a1a:	e003      	b.n	8000a24 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	18fb      	adds	r3, r7, r3
 8000a20:	2201      	movs	r2, #1
 8000a22:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000a24:	230f      	movs	r3, #15
 8000a26:	18fb      	adds	r3, r7, r3
 8000a28:	781b      	ldrb	r3, [r3, #0]
}
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b005      	add	sp, #20
 8000a30:	bd90      	pop	{r4, r7, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	20000008 	.word	0x20000008
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000004 	.word	0x20000004

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	18d2      	adds	r2, r2, r3
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <HAL_IncTick+0x20>)
 8000a52:	601a      	str	r2, [r3, #0]
}
 8000a54:	46c0      	nop			@ (mov r8, r8)
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	20000344 	.word	0x20000344

08000a64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	@ (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	20000344 	.word	0x20000344

08000a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	0002      	movs	r2, r0
 8000a80:	1dfb      	adds	r3, r7, #7
 8000a82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a8a:	d809      	bhi.n	8000aa0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	001a      	movs	r2, r3
 8000a92:	231f      	movs	r3, #31
 8000a94:	401a      	ands	r2, r3
 8000a96:	4b04      	ldr	r3, [pc, #16]	@ (8000aa8 <__NVIC_EnableIRQ+0x30>)
 8000a98:	2101      	movs	r1, #1
 8000a9a:	4091      	lsls	r1, r2
 8000a9c:	000a      	movs	r2, r1
 8000a9e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b002      	add	sp, #8
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	e000e100 	.word	0xe000e100

08000aac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	0002      	movs	r2, r0
 8000ab4:	6039      	str	r1, [r7, #0]
 8000ab6:	1dfb      	adds	r3, r7, #7
 8000ab8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aba:	1dfb      	adds	r3, r7, #7
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b7f      	cmp	r3, #127	@ 0x7f
 8000ac0:	d828      	bhi.n	8000b14 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac2:	4a2f      	ldr	r2, [pc, #188]	@ (8000b80 <__NVIC_SetPriority+0xd4>)
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	33c0      	adds	r3, #192	@ 0xc0
 8000ace:	009b      	lsls	r3, r3, #2
 8000ad0:	589b      	ldr	r3, [r3, r2]
 8000ad2:	1dfa      	adds	r2, r7, #7
 8000ad4:	7812      	ldrb	r2, [r2, #0]
 8000ad6:	0011      	movs	r1, r2
 8000ad8:	2203      	movs	r2, #3
 8000ada:	400a      	ands	r2, r1
 8000adc:	00d2      	lsls	r2, r2, #3
 8000ade:	21ff      	movs	r1, #255	@ 0xff
 8000ae0:	4091      	lsls	r1, r2
 8000ae2:	000a      	movs	r2, r1
 8000ae4:	43d2      	mvns	r2, r2
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	019b      	lsls	r3, r3, #6
 8000aee:	22ff      	movs	r2, #255	@ 0xff
 8000af0:	401a      	ands	r2, r3
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	0018      	movs	r0, r3
 8000af8:	2303      	movs	r3, #3
 8000afa:	4003      	ands	r3, r0
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b00:	481f      	ldr	r0, [pc, #124]	@ (8000b80 <__NVIC_SetPriority+0xd4>)
 8000b02:	1dfb      	adds	r3, r7, #7
 8000b04:	781b      	ldrb	r3, [r3, #0]
 8000b06:	b25b      	sxtb	r3, r3
 8000b08:	089b      	lsrs	r3, r3, #2
 8000b0a:	430a      	orrs	r2, r1
 8000b0c:	33c0      	adds	r3, #192	@ 0xc0
 8000b0e:	009b      	lsls	r3, r3, #2
 8000b10:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b12:	e031      	b.n	8000b78 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b14:	4a1b      	ldr	r2, [pc, #108]	@ (8000b84 <__NVIC_SetPriority+0xd8>)
 8000b16:	1dfb      	adds	r3, r7, #7
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	0019      	movs	r1, r3
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	400b      	ands	r3, r1
 8000b20:	3b08      	subs	r3, #8
 8000b22:	089b      	lsrs	r3, r3, #2
 8000b24:	3306      	adds	r3, #6
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	18d3      	adds	r3, r2, r3
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	1dfa      	adds	r2, r7, #7
 8000b30:	7812      	ldrb	r2, [r2, #0]
 8000b32:	0011      	movs	r1, r2
 8000b34:	2203      	movs	r2, #3
 8000b36:	400a      	ands	r2, r1
 8000b38:	00d2      	lsls	r2, r2, #3
 8000b3a:	21ff      	movs	r1, #255	@ 0xff
 8000b3c:	4091      	lsls	r1, r2
 8000b3e:	000a      	movs	r2, r1
 8000b40:	43d2      	mvns	r2, r2
 8000b42:	401a      	ands	r2, r3
 8000b44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	019b      	lsls	r3, r3, #6
 8000b4a:	22ff      	movs	r2, #255	@ 0xff
 8000b4c:	401a      	ands	r2, r3
 8000b4e:	1dfb      	adds	r3, r7, #7
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	0018      	movs	r0, r3
 8000b54:	2303      	movs	r3, #3
 8000b56:	4003      	ands	r3, r0
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b5c:	4809      	ldr	r0, [pc, #36]	@ (8000b84 <__NVIC_SetPriority+0xd8>)
 8000b5e:	1dfb      	adds	r3, r7, #7
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	001c      	movs	r4, r3
 8000b64:	230f      	movs	r3, #15
 8000b66:	4023      	ands	r3, r4
 8000b68:	3b08      	subs	r3, #8
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	430a      	orrs	r2, r1
 8000b6e:	3306      	adds	r3, #6
 8000b70:	009b      	lsls	r3, r3, #2
 8000b72:	18c3      	adds	r3, r0, r3
 8000b74:	3304      	adds	r3, #4
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	46c0      	nop			@ (mov r8, r8)
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	b003      	add	sp, #12
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	e000e100 	.word	0xe000e100
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	1e5a      	subs	r2, r3, #1
 8000b94:	2380      	movs	r3, #128	@ 0x80
 8000b96:	045b      	lsls	r3, r3, #17
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d301      	bcc.n	8000ba0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e010      	b.n	8000bc2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bcc <SysTick_Config+0x44>)
 8000ba2:	687a      	ldr	r2, [r7, #4]
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba8:	2301      	movs	r3, #1
 8000baa:	425b      	negs	r3, r3
 8000bac:	2103      	movs	r1, #3
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f7ff ff7c 	bl	8000aac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb4:	4b05      	ldr	r3, [pc, #20]	@ (8000bcc <SysTick_Config+0x44>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bba:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <SysTick_Config+0x44>)
 8000bbc:	2207      	movs	r2, #7
 8000bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	b002      	add	sp, #8
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	e000e010 	.word	0xe000e010

08000bd0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60b9      	str	r1, [r7, #8]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	210f      	movs	r1, #15
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	1c02      	adds	r2, r0, #0
 8000be0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	187b      	adds	r3, r7, r1
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	b25b      	sxtb	r3, r3
 8000bea:	0011      	movs	r1, r2
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff ff5d 	bl	8000aac <__NVIC_SetPriority>
}
 8000bf2:	46c0      	nop			@ (mov r8, r8)
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	b004      	add	sp, #16
 8000bf8:	bd80      	pop	{r7, pc}

08000bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	b082      	sub	sp, #8
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	0002      	movs	r2, r0
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c06:	1dfb      	adds	r3, r7, #7
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	0018      	movs	r0, r3
 8000c0e:	f7ff ff33 	bl	8000a78 <__NVIC_EnableIRQ>
}
 8000c12:	46c0      	nop			@ (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b002      	add	sp, #8
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	0018      	movs	r0, r3
 8000c26:	f7ff ffaf 	bl	8000b88 <SysTick_Config>
 8000c2a:	0003      	movs	r3, r0
}
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b002      	add	sp, #8
 8000c32:	bd80      	pop	{r7, pc}

08000c34 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000c42:	2301      	movs	r3, #1
 8000c44:	e050      	b.n	8000ce8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	2225      	movs	r2, #37	@ 0x25
 8000c4a:	5c9b      	ldrb	r3, [r3, r2]
 8000c4c:	b2db      	uxtb	r3, r3
 8000c4e:	2b02      	cmp	r3, #2
 8000c50:	d008      	beq.n	8000c64 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2204      	movs	r2, #4
 8000c56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2224      	movs	r2, #36	@ 0x24
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c60:	2301      	movs	r3, #1
 8000c62:	e041      	b.n	8000ce8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	681a      	ldr	r2, [r3, #0]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	210e      	movs	r1, #14
 8000c70:	438a      	bics	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c7e:	491c      	ldr	r1, [pc, #112]	@ (8000cf0 <HAL_DMA_Abort+0xbc>)
 8000c80:	400a      	ands	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2101      	movs	r1, #1
 8000c90:	438a      	bics	r2, r1
 8000c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000c94:	4b17      	ldr	r3, [pc, #92]	@ (8000cf4 <HAL_DMA_Abort+0xc0>)
 8000c96:	6859      	ldr	r1, [r3, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	221c      	movs	r2, #28
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	409a      	lsls	r2, r3
 8000ca4:	4b13      	ldr	r3, [pc, #76]	@ (8000cf4 <HAL_DMA_Abort+0xc0>)
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000cb2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d00c      	beq.n	8000cd6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000cc6:	490a      	ldr	r1, [pc, #40]	@ (8000cf0 <HAL_DMA_Abort+0xbc>)
 8000cc8:	400a      	ands	r2, r1
 8000cca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000cd0:	687a      	ldr	r2, [r7, #4]
 8000cd2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000cd4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2225      	movs	r2, #37	@ 0x25
 8000cda:	2101      	movs	r1, #1
 8000cdc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2224      	movs	r2, #36	@ 0x24
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	fffffeff 	.word	0xfffffeff
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d00:	210f      	movs	r1, #15
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2225      	movs	r2, #37	@ 0x25
 8000d0c:	5c9b      	ldrb	r3, [r3, r2]
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d006      	beq.n	8000d22 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2204      	movs	r2, #4
 8000d18:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000d1a:	187b      	adds	r3, r7, r1
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e049      	b.n	8000db6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	210e      	movs	r1, #14
 8000d2e:	438a      	bics	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	438a      	bics	r2, r1
 8000d40:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d4c:	491d      	ldr	r1, [pc, #116]	@ (8000dc4 <HAL_DMA_Abort_IT+0xcc>)
 8000d4e:	400a      	ands	r2, r1
 8000d50:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000d52:	4b1d      	ldr	r3, [pc, #116]	@ (8000dc8 <HAL_DMA_Abort_IT+0xd0>)
 8000d54:	6859      	ldr	r1, [r3, #4]
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5a:	221c      	movs	r2, #28
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2201      	movs	r2, #1
 8000d60:	409a      	lsls	r2, r3
 8000d62:	4b19      	ldr	r3, [pc, #100]	@ (8000dc8 <HAL_DMA_Abort_IT+0xd0>)
 8000d64:	430a      	orrs	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d70:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00c      	beq.n	8000d94 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d84:	490f      	ldr	r1, [pc, #60]	@ (8000dc4 <HAL_DMA_Abort_IT+0xcc>)
 8000d86:	400a      	ands	r2, r1
 8000d88:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d92:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2225      	movs	r2, #37	@ 0x25
 8000d98:	2101      	movs	r1, #1
 8000d9a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2224      	movs	r2, #36	@ 0x24
 8000da0:	2100      	movs	r1, #0
 8000da2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d004      	beq.n	8000db6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	0010      	movs	r0, r2
 8000db4:	4798      	blx	r3
    }
  }
  return status;
 8000db6:	230f      	movs	r3, #15
 8000db8:	18fb      	adds	r3, r7, r3
 8000dba:	781b      	ldrb	r3, [r3, #0]
}
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b004      	add	sp, #16
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	fffffeff 	.word	0xfffffeff
 8000dc8:	40020000 	.word	0x40020000

08000dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dda:	e147      	b.n	800106c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2101      	movs	r1, #1
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4091      	lsls	r1, r2
 8000de6:	000a      	movs	r2, r1
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d100      	bne.n	8000df4 <HAL_GPIO_Init+0x28>
 8000df2:	e138      	b.n	8001066 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d005      	beq.n	8000e0c <HAL_GPIO_Init+0x40>
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2203      	movs	r2, #3
 8000e06:	4013      	ands	r3, r2
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d130      	bne.n	8000e6e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	689b      	ldr	r3, [r3, #8]
 8000e10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	2203      	movs	r2, #3
 8000e18:	409a      	lsls	r2, r3
 8000e1a:	0013      	movs	r3, r2
 8000e1c:	43da      	mvns	r2, r3
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	68da      	ldr	r2, [r3, #12]
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	0013      	movs	r3, r2
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e42:	2201      	movs	r2, #1
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	091b      	lsrs	r3, r3, #4
 8000e58:	2201      	movs	r2, #1
 8000e5a:	401a      	ands	r2, r3
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	409a      	lsls	r2, r3
 8000e60:	0013      	movs	r3, r2
 8000e62:	693a      	ldr	r2, [r7, #16]
 8000e64:	4313      	orrs	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	2203      	movs	r2, #3
 8000e74:	4013      	ands	r3, r2
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	d017      	beq.n	8000eaa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	68db      	ldr	r3, [r3, #12]
 8000e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	2203      	movs	r2, #3
 8000e86:	409a      	lsls	r2, r3
 8000e88:	0013      	movs	r3, r2
 8000e8a:	43da      	mvns	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	005b      	lsls	r3, r3, #1
 8000e9a:	409a      	lsls	r2, r3
 8000e9c:	0013      	movs	r3, r2
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2203      	movs	r2, #3
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d123      	bne.n	8000efe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	08da      	lsrs	r2, r3, #3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3208      	adds	r2, #8
 8000ebe:	0092      	lsls	r2, r2, #2
 8000ec0:	58d3      	ldr	r3, [r2, r3]
 8000ec2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	2207      	movs	r2, #7
 8000ec8:	4013      	ands	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	691a      	ldr	r2, [r3, #16]
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	2107      	movs	r1, #7
 8000ee2:	400b      	ands	r3, r1
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	409a      	lsls	r2, r3
 8000ee8:	0013      	movs	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	0092      	lsls	r2, r2, #2
 8000efa:	6939      	ldr	r1, [r7, #16]
 8000efc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	2203      	movs	r2, #3
 8000f0a:	409a      	lsls	r2, r3
 8000f0c:	0013      	movs	r3, r2
 8000f0e:	43da      	mvns	r2, r3
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4013      	ands	r3, r2
 8000f14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	2203      	movs	r2, #3
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	005b      	lsls	r3, r3, #1
 8000f22:	409a      	lsls	r2, r3
 8000f24:	0013      	movs	r3, r2
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685a      	ldr	r2, [r3, #4]
 8000f36:	23c0      	movs	r3, #192	@ 0xc0
 8000f38:	029b      	lsls	r3, r3, #10
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	d100      	bne.n	8000f40 <HAL_GPIO_Init+0x174>
 8000f3e:	e092      	b.n	8001066 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000f40:	4a50      	ldr	r2, [pc, #320]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	089b      	lsrs	r3, r3, #2
 8000f46:	3318      	adds	r3, #24
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	589b      	ldr	r3, [r3, r2]
 8000f4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	2203      	movs	r2, #3
 8000f52:	4013      	ands	r3, r2
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	220f      	movs	r2, #15
 8000f58:	409a      	lsls	r2, r3
 8000f5a:	0013      	movs	r3, r2
 8000f5c:	43da      	mvns	r2, r3
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4013      	ands	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	23a0      	movs	r3, #160	@ 0xa0
 8000f68:	05db      	lsls	r3, r3, #23
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1ca>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a45      	ldr	r2, [pc, #276]	@ (8001088 <HAL_GPIO_Init+0x2bc>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1c6>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a44      	ldr	r2, [pc, #272]	@ (800108c <HAL_GPIO_Init+0x2c0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1c2>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a43      	ldr	r2, [pc, #268]	@ (8001090 <HAL_GPIO_Init+0x2c4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1be>
 8000f86:	2303      	movs	r3, #3
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x1cc>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x1cc>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x1cc>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x1cc>
 8000f96:	2300      	movs	r3, #0
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	2103      	movs	r1, #3
 8000f9c:	400a      	ands	r2, r1
 8000f9e:	00d2      	lsls	r2, r2, #3
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000fa8:	4936      	ldr	r1, [pc, #216]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3318      	adds	r3, #24
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fb6:	4b33      	ldr	r3, [pc, #204]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	2380      	movs	r3, #128	@ 0x80
 8000fcc:	035b      	lsls	r3, r3, #13
 8000fce:	4013      	ands	r3, r2
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fda:	4b2a      	ldr	r3, [pc, #168]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000fe0:	4b28      	ldr	r3, [pc, #160]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685a      	ldr	r2, [r3, #4]
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	039b      	lsls	r3, r3, #14
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001004:	4b1f      	ldr	r3, [pc, #124]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800100a:	4a1e      	ldr	r2, [pc, #120]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 800100c:	2384      	movs	r3, #132	@ 0x84
 800100e:	58d3      	ldr	r3, [r2, r3]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43da      	mvns	r2, r3
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685a      	ldr	r2, [r3, #4]
 8001020:	2380      	movs	r3, #128	@ 0x80
 8001022:	029b      	lsls	r3, r3, #10
 8001024:	4013      	ands	r3, r2
 8001026:	d003      	beq.n	8001030 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4313      	orrs	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001030:	4914      	ldr	r1, [pc, #80]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8001032:	2284      	movs	r2, #132	@ 0x84
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001038:	4a12      	ldr	r2, [pc, #72]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 800103a:	2380      	movs	r3, #128	@ 0x80
 800103c:	58d3      	ldr	r3, [r2, r3]
 800103e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	2380      	movs	r3, #128	@ 0x80
 8001050:	025b      	lsls	r3, r3, #9
 8001052:	4013      	ands	r3, r2
 8001054:	d003      	beq.n	800105e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800105e:	4909      	ldr	r1, [pc, #36]	@ (8001084 <HAL_GPIO_Init+0x2b8>)
 8001060:	2280      	movs	r2, #128	@ 0x80
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	40da      	lsrs	r2, r3
 8001074:	1e13      	subs	r3, r2, #0
 8001076:	d000      	beq.n	800107a <HAL_GPIO_Init+0x2ae>
 8001078:	e6b0      	b.n	8000ddc <HAL_GPIO_Init+0x10>
  }
}
 800107a:	46c0      	nop			@ (mov r8, r8)
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b006      	add	sp, #24
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021800 	.word	0x40021800
 8001088:	50000400 	.word	0x50000400
 800108c:	50000800 	.word	0x50000800
 8001090:	50000c00 	.word	0x50000c00

08001094 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	0008      	movs	r0, r1
 800109e:	0011      	movs	r1, r2
 80010a0:	1cbb      	adds	r3, r7, #2
 80010a2:	1c02      	adds	r2, r0, #0
 80010a4:	801a      	strh	r2, [r3, #0]
 80010a6:	1c7b      	adds	r3, r7, #1
 80010a8:	1c0a      	adds	r2, r1, #0
 80010aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010ac:	1c7b      	adds	r3, r7, #1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d004      	beq.n	80010be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b4:	1cbb      	adds	r3, r7, #2
 80010b6:	881a      	ldrh	r2, [r3, #0]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	1cbb      	adds	r3, r7, #2
 80010c0:	881a      	ldrh	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c6:	46c0      	nop			@ (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b002      	add	sp, #8
 80010cc:	bd80      	pop	{r7, pc}
	...

080010d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a19      	ldr	r2, [pc, #100]	@ (8001144 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80010de:	4013      	ands	r3, r2
 80010e0:	0019      	movs	r1, r3
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	430a      	orrs	r2, r1
 80010e8:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	2380      	movs	r3, #128	@ 0x80
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d11f      	bne.n	8001134 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010f4:	4b14      	ldr	r3, [pc, #80]	@ (8001148 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	0013      	movs	r3, r2
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	189b      	adds	r3, r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4912      	ldr	r1, [pc, #72]	@ (800114c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff f804 	bl	8000110 <__udivsi3>
 8001108:	0003      	movs	r3, r0
 800110a:	3301      	adds	r3, #1
 800110c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800110e:	e008      	b.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3b01      	subs	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
 800111c:	e001      	b.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e009      	b.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001122:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001124:	695a      	ldr	r2, [r3, #20]
 8001126:	2380      	movs	r3, #128	@ 0x80
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	401a      	ands	r2, r3
 800112c:	2380      	movs	r3, #128	@ 0x80
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	429a      	cmp	r2, r3
 8001132:	d0ed      	beq.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	0018      	movs	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	b004      	add	sp, #16
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	40007000 	.word	0x40007000
 8001144:	fffff9ff 	.word	0xfffff9ff
 8001148:	20000000 	.word	0x20000000
 800114c:	000f4240 	.word	0x000f4240

08001150 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001154:	4b03      	ldr	r3, [pc, #12]	@ (8001164 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	23e0      	movs	r3, #224	@ 0xe0
 800115a:	01db      	lsls	r3, r3, #7
 800115c:	4013      	ands	r3, r2
}
 800115e:	0018      	movs	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000

08001168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b088      	sub	sp, #32
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e2f3      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2201      	movs	r2, #1
 8001180:	4013      	ands	r3, r2
 8001182:	d100      	bne.n	8001186 <HAL_RCC_OscConfig+0x1e>
 8001184:	e07c      	b.n	8001280 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001186:	4bc3      	ldr	r3, [pc, #780]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	2238      	movs	r2, #56	@ 0x38
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001190:	4bc0      	ldr	r3, [pc, #768]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	2203      	movs	r2, #3
 8001196:	4013      	ands	r3, r2
 8001198:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	2b10      	cmp	r3, #16
 800119e:	d102      	bne.n	80011a6 <HAL_RCC_OscConfig+0x3e>
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	2b03      	cmp	r3, #3
 80011a4:	d002      	beq.n	80011ac <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d10b      	bne.n	80011c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	4bb9      	ldr	r3, [pc, #740]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	2380      	movs	r3, #128	@ 0x80
 80011b2:	029b      	lsls	r3, r3, #10
 80011b4:	4013      	ands	r3, r2
 80011b6:	d062      	beq.n	800127e <HAL_RCC_OscConfig+0x116>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d15e      	bne.n	800127e <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e2ce      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	2380      	movs	r3, #128	@ 0x80
 80011ca:	025b      	lsls	r3, r3, #9
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d107      	bne.n	80011e0 <HAL_RCC_OscConfig+0x78>
 80011d0:	4bb0      	ldr	r3, [pc, #704]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4baf      	ldr	r3, [pc, #700]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011d6:	2180      	movs	r1, #128	@ 0x80
 80011d8:	0249      	lsls	r1, r1, #9
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e020      	b.n	8001222 <HAL_RCC_OscConfig+0xba>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	23a0      	movs	r3, #160	@ 0xa0
 80011e6:	02db      	lsls	r3, r3, #11
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d10e      	bne.n	800120a <HAL_RCC_OscConfig+0xa2>
 80011ec:	4ba9      	ldr	r3, [pc, #676]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4ba8      	ldr	r3, [pc, #672]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	2180      	movs	r1, #128	@ 0x80
 80011f4:	02c9      	lsls	r1, r1, #11
 80011f6:	430a      	orrs	r2, r1
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	4ba6      	ldr	r3, [pc, #664]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	4ba5      	ldr	r3, [pc, #660]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001200:	2180      	movs	r1, #128	@ 0x80
 8001202:	0249      	lsls	r1, r1, #9
 8001204:	430a      	orrs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e00b      	b.n	8001222 <HAL_RCC_OscConfig+0xba>
 800120a:	4ba2      	ldr	r3, [pc, #648]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4ba1      	ldr	r3, [pc, #644]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001210:	49a1      	ldr	r1, [pc, #644]	@ (8001498 <HAL_RCC_OscConfig+0x330>)
 8001212:	400a      	ands	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	4b9f      	ldr	r3, [pc, #636]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4b9e      	ldr	r3, [pc, #632]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800121c:	499f      	ldr	r1, [pc, #636]	@ (800149c <HAL_RCC_OscConfig+0x334>)
 800121e:	400a      	ands	r2, r1
 8001220:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d014      	beq.n	8001254 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122a:	f7ff fc1b 	bl	8000a64 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fc16 	bl	8000a64 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	@ 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e28d      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001246:	4b93      	ldr	r3, [pc, #588]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	@ 0x80
 800124c:	029b      	lsls	r3, r3, #10
 800124e:	4013      	ands	r3, r2
 8001250:	d0f0      	beq.n	8001234 <HAL_RCC_OscConfig+0xcc>
 8001252:	e015      	b.n	8001280 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001254:	f7ff fc06 	bl	8000a64 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800125e:	f7ff fc01 	bl	8000a64 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b64      	cmp	r3, #100	@ 0x64
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e278      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001270:	4b88      	ldr	r3, [pc, #544]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	029b      	lsls	r3, r3, #10
 8001278:	4013      	ands	r3, r2
 800127a:	d1f0      	bne.n	800125e <HAL_RCC_OscConfig+0xf6>
 800127c:	e000      	b.n	8001280 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800127e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2202      	movs	r2, #2
 8001286:	4013      	ands	r3, r2
 8001288:	d100      	bne.n	800128c <HAL_RCC_OscConfig+0x124>
 800128a:	e099      	b.n	80013c0 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128c:	4b81      	ldr	r3, [pc, #516]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	2238      	movs	r2, #56	@ 0x38
 8001292:	4013      	ands	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001296:	4b7f      	ldr	r3, [pc, #508]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2203      	movs	r2, #3
 800129c:	4013      	ands	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	2b10      	cmp	r3, #16
 80012a4:	d102      	bne.n	80012ac <HAL_RCC_OscConfig+0x144>
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d002      	beq.n	80012b2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d135      	bne.n	800131e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012b2:	4b78      	ldr	r3, [pc, #480]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2380      	movs	r3, #128	@ 0x80
 80012b8:	00db      	lsls	r3, r3, #3
 80012ba:	4013      	ands	r3, r2
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x162>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e24b      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b72      	ldr	r3, [pc, #456]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4a74      	ldr	r2, [pc, #464]	@ (80014a0 <HAL_RCC_OscConfig+0x338>)
 80012d0:	4013      	ands	r3, r2
 80012d2:	0019      	movs	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	695b      	ldr	r3, [r3, #20]
 80012d8:	021a      	lsls	r2, r3, #8
 80012da:	4b6e      	ldr	r3, [pc, #440]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012dc:	430a      	orrs	r2, r1
 80012de:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d112      	bne.n	800130c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012e6:	4b6b      	ldr	r3, [pc, #428]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a6e      	ldr	r2, [pc, #440]	@ (80014a4 <HAL_RCC_OscConfig+0x33c>)
 80012ec:	4013      	ands	r3, r2
 80012ee:	0019      	movs	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	691a      	ldr	r2, [r3, #16]
 80012f4:	4b67      	ldr	r3, [pc, #412]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012f6:	430a      	orrs	r2, r1
 80012f8:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012fa:	4b66      	ldr	r3, [pc, #408]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	0adb      	lsrs	r3, r3, #11
 8001300:	2207      	movs	r2, #7
 8001302:	4013      	ands	r3, r2
 8001304:	4a68      	ldr	r2, [pc, #416]	@ (80014a8 <HAL_RCC_OscConfig+0x340>)
 8001306:	40da      	lsrs	r2, r3
 8001308:	4b68      	ldr	r3, [pc, #416]	@ (80014ac <HAL_RCC_OscConfig+0x344>)
 800130a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800130c:	4b68      	ldr	r3, [pc, #416]	@ (80014b0 <HAL_RCC_OscConfig+0x348>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	0018      	movs	r0, r3
 8001312:	f7ff fb4b 	bl	80009ac <HAL_InitTick>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d051      	beq.n	80013be <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e221      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d030      	beq.n	8001388 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001326:	4b5b      	ldr	r3, [pc, #364]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a5e      	ldr	r2, [pc, #376]	@ (80014a4 <HAL_RCC_OscConfig+0x33c>)
 800132c:	4013      	ands	r3, r2
 800132e:	0019      	movs	r1, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	691a      	ldr	r2, [r3, #16]
 8001334:	4b57      	ldr	r3, [pc, #348]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001336:	430a      	orrs	r2, r1
 8001338:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800133a:	4b56      	ldr	r3, [pc, #344]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b55      	ldr	r3, [pc, #340]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001340:	2180      	movs	r1, #128	@ 0x80
 8001342:	0049      	lsls	r1, r1, #1
 8001344:	430a      	orrs	r2, r1
 8001346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001348:	f7ff fb8c 	bl	8000a64 <HAL_GetTick>
 800134c:	0003      	movs	r3, r0
 800134e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fb87 	bl	8000a64 <HAL_GetTick>
 8001356:	0002      	movs	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e1fe      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001364:	4b4b      	ldr	r3, [pc, #300]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	2380      	movs	r3, #128	@ 0x80
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	4013      	ands	r3, r2
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b48      	ldr	r3, [pc, #288]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	4a4a      	ldr	r2, [pc, #296]	@ (80014a0 <HAL_RCC_OscConfig+0x338>)
 8001376:	4013      	ands	r3, r2
 8001378:	0019      	movs	r1, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	695b      	ldr	r3, [r3, #20]
 800137e:	021a      	lsls	r2, r3, #8
 8001380:	4b44      	ldr	r3, [pc, #272]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001382:	430a      	orrs	r2, r1
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	e01b      	b.n	80013c0 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001388:	4b42      	ldr	r3, [pc, #264]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	4b41      	ldr	r3, [pc, #260]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800138e:	4949      	ldr	r1, [pc, #292]	@ (80014b4 <HAL_RCC_OscConfig+0x34c>)
 8001390:	400a      	ands	r2, r1
 8001392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001394:	f7ff fb66 	bl	8000a64 <HAL_GetTick>
 8001398:	0003      	movs	r3, r0
 800139a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139e:	f7ff fb61 	bl	8000a64 <HAL_GetTick>
 80013a2:	0002      	movs	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e1d8      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013b0:	4b38      	ldr	r3, [pc, #224]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	2380      	movs	r3, #128	@ 0x80
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	4013      	ands	r3, r2
 80013ba:	d1f0      	bne.n	800139e <HAL_RCC_OscConfig+0x236>
 80013bc:	e000      	b.n	80013c0 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013be:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2208      	movs	r2, #8
 80013c6:	4013      	ands	r3, r2
 80013c8:	d047      	beq.n	800145a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80013ca:	4b32      	ldr	r3, [pc, #200]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2238      	movs	r2, #56	@ 0x38
 80013d0:	4013      	ands	r3, r2
 80013d2:	2b18      	cmp	r3, #24
 80013d4:	d10a      	bne.n	80013ec <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80013d6:	4b2f      	ldr	r3, [pc, #188]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013da:	2202      	movs	r2, #2
 80013dc:	4013      	ands	r3, r2
 80013de:	d03c      	beq.n	800145a <HAL_RCC_OscConfig+0x2f2>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d138      	bne.n	800145a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e1ba      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d019      	beq.n	8001428 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013f4:	4b27      	ldr	r3, [pc, #156]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013f6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013f8:	4b26      	ldr	r3, [pc, #152]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 80013fa:	2101      	movs	r1, #1
 80013fc:	430a      	orrs	r2, r1
 80013fe:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001400:	f7ff fb30 	bl	8000a64 <HAL_GetTick>
 8001404:	0003      	movs	r3, r0
 8001406:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fb2b 	bl	8000a64 <HAL_GetTick>
 800140e:	0002      	movs	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1a2      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800141c:	4b1d      	ldr	r3, [pc, #116]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800141e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001420:	2202      	movs	r2, #2
 8001422:	4013      	ands	r3, r2
 8001424:	d0f1      	beq.n	800140a <HAL_RCC_OscConfig+0x2a2>
 8001426:	e018      	b.n	800145a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001428:	4b1a      	ldr	r3, [pc, #104]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800142a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800142c:	4b19      	ldr	r3, [pc, #100]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800142e:	2101      	movs	r1, #1
 8001430:	438a      	bics	r2, r1
 8001432:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001434:	f7ff fb16 	bl	8000a64 <HAL_GetTick>
 8001438:	0003      	movs	r3, r0
 800143a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800143c:	e008      	b.n	8001450 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fb11 	bl	8000a64 <HAL_GetTick>
 8001442:	0002      	movs	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d901      	bls.n	8001450 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e188      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001450:	4b10      	ldr	r3, [pc, #64]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001452:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001454:	2202      	movs	r2, #2
 8001456:	4013      	ands	r3, r2
 8001458:	d1f1      	bne.n	800143e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2204      	movs	r2, #4
 8001460:	4013      	ands	r3, r2
 8001462:	d100      	bne.n	8001466 <HAL_RCC_OscConfig+0x2fe>
 8001464:	e0c6      	b.n	80015f4 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001466:	231f      	movs	r3, #31
 8001468:	18fb      	adds	r3, r7, r3
 800146a:	2200      	movs	r2, #0
 800146c:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800146e:	4b09      	ldr	r3, [pc, #36]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2238      	movs	r2, #56	@ 0x38
 8001474:	4013      	ands	r3, r2
 8001476:	2b20      	cmp	r3, #32
 8001478:	d11e      	bne.n	80014b8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <HAL_RCC_OscConfig+0x32c>)
 800147c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147e:	2202      	movs	r2, #2
 8001480:	4013      	ands	r3, r2
 8001482:	d100      	bne.n	8001486 <HAL_RCC_OscConfig+0x31e>
 8001484:	e0b6      	b.n	80015f4 <HAL_RCC_OscConfig+0x48c>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d000      	beq.n	8001490 <HAL_RCC_OscConfig+0x328>
 800148e:	e0b1      	b.n	80015f4 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e166      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
 8001494:	40021000 	.word	0x40021000
 8001498:	fffeffff 	.word	0xfffeffff
 800149c:	fffbffff 	.word	0xfffbffff
 80014a0:	ffff80ff 	.word	0xffff80ff
 80014a4:	ffffc7ff 	.word	0xffffc7ff
 80014a8:	00f42400 	.word	0x00f42400
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004
 80014b4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80014b8:	4bac      	ldr	r3, [pc, #688]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80014ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014bc:	2380      	movs	r3, #128	@ 0x80
 80014be:	055b      	lsls	r3, r3, #21
 80014c0:	4013      	ands	r3, r2
 80014c2:	d101      	bne.n	80014c8 <HAL_RCC_OscConfig+0x360>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x362>
 80014c8:	2300      	movs	r3, #0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d011      	beq.n	80014f2 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4ba7      	ldr	r3, [pc, #668]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80014d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014d2:	4ba6      	ldr	r3, [pc, #664]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80014d4:	2180      	movs	r1, #128	@ 0x80
 80014d6:	0549      	lsls	r1, r1, #21
 80014d8:	430a      	orrs	r2, r1
 80014da:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014dc:	4ba3      	ldr	r3, [pc, #652]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80014de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80014e0:	2380      	movs	r3, #128	@ 0x80
 80014e2:	055b      	lsls	r3, r3, #21
 80014e4:	4013      	ands	r3, r2
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80014ea:	231f      	movs	r3, #31
 80014ec:	18fb      	adds	r3, r7, r3
 80014ee:	2201      	movs	r2, #1
 80014f0:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f2:	4b9f      	ldr	r3, [pc, #636]	@ (8001770 <HAL_RCC_OscConfig+0x608>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2380      	movs	r3, #128	@ 0x80
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4013      	ands	r3, r2
 80014fc:	d11a      	bne.n	8001534 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014fe:	4b9c      	ldr	r3, [pc, #624]	@ (8001770 <HAL_RCC_OscConfig+0x608>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b9b      	ldr	r3, [pc, #620]	@ (8001770 <HAL_RCC_OscConfig+0x608>)
 8001504:	2180      	movs	r1, #128	@ 0x80
 8001506:	0049      	lsls	r1, r1, #1
 8001508:	430a      	orrs	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800150c:	f7ff faaa 	bl	8000a64 <HAL_GetTick>
 8001510:	0003      	movs	r3, r0
 8001512:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001514:	e008      	b.n	8001528 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001516:	f7ff faa5 	bl	8000a64 <HAL_GetTick>
 800151a:	0002      	movs	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d901      	bls.n	8001528 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e11c      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001528:	4b91      	ldr	r3, [pc, #580]	@ (8001770 <HAL_RCC_OscConfig+0x608>)
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	2380      	movs	r3, #128	@ 0x80
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4013      	ands	r3, r2
 8001532:	d0f0      	beq.n	8001516 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d106      	bne.n	800154a <HAL_RCC_OscConfig+0x3e2>
 800153c:	4b8b      	ldr	r3, [pc, #556]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800153e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001540:	4b8a      	ldr	r3, [pc, #552]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001542:	2101      	movs	r1, #1
 8001544:	430a      	orrs	r2, r1
 8001546:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0x41c>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0x404>
 8001552:	4b86      	ldr	r3, [pc, #536]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001554:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001556:	4b85      	ldr	r3, [pc, #532]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001558:	2104      	movs	r1, #4
 800155a:	430a      	orrs	r2, r1
 800155c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800155e:	4b83      	ldr	r3, [pc, #524]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001560:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001562:	4b82      	ldr	r3, [pc, #520]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001564:	2101      	movs	r1, #1
 8001566:	430a      	orrs	r2, r1
 8001568:	65da      	str	r2, [r3, #92]	@ 0x5c
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0x41c>
 800156c:	4b7f      	ldr	r3, [pc, #508]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800156e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001570:	4b7e      	ldr	r3, [pc, #504]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001572:	2101      	movs	r1, #1
 8001574:	438a      	bics	r2, r1
 8001576:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001578:	4b7c      	ldr	r3, [pc, #496]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800157a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800157c:	4b7b      	ldr	r3, [pc, #492]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800157e:	2104      	movs	r1, #4
 8001580:	438a      	bics	r2, r1
 8001582:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d014      	beq.n	80015b6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fa6a 	bl	8000a64 <HAL_GetTick>
 8001590:	0003      	movs	r3, r0
 8001592:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001594:	e009      	b.n	80015aa <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fa65 	bl	8000a64 <HAL_GetTick>
 800159a:	0002      	movs	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	4a74      	ldr	r2, [pc, #464]	@ (8001774 <HAL_RCC_OscConfig+0x60c>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e0db      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80015aa:	4b70      	ldr	r3, [pc, #448]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80015ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ae:	2202      	movs	r2, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d0f0      	beq.n	8001596 <HAL_RCC_OscConfig+0x42e>
 80015b4:	e013      	b.n	80015de <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b6:	f7ff fa55 	bl	8000a64 <HAL_GetTick>
 80015ba:	0003      	movs	r3, r0
 80015bc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015be:	e009      	b.n	80015d4 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fa50 	bl	8000a64 <HAL_GetTick>
 80015c4:	0002      	movs	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	4a6a      	ldr	r2, [pc, #424]	@ (8001774 <HAL_RCC_OscConfig+0x60c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e0c6      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015d4:	4b65      	ldr	r3, [pc, #404]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80015d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015d8:	2202      	movs	r2, #2
 80015da:	4013      	ands	r3, r2
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015de:	231f      	movs	r3, #31
 80015e0:	18fb      	adds	r3, r7, r3
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d105      	bne.n	80015f4 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80015e8:	4b60      	ldr	r3, [pc, #384]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80015ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80015ec:	4b5f      	ldr	r3, [pc, #380]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80015ee:	4962      	ldr	r1, [pc, #392]	@ (8001778 <HAL_RCC_OscConfig+0x610>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d100      	bne.n	80015fe <HAL_RCC_OscConfig+0x496>
 80015fc:	e0b0      	b.n	8001760 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fe:	4b5b      	ldr	r3, [pc, #364]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2238      	movs	r2, #56	@ 0x38
 8001604:	4013      	ands	r3, r2
 8001606:	2b10      	cmp	r3, #16
 8001608:	d100      	bne.n	800160c <HAL_RCC_OscConfig+0x4a4>
 800160a:	e078      	b.n	80016fe <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	69db      	ldr	r3, [r3, #28]
 8001610:	2b02      	cmp	r3, #2
 8001612:	d153      	bne.n	80016bc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001614:	4b55      	ldr	r3, [pc, #340]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b54      	ldr	r3, [pc, #336]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800161a:	4958      	ldr	r1, [pc, #352]	@ (800177c <HAL_RCC_OscConfig+0x614>)
 800161c:	400a      	ands	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fa20 	bl	8000a64 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800162a:	f7ff fa1b 	bl	8000a64 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e092      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800163c:	4b4b      	ldr	r3, [pc, #300]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2380      	movs	r3, #128	@ 0x80
 8001642:	049b      	lsls	r3, r3, #18
 8001644:	4013      	ands	r3, r2
 8001646:	d1f0      	bne.n	800162a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001648:	4b48      	ldr	r3, [pc, #288]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	4a4c      	ldr	r2, [pc, #304]	@ (8001780 <HAL_RCC_OscConfig+0x618>)
 800164e:	4013      	ands	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6a1a      	ldr	r2, [r3, #32]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	021b      	lsls	r3, r3, #8
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001668:	431a      	orrs	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166e:	431a      	orrs	r2, r3
 8001670:	4b3e      	ldr	r3, [pc, #248]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001672:	430a      	orrs	r2, r1
 8001674:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001676:	4b3d      	ldr	r3, [pc, #244]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b3c      	ldr	r3, [pc, #240]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800167c:	2180      	movs	r1, #128	@ 0x80
 800167e:	0449      	lsls	r1, r1, #17
 8001680:	430a      	orrs	r2, r1
 8001682:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001684:	4b39      	ldr	r3, [pc, #228]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	4b38      	ldr	r3, [pc, #224]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800168a:	2180      	movs	r1, #128	@ 0x80
 800168c:	0549      	lsls	r1, r1, #21
 800168e:	430a      	orrs	r2, r1
 8001690:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff f9e7 	bl	8000a64 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169c:	f7ff f9e2 	bl	8000a64 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e059      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ae:	4b2f      	ldr	r3, [pc, #188]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	@ 0x80
 80016b4:	049b      	lsls	r3, r3, #18
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x534>
 80016ba:	e051      	b.n	8001760 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016bc:	4b2b      	ldr	r3, [pc, #172]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4b2a      	ldr	r3, [pc, #168]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80016c2:	492e      	ldr	r1, [pc, #184]	@ (800177c <HAL_RCC_OscConfig+0x614>)
 80016c4:	400a      	ands	r2, r1
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c8:	f7ff f9cc 	bl	8000a64 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff f9c7 	bl	8000a64 <HAL_GetTick>
 80016d6:	0002      	movs	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e03e      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	049b      	lsls	r3, r3, #18
 80016ec:	4013      	ands	r3, r2
 80016ee:	d1f0      	bne.n	80016d2 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80016f2:	68da      	ldr	r2, [r3, #12]
 80016f4:	4b1d      	ldr	r3, [pc, #116]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 80016f6:	4923      	ldr	r1, [pc, #140]	@ (8001784 <HAL_RCC_OscConfig+0x61c>)
 80016f8:	400a      	ands	r2, r1
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	e030      	b.n	8001760 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	2b01      	cmp	r3, #1
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e02b      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800170a:	4b18      	ldr	r3, [pc, #96]	@ (800176c <HAL_RCC_OscConfig+0x604>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	2203      	movs	r2, #3
 8001714:	401a      	ands	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	429a      	cmp	r2, r3
 800171c:	d11e      	bne.n	800175c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2270      	movs	r2, #112	@ 0x70
 8001722:	401a      	ands	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001728:	429a      	cmp	r2, r3
 800172a:	d117      	bne.n	800175c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	23fe      	movs	r3, #254	@ 0xfe
 8001730:	01db      	lsls	r3, r3, #7
 8001732:	401a      	ands	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001738:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800173a:	429a      	cmp	r2, r3
 800173c:	d10e      	bne.n	800175c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800173e:	697a      	ldr	r2, [r7, #20]
 8001740:	23f8      	movs	r3, #248	@ 0xf8
 8001742:	039b      	lsls	r3, r3, #14
 8001744:	401a      	ands	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800174a:	429a      	cmp	r2, r3
 800174c:	d106      	bne.n	800175c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	0f5b      	lsrs	r3, r3, #29
 8001752:	075a      	lsls	r2, r3, #29
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e000      	b.n	8001762 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	0018      	movs	r0, r3
 8001764:	46bd      	mov	sp, r7
 8001766:	b008      	add	sp, #32
 8001768:	bd80      	pop	{r7, pc}
 800176a:	46c0      	nop			@ (mov r8, r8)
 800176c:	40021000 	.word	0x40021000
 8001770:	40007000 	.word	0x40007000
 8001774:	00001388 	.word	0x00001388
 8001778:	efffffff 	.word	0xefffffff
 800177c:	feffffff 	.word	0xfeffffff
 8001780:	1fc1808c 	.word	0x1fc1808c
 8001784:	effefffc 	.word	0xeffefffc

08001788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d101      	bne.n	800179c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e0e9      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800179c:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2207      	movs	r2, #7
 80017a2:	4013      	ands	r3, r2
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d91e      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2207      	movs	r2, #7
 80017b0:	4393      	bics	r3, r2
 80017b2:	0019      	movs	r1, r3
 80017b4:	4b70      	ldr	r3, [pc, #448]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	430a      	orrs	r2, r1
 80017ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80017bc:	f7ff f952 	bl	8000a64 <HAL_GetTick>
 80017c0:	0003      	movs	r3, r0
 80017c2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017c4:	e009      	b.n	80017da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017c6:	f7ff f94d 	bl	8000a64 <HAL_GetTick>
 80017ca:	0002      	movs	r2, r0
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	4a6a      	ldr	r2, [pc, #424]	@ (800197c <HAL_RCC_ClockConfig+0x1f4>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d901      	bls.n	80017da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80017d6:	2303      	movs	r3, #3
 80017d8:	e0ca      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017da:	4b67      	ldr	r3, [pc, #412]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2207      	movs	r2, #7
 80017e0:	4013      	ands	r3, r2
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	429a      	cmp	r2, r3
 80017e6:	d1ee      	bne.n	80017c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2202      	movs	r2, #2
 80017ee:	4013      	ands	r3, r2
 80017f0:	d015      	beq.n	800181e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2204      	movs	r2, #4
 80017f8:	4013      	ands	r3, r2
 80017fa:	d006      	beq.n	800180a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017fc:	4b60      	ldr	r3, [pc, #384]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	4b5f      	ldr	r3, [pc, #380]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001802:	21e0      	movs	r1, #224	@ 0xe0
 8001804:	01c9      	lsls	r1, r1, #7
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180a:	4b5d      	ldr	r3, [pc, #372]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	4a5d      	ldr	r2, [pc, #372]	@ (8001984 <HAL_RCC_ClockConfig+0x1fc>)
 8001810:	4013      	ands	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	4b59      	ldr	r3, [pc, #356]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800181a:	430a      	orrs	r2, r1
 800181c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2201      	movs	r2, #1
 8001824:	4013      	ands	r3, r2
 8001826:	d057      	beq.n	80018d8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001830:	4b53      	ldr	r3, [pc, #332]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	@ 0x80
 8001836:	029b      	lsls	r3, r3, #10
 8001838:	4013      	ands	r3, r2
 800183a:	d12b      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e097      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d107      	bne.n	8001858 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001848:	4b4d      	ldr	r3, [pc, #308]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	2380      	movs	r3, #128	@ 0x80
 800184e:	049b      	lsls	r3, r3, #18
 8001850:	4013      	ands	r3, r2
 8001852:	d11f      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e08b      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001860:	4b47      	ldr	r3, [pc, #284]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2380      	movs	r3, #128	@ 0x80
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4013      	ands	r3, r2
 800186a:	d113      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e07f      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d106      	bne.n	8001886 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001878:	4b41      	ldr	r3, [pc, #260]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800187a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d108      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e074      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001886:	4b3e      	ldr	r3, [pc, #248]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800188a:	2202      	movs	r2, #2
 800188c:	4013      	ands	r3, r2
 800188e:	d101      	bne.n	8001894 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e06d      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001894:	4b3a      	ldr	r3, [pc, #232]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2207      	movs	r2, #7
 800189a:	4393      	bics	r3, r2
 800189c:	0019      	movs	r1, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4b37      	ldr	r3, [pc, #220]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018a8:	f7ff f8dc 	bl	8000a64 <HAL_GetTick>
 80018ac:	0003      	movs	r3, r0
 80018ae:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b0:	e009      	b.n	80018c6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b2:	f7ff f8d7 	bl	8000a64 <HAL_GetTick>
 80018b6:	0002      	movs	r2, r0
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	4a2f      	ldr	r2, [pc, #188]	@ (800197c <HAL_RCC_ClockConfig+0x1f4>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e054      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2238      	movs	r2, #56	@ 0x38
 80018cc:	401a      	ands	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d1ec      	bne.n	80018b2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018d8:	4b27      	ldr	r3, [pc, #156]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2207      	movs	r2, #7
 80018de:	4013      	ands	r3, r2
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d21e      	bcs.n	8001924 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e6:	4b24      	ldr	r3, [pc, #144]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2207      	movs	r2, #7
 80018ec:	4393      	bics	r3, r2
 80018ee:	0019      	movs	r1, r3
 80018f0:	4b21      	ldr	r3, [pc, #132]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018f8:	f7ff f8b4 	bl	8000a64 <HAL_GetTick>
 80018fc:	0003      	movs	r3, r0
 80018fe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001900:	e009      	b.n	8001916 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001902:	f7ff f8af 	bl	8000a64 <HAL_GetTick>
 8001906:	0002      	movs	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	1ad3      	subs	r3, r2, r3
 800190c:	4a1b      	ldr	r2, [pc, #108]	@ (800197c <HAL_RCC_ClockConfig+0x1f4>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d901      	bls.n	8001916 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001912:	2303      	movs	r3, #3
 8001914:	e02c      	b.n	8001970 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001916:	4b18      	ldr	r3, [pc, #96]	@ (8001978 <HAL_RCC_ClockConfig+0x1f0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2207      	movs	r2, #7
 800191c:	4013      	ands	r3, r2
 800191e:	683a      	ldr	r2, [r7, #0]
 8001920:	429a      	cmp	r2, r3
 8001922:	d1ee      	bne.n	8001902 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2204      	movs	r2, #4
 800192a:	4013      	ands	r3, r2
 800192c:	d009      	beq.n	8001942 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800192e:	4b14      	ldr	r3, [pc, #80]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <HAL_RCC_ClockConfig+0x200>)
 8001934:	4013      	ands	r3, r2
 8001936:	0019      	movs	r1, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68da      	ldr	r2, [r3, #12]
 800193c:	4b10      	ldr	r3, [pc, #64]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800193e:	430a      	orrs	r2, r1
 8001940:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001942:	f000 f829 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 8001946:	0001      	movs	r1, r0
 8001948:	4b0d      	ldr	r3, [pc, #52]	@ (8001980 <HAL_RCC_ClockConfig+0x1f8>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	220f      	movs	r2, #15
 8001950:	401a      	ands	r2, r3
 8001952:	4b0e      	ldr	r3, [pc, #56]	@ (800198c <HAL_RCC_ClockConfig+0x204>)
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	58d3      	ldr	r3, [r2, r3]
 8001958:	221f      	movs	r2, #31
 800195a:	4013      	ands	r3, r2
 800195c:	000a      	movs	r2, r1
 800195e:	40da      	lsrs	r2, r3
 8001960:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_ClockConfig+0x208>)
 8001962:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001964:	4b0b      	ldr	r3, [pc, #44]	@ (8001994 <HAL_RCC_ClockConfig+0x20c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	0018      	movs	r0, r3
 800196a:	f7ff f81f 	bl	80009ac <HAL_InitTick>
 800196e:	0003      	movs	r3, r0
}
 8001970:	0018      	movs	r0, r3
 8001972:	46bd      	mov	sp, r7
 8001974:	b004      	add	sp, #16
 8001976:	bd80      	pop	{r7, pc}
 8001978:	40022000 	.word	0x40022000
 800197c:	00001388 	.word	0x00001388
 8001980:	40021000 	.word	0x40021000
 8001984:	fffff0ff 	.word	0xfffff0ff
 8001988:	ffff8fff 	.word	0xffff8fff
 800198c:	08004660 	.word	0x08004660
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004

08001998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800199e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2238      	movs	r2, #56	@ 0x38
 80019a4:	4013      	ands	r3, r2
 80019a6:	d10f      	bne.n	80019c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80019a8:	4b39      	ldr	r3, [pc, #228]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0adb      	lsrs	r3, r3, #11
 80019ae:	2207      	movs	r2, #7
 80019b0:	4013      	ands	r3, r2
 80019b2:	2201      	movs	r2, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	0013      	movs	r3, r2
 80019b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80019ba:	6839      	ldr	r1, [r7, #0]
 80019bc:	4835      	ldr	r0, [pc, #212]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019be:	f7fe fba7 	bl	8000110 <__udivsi3>
 80019c2:	0003      	movs	r3, r0
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	e05d      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019c8:	4b31      	ldr	r3, [pc, #196]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2238      	movs	r2, #56	@ 0x38
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d102      	bne.n	80019da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80019d4:	4b30      	ldr	r3, [pc, #192]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x100>)
 80019d6:	613b      	str	r3, [r7, #16]
 80019d8:	e054      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019da:	4b2d      	ldr	r3, [pc, #180]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2238      	movs	r2, #56	@ 0x38
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d138      	bne.n	8001a58 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80019e6:	4b2a      	ldr	r3, [pc, #168]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2203      	movs	r2, #3
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80019f0:	4b27      	ldr	r3, [pc, #156]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 80019f2:	68db      	ldr	r3, [r3, #12]
 80019f4:	091b      	lsrs	r3, r3, #4
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	3301      	adds	r3, #1
 80019fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b03      	cmp	r3, #3
 8001a02:	d10d      	bne.n	8001a20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	4824      	ldr	r0, [pc, #144]	@ (8001a98 <HAL_RCC_GetSysClockFreq+0x100>)
 8001a08:	f7fe fb82 	bl	8000110 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	0019      	movs	r1, r3
 8001a10:	4b1f      	ldr	r3, [pc, #124]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	0a1b      	lsrs	r3, r3, #8
 8001a16:	227f      	movs	r2, #127	@ 0x7f
 8001a18:	4013      	ands	r3, r2
 8001a1a:	434b      	muls	r3, r1
 8001a1c:	617b      	str	r3, [r7, #20]
        break;
 8001a1e:	e00d      	b.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001a20:	68b9      	ldr	r1, [r7, #8]
 8001a22:	481c      	ldr	r0, [pc, #112]	@ (8001a94 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001a24:	f7fe fb74 	bl	8000110 <__udivsi3>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	0019      	movs	r1, r3
 8001a2c:	4b18      	ldr	r3, [pc, #96]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	0a1b      	lsrs	r3, r3, #8
 8001a32:	227f      	movs	r2, #127	@ 0x7f
 8001a34:	4013      	ands	r3, r2
 8001a36:	434b      	muls	r3, r1
 8001a38:	617b      	str	r3, [r7, #20]
        break;
 8001a3a:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001a3c:	4b14      	ldr	r3, [pc, #80]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	0f5b      	lsrs	r3, r3, #29
 8001a42:	2207      	movs	r2, #7
 8001a44:	4013      	ands	r3, r2
 8001a46:	3301      	adds	r3, #1
 8001a48:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	6978      	ldr	r0, [r7, #20]
 8001a4e:	f7fe fb5f 	bl	8000110 <__udivsi3>
 8001a52:	0003      	movs	r3, r0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	e015      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a58:	4b0d      	ldr	r3, [pc, #52]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2238      	movs	r2, #56	@ 0x38
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d103      	bne.n	8001a6c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a64:	2380      	movs	r3, #128	@ 0x80
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	613b      	str	r3, [r7, #16]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a6c:	4b08      	ldr	r3, [pc, #32]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2238      	movs	r2, #56	@ 0x38
 8001a72:	4013      	ands	r3, r2
 8001a74:	2b18      	cmp	r3, #24
 8001a76:	d103      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a78:	23fa      	movs	r3, #250	@ 0xfa
 8001a7a:	01db      	lsls	r3, r3, #7
 8001a7c:	613b      	str	r3, [r7, #16]
 8001a7e:	e001      	b.n	8001a84 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a80:	2300      	movs	r3, #0
 8001a82:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a84:	693b      	ldr	r3, [r7, #16]
}
 8001a86:	0018      	movs	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	b006      	add	sp, #24
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			@ (mov r8, r8)
 8001a90:	40021000 	.word	0x40021000
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa0:	4b02      	ldr	r3, [pc, #8]	@ (8001aac <HAL_RCC_GetHCLKFreq+0x10>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	0018      	movs	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			@ (mov r8, r8)
 8001aac:	20000000 	.word	0x20000000

08001ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab0:	b5b0      	push	{r4, r5, r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001ab4:	f7ff fff2 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001ab8:	0004      	movs	r4, r0
 8001aba:	f7ff fb49 	bl	8001150 <LL_RCC_GetAPB1Prescaler>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	0b1a      	lsrs	r2, r3, #12
 8001ac2:	4b05      	ldr	r3, [pc, #20]	@ (8001ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ac4:	0092      	lsls	r2, r2, #2
 8001ac6:	58d3      	ldr	r3, [r2, r3]
 8001ac8:	221f      	movs	r2, #31
 8001aca:	4013      	ands	r3, r2
 8001acc:	40dc      	lsrs	r4, r3
 8001ace:	0023      	movs	r3, r4
}
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ad6:	46c0      	nop			@ (mov r8, r8)
 8001ad8:	080046a0 	.word	0x080046a0

08001adc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d101      	bne.n	8001aee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e046      	b.n	8001b7c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2288      	movs	r2, #136	@ 0x88
 8001af2:	589b      	ldr	r3, [r3, r2]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d107      	bne.n	8001b08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2284      	movs	r2, #132	@ 0x84
 8001afc:	2100      	movs	r1, #0
 8001afe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7fe fda6 	bl	8000654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2288      	movs	r2, #136	@ 0x88
 8001b0c:	2124      	movs	r1, #36	@ 0x24
 8001b0e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	438a      	bics	r2, r1
 8001b1e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d003      	beq.n	8001b30 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fe0a 	bl	8002744 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	0018      	movs	r0, r3
 8001b34:	f000 fc62 	bl	80023fc <UART_SetConfig>
 8001b38:	0003      	movs	r3, r0
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e01c      	b.n	8001b7c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685a      	ldr	r2, [r3, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	490d      	ldr	r1, [pc, #52]	@ (8001b84 <HAL_UART_Init+0xa8>)
 8001b4e:	400a      	ands	r2, r1
 8001b50:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689a      	ldr	r2, [r3, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	212a      	movs	r1, #42	@ 0x2a
 8001b5e:	438a      	bics	r2, r1
 8001b60:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f000 fe99 	bl	80028ac <UART_CheckIdleState>
 8001b7a:	0003      	movs	r3, r0
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b002      	add	sp, #8
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	ffffb7ff 	.word	0xffffb7ff

08001b88 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08c      	sub	sp, #48	@ 0x30
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	1dbb      	adds	r3, r7, #6
 8001b94:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2288      	movs	r2, #136	@ 0x88
 8001b9a:	589b      	ldr	r3, [r3, r2]
 8001b9c:	2b20      	cmp	r3, #32
 8001b9e:	d000      	beq.n	8001ba2 <HAL_UART_Transmit_IT+0x1a>
 8001ba0:	e08d      	b.n	8001cbe <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba2:	68bb      	ldr	r3, [r7, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_UART_Transmit_IT+0x28>
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e085      	b.n	8001cc0 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	015b      	lsls	r3, r3, #5
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d109      	bne.n	8001bd4 <HAL_UART_Transmit_IT+0x4c>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d001      	beq.n	8001bd4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e075      	b.n	8001cc0 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	68ba      	ldr	r2, [r7, #8]
 8001bd8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1dba      	adds	r2, r7, #6
 8001bde:	2154      	movs	r1, #84	@ 0x54
 8001be0:	8812      	ldrh	r2, [r2, #0]
 8001be2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	1dba      	adds	r2, r7, #6
 8001be8:	2156      	movs	r1, #86	@ 0x56
 8001bea:	8812      	ldrh	r2, [r2, #0]
 8001bec:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2290      	movs	r2, #144	@ 0x90
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2288      	movs	r2, #136	@ 0x88
 8001c00:	2121      	movs	r1, #33	@ 0x21
 8001c02:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001c08:	2380      	movs	r3, #128	@ 0x80
 8001c0a:	059b      	lsls	r3, r3, #22
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d12a      	bne.n	8001c66 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	2380      	movs	r3, #128	@ 0x80
 8001c16:	015b      	lsls	r3, r3, #5
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_UART_Transmit_IT+0xa4>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d103      	bne.n	8001c2c <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4a28      	ldr	r2, [pc, #160]	@ (8001cc8 <HAL_UART_Transmit_IT+0x140>)
 8001c28:	679a      	str	r2, [r3, #120]	@ 0x78
 8001c2a:	e002      	b.n	8001c32 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a27      	ldr	r2, [pc, #156]	@ (8001ccc <HAL_UART_Transmit_IT+0x144>)
 8001c30:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c32:	f3ef 8310 	mrs	r3, PRIMASK
 8001c36:	61fb      	str	r3, [r7, #28]
  return(result);
 8001c38:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8001c3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c40:	6a3b      	ldr	r3, [r7, #32]
 8001c42:	f383 8810 	msr	PRIMASK, r3
}
 8001c46:	46c0      	nop			@ (mov r8, r8)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	689a      	ldr	r2, [r3, #8]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2180      	movs	r1, #128	@ 0x80
 8001c54:	0409      	lsls	r1, r1, #16
 8001c56:	430a      	orrs	r2, r1
 8001c58:	609a      	str	r2, [r3, #8]
 8001c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c60:	f383 8810 	msr	PRIMASK, r3
}
 8001c64:	e029      	b.n	8001cba <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	015b      	lsls	r3, r3, #5
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d107      	bne.n	8001c82 <HAL_UART_Transmit_IT+0xfa>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d103      	bne.n	8001c82 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4a14      	ldr	r2, [pc, #80]	@ (8001cd0 <HAL_UART_Transmit_IT+0x148>)
 8001c7e:	679a      	str	r2, [r3, #120]	@ 0x78
 8001c80:	e002      	b.n	8001c88 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4a13      	ldr	r2, [pc, #76]	@ (8001cd4 <HAL_UART_Transmit_IT+0x14c>)
 8001c86:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c88:	f3ef 8310 	mrs	r3, PRIMASK
 8001c8c:	613b      	str	r3, [r7, #16]
  return(result);
 8001c8e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c92:	2301      	movs	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f383 8810 	msr	PRIMASK, r3
}
 8001c9c:	46c0      	nop			@ (mov r8, r8)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2180      	movs	r1, #128	@ 0x80
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cb0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	f383 8810 	msr	PRIMASK, r3
}
 8001cb8:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	e000      	b.n	8001cc0 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
  }
}
 8001cc0:	0018      	movs	r0, r3
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	b00c      	add	sp, #48	@ 0x30
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	08003081 	.word	0x08003081
 8001ccc:	08002f95 	.word	0x08002f95
 8001cd0:	08002ed7 	.word	0x08002ed7
 8001cd4:	08002e23 	.word	0x08002e23

08001cd8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	1dbb      	adds	r3, r7, #6
 8001ce4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	228c      	movs	r2, #140	@ 0x8c
 8001cea:	589b      	ldr	r3, [r3, r2]
 8001cec:	2b20      	cmp	r3, #32
 8001cee:	d145      	bne.n	8001d7c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_UART_Receive_IT+0x26>
 8001cf6:	1dbb      	adds	r3, r7, #6
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e03d      	b.n	8001d7e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	2380      	movs	r3, #128	@ 0x80
 8001d08:	015b      	lsls	r3, r3, #5
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d109      	bne.n	8001d22 <HAL_UART_Receive_IT+0x4a>
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d105      	bne.n	8001d22 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d001      	beq.n	8001d22 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e02d      	b.n	8001d7e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	2200      	movs	r2, #0
 8001d26:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	2380      	movs	r3, #128	@ 0x80
 8001d30:	041b      	lsls	r3, r3, #16
 8001d32:	4013      	ands	r3, r2
 8001d34:	d019      	beq.n	8001d6a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001d36:	f3ef 8310 	mrs	r3, PRIMASK
 8001d3a:	613b      	str	r3, [r7, #16]
  return(result);
 8001d3c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001d3e:	61fb      	str	r3, [r7, #28]
 8001d40:	2301      	movs	r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f383 8810 	msr	PRIMASK, r3
}
 8001d4a:	46c0      	nop			@ (mov r8, r8)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	2180      	movs	r1, #128	@ 0x80
 8001d58:	04c9      	lsls	r1, r1, #19
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f383 8810 	msr	PRIMASK, r3
}
 8001d68:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001d6a:	1dbb      	adds	r3, r7, #6
 8001d6c:	881a      	ldrh	r2, [r3, #0]
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	0018      	movs	r0, r3
 8001d74:	f000 feb4 	bl	8002ae0 <UART_Start_Receive_IT>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	e000      	b.n	8001d7e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001d7c:	2302      	movs	r3, #2
  }
}
 8001d7e:	0018      	movs	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	b008      	add	sp, #32
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d88:	b5b0      	push	{r4, r5, r7, lr}
 8001d8a:	b0aa      	sub	sp, #168	@ 0xa8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	22a4      	movs	r2, #164	@ 0xa4
 8001d98:	18b9      	adds	r1, r7, r2
 8001d9a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	20a0      	movs	r0, #160	@ 0xa0
 8001da4:	1839      	adds	r1, r7, r0
 8001da6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	249c      	movs	r4, #156	@ 0x9c
 8001db0:	1939      	adds	r1, r7, r4
 8001db2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001db4:	0011      	movs	r1, r2
 8001db6:	18bb      	adds	r3, r7, r2
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4aa2      	ldr	r2, [pc, #648]	@ (8002044 <HAL_UART_IRQHandler+0x2bc>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2298      	movs	r2, #152	@ 0x98
 8001dc0:	18bd      	adds	r5, r7, r2
 8001dc2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001dc4:	18bb      	adds	r3, r7, r2
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d11a      	bne.n	8001e02 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001dcc:	187b      	adds	r3, r7, r1
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2220      	movs	r2, #32
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d015      	beq.n	8001e02 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001dd6:	183b      	adds	r3, r7, r0
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d105      	bne.n	8001dec <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001de0:	193b      	adds	r3, r7, r4
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	055b      	lsls	r3, r3, #21
 8001de8:	4013      	ands	r3, r2
 8001dea:	d00a      	beq.n	8001e02 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d100      	bne.n	8001df6 <HAL_UART_IRQHandler+0x6e>
 8001df4:	e2dc      	b.n	80023b0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	0010      	movs	r0, r2
 8001dfe:	4798      	blx	r3
      }
      return;
 8001e00:	e2d6      	b.n	80023b0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001e02:	2398      	movs	r3, #152	@ 0x98
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d100      	bne.n	8001e0e <HAL_UART_IRQHandler+0x86>
 8001e0c:	e122      	b.n	8002054 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001e0e:	239c      	movs	r3, #156	@ 0x9c
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a8c      	ldr	r2, [pc, #560]	@ (8002048 <HAL_UART_IRQHandler+0x2c0>)
 8001e16:	4013      	ands	r3, r2
 8001e18:	d106      	bne.n	8001e28 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001e1a:	23a0      	movs	r3, #160	@ 0xa0
 8001e1c:	18fb      	adds	r3, r7, r3
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8a      	ldr	r2, [pc, #552]	@ (800204c <HAL_UART_IRQHandler+0x2c4>)
 8001e22:	4013      	ands	r3, r2
 8001e24:	d100      	bne.n	8001e28 <HAL_UART_IRQHandler+0xa0>
 8001e26:	e115      	b.n	8002054 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001e28:	23a4      	movs	r3, #164	@ 0xa4
 8001e2a:	18fb      	adds	r3, r7, r3
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	4013      	ands	r3, r2
 8001e32:	d012      	beq.n	8001e5a <HAL_UART_IRQHandler+0xd2>
 8001e34:	23a0      	movs	r3, #160	@ 0xa0
 8001e36:	18fb      	adds	r3, r7, r3
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	2380      	movs	r3, #128	@ 0x80
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d00b      	beq.n	8001e5a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2201      	movs	r2, #1
 8001e48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2290      	movs	r2, #144	@ 0x90
 8001e4e:	589b      	ldr	r3, [r3, r2]
 8001e50:	2201      	movs	r2, #1
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2190      	movs	r1, #144	@ 0x90
 8001e58:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e5a:	23a4      	movs	r3, #164	@ 0xa4
 8001e5c:	18fb      	adds	r3, r7, r3
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2202      	movs	r2, #2
 8001e62:	4013      	ands	r3, r2
 8001e64:	d011      	beq.n	8001e8a <HAL_UART_IRQHandler+0x102>
 8001e66:	239c      	movs	r3, #156	@ 0x9c
 8001e68:	18fb      	adds	r3, r7, r3
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	4013      	ands	r3, r2
 8001e70:	d00b      	beq.n	8001e8a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2202      	movs	r2, #2
 8001e78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2290      	movs	r2, #144	@ 0x90
 8001e7e:	589b      	ldr	r3, [r3, r2]
 8001e80:	2204      	movs	r2, #4
 8001e82:	431a      	orrs	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2190      	movs	r1, #144	@ 0x90
 8001e88:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001e8a:	23a4      	movs	r3, #164	@ 0xa4
 8001e8c:	18fb      	adds	r3, r7, r3
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2204      	movs	r2, #4
 8001e92:	4013      	ands	r3, r2
 8001e94:	d011      	beq.n	8001eba <HAL_UART_IRQHandler+0x132>
 8001e96:	239c      	movs	r3, #156	@ 0x9c
 8001e98:	18fb      	adds	r3, r7, r3
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d00b      	beq.n	8001eba <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2204      	movs	r2, #4
 8001ea8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2290      	movs	r2, #144	@ 0x90
 8001eae:	589b      	ldr	r3, [r3, r2]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2190      	movs	r1, #144	@ 0x90
 8001eb8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001eba:	23a4      	movs	r3, #164	@ 0xa4
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2208      	movs	r2, #8
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d017      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001ec6:	23a0      	movs	r3, #160	@ 0xa0
 8001ec8:	18fb      	adds	r3, r7, r3
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2220      	movs	r2, #32
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d105      	bne.n	8001ede <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001ed2:	239c      	movs	r3, #156	@ 0x9c
 8001ed4:	18fb      	adds	r3, r7, r3
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a5b      	ldr	r2, [pc, #364]	@ (8002048 <HAL_UART_IRQHandler+0x2c0>)
 8001eda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001edc:	d00b      	beq.n	8001ef6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2208      	movs	r2, #8
 8001ee4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2290      	movs	r2, #144	@ 0x90
 8001eea:	589b      	ldr	r3, [r3, r2]
 8001eec:	2208      	movs	r2, #8
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2190      	movs	r1, #144	@ 0x90
 8001ef4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001ef6:	23a4      	movs	r3, #164	@ 0xa4
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	2380      	movs	r3, #128	@ 0x80
 8001efe:	011b      	lsls	r3, r3, #4
 8001f00:	4013      	ands	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_UART_IRQHandler+0x1a4>
 8001f04:	23a0      	movs	r3, #160	@ 0xa0
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	04db      	lsls	r3, r3, #19
 8001f0e:	4013      	ands	r3, r2
 8001f10:	d00c      	beq.n	8001f2c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2280      	movs	r2, #128	@ 0x80
 8001f18:	0112      	lsls	r2, r2, #4
 8001f1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2290      	movs	r2, #144	@ 0x90
 8001f20:	589b      	ldr	r3, [r3, r2]
 8001f22:	2220      	movs	r2, #32
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2190      	movs	r1, #144	@ 0x90
 8001f2a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2290      	movs	r2, #144	@ 0x90
 8001f30:	589b      	ldr	r3, [r3, r2]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d100      	bne.n	8001f38 <HAL_UART_IRQHandler+0x1b0>
 8001f36:	e23d      	b.n	80023b4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001f38:	23a4      	movs	r3, #164	@ 0xa4
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	4013      	ands	r3, r2
 8001f42:	d015      	beq.n	8001f70 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001f44:	23a0      	movs	r3, #160	@ 0xa0
 8001f46:	18fb      	adds	r3, r7, r3
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d106      	bne.n	8001f5e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001f50:	239c      	movs	r3, #156	@ 0x9c
 8001f52:	18fb      	adds	r3, r7, r3
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	2380      	movs	r3, #128	@ 0x80
 8001f58:	055b      	lsls	r3, r3, #21
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d008      	beq.n	8001f70 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d004      	beq.n	8001f70 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	0010      	movs	r0, r2
 8001f6e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2290      	movs	r2, #144	@ 0x90
 8001f74:	589b      	ldr	r3, [r3, r2]
 8001f76:	2194      	movs	r1, #148	@ 0x94
 8001f78:	187a      	adds	r2, r7, r1
 8001f7a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	2240      	movs	r2, #64	@ 0x40
 8001f84:	4013      	ands	r3, r2
 8001f86:	2b40      	cmp	r3, #64	@ 0x40
 8001f88:	d004      	beq.n	8001f94 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2228      	movs	r2, #40	@ 0x28
 8001f90:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001f92:	d04c      	beq.n	800202e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 fec6 	bl	8002d28 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2240      	movs	r2, #64	@ 0x40
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b40      	cmp	r3, #64	@ 0x40
 8001fa8:	d13c      	bne.n	8002024 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001faa:	f3ef 8310 	mrs	r3, PRIMASK
 8001fae:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001fb0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fb2:	2090      	movs	r0, #144	@ 0x90
 8001fb4:	183a      	adds	r2, r7, r0
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	2301      	movs	r3, #1
 8001fba:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001fbe:	f383 8810 	msr	PRIMASK, r3
}
 8001fc2:	46c0      	nop			@ (mov r8, r8)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	2140      	movs	r1, #64	@ 0x40
 8001fd0:	438a      	bics	r2, r1
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	183b      	adds	r3, r7, r0
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fda:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001fdc:	f383 8810 	msr	PRIMASK, r3
}
 8001fe0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2280      	movs	r2, #128	@ 0x80
 8001fe6:	589b      	ldr	r3, [r3, r2]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d016      	beq.n	800201a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2280      	movs	r2, #128	@ 0x80
 8001ff0:	589b      	ldr	r3, [r3, r2]
 8001ff2:	4a17      	ldr	r2, [pc, #92]	@ (8002050 <HAL_UART_IRQHandler+0x2c8>)
 8001ff4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2280      	movs	r2, #128	@ 0x80
 8001ffa:	589b      	ldr	r3, [r3, r2]
 8001ffc:	0018      	movs	r0, r3
 8001ffe:	f7fe fe7b 	bl	8000cf8 <HAL_DMA_Abort_IT>
 8002002:	1e03      	subs	r3, r0, #0
 8002004:	d01c      	beq.n	8002040 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2280      	movs	r2, #128	@ 0x80
 800200a:	589b      	ldr	r3, [r3, r2]
 800200c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	2180      	movs	r1, #128	@ 0x80
 8002012:	5852      	ldr	r2, [r2, r1]
 8002014:	0010      	movs	r0, r2
 8002016:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002018:	e012      	b.n	8002040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 f9d9 	bl	80023d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002022:	e00d      	b.n	8002040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0018      	movs	r0, r3
 8002028:	f000 f9d4 	bl	80023d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800202c:	e008      	b.n	8002040 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	0018      	movs	r0, r3
 8002032:	f000 f9cf 	bl	80023d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2290      	movs	r2, #144	@ 0x90
 800203a:	2100      	movs	r1, #0
 800203c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800203e:	e1b9      	b.n	80023b4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002040:	46c0      	nop			@ (mov r8, r8)
    return;
 8002042:	e1b7      	b.n	80023b4 <HAL_UART_IRQHandler+0x62c>
 8002044:	0000080f 	.word	0x0000080f
 8002048:	10000001 	.word	0x10000001
 800204c:	04000120 	.word	0x04000120
 8002050:	08002df5 	.word	0x08002df5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002058:	2b01      	cmp	r3, #1
 800205a:	d000      	beq.n	800205e <HAL_UART_IRQHandler+0x2d6>
 800205c:	e13e      	b.n	80022dc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800205e:	23a4      	movs	r3, #164	@ 0xa4
 8002060:	18fb      	adds	r3, r7, r3
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2210      	movs	r2, #16
 8002066:	4013      	ands	r3, r2
 8002068:	d100      	bne.n	800206c <HAL_UART_IRQHandler+0x2e4>
 800206a:	e137      	b.n	80022dc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800206c:	23a0      	movs	r3, #160	@ 0xa0
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2210      	movs	r2, #16
 8002074:	4013      	ands	r3, r2
 8002076:	d100      	bne.n	800207a <HAL_UART_IRQHandler+0x2f2>
 8002078:	e130      	b.n	80022dc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2210      	movs	r2, #16
 8002080:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	2240      	movs	r2, #64	@ 0x40
 800208a:	4013      	ands	r3, r2
 800208c:	2b40      	cmp	r3, #64	@ 0x40
 800208e:	d000      	beq.n	8002092 <HAL_UART_IRQHandler+0x30a>
 8002090:	e0a4      	b.n	80021dc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2280      	movs	r2, #128	@ 0x80
 8002096:	589b      	ldr	r3, [r3, r2]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	217e      	movs	r1, #126	@ 0x7e
 800209e:	187b      	adds	r3, r7, r1
 80020a0:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80020a2:	187b      	adds	r3, r7, r1
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d100      	bne.n	80020ac <HAL_UART_IRQHandler+0x324>
 80020aa:	e185      	b.n	80023b8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	225c      	movs	r2, #92	@ 0x5c
 80020b0:	5a9b      	ldrh	r3, [r3, r2]
 80020b2:	187a      	adds	r2, r7, r1
 80020b4:	8812      	ldrh	r2, [r2, #0]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d300      	bcc.n	80020bc <HAL_UART_IRQHandler+0x334>
 80020ba:	e17d      	b.n	80023b8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	187a      	adds	r2, r7, r1
 80020c0:	215e      	movs	r1, #94	@ 0x5e
 80020c2:	8812      	ldrh	r2, [r2, #0]
 80020c4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2280      	movs	r2, #128	@ 0x80
 80020ca:	589b      	ldr	r3, [r3, r2]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2220      	movs	r2, #32
 80020d2:	4013      	ands	r3, r2
 80020d4:	d170      	bne.n	80021b8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020d6:	f3ef 8310 	mrs	r3, PRIMASK
 80020da:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80020dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80020de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020e0:	2301      	movs	r3, #1
 80020e2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020e6:	f383 8810 	msr	PRIMASK, r3
}
 80020ea:	46c0      	nop			@ (mov r8, r8)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	49b4      	ldr	r1, [pc, #720]	@ (80023c8 <HAL_UART_IRQHandler+0x640>)
 80020f8:	400a      	ands	r2, r1
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80020fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002102:	f383 8810 	msr	PRIMASK, r3
}
 8002106:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002108:	f3ef 8310 	mrs	r3, PRIMASK
 800210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800210e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002110:	677b      	str	r3, [r7, #116]	@ 0x74
 8002112:	2301      	movs	r3, #1
 8002114:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002116:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002118:	f383 8810 	msr	PRIMASK, r3
}
 800211c:	46c0      	nop			@ (mov r8, r8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	438a      	bics	r2, r1
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002130:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002132:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002134:	f383 8810 	msr	PRIMASK, r3
}
 8002138:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800213a:	f3ef 8310 	mrs	r3, PRIMASK
 800213e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002140:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002142:	673b      	str	r3, [r7, #112]	@ 0x70
 8002144:	2301      	movs	r3, #1
 8002146:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800214a:	f383 8810 	msr	PRIMASK, r3
}
 800214e:	46c0      	nop			@ (mov r8, r8)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2140      	movs	r1, #64	@ 0x40
 800215c:	438a      	bics	r2, r1
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002162:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002164:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002166:	f383 8810 	msr	PRIMASK, r3
}
 800216a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	228c      	movs	r2, #140	@ 0x8c
 8002170:	2120      	movs	r1, #32
 8002172:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800217a:	f3ef 8310 	mrs	r3, PRIMASK
 800217e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002180:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002182:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002184:	2301      	movs	r3, #1
 8002186:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002188:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800218a:	f383 8810 	msr	PRIMASK, r3
}
 800218e:	46c0      	nop			@ (mov r8, r8)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2110      	movs	r1, #16
 800219c:	438a      	bics	r2, r1
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80021a2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021a6:	f383 8810 	msr	PRIMASK, r3
}
 80021aa:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2280      	movs	r2, #128	@ 0x80
 80021b0:	589b      	ldr	r3, [r3, r2]
 80021b2:	0018      	movs	r0, r3
 80021b4:	f7fe fd3e 	bl	8000c34 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	225c      	movs	r2, #92	@ 0x5c
 80021c2:	5a9a      	ldrh	r2, [r3, r2]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	215e      	movs	r1, #94	@ 0x5e
 80021c8:	5a5b      	ldrh	r3, [r3, r1]
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	0011      	movs	r1, r2
 80021d4:	0018      	movs	r0, r3
 80021d6:	f000 f905 	bl	80023e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80021da:	e0ed      	b.n	80023b8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	225c      	movs	r2, #92	@ 0x5c
 80021e0:	5a99      	ldrh	r1, [r3, r2]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	225e      	movs	r2, #94	@ 0x5e
 80021e6:	5a9b      	ldrh	r3, [r3, r2]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	208e      	movs	r0, #142	@ 0x8e
 80021ec:	183b      	adds	r3, r7, r0
 80021ee:	1a8a      	subs	r2, r1, r2
 80021f0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	225e      	movs	r2, #94	@ 0x5e
 80021f6:	5a9b      	ldrh	r3, [r3, r2]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d100      	bne.n	8002200 <HAL_UART_IRQHandler+0x478>
 80021fe:	e0dd      	b.n	80023bc <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002200:	183b      	adds	r3, r7, r0
 8002202:	881b      	ldrh	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d100      	bne.n	800220a <HAL_UART_IRQHandler+0x482>
 8002208:	e0d8      	b.n	80023bc <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800220a:	f3ef 8310 	mrs	r3, PRIMASK
 800220e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002210:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002212:	2488      	movs	r4, #136	@ 0x88
 8002214:	193a      	adds	r2, r7, r4
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	2301      	movs	r3, #1
 800221a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	f383 8810 	msr	PRIMASK, r3
}
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4967      	ldr	r1, [pc, #412]	@ (80023cc <HAL_UART_IRQHandler+0x644>)
 8002230:	400a      	ands	r2, r1
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	193b      	adds	r3, r7, r4
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	f383 8810 	msr	PRIMASK, r3
}
 8002240:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002242:	f3ef 8310 	mrs	r3, PRIMASK
 8002246:	61bb      	str	r3, [r7, #24]
  return(result);
 8002248:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800224a:	2484      	movs	r4, #132	@ 0x84
 800224c:	193a      	adds	r2, r7, r4
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	2301      	movs	r3, #1
 8002252:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f383 8810 	msr	PRIMASK, r3
}
 800225a:	46c0      	nop			@ (mov r8, r8)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	689a      	ldr	r2, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	495a      	ldr	r1, [pc, #360]	@ (80023d0 <HAL_UART_IRQHandler+0x648>)
 8002268:	400a      	ands	r2, r1
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	193b      	adds	r3, r7, r4
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	f383 8810 	msr	PRIMASK, r3
}
 8002278:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	228c      	movs	r2, #140	@ 0x8c
 800227e:	2120      	movs	r1, #32
 8002280:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2200      	movs	r2, #0
 8002286:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800228e:	f3ef 8310 	mrs	r3, PRIMASK
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002296:	2480      	movs	r4, #128	@ 0x80
 8002298:	193a      	adds	r2, r7, r4
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	2301      	movs	r3, #1
 800229e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a2:	f383 8810 	msr	PRIMASK, r3
}
 80022a6:	46c0      	nop			@ (mov r8, r8)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2110      	movs	r1, #16
 80022b4:	438a      	bics	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	193b      	adds	r3, r7, r4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022c0:	f383 8810 	msr	PRIMASK, r3
}
 80022c4:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2202      	movs	r2, #2
 80022ca:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80022cc:	183b      	adds	r3, r7, r0
 80022ce:	881a      	ldrh	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	0011      	movs	r1, r2
 80022d4:	0018      	movs	r0, r3
 80022d6:	f000 f885 	bl	80023e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80022da:	e06f      	b.n	80023bc <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80022dc:	23a4      	movs	r3, #164	@ 0xa4
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	2380      	movs	r3, #128	@ 0x80
 80022e4:	035b      	lsls	r3, r3, #13
 80022e6:	4013      	ands	r3, r2
 80022e8:	d010      	beq.n	800230c <HAL_UART_IRQHandler+0x584>
 80022ea:	239c      	movs	r3, #156	@ 0x9c
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	2380      	movs	r3, #128	@ 0x80
 80022f2:	03db      	lsls	r3, r3, #15
 80022f4:	4013      	ands	r3, r2
 80022f6:	d009      	beq.n	800230c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2280      	movs	r2, #128	@ 0x80
 80022fe:	0352      	lsls	r2, r2, #13
 8002300:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	0018      	movs	r0, r3
 8002306:	f001 fc55 	bl	8003bb4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800230a:	e05a      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800230c:	23a4      	movs	r3, #164	@ 0xa4
 800230e:	18fb      	adds	r3, r7, r3
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2280      	movs	r2, #128	@ 0x80
 8002314:	4013      	ands	r3, r2
 8002316:	d016      	beq.n	8002346 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002318:	23a0      	movs	r3, #160	@ 0xa0
 800231a:	18fb      	adds	r3, r7, r3
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2280      	movs	r2, #128	@ 0x80
 8002320:	4013      	ands	r3, r2
 8002322:	d106      	bne.n	8002332 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002324:	239c      	movs	r3, #156	@ 0x9c
 8002326:	18fb      	adds	r3, r7, r3
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	041b      	lsls	r3, r3, #16
 800232e:	4013      	ands	r3, r2
 8002330:	d009      	beq.n	8002346 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002336:	2b00      	cmp	r3, #0
 8002338:	d042      	beq.n	80023c0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	0010      	movs	r0, r2
 8002342:	4798      	blx	r3
    }
    return;
 8002344:	e03c      	b.n	80023c0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002346:	23a4      	movs	r3, #164	@ 0xa4
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2240      	movs	r2, #64	@ 0x40
 800234e:	4013      	ands	r3, r2
 8002350:	d00a      	beq.n	8002368 <HAL_UART_IRQHandler+0x5e0>
 8002352:	23a0      	movs	r3, #160	@ 0xa0
 8002354:	18fb      	adds	r3, r7, r3
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2240      	movs	r2, #64	@ 0x40
 800235a:	4013      	ands	r3, r2
 800235c:	d004      	beq.n	8002368 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 ff07 	bl	8003174 <UART_EndTransmit_IT>
    return;
 8002366:	e02c      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002368:	23a4      	movs	r3, #164	@ 0xa4
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	2380      	movs	r3, #128	@ 0x80
 8002370:	041b      	lsls	r3, r3, #16
 8002372:	4013      	ands	r3, r2
 8002374:	d00b      	beq.n	800238e <HAL_UART_IRQHandler+0x606>
 8002376:	23a0      	movs	r3, #160	@ 0xa0
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	05db      	lsls	r3, r3, #23
 8002380:	4013      	ands	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f001 fc24 	bl	8003bd4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800238c:	e019      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800238e:	23a4      	movs	r3, #164	@ 0xa4
 8002390:	18fb      	adds	r3, r7, r3
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	2380      	movs	r3, #128	@ 0x80
 8002396:	045b      	lsls	r3, r3, #17
 8002398:	4013      	ands	r3, r2
 800239a:	d012      	beq.n	80023c2 <HAL_UART_IRQHandler+0x63a>
 800239c:	23a0      	movs	r3, #160	@ 0xa0
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	da0d      	bge.n	80023c2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f001 fc0b 	bl	8003bc4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023ae:	e008      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
      return;
 80023b0:	46c0      	nop			@ (mov r8, r8)
 80023b2:	e006      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
    return;
 80023b4:	46c0      	nop			@ (mov r8, r8)
 80023b6:	e004      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
      return;
 80023b8:	46c0      	nop			@ (mov r8, r8)
 80023ba:	e002      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
      return;
 80023bc:	46c0      	nop			@ (mov r8, r8)
 80023be:	e000      	b.n	80023c2 <HAL_UART_IRQHandler+0x63a>
    return;
 80023c0:	46c0      	nop			@ (mov r8, r8)
  }
}
 80023c2:	46bd      	mov	sp, r7
 80023c4:	b02a      	add	sp, #168	@ 0xa8
 80023c6:	bdb0      	pop	{r4, r5, r7, pc}
 80023c8:	fffffeff 	.word	0xfffffeff
 80023cc:	fffffedf 	.word	0xfffffedf
 80023d0:	effffffe 	.word	0xeffffffe

080023d4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80023dc:	46c0      	nop			@ (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b002      	add	sp, #8
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	000a      	movs	r2, r1
 80023ee:	1cbb      	adds	r3, r7, #2
 80023f0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023f2:	46c0      	nop			@ (mov r8, r8)
 80023f4:	46bd      	mov	sp, r7
 80023f6:	b002      	add	sp, #8
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002404:	231a      	movs	r3, #26
 8002406:	18fb      	adds	r3, r7, r3
 8002408:	2200      	movs	r2, #0
 800240a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	691b      	ldr	r3, [r3, #16]
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	69db      	ldr	r3, [r3, #28]
 8002420:	4313      	orrs	r3, r2
 8002422:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4abc      	ldr	r2, [pc, #752]	@ (800271c <UART_SetConfig+0x320>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	69fa      	ldr	r2, [r7, #28]
 8002436:	430a      	orrs	r2, r1
 8002438:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4ab7      	ldr	r2, [pc, #732]	@ (8002720 <UART_SetConfig+0x324>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	4313      	orrs	r3, r2
 8002460:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	4aae      	ldr	r2, [pc, #696]	@ (8002724 <UART_SetConfig+0x328>)
 800246a:	4013      	ands	r3, r2
 800246c:	0019      	movs	r1, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	69fa      	ldr	r2, [r7, #28]
 8002474:	430a      	orrs	r2, r1
 8002476:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	220f      	movs	r2, #15
 8002480:	4393      	bics	r3, r2
 8002482:	0019      	movs	r1, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	430a      	orrs	r2, r1
 800248e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4aa4      	ldr	r2, [pc, #656]	@ (8002728 <UART_SetConfig+0x32c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d127      	bne.n	80024ea <UART_SetConfig+0xee>
 800249a:	4ba4      	ldr	r3, [pc, #656]	@ (800272c <UART_SetConfig+0x330>)
 800249c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800249e:	2203      	movs	r2, #3
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b03      	cmp	r3, #3
 80024a4:	d017      	beq.n	80024d6 <UART_SetConfig+0xda>
 80024a6:	d81b      	bhi.n	80024e0 <UART_SetConfig+0xe4>
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d00a      	beq.n	80024c2 <UART_SetConfig+0xc6>
 80024ac:	d818      	bhi.n	80024e0 <UART_SetConfig+0xe4>
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <UART_SetConfig+0xbc>
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d00a      	beq.n	80024cc <UART_SetConfig+0xd0>
 80024b6:	e013      	b.n	80024e0 <UART_SetConfig+0xe4>
 80024b8:	231b      	movs	r3, #27
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	2200      	movs	r2, #0
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e058      	b.n	8002574 <UART_SetConfig+0x178>
 80024c2:	231b      	movs	r3, #27
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	2202      	movs	r2, #2
 80024c8:	701a      	strb	r2, [r3, #0]
 80024ca:	e053      	b.n	8002574 <UART_SetConfig+0x178>
 80024cc:	231b      	movs	r3, #27
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	2204      	movs	r2, #4
 80024d2:	701a      	strb	r2, [r3, #0]
 80024d4:	e04e      	b.n	8002574 <UART_SetConfig+0x178>
 80024d6:	231b      	movs	r3, #27
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2208      	movs	r2, #8
 80024dc:	701a      	strb	r2, [r3, #0]
 80024de:	e049      	b.n	8002574 <UART_SetConfig+0x178>
 80024e0:	231b      	movs	r3, #27
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2210      	movs	r2, #16
 80024e6:	701a      	strb	r2, [r3, #0]
 80024e8:	e044      	b.n	8002574 <UART_SetConfig+0x178>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a90      	ldr	r2, [pc, #576]	@ (8002730 <UART_SetConfig+0x334>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d127      	bne.n	8002544 <UART_SetConfig+0x148>
 80024f4:	4b8d      	ldr	r3, [pc, #564]	@ (800272c <UART_SetConfig+0x330>)
 80024f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024f8:	220c      	movs	r2, #12
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b0c      	cmp	r3, #12
 80024fe:	d017      	beq.n	8002530 <UART_SetConfig+0x134>
 8002500:	d81b      	bhi.n	800253a <UART_SetConfig+0x13e>
 8002502:	2b08      	cmp	r3, #8
 8002504:	d00a      	beq.n	800251c <UART_SetConfig+0x120>
 8002506:	d818      	bhi.n	800253a <UART_SetConfig+0x13e>
 8002508:	2b00      	cmp	r3, #0
 800250a:	d002      	beq.n	8002512 <UART_SetConfig+0x116>
 800250c:	2b04      	cmp	r3, #4
 800250e:	d00a      	beq.n	8002526 <UART_SetConfig+0x12a>
 8002510:	e013      	b.n	800253a <UART_SetConfig+0x13e>
 8002512:	231b      	movs	r3, #27
 8002514:	18fb      	adds	r3, r7, r3
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
 800251a:	e02b      	b.n	8002574 <UART_SetConfig+0x178>
 800251c:	231b      	movs	r3, #27
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2202      	movs	r2, #2
 8002522:	701a      	strb	r2, [r3, #0]
 8002524:	e026      	b.n	8002574 <UART_SetConfig+0x178>
 8002526:	231b      	movs	r3, #27
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2204      	movs	r2, #4
 800252c:	701a      	strb	r2, [r3, #0]
 800252e:	e021      	b.n	8002574 <UART_SetConfig+0x178>
 8002530:	231b      	movs	r3, #27
 8002532:	18fb      	adds	r3, r7, r3
 8002534:	2208      	movs	r2, #8
 8002536:	701a      	strb	r2, [r3, #0]
 8002538:	e01c      	b.n	8002574 <UART_SetConfig+0x178>
 800253a:	231b      	movs	r3, #27
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2210      	movs	r2, #16
 8002540:	701a      	strb	r2, [r3, #0]
 8002542:	e017      	b.n	8002574 <UART_SetConfig+0x178>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7a      	ldr	r2, [pc, #488]	@ (8002734 <UART_SetConfig+0x338>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d104      	bne.n	8002558 <UART_SetConfig+0x15c>
 800254e:	231b      	movs	r3, #27
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	2200      	movs	r2, #0
 8002554:	701a      	strb	r2, [r3, #0]
 8002556:	e00d      	b.n	8002574 <UART_SetConfig+0x178>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a76      	ldr	r2, [pc, #472]	@ (8002738 <UART_SetConfig+0x33c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d104      	bne.n	800256c <UART_SetConfig+0x170>
 8002562:	231b      	movs	r3, #27
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
 800256a:	e003      	b.n	8002574 <UART_SetConfig+0x178>
 800256c:	231b      	movs	r3, #27
 800256e:	18fb      	adds	r3, r7, r3
 8002570:	2210      	movs	r2, #16
 8002572:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	2380      	movs	r3, #128	@ 0x80
 800257a:	021b      	lsls	r3, r3, #8
 800257c:	429a      	cmp	r2, r3
 800257e:	d000      	beq.n	8002582 <UART_SetConfig+0x186>
 8002580:	e065      	b.n	800264e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002582:	231b      	movs	r3, #27
 8002584:	18fb      	adds	r3, r7, r3
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d015      	beq.n	80025b8 <UART_SetConfig+0x1bc>
 800258c:	dc18      	bgt.n	80025c0 <UART_SetConfig+0x1c4>
 800258e:	2b04      	cmp	r3, #4
 8002590:	d00d      	beq.n	80025ae <UART_SetConfig+0x1b2>
 8002592:	dc15      	bgt.n	80025c0 <UART_SetConfig+0x1c4>
 8002594:	2b00      	cmp	r3, #0
 8002596:	d002      	beq.n	800259e <UART_SetConfig+0x1a2>
 8002598:	2b02      	cmp	r3, #2
 800259a:	d005      	beq.n	80025a8 <UART_SetConfig+0x1ac>
 800259c:	e010      	b.n	80025c0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800259e:	f7ff fa87 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 80025a2:	0003      	movs	r3, r0
 80025a4:	617b      	str	r3, [r7, #20]
        break;
 80025a6:	e012      	b.n	80025ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80025a8:	4b64      	ldr	r3, [pc, #400]	@ (800273c <UART_SetConfig+0x340>)
 80025aa:	617b      	str	r3, [r7, #20]
        break;
 80025ac:	e00f      	b.n	80025ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80025ae:	f7ff f9f3 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 80025b2:	0003      	movs	r3, r0
 80025b4:	617b      	str	r3, [r7, #20]
        break;
 80025b6:	e00a      	b.n	80025ce <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80025b8:	2380      	movs	r3, #128	@ 0x80
 80025ba:	021b      	lsls	r3, r3, #8
 80025bc:	617b      	str	r3, [r7, #20]
        break;
 80025be:	e006      	b.n	80025ce <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80025c4:	231a      	movs	r3, #26
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
        break;
 80025cc:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d100      	bne.n	80025d6 <UART_SetConfig+0x1da>
 80025d4:	e08d      	b.n	80026f2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025da:	4b59      	ldr	r3, [pc, #356]	@ (8002740 <UART_SetConfig+0x344>)
 80025dc:	0052      	lsls	r2, r2, #1
 80025de:	5ad3      	ldrh	r3, [r2, r3]
 80025e0:	0019      	movs	r1, r3
 80025e2:	6978      	ldr	r0, [r7, #20]
 80025e4:	f7fd fd94 	bl	8000110 <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	005a      	lsls	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	18d2      	adds	r2, r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0019      	movs	r1, r3
 80025fa:	0010      	movs	r0, r2
 80025fc:	f7fd fd88 	bl	8000110 <__udivsi3>
 8002600:	0003      	movs	r3, r0
 8002602:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	2b0f      	cmp	r3, #15
 8002608:	d91c      	bls.n	8002644 <UART_SetConfig+0x248>
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	2380      	movs	r3, #128	@ 0x80
 800260e:	025b      	lsls	r3, r3, #9
 8002610:	429a      	cmp	r2, r3
 8002612:	d217      	bcs.n	8002644 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	b29a      	uxth	r2, r3
 8002618:	200e      	movs	r0, #14
 800261a:	183b      	adds	r3, r7, r0
 800261c:	210f      	movs	r1, #15
 800261e:	438a      	bics	r2, r1
 8002620:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	085b      	lsrs	r3, r3, #1
 8002626:	b29b      	uxth	r3, r3
 8002628:	2207      	movs	r2, #7
 800262a:	4013      	ands	r3, r2
 800262c:	b299      	uxth	r1, r3
 800262e:	183b      	adds	r3, r7, r0
 8002630:	183a      	adds	r2, r7, r0
 8002632:	8812      	ldrh	r2, [r2, #0]
 8002634:	430a      	orrs	r2, r1
 8002636:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	183a      	adds	r2, r7, r0
 800263e:	8812      	ldrh	r2, [r2, #0]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	e056      	b.n	80026f2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8002644:	231a      	movs	r3, #26
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2201      	movs	r2, #1
 800264a:	701a      	strb	r2, [r3, #0]
 800264c:	e051      	b.n	80026f2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800264e:	231b      	movs	r3, #27
 8002650:	18fb      	adds	r3, r7, r3
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b08      	cmp	r3, #8
 8002656:	d015      	beq.n	8002684 <UART_SetConfig+0x288>
 8002658:	dc18      	bgt.n	800268c <UART_SetConfig+0x290>
 800265a:	2b04      	cmp	r3, #4
 800265c:	d00d      	beq.n	800267a <UART_SetConfig+0x27e>
 800265e:	dc15      	bgt.n	800268c <UART_SetConfig+0x290>
 8002660:	2b00      	cmp	r3, #0
 8002662:	d002      	beq.n	800266a <UART_SetConfig+0x26e>
 8002664:	2b02      	cmp	r3, #2
 8002666:	d005      	beq.n	8002674 <UART_SetConfig+0x278>
 8002668:	e010      	b.n	800268c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800266a:	f7ff fa21 	bl	8001ab0 <HAL_RCC_GetPCLK1Freq>
 800266e:	0003      	movs	r3, r0
 8002670:	617b      	str	r3, [r7, #20]
        break;
 8002672:	e012      	b.n	800269a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002674:	4b31      	ldr	r3, [pc, #196]	@ (800273c <UART_SetConfig+0x340>)
 8002676:	617b      	str	r3, [r7, #20]
        break;
 8002678:	e00f      	b.n	800269a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800267a:	f7ff f98d 	bl	8001998 <HAL_RCC_GetSysClockFreq>
 800267e:	0003      	movs	r3, r0
 8002680:	617b      	str	r3, [r7, #20]
        break;
 8002682:	e00a      	b.n	800269a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002684:	2380      	movs	r3, #128	@ 0x80
 8002686:	021b      	lsls	r3, r3, #8
 8002688:	617b      	str	r3, [r7, #20]
        break;
 800268a:	e006      	b.n	800269a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002690:	231a      	movs	r3, #26
 8002692:	18fb      	adds	r3, r7, r3
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
        break;
 8002698:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d028      	beq.n	80026f2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026a4:	4b26      	ldr	r3, [pc, #152]	@ (8002740 <UART_SetConfig+0x344>)
 80026a6:	0052      	lsls	r2, r2, #1
 80026a8:	5ad3      	ldrh	r3, [r2, r3]
 80026aa:	0019      	movs	r1, r3
 80026ac:	6978      	ldr	r0, [r7, #20]
 80026ae:	f7fd fd2f 	bl	8000110 <__udivsi3>
 80026b2:	0003      	movs	r3, r0
 80026b4:	001a      	movs	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	18d2      	adds	r2, r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	0019      	movs	r1, r3
 80026c4:	0010      	movs	r0, r2
 80026c6:	f7fd fd23 	bl	8000110 <__udivsi3>
 80026ca:	0003      	movs	r3, r0
 80026cc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	2b0f      	cmp	r3, #15
 80026d2:	d90a      	bls.n	80026ea <UART_SetConfig+0x2ee>
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	2380      	movs	r3, #128	@ 0x80
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	429a      	cmp	r2, r3
 80026dc:	d205      	bcs.n	80026ea <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	60da      	str	r2, [r3, #12]
 80026e8:	e003      	b.n	80026f2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80026ea:	231a      	movs	r3, #26
 80026ec:	18fb      	adds	r3, r7, r3
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	226a      	movs	r2, #106	@ 0x6a
 80026f6:	2101      	movs	r1, #1
 80026f8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2268      	movs	r2, #104	@ 0x68
 80026fe:	2101      	movs	r1, #1
 8002700:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2200      	movs	r2, #0
 800270c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800270e:	231a      	movs	r3, #26
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	781b      	ldrb	r3, [r3, #0]
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b008      	add	sp, #32
 800271a:	bd80      	pop	{r7, pc}
 800271c:	cfff69f3 	.word	0xcfff69f3
 8002720:	ffffcfff 	.word	0xffffcfff
 8002724:	11fff4ff 	.word	0x11fff4ff
 8002728:	40013800 	.word	0x40013800
 800272c:	40021000 	.word	0x40021000
 8002730:	40004400 	.word	0x40004400
 8002734:	40004800 	.word	0x40004800
 8002738:	40004c00 	.word	0x40004c00
 800273c:	00f42400 	.word	0x00f42400
 8002740:	080046c0 	.word	0x080046c0

08002744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002750:	2208      	movs	r2, #8
 8002752:	4013      	ands	r3, r2
 8002754:	d00b      	beq.n	800276e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	4a4a      	ldr	r2, [pc, #296]	@ (8002888 <UART_AdvFeatureConfig+0x144>)
 800275e:	4013      	ands	r3, r2
 8002760:	0019      	movs	r1, r3
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002772:	2201      	movs	r2, #1
 8002774:	4013      	ands	r3, r2
 8002776:	d00b      	beq.n	8002790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	4a43      	ldr	r2, [pc, #268]	@ (800288c <UART_AdvFeatureConfig+0x148>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	430a      	orrs	r2, r1
 800278e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002794:	2202      	movs	r2, #2
 8002796:	4013      	ands	r3, r2
 8002798:	d00b      	beq.n	80027b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	4a3b      	ldr	r2, [pc, #236]	@ (8002890 <UART_AdvFeatureConfig+0x14c>)
 80027a2:	4013      	ands	r3, r2
 80027a4:	0019      	movs	r1, r3
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b6:	2204      	movs	r2, #4
 80027b8:	4013      	ands	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	4a34      	ldr	r2, [pc, #208]	@ (8002894 <UART_AdvFeatureConfig+0x150>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	0019      	movs	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	430a      	orrs	r2, r1
 80027d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d8:	2210      	movs	r2, #16
 80027da:	4013      	ands	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	4a2c      	ldr	r2, [pc, #176]	@ (8002898 <UART_AdvFeatureConfig+0x154>)
 80027e6:	4013      	ands	r3, r2
 80027e8:	0019      	movs	r1, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027fa:	2220      	movs	r2, #32
 80027fc:	4013      	ands	r3, r2
 80027fe:	d00b      	beq.n	8002818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	4a25      	ldr	r2, [pc, #148]	@ (800289c <UART_AdvFeatureConfig+0x158>)
 8002808:	4013      	ands	r3, r2
 800280a:	0019      	movs	r1, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800281c:	2240      	movs	r2, #64	@ 0x40
 800281e:	4013      	ands	r3, r2
 8002820:	d01d      	beq.n	800285e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a1d      	ldr	r2, [pc, #116]	@ (80028a0 <UART_AdvFeatureConfig+0x15c>)
 800282a:	4013      	ands	r3, r2
 800282c:	0019      	movs	r1, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	430a      	orrs	r2, r1
 8002838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800283e:	2380      	movs	r3, #128	@ 0x80
 8002840:	035b      	lsls	r3, r3, #13
 8002842:	429a      	cmp	r2, r3
 8002844:	d10b      	bne.n	800285e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	4a15      	ldr	r2, [pc, #84]	@ (80028a4 <UART_AdvFeatureConfig+0x160>)
 800284e:	4013      	ands	r3, r2
 8002850:	0019      	movs	r1, r3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002862:	2280      	movs	r2, #128	@ 0x80
 8002864:	4013      	ands	r3, r2
 8002866:	d00b      	beq.n	8002880 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	4a0e      	ldr	r2, [pc, #56]	@ (80028a8 <UART_AdvFeatureConfig+0x164>)
 8002870:	4013      	ands	r3, r2
 8002872:	0019      	movs	r1, r3
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	605a      	str	r2, [r3, #4]
  }
}
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b002      	add	sp, #8
 8002886:	bd80      	pop	{r7, pc}
 8002888:	ffff7fff 	.word	0xffff7fff
 800288c:	fffdffff 	.word	0xfffdffff
 8002890:	fffeffff 	.word	0xfffeffff
 8002894:	fffbffff 	.word	0xfffbffff
 8002898:	ffffefff 	.word	0xffffefff
 800289c:	ffffdfff 	.word	0xffffdfff
 80028a0:	ffefffff 	.word	0xffefffff
 80028a4:	ff9fffff 	.word	0xff9fffff
 80028a8:	fff7ffff 	.word	0xfff7ffff

080028ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b092      	sub	sp, #72	@ 0x48
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2290      	movs	r2, #144	@ 0x90
 80028b8:	2100      	movs	r1, #0
 80028ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80028bc:	f7fe f8d2 	bl	8000a64 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2208      	movs	r2, #8
 80028cc:	4013      	ands	r3, r2
 80028ce:	2b08      	cmp	r3, #8
 80028d0:	d12d      	bne.n	800292e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80028d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d4:	2280      	movs	r2, #128	@ 0x80
 80028d6:	0391      	lsls	r1, r2, #14
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	4a47      	ldr	r2, [pc, #284]	@ (80029f8 <UART_CheckIdleState+0x14c>)
 80028dc:	9200      	str	r2, [sp, #0]
 80028de:	2200      	movs	r2, #0
 80028e0:	f000 f88e 	bl	8002a00 <UART_WaitOnFlagUntilTimeout>
 80028e4:	1e03      	subs	r3, r0, #0
 80028e6:	d022      	beq.n	800292e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028e8:	f3ef 8310 	mrs	r3, PRIMASK
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80028f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028f2:	2301      	movs	r3, #1
 80028f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028f8:	f383 8810 	msr	PRIMASK, r3
}
 80028fc:	46c0      	nop			@ (mov r8, r8)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2180      	movs	r1, #128	@ 0x80
 800290a:	438a      	bics	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
 800290e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002910:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002914:	f383 8810 	msr	PRIMASK, r3
}
 8002918:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2288      	movs	r2, #136	@ 0x88
 800291e:	2120      	movs	r1, #32
 8002920:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2284      	movs	r2, #132	@ 0x84
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e060      	b.n	80029f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2204      	movs	r2, #4
 8002936:	4013      	ands	r3, r2
 8002938:	2b04      	cmp	r3, #4
 800293a:	d146      	bne.n	80029ca <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800293c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800293e:	2280      	movs	r2, #128	@ 0x80
 8002940:	03d1      	lsls	r1, r2, #15
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	4a2c      	ldr	r2, [pc, #176]	@ (80029f8 <UART_CheckIdleState+0x14c>)
 8002946:	9200      	str	r2, [sp, #0]
 8002948:	2200      	movs	r2, #0
 800294a:	f000 f859 	bl	8002a00 <UART_WaitOnFlagUntilTimeout>
 800294e:	1e03      	subs	r3, r0, #0
 8002950:	d03b      	beq.n	80029ca <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002952:	f3ef 8310 	mrs	r3, PRIMASK
 8002956:	60fb      	str	r3, [r7, #12]
  return(result);
 8002958:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800295a:	637b      	str	r3, [r7, #52]	@ 0x34
 800295c:	2301      	movs	r3, #1
 800295e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	f383 8810 	msr	PRIMASK, r3
}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4922      	ldr	r1, [pc, #136]	@ (80029fc <UART_CheckIdleState+0x150>)
 8002974:	400a      	ands	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f383 8810 	msr	PRIMASK, r3
}
 8002982:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002984:	f3ef 8310 	mrs	r3, PRIMASK
 8002988:	61bb      	str	r3, [r7, #24]
  return(result);
 800298a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800298c:	633b      	str	r3, [r7, #48]	@ 0x30
 800298e:	2301      	movs	r3, #1
 8002990:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f383 8810 	msr	PRIMASK, r3
}
 8002998:	46c0      	nop			@ (mov r8, r8)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2101      	movs	r1, #1
 80029a6:	438a      	bics	r2, r1
 80029a8:	609a      	str	r2, [r3, #8]
 80029aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ae:	6a3b      	ldr	r3, [r7, #32]
 80029b0:	f383 8810 	msr	PRIMASK, r3
}
 80029b4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	228c      	movs	r2, #140	@ 0x8c
 80029ba:	2120      	movs	r1, #32
 80029bc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2284      	movs	r2, #132	@ 0x84
 80029c2:	2100      	movs	r1, #0
 80029c4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e012      	b.n	80029f0 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2288      	movs	r2, #136	@ 0x88
 80029ce:	2120      	movs	r1, #32
 80029d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	228c      	movs	r2, #140	@ 0x8c
 80029d6:	2120      	movs	r1, #32
 80029d8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2200      	movs	r2, #0
 80029de:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2284      	movs	r2, #132	@ 0x84
 80029ea:	2100      	movs	r1, #0
 80029ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	b010      	add	sp, #64	@ 0x40
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	01ffffff 	.word	0x01ffffff
 80029fc:	fffffedf 	.word	0xfffffedf

08002a00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	1dfb      	adds	r3, r7, #7
 8002a0e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a10:	e051      	b.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	3301      	adds	r3, #1
 8002a16:	d04e      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a18:	f7fe f824 	bl	8000a64 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d302      	bcc.n	8002a2e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e051      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2204      	movs	r2, #4
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	d03b      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b80      	cmp	r3, #128	@ 0x80
 8002a42:	d038      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b40      	cmp	r3, #64	@ 0x40
 8002a48:	d035      	beq.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	2208      	movs	r2, #8
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d111      	bne.n	8002a7c <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2208      	movs	r2, #8
 8002a5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	0018      	movs	r0, r3
 8002a64:	f000 f960 	bl	8002d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2290      	movs	r2, #144	@ 0x90
 8002a6c:	2108      	movs	r1, #8
 8002a6e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2284      	movs	r2, #132	@ 0x84
 8002a74:	2100      	movs	r1, #0
 8002a76:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e02c      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	69da      	ldr	r2, [r3, #28]
 8002a82:	2380      	movs	r3, #128	@ 0x80
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	401a      	ands	r2, r3
 8002a88:	2380      	movs	r3, #128	@ 0x80
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d112      	bne.n	8002ab6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2280      	movs	r2, #128	@ 0x80
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 f943 	bl	8002d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2290      	movs	r2, #144	@ 0x90
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2284      	movs	r2, #132	@ 0x84
 8002aae:	2100      	movs	r1, #0
 8002ab0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e00f      	b.n	8002ad6 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	425a      	negs	r2, r3
 8002ac6:	4153      	adcs	r3, r2
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	001a      	movs	r2, r3
 8002acc:	1dfb      	adds	r3, r7, #7
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d09e      	beq.n	8002a12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b004      	add	sp, #16
 8002adc:	bd80      	pop	{r7, pc}
	...

08002ae0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b098      	sub	sp, #96	@ 0x60
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	1dbb      	adds	r3, r7, #6
 8002aec:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1dba      	adds	r2, r7, #6
 8002af8:	215c      	movs	r1, #92	@ 0x5c
 8002afa:	8812      	ldrh	r2, [r2, #0]
 8002afc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	1dba      	adds	r2, r7, #6
 8002b02:	215e      	movs	r1, #94	@ 0x5e
 8002b04:	8812      	ldrh	r2, [r2, #0]
 8002b06:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	2380      	movs	r3, #128	@ 0x80
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d10d      	bne.n	8002b36 <UART_Start_Receive_IT+0x56>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <UART_Start_Receive_IT+0x4c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2260      	movs	r2, #96	@ 0x60
 8002b26:	497b      	ldr	r1, [pc, #492]	@ (8002d14 <UART_Start_Receive_IT+0x234>)
 8002b28:	5299      	strh	r1, [r3, r2]
 8002b2a:	e02e      	b.n	8002b8a <UART_Start_Receive_IT+0xaa>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2260      	movs	r2, #96	@ 0x60
 8002b30:	21ff      	movs	r1, #255	@ 0xff
 8002b32:	5299      	strh	r1, [r3, r2]
 8002b34:	e029      	b.n	8002b8a <UART_Start_Receive_IT+0xaa>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <UART_Start_Receive_IT+0x7a>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d104      	bne.n	8002b50 <UART_Start_Receive_IT+0x70>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2260      	movs	r2, #96	@ 0x60
 8002b4a:	21ff      	movs	r1, #255	@ 0xff
 8002b4c:	5299      	strh	r1, [r3, r2]
 8002b4e:	e01c      	b.n	8002b8a <UART_Start_Receive_IT+0xaa>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2260      	movs	r2, #96	@ 0x60
 8002b54:	217f      	movs	r1, #127	@ 0x7f
 8002b56:	5299      	strh	r1, [r3, r2]
 8002b58:	e017      	b.n	8002b8a <UART_Start_Receive_IT+0xaa>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	2380      	movs	r3, #128	@ 0x80
 8002b60:	055b      	lsls	r3, r3, #21
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d10d      	bne.n	8002b82 <UART_Start_Receive_IT+0xa2>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d104      	bne.n	8002b78 <UART_Start_Receive_IT+0x98>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2260      	movs	r2, #96	@ 0x60
 8002b72:	217f      	movs	r1, #127	@ 0x7f
 8002b74:	5299      	strh	r1, [r3, r2]
 8002b76:	e008      	b.n	8002b8a <UART_Start_Receive_IT+0xaa>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2260      	movs	r2, #96	@ 0x60
 8002b7c:	213f      	movs	r1, #63	@ 0x3f
 8002b7e:	5299      	strh	r1, [r3, r2]
 8002b80:	e003      	b.n	8002b8a <UART_Start_Receive_IT+0xaa>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2260      	movs	r2, #96	@ 0x60
 8002b86:	2100      	movs	r1, #0
 8002b88:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2290      	movs	r2, #144	@ 0x90
 8002b8e:	2100      	movs	r1, #0
 8002b90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	228c      	movs	r2, #140	@ 0x8c
 8002b96:	2122      	movs	r1, #34	@ 0x22
 8002b98:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8002b9e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ba2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ba8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002baa:	f383 8810 	msr	PRIMASK, r3
}
 8002bae:	46c0      	nop			@ (mov r8, r8)
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2101      	movs	r1, #1
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bc6:	f383 8810 	msr	PRIMASK, r3
}
 8002bca:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002bd0:	2380      	movs	r3, #128	@ 0x80
 8002bd2:	059b      	lsls	r3, r3, #22
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d150      	bne.n	8002c7a <UART_Start_Receive_IT+0x19a>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2268      	movs	r2, #104	@ 0x68
 8002bdc:	5a9b      	ldrh	r3, [r3, r2]
 8002bde:	1dba      	adds	r2, r7, #6
 8002be0:	8812      	ldrh	r2, [r2, #0]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d349      	bcc.n	8002c7a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	689a      	ldr	r2, [r3, #8]
 8002bea:	2380      	movs	r3, #128	@ 0x80
 8002bec:	015b      	lsls	r3, r3, #5
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d107      	bne.n	8002c02 <UART_Start_Receive_IT+0x122>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d103      	bne.n	8002c02 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4a46      	ldr	r2, [pc, #280]	@ (8002d18 <UART_Start_Receive_IT+0x238>)
 8002bfe:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c00:	e002      	b.n	8002c08 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	4a45      	ldr	r2, [pc, #276]	@ (8002d1c <UART_Start_Receive_IT+0x23c>)
 8002c06:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d019      	beq.n	8002c44 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c10:	f3ef 8310 	mrs	r3, PRIMASK
 8002c14:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c20:	f383 8810 	msr	PRIMASK, r3
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2180      	movs	r1, #128	@ 0x80
 8002c32:	0049      	lsls	r1, r1, #1
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002c3e:	f383 8810 	msr	PRIMASK, r3
}
 8002c42:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c44:	f3ef 8310 	mrs	r3, PRIMASK
 8002c48:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002c4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002c4e:	2301      	movs	r3, #1
 8002c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	f383 8810 	msr	PRIMASK, r3
}
 8002c58:	46c0      	nop			@ (mov r8, r8)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2180      	movs	r1, #128	@ 0x80
 8002c66:	0549      	lsls	r1, r1, #21
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c6e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c72:	f383 8810 	msr	PRIMASK, r3
}
 8002c76:	46c0      	nop			@ (mov r8, r8)
 8002c78:	e047      	b.n	8002d0a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	689a      	ldr	r2, [r3, #8]
 8002c7e:	2380      	movs	r3, #128	@ 0x80
 8002c80:	015b      	lsls	r3, r3, #5
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d107      	bne.n	8002c96 <UART_Start_Receive_IT+0x1b6>
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d103      	bne.n	8002c96 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4a23      	ldr	r2, [pc, #140]	@ (8002d20 <UART_Start_Receive_IT+0x240>)
 8002c92:	675a      	str	r2, [r3, #116]	@ 0x74
 8002c94:	e002      	b.n	8002c9c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a22      	ldr	r2, [pc, #136]	@ (8002d24 <UART_Start_Receive_IT+0x244>)
 8002c9a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d019      	beq.n	8002cd8 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ca4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ca8:	61fb      	str	r3, [r7, #28]
  return(result);
 8002caa:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002cac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cae:	2301      	movs	r3, #1
 8002cb0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cb2:	6a3b      	ldr	r3, [r7, #32]
 8002cb4:	f383 8810 	msr	PRIMASK, r3
}
 8002cb8:	46c0      	nop			@ (mov r8, r8)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2190      	movs	r1, #144	@ 0x90
 8002cc6:	0049      	lsls	r1, r1, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	f383 8810 	msr	PRIMASK, r3
}
 8002cd6:	e018      	b.n	8002d0a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8002cdc:	613b      	str	r3, [r7, #16]
  return(result);
 8002cde:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002ce0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f383 8810 	msr	PRIMASK, r3
}
 8002cec:	46c0      	nop			@ (mov r8, r8)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2120      	movs	r1, #32
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	f383 8810 	msr	PRIMASK, r3
}
 8002d08:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b018      	add	sp, #96	@ 0x60
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	000001ff 	.word	0x000001ff
 8002d18:	0800386d 	.word	0x0800386d
 8002d1c:	0800353d 	.word	0x0800353d
 8002d20:	08003385 	.word	0x08003385
 8002d24:	080031cd 	.word	0x080031cd

08002d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08e      	sub	sp, #56	@ 0x38
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d30:	f3ef 8310 	mrs	r3, PRIMASK
 8002d34:	617b      	str	r3, [r7, #20]
  return(result);
 8002d36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002d38:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d3e:	69bb      	ldr	r3, [r7, #24]
 8002d40:	f383 8810 	msr	PRIMASK, r3
}
 8002d44:	46c0      	nop			@ (mov r8, r8)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4926      	ldr	r1, [pc, #152]	@ (8002dec <UART_EndRxTransfer+0xc4>)
 8002d52:	400a      	ands	r2, r1
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	f383 8810 	msr	PRIMASK, r3
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d62:	f3ef 8310 	mrs	r3, PRIMASK
 8002d66:	623b      	str	r3, [r7, #32]
  return(result);
 8002d68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002d6a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d72:	f383 8810 	msr	PRIMASK, r3
}
 8002d76:	46c0      	nop			@ (mov r8, r8)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	689a      	ldr	r2, [r3, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	491b      	ldr	r1, [pc, #108]	@ (8002df0 <UART_EndRxTransfer+0xc8>)
 8002d84:	400a      	ands	r2, r1
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d8e:	f383 8810 	msr	PRIMASK, r3
}
 8002d92:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d118      	bne.n	8002dce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8002da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8002da2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002da6:	2301      	movs	r3, #1
 8002da8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f383 8810 	msr	PRIMASK, r3
}
 8002db0:	46c0      	nop			@ (mov r8, r8)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2110      	movs	r1, #16
 8002dbe:	438a      	bics	r2, r1
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f383 8810 	msr	PRIMASK, r3
}
 8002dcc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	228c      	movs	r2, #140	@ 0x8c
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002de2:	46c0      	nop			@ (mov r8, r8)
 8002de4:	46bd      	mov	sp, r7
 8002de6:	b00e      	add	sp, #56	@ 0x38
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	46c0      	nop			@ (mov r8, r8)
 8002dec:	fffffedf 	.word	0xfffffedf
 8002df0:	effffffe 	.word	0xeffffffe

08002df4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	225e      	movs	r2, #94	@ 0x5e
 8002e06:	2100      	movs	r1, #0
 8002e08:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2256      	movs	r2, #86	@ 0x56
 8002e0e:	2100      	movs	r1, #0
 8002e10:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7ff fadd 	bl	80023d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b08a      	sub	sp, #40	@ 0x28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2288      	movs	r2, #136	@ 0x88
 8002e2e:	589b      	ldr	r3, [r3, r2]
 8002e30:	2b21      	cmp	r3, #33	@ 0x21
 8002e32:	d14c      	bne.n	8002ece <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2256      	movs	r2, #86	@ 0x56
 8002e38:	5a9b      	ldrh	r3, [r3, r2]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d132      	bne.n	8002ea6 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e40:	f3ef 8310 	mrs	r3, PRIMASK
 8002e44:	60bb      	str	r3, [r7, #8]
  return(result);
 8002e46:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2180      	movs	r1, #128	@ 0x80
 8002e62:	438a      	bics	r2, r1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	f383 8810 	msr	PRIMASK, r3
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e72:	f3ef 8310 	mrs	r3, PRIMASK
 8002e76:	617b      	str	r3, [r7, #20]
  return(result);
 8002e78:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e7a:	623b      	str	r3, [r7, #32]
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002ea4:	e013      	b.n	8002ece <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eaa:	781a      	ldrb	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb6:	1c5a      	adds	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2256      	movs	r2, #86	@ 0x56
 8002ec0:	5a9b      	ldrh	r3, [r3, r2]
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b299      	uxth	r1, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2256      	movs	r2, #86	@ 0x56
 8002ecc:	5299      	strh	r1, [r3, r2]
}
 8002ece:	46c0      	nop			@ (mov r8, r8)
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	b00a      	add	sp, #40	@ 0x28
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b08c      	sub	sp, #48	@ 0x30
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2288      	movs	r2, #136	@ 0x88
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	2b21      	cmp	r3, #33	@ 0x21
 8002ee6:	d151      	bne.n	8002f8c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2256      	movs	r2, #86	@ 0x56
 8002eec:	5a9b      	ldrh	r3, [r3, r2]
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d132      	bne.n	8002f5a <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ef4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef8:	60fb      	str	r3, [r7, #12]
  return(result);
 8002efa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002efe:	2301      	movs	r3, #1
 8002f00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f383 8810 	msr	PRIMASK, r3
}
 8002f08:	46c0      	nop			@ (mov r8, r8)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2180      	movs	r1, #128	@ 0x80
 8002f16:	438a      	bics	r2, r1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f383 8810 	msr	PRIMASK, r3
}
 8002f24:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f26:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002f2c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f30:	2301      	movs	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f383 8810 	msr	PRIMASK, r3
}
 8002f3a:	46c0      	nop			@ (mov r8, r8)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2140      	movs	r1, #64	@ 0x40
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	f383 8810 	msr	PRIMASK, r3
}
 8002f56:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002f58:	e018      	b.n	8002f8c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f62:	881b      	ldrh	r3, [r3, #0]
 8002f64:	001a      	movs	r2, r3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	05d2      	lsls	r2, r2, #23
 8002f6c:	0dd2      	lsrs	r2, r2, #23
 8002f6e:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2256      	movs	r2, #86	@ 0x56
 8002f7e:	5a9b      	ldrh	r3, [r3, r2]
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b299      	uxth	r1, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2256      	movs	r2, #86	@ 0x56
 8002f8a:	5299      	strh	r1, [r3, r2]
}
 8002f8c:	46c0      	nop			@ (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b00c      	add	sp, #48	@ 0x30
 8002f92:	bd80      	pop	{r7, pc}

08002f94 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	@ 0x30
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2288      	movs	r2, #136	@ 0x88
 8002fa0:	589b      	ldr	r3, [r3, r2]
 8002fa2:	2b21      	cmp	r3, #33	@ 0x21
 8002fa4:	d165      	bne.n	8003072 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002fa6:	232e      	movs	r3, #46	@ 0x2e
 8002fa8:	18fb      	adds	r3, r7, r3
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	216a      	movs	r1, #106	@ 0x6a
 8002fae:	5a52      	ldrh	r2, [r2, r1]
 8002fb0:	801a      	strh	r2, [r3, #0]
 8002fb2:	e059      	b.n	8003068 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2256      	movs	r2, #86	@ 0x56
 8002fb8:	5a9b      	ldrh	r3, [r3, r2]
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d133      	bne.n	8003028 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fca:	2301      	movs	r3, #1
 8002fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	f383 8810 	msr	PRIMASK, r3
}
 8002fd4:	46c0      	nop			@ (mov r8, r8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4926      	ldr	r1, [pc, #152]	@ (800307c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8002fe2:	400a      	ands	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	f383 8810 	msr	PRIMASK, r3
}
 8002ff0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ff6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002ff8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	f383 8810 	msr	PRIMASK, r3
}
 8003006:	46c0      	nop			@ (mov r8, r8)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2140      	movs	r1, #64	@ 0x40
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301c:	6a3b      	ldr	r3, [r7, #32]
 800301e:	f383 8810 	msr	PRIMASK, r3
}
 8003022:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003024:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003026:	e024      	b.n	8003072 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	2280      	movs	r2, #128	@ 0x80
 8003030:	4013      	ands	r3, r2
 8003032:	d013      	beq.n	800305c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003038:	781a      	ldrb	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2256      	movs	r2, #86	@ 0x56
 800304e:	5a9b      	ldrh	r3, [r3, r2]
 8003050:	b29b      	uxth	r3, r3
 8003052:	3b01      	subs	r3, #1
 8003054:	b299      	uxth	r1, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2256      	movs	r2, #86	@ 0x56
 800305a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800305c:	212e      	movs	r1, #46	@ 0x2e
 800305e:	187b      	adds	r3, r7, r1
 8003060:	881a      	ldrh	r2, [r3, #0]
 8003062:	187b      	adds	r3, r7, r1
 8003064:	3a01      	subs	r2, #1
 8003066:	801a      	strh	r2, [r3, #0]
 8003068:	232e      	movs	r3, #46	@ 0x2e
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	881b      	ldrh	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1a0      	bne.n	8002fb4 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003072:	46c0      	nop			@ (mov r8, r8)
 8003074:	46bd      	mov	sp, r7
 8003076:	b00c      	add	sp, #48	@ 0x30
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			@ (mov r8, r8)
 800307c:	ff7fffff 	.word	0xff7fffff

08003080 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b08c      	sub	sp, #48	@ 0x30
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2288      	movs	r2, #136	@ 0x88
 800308c:	589b      	ldr	r3, [r3, r2]
 800308e:	2b21      	cmp	r3, #33	@ 0x21
 8003090:	d16a      	bne.n	8003168 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003092:	232e      	movs	r3, #46	@ 0x2e
 8003094:	18fb      	adds	r3, r7, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	216a      	movs	r1, #106	@ 0x6a
 800309a:	5a52      	ldrh	r2, [r2, r1]
 800309c:	801a      	strh	r2, [r3, #0]
 800309e:	e05e      	b.n	800315e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2256      	movs	r2, #86	@ 0x56
 80030a4:	5a9b      	ldrh	r3, [r3, r2]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d133      	bne.n	8003114 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ac:	f3ef 8310 	mrs	r3, PRIMASK
 80030b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030b2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030b6:	2301      	movs	r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	46c0      	nop			@ (mov r8, r8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4928      	ldr	r1, [pc, #160]	@ (8003170 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80030ce:	400a      	ands	r2, r1
 80030d0:	609a      	str	r2, [r3, #8]
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030de:	f3ef 8310 	mrs	r3, PRIMASK
 80030e2:	617b      	str	r3, [r7, #20]
  return(result);
 80030e4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80030e6:	623b      	str	r3, [r7, #32]
 80030e8:	2301      	movs	r3, #1
 80030ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	f383 8810 	msr	PRIMASK, r3
}
 80030f2:	46c0      	nop			@ (mov r8, r8)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2140      	movs	r1, #64	@ 0x40
 8003100:	430a      	orrs	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	6a3b      	ldr	r3, [r7, #32]
 8003106:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f383 8810 	msr	PRIMASK, r3
}
 800310e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003110:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003112:	e029      	b.n	8003168 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	2280      	movs	r2, #128	@ 0x80
 800311c:	4013      	ands	r3, r2
 800311e:	d018      	beq.n	8003152 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003124:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	001a      	movs	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	05d2      	lsls	r2, r2, #23
 8003132:	0dd2      	lsrs	r2, r2, #23
 8003134:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800313a:	1c9a      	adds	r2, r3, #2
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2256      	movs	r2, #86	@ 0x56
 8003144:	5a9b      	ldrh	r3, [r3, r2]
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b299      	uxth	r1, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2256      	movs	r2, #86	@ 0x56
 8003150:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003152:	212e      	movs	r1, #46	@ 0x2e
 8003154:	187b      	adds	r3, r7, r1
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	187b      	adds	r3, r7, r1
 800315a:	3a01      	subs	r2, #1
 800315c:	801a      	strh	r2, [r3, #0]
 800315e:	232e      	movs	r3, #46	@ 0x2e
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	881b      	ldrh	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d19b      	bne.n	80030a0 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003168:	46c0      	nop			@ (mov r8, r8)
 800316a:	46bd      	mov	sp, r7
 800316c:	b00c      	add	sp, #48	@ 0x30
 800316e:	bd80      	pop	{r7, pc}
 8003170:	ff7fffff 	.word	0xff7fffff

08003174 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317c:	f3ef 8310 	mrs	r3, PRIMASK
 8003180:	60bb      	str	r3, [r7, #8]
  return(result);
 8003182:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003184:	617b      	str	r3, [r7, #20]
 8003186:	2301      	movs	r3, #1
 8003188:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f383 8810 	msr	PRIMASK, r3
}
 8003190:	46c0      	nop			@ (mov r8, r8)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2140      	movs	r1, #64	@ 0x40
 800319e:	438a      	bics	r2, r1
 80031a0:	601a      	str	r2, [r3, #0]
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	f383 8810 	msr	PRIMASK, r3
}
 80031ac:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2288      	movs	r2, #136	@ 0x88
 80031b2:	2120      	movs	r1, #32
 80031b4:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	0018      	movs	r0, r3
 80031c0:	f7fd f86c 	bl	800029c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b006      	add	sp, #24
 80031ca:	bd80      	pop	{r7, pc}

080031cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b094      	sub	sp, #80	@ 0x50
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80031d4:	204e      	movs	r0, #78	@ 0x4e
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	2160      	movs	r1, #96	@ 0x60
 80031dc:	5a52      	ldrh	r2, [r2, r1]
 80031de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	228c      	movs	r2, #140	@ 0x8c
 80031e4:	589b      	ldr	r3, [r3, r2]
 80031e6:	2b22      	cmp	r3, #34	@ 0x22
 80031e8:	d000      	beq.n	80031ec <UART_RxISR_8BIT+0x20>
 80031ea:	e0ba      	b.n	8003362 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031f2:	214c      	movs	r1, #76	@ 0x4c
 80031f4:	187b      	adds	r3, r7, r1
 80031f6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80031f8:	187b      	adds	r3, r7, r1
 80031fa:	881b      	ldrh	r3, [r3, #0]
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	183b      	adds	r3, r7, r0
 8003200:	881b      	ldrh	r3, [r3, #0]
 8003202:	b2d9      	uxtb	r1, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003208:	400a      	ands	r2, r1
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	225e      	movs	r2, #94	@ 0x5e
 800321c:	5a9b      	ldrh	r3, [r3, r2]
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b299      	uxth	r1, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	225e      	movs	r2, #94	@ 0x5e
 8003228:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	225e      	movs	r2, #94	@ 0x5e
 800322e:	5a9b      	ldrh	r3, [r3, r2]
 8003230:	b29b      	uxth	r3, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	d000      	beq.n	8003238 <UART_RxISR_8BIT+0x6c>
 8003236:	e09c      	b.n	8003372 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003238:	f3ef 8310 	mrs	r3, PRIMASK
 800323c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800323e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003240:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003242:	2301      	movs	r3, #1
 8003244:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003248:	f383 8810 	msr	PRIMASK, r3
}
 800324c:	46c0      	nop			@ (mov r8, r8)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4948      	ldr	r1, [pc, #288]	@ (800337c <UART_RxISR_8BIT+0x1b0>)
 800325a:	400a      	ands	r2, r1
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003260:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003262:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003264:	f383 8810 	msr	PRIMASK, r3
}
 8003268:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800326a:	f3ef 8310 	mrs	r3, PRIMASK
 800326e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003272:	647b      	str	r3, [r7, #68]	@ 0x44
 8003274:	2301      	movs	r3, #1
 8003276:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003278:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800327a:	f383 8810 	msr	PRIMASK, r3
}
 800327e:	46c0      	nop			@ (mov r8, r8)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2101      	movs	r1, #1
 800328c:	438a      	bics	r2, r1
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003292:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003296:	f383 8810 	msr	PRIMASK, r3
}
 800329a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	228c      	movs	r2, #140	@ 0x8c
 80032a0:	2120      	movs	r1, #32
 80032a2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	2380      	movs	r3, #128	@ 0x80
 80032b8:	041b      	lsls	r3, r3, #16
 80032ba:	4013      	ands	r3, r2
 80032bc:	d018      	beq.n	80032f0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032be:	f3ef 8310 	mrs	r3, PRIMASK
 80032c2:	61bb      	str	r3, [r7, #24]
  return(result);
 80032c4:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032c8:	2301      	movs	r3, #1
 80032ca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4928      	ldr	r1, [pc, #160]	@ (8003380 <UART_RxISR_8BIT+0x1b4>)
 80032e0:	400a      	ands	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	f383 8810 	msr	PRIMASK, r3
}
 80032ee:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d12f      	bne.n	8003358 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003302:	60fb      	str	r3, [r7, #12]
  return(result);
 8003304:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003306:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003308:	2301      	movs	r3, #1
 800330a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	2110      	movs	r1, #16
 8003320:	438a      	bics	r2, r1
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003326:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	f383 8810 	msr	PRIMASK, r3
}
 800332e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	2210      	movs	r2, #16
 8003338:	4013      	ands	r3, r2
 800333a:	2b10      	cmp	r3, #16
 800333c:	d103      	bne.n	8003346 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2210      	movs	r2, #16
 8003344:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	225c      	movs	r2, #92	@ 0x5c
 800334a:	5a9a      	ldrh	r2, [r3, r2]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	0011      	movs	r1, r2
 8003350:	0018      	movs	r0, r3
 8003352:	f7ff f847 	bl	80023e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003356:	e00c      	b.n	8003372 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0018      	movs	r0, r3
 800335c:	f7fc ffb2 	bl	80002c4 <HAL_UART_RxCpltCallback>
}
 8003360:	e007      	b.n	8003372 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699a      	ldr	r2, [r3, #24]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2108      	movs	r1, #8
 800336e:	430a      	orrs	r2, r1
 8003370:	619a      	str	r2, [r3, #24]
}
 8003372:	46c0      	nop			@ (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b014      	add	sp, #80	@ 0x50
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			@ (mov r8, r8)
 800337c:	fffffedf 	.word	0xfffffedf
 8003380:	fbffffff 	.word	0xfbffffff

08003384 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b094      	sub	sp, #80	@ 0x50
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800338c:	204e      	movs	r0, #78	@ 0x4e
 800338e:	183b      	adds	r3, r7, r0
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	2160      	movs	r1, #96	@ 0x60
 8003394:	5a52      	ldrh	r2, [r2, r1]
 8003396:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	228c      	movs	r2, #140	@ 0x8c
 800339c:	589b      	ldr	r3, [r3, r2]
 800339e:	2b22      	cmp	r3, #34	@ 0x22
 80033a0:	d000      	beq.n	80033a4 <UART_RxISR_16BIT+0x20>
 80033a2:	e0ba      	b.n	800351a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033aa:	214c      	movs	r1, #76	@ 0x4c
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	183a      	adds	r2, r7, r0
 80033ba:	881b      	ldrh	r3, [r3, #0]
 80033bc:	8812      	ldrh	r2, [r2, #0]
 80033be:	4013      	ands	r3, r2
 80033c0:	b29a      	uxth	r2, r3
 80033c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ca:	1c9a      	adds	r2, r3, #2
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	225e      	movs	r2, #94	@ 0x5e
 80033d4:	5a9b      	ldrh	r3, [r3, r2]
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b299      	uxth	r1, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	225e      	movs	r2, #94	@ 0x5e
 80033e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	225e      	movs	r2, #94	@ 0x5e
 80033e6:	5a9b      	ldrh	r3, [r3, r2]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d000      	beq.n	80033f0 <UART_RxISR_16BIT+0x6c>
 80033ee:	e09c      	b.n	800352a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	623b      	str	r3, [r7, #32]
  return(result);
 80033f6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80033fa:	2301      	movs	r3, #1
 80033fc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4948      	ldr	r1, [pc, #288]	@ (8003534 <UART_RxISR_16BIT+0x1b0>)
 8003412:	400a      	ands	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003418:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800342a:	643b      	str	r3, [r7, #64]	@ 0x40
 800342c:	2301      	movs	r3, #1
 800342e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2101      	movs	r1, #1
 8003444:	438a      	bics	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800344a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	228c      	movs	r2, #140	@ 0x8c
 8003458:	2120      	movs	r1, #32
 800345a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
 800346e:	2380      	movs	r3, #128	@ 0x80
 8003470:	041b      	lsls	r3, r3, #16
 8003472:	4013      	ands	r3, r2
 8003474:	d018      	beq.n	80034a8 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003476:	f3ef 8310 	mrs	r3, PRIMASK
 800347a:	617b      	str	r3, [r7, #20]
  return(result);
 800347c:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800347e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003480:	2301      	movs	r3, #1
 8003482:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f383 8810 	msr	PRIMASK, r3
}
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4928      	ldr	r1, [pc, #160]	@ (8003538 <UART_RxISR_16BIT+0x1b4>)
 8003498:	400a      	ands	r2, r1
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800349e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f383 8810 	msr	PRIMASK, r3
}
 80034a6:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d12f      	bne.n	8003510 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034b6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80034bc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034c0:	2301      	movs	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f383 8810 	msr	PRIMASK, r3
}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2110      	movs	r1, #16
 80034d8:	438a      	bics	r2, r1
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80034de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	f383 8810 	msr	PRIMASK, r3
}
 80034e6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	2210      	movs	r2, #16
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b10      	cmp	r3, #16
 80034f4:	d103      	bne.n	80034fe <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2210      	movs	r2, #16
 80034fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	225c      	movs	r2, #92	@ 0x5c
 8003502:	5a9a      	ldrh	r2, [r3, r2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	0011      	movs	r1, r2
 8003508:	0018      	movs	r0, r3
 800350a:	f7fe ff6b 	bl	80023e4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800350e:	e00c      	b.n	800352a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	0018      	movs	r0, r3
 8003514:	f7fc fed6 	bl	80002c4 <HAL_UART_RxCpltCallback>
}
 8003518:	e007      	b.n	800352a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	699a      	ldr	r2, [r3, #24]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2108      	movs	r1, #8
 8003526:	430a      	orrs	r2, r1
 8003528:	619a      	str	r2, [r3, #24]
}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	46bd      	mov	sp, r7
 800352e:	b014      	add	sp, #80	@ 0x50
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	fffffedf 	.word	0xfffffedf
 8003538:	fbffffff 	.word	0xfbffffff

0800353c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0a0      	sub	sp, #128	@ 0x80
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003544:	237a      	movs	r3, #122	@ 0x7a
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	2160      	movs	r1, #96	@ 0x60
 800354c:	5a52      	ldrh	r2, [r2, r1]
 800354e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	69db      	ldr	r3, [r3, #28]
 8003556:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	228c      	movs	r2, #140	@ 0x8c
 800356c:	589b      	ldr	r3, [r3, r2]
 800356e:	2b22      	cmp	r3, #34	@ 0x22
 8003570:	d000      	beq.n	8003574 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003572:	e165      	b.n	8003840 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003574:	236e      	movs	r3, #110	@ 0x6e
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	2168      	movs	r1, #104	@ 0x68
 800357c:	5a52      	ldrh	r2, [r2, r1]
 800357e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003580:	e10c      	b.n	800379c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003588:	216c      	movs	r1, #108	@ 0x6c
 800358a:	187b      	adds	r3, r7, r1
 800358c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800358e:	187b      	adds	r3, r7, r1
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b2da      	uxtb	r2, r3
 8003594:	237a      	movs	r3, #122	@ 0x7a
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	881b      	ldrh	r3, [r3, #0]
 800359a:	b2d9      	uxtb	r1, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a0:	400a      	ands	r2, r1
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	225e      	movs	r2, #94	@ 0x5e
 80035b4:	5a9b      	ldrh	r3, [r3, r2]
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	3b01      	subs	r3, #1
 80035ba:	b299      	uxth	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	225e      	movs	r2, #94	@ 0x5e
 80035c0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80035ca:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035cc:	2207      	movs	r2, #7
 80035ce:	4013      	ands	r3, r2
 80035d0:	d049      	beq.n	8003666 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035d4:	2201      	movs	r2, #1
 80035d6:	4013      	ands	r3, r2
 80035d8:	d010      	beq.n	80035fc <UART_RxISR_8BIT_FIFOEN+0xc0>
 80035da:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	4013      	ands	r3, r2
 80035e2:	d00b      	beq.n	80035fc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2201      	movs	r2, #1
 80035ea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2290      	movs	r2, #144	@ 0x90
 80035f0:	589b      	ldr	r3, [r3, r2]
 80035f2:	2201      	movs	r2, #1
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2190      	movs	r1, #144	@ 0x90
 80035fa:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80035fe:	2202      	movs	r2, #2
 8003600:	4013      	ands	r3, r2
 8003602:	d00f      	beq.n	8003624 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003604:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003606:	2201      	movs	r2, #1
 8003608:	4013      	ands	r3, r2
 800360a:	d00b      	beq.n	8003624 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2202      	movs	r2, #2
 8003612:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2290      	movs	r2, #144	@ 0x90
 8003618:	589b      	ldr	r3, [r3, r2]
 800361a:	2204      	movs	r2, #4
 800361c:	431a      	orrs	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2190      	movs	r1, #144	@ 0x90
 8003622:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003624:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003626:	2204      	movs	r2, #4
 8003628:	4013      	ands	r3, r2
 800362a:	d00f      	beq.n	800364c <UART_RxISR_8BIT_FIFOEN+0x110>
 800362c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800362e:	2201      	movs	r2, #1
 8003630:	4013      	ands	r3, r2
 8003632:	d00b      	beq.n	800364c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2204      	movs	r2, #4
 800363a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2290      	movs	r2, #144	@ 0x90
 8003640:	589b      	ldr	r3, [r3, r2]
 8003642:	2202      	movs	r2, #2
 8003644:	431a      	orrs	r2, r3
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2190      	movs	r1, #144	@ 0x90
 800364a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2290      	movs	r2, #144	@ 0x90
 8003650:	589b      	ldr	r3, [r3, r2]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d007      	beq.n	8003666 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	0018      	movs	r0, r3
 800365a:	f7fe febb 	bl	80023d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2290      	movs	r2, #144	@ 0x90
 8003662:	2100      	movs	r1, #0
 8003664:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	225e      	movs	r2, #94	@ 0x5e
 800366a:	5a9b      	ldrh	r3, [r3, r2]
 800366c:	b29b      	uxth	r3, r3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d000      	beq.n	8003674 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003672:	e093      	b.n	800379c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003674:	f3ef 8310 	mrs	r3, PRIMASK
 8003678:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800367a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800367c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800367e:	2301      	movs	r3, #1
 8003680:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003684:	f383 8810 	msr	PRIMASK, r3
}
 8003688:	46c0      	nop			@ (mov r8, r8)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4970      	ldr	r1, [pc, #448]	@ (8003858 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8003696:	400a      	ands	r2, r1
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800369c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	f383 8810 	msr	PRIMASK, r3
}
 80036a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036a6:	f3ef 8310 	mrs	r3, PRIMASK
 80036aa:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 80036ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036ae:	667b      	str	r3, [r7, #100]	@ 0x64
 80036b0:	2301      	movs	r3, #1
 80036b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036b6:	f383 8810 	msr	PRIMASK, r3
}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4965      	ldr	r1, [pc, #404]	@ (800385c <UART_RxISR_8BIT_FIFOEN+0x320>)
 80036c8:	400a      	ands	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]
 80036cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	228c      	movs	r2, #140	@ 0x8c
 80036dc:	2120      	movs	r1, #32
 80036de:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	685a      	ldr	r2, [r3, #4]
 80036f2:	2380      	movs	r3, #128	@ 0x80
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	4013      	ands	r3, r2
 80036f8:	d018      	beq.n	800372c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036fa:	f3ef 8310 	mrs	r3, PRIMASK
 80036fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003702:	663b      	str	r3, [r7, #96]	@ 0x60
 8003704:	2301      	movs	r3, #1
 8003706:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370a:	f383 8810 	msr	PRIMASK, r3
}
 800370e:	46c0      	nop			@ (mov r8, r8)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4951      	ldr	r1, [pc, #324]	@ (8003860 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800371c:	400a      	ands	r2, r1
 800371e:	601a      	str	r2, [r3, #0]
 8003720:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003722:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003726:	f383 8810 	msr	PRIMASK, r3
}
 800372a:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003730:	2b01      	cmp	r3, #1
 8003732:	d12f      	bne.n	8003794 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2200      	movs	r2, #0
 8003738:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800373a:	f3ef 8310 	mrs	r3, PRIMASK
 800373e:	623b      	str	r3, [r7, #32]
  return(result);
 8003740:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003742:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003744:	2301      	movs	r3, #1
 8003746:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374a:	f383 8810 	msr	PRIMASK, r3
}
 800374e:	46c0      	nop			@ (mov r8, r8)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2110      	movs	r1, #16
 800375c:	438a      	bics	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003762:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003766:	f383 8810 	msr	PRIMASK, r3
}
 800376a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	2210      	movs	r2, #16
 8003774:	4013      	ands	r3, r2
 8003776:	2b10      	cmp	r3, #16
 8003778:	d103      	bne.n	8003782 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2210      	movs	r2, #16
 8003780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	225c      	movs	r2, #92	@ 0x5c
 8003786:	5a9a      	ldrh	r2, [r3, r2]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	0011      	movs	r1, r2
 800378c:	0018      	movs	r0, r3
 800378e:	f7fe fe29 	bl	80023e4 <HAL_UARTEx_RxEventCallback>
 8003792:	e003      	b.n	800379c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	0018      	movs	r0, r3
 8003798:	f7fc fd94 	bl	80002c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800379c:	236e      	movs	r3, #110	@ 0x6e
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	881b      	ldrh	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d004      	beq.n	80037b0 <UART_RxISR_8BIT_FIFOEN+0x274>
 80037a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037a8:	2220      	movs	r2, #32
 80037aa:	4013      	ands	r3, r2
 80037ac:	d000      	beq.n	80037b0 <UART_RxISR_8BIT_FIFOEN+0x274>
 80037ae:	e6e8      	b.n	8003582 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80037b0:	205a      	movs	r0, #90	@ 0x5a
 80037b2:	183b      	adds	r3, r7, r0
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	215e      	movs	r1, #94	@ 0x5e
 80037b8:	5a52      	ldrh	r2, [r2, r1]
 80037ba:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80037bc:	0001      	movs	r1, r0
 80037be:	187b      	adds	r3, r7, r1
 80037c0:	881b      	ldrh	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d044      	beq.n	8003850 <UART_RxISR_8BIT_FIFOEN+0x314>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2268      	movs	r2, #104	@ 0x68
 80037ca:	5a9b      	ldrh	r3, [r3, r2]
 80037cc:	187a      	adds	r2, r7, r1
 80037ce:	8812      	ldrh	r2, [r2, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d23d      	bcs.n	8003850 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	60bb      	str	r3, [r7, #8]
  return(result);
 80037da:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80037dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80037de:	2301      	movs	r3, #1
 80037e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	491b      	ldr	r1, [pc, #108]	@ (8003864 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80037f6:	400a      	ands	r2, r1
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a17      	ldr	r2, [pc, #92]	@ (8003868 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800380a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800380c:	f3ef 8310 	mrs	r3, PRIMASK
 8003810:	617b      	str	r3, [r7, #20]
  return(result);
 8003812:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003814:	653b      	str	r3, [r7, #80]	@ 0x50
 8003816:	2301      	movs	r3, #1
 8003818:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	f383 8810 	msr	PRIMASK, r3
}
 8003820:	46c0      	nop			@ (mov r8, r8)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2120      	movs	r1, #32
 800382e:	430a      	orrs	r2, r1
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003834:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	f383 8810 	msr	PRIMASK, r3
}
 800383c:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800383e:	e007      	b.n	8003850 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2108      	movs	r1, #8
 800384c:	430a      	orrs	r2, r1
 800384e:	619a      	str	r2, [r3, #24]
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b020      	add	sp, #128	@ 0x80
 8003856:	bd80      	pop	{r7, pc}
 8003858:	fffffeff 	.word	0xfffffeff
 800385c:	effffffe 	.word	0xeffffffe
 8003860:	fbffffff 	.word	0xfbffffff
 8003864:	efffffff 	.word	0xefffffff
 8003868:	080031cd 	.word	0x080031cd

0800386c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b0a2      	sub	sp, #136	@ 0x88
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003874:	2382      	movs	r3, #130	@ 0x82
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	2160      	movs	r1, #96	@ 0x60
 800387c:	5a52      	ldrh	r2, [r2, r1]
 800387e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	69db      	ldr	r3, [r3, #28]
 8003886:	2284      	movs	r2, #132	@ 0x84
 8003888:	18ba      	adds	r2, r7, r2
 800388a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	228c      	movs	r2, #140	@ 0x8c
 80038a0:	589b      	ldr	r3, [r3, r2]
 80038a2:	2b22      	cmp	r3, #34	@ 0x22
 80038a4:	d000      	beq.n	80038a8 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80038a6:	e16f      	b.n	8003b88 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80038a8:	2376      	movs	r3, #118	@ 0x76
 80038aa:	18fb      	adds	r3, r7, r3
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	2168      	movs	r1, #104	@ 0x68
 80038b0:	5a52      	ldrh	r2, [r2, r1]
 80038b2:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80038b4:	e114      	b.n	8003ae0 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038bc:	2174      	movs	r1, #116	@ 0x74
 80038be:	187b      	adds	r3, r7, r1
 80038c0:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038c6:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80038c8:	187b      	adds	r3, r7, r1
 80038ca:	2282      	movs	r2, #130	@ 0x82
 80038cc:	18ba      	adds	r2, r7, r2
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	8812      	ldrh	r2, [r2, #0]
 80038d2:	4013      	ands	r3, r2
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80038d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	225e      	movs	r2, #94	@ 0x5e
 80038e8:	5a9b      	ldrh	r3, [r3, r2]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b299      	uxth	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	225e      	movs	r2, #94	@ 0x5e
 80038f4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	2184      	movs	r1, #132	@ 0x84
 80038fe:	187a      	adds	r2, r7, r1
 8003900:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003902:	187b      	adds	r3, r7, r1
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2207      	movs	r2, #7
 8003908:	4013      	ands	r3, r2
 800390a:	d04e      	beq.n	80039aa <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800390c:	187b      	adds	r3, r7, r1
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2201      	movs	r2, #1
 8003912:	4013      	ands	r3, r2
 8003914:	d010      	beq.n	8003938 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003916:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003918:	2380      	movs	r3, #128	@ 0x80
 800391a:	005b      	lsls	r3, r3, #1
 800391c:	4013      	ands	r3, r2
 800391e:	d00b      	beq.n	8003938 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2201      	movs	r2, #1
 8003926:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2290      	movs	r2, #144	@ 0x90
 800392c:	589b      	ldr	r3, [r3, r2]
 800392e:	2201      	movs	r2, #1
 8003930:	431a      	orrs	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2190      	movs	r1, #144	@ 0x90
 8003936:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003938:	2384      	movs	r3, #132	@ 0x84
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2202      	movs	r2, #2
 8003940:	4013      	ands	r3, r2
 8003942:	d00f      	beq.n	8003964 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003944:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003946:	2201      	movs	r2, #1
 8003948:	4013      	ands	r3, r2
 800394a:	d00b      	beq.n	8003964 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2202      	movs	r2, #2
 8003952:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2290      	movs	r2, #144	@ 0x90
 8003958:	589b      	ldr	r3, [r3, r2]
 800395a:	2204      	movs	r2, #4
 800395c:	431a      	orrs	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2190      	movs	r1, #144	@ 0x90
 8003962:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003964:	2384      	movs	r3, #132	@ 0x84
 8003966:	18fb      	adds	r3, r7, r3
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2204      	movs	r2, #4
 800396c:	4013      	ands	r3, r2
 800396e:	d00f      	beq.n	8003990 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003970:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003972:	2201      	movs	r2, #1
 8003974:	4013      	ands	r3, r2
 8003976:	d00b      	beq.n	8003990 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2204      	movs	r2, #4
 800397e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2290      	movs	r2, #144	@ 0x90
 8003984:	589b      	ldr	r3, [r3, r2]
 8003986:	2202      	movs	r2, #2
 8003988:	431a      	orrs	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2190      	movs	r1, #144	@ 0x90
 800398e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2290      	movs	r2, #144	@ 0x90
 8003994:	589b      	ldr	r3, [r3, r2]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	0018      	movs	r0, r3
 800399e:	f7fe fd19 	bl	80023d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2290      	movs	r2, #144	@ 0x90
 80039a6:	2100      	movs	r1, #0
 80039a8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	225e      	movs	r2, #94	@ 0x5e
 80039ae:	5a9b      	ldrh	r3, [r3, r2]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d000      	beq.n	80039b8 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80039b6:	e093      	b.n	8003ae0 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039b8:	f3ef 8310 	mrs	r3, PRIMASK
 80039bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80039be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80039c2:	2301      	movs	r3, #1
 80039c4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039c8:	f383 8810 	msr	PRIMASK, r3
}
 80039cc:	46c0      	nop			@ (mov r8, r8)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4971      	ldr	r1, [pc, #452]	@ (8003ba0 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80039da:	400a      	ands	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039e0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ea:	f3ef 8310 	mrs	r3, PRIMASK
 80039ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80039f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80039f4:	2301      	movs	r3, #1
 80039f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	689a      	ldr	r2, [r3, #8]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4966      	ldr	r1, [pc, #408]	@ (8003ba4 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003a12:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	228c      	movs	r2, #140	@ 0x8c
 8003a20:	2120      	movs	r1, #32
 8003a22:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2200      	movs	r2, #0
 8003a28:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	2380      	movs	r3, #128	@ 0x80
 8003a38:	041b      	lsls	r3, r3, #16
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d018      	beq.n	8003a70 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a42:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a48:	2301      	movs	r3, #1
 8003a4a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a4e:	f383 8810 	msr	PRIMASK, r3
}
 8003a52:	46c0      	nop			@ (mov r8, r8)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4952      	ldr	r1, [pc, #328]	@ (8003ba8 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003a60:	400a      	ands	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]
 8003a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a6a:	f383 8810 	msr	PRIMASK, r3
}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d12f      	bne.n	8003ad8 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a86:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a88:	2301      	movs	r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	f383 8810 	msr	PRIMASK, r3
}
 8003a92:	46c0      	nop			@ (mov r8, r8)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2110      	movs	r1, #16
 8003aa0:	438a      	bics	r2, r1
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aaa:	f383 8810 	msr	PRIMASK, r3
}
 8003aae:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	2210      	movs	r2, #16
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b10      	cmp	r3, #16
 8003abc:	d103      	bne.n	8003ac6 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	225c      	movs	r2, #92	@ 0x5c
 8003aca:	5a9a      	ldrh	r2, [r3, r2]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	0011      	movs	r1, r2
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f7fe fc87 	bl	80023e4 <HAL_UARTEx_RxEventCallback>
 8003ad6:	e003      	b.n	8003ae0 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	0018      	movs	r0, r3
 8003adc:	f7fc fbf2 	bl	80002c4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003ae0:	2376      	movs	r3, #118	@ 0x76
 8003ae2:	18fb      	adds	r3, r7, r3
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003aea:	2384      	movs	r3, #132	@ 0x84
 8003aec:	18fb      	adds	r3, r7, r3
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2220      	movs	r2, #32
 8003af2:	4013      	ands	r3, r2
 8003af4:	d000      	beq.n	8003af8 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003af6:	e6de      	b.n	80038b6 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003af8:	205e      	movs	r0, #94	@ 0x5e
 8003afa:	183b      	adds	r3, r7, r0
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	215e      	movs	r1, #94	@ 0x5e
 8003b00:	5a52      	ldrh	r2, [r2, r1]
 8003b02:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003b04:	0001      	movs	r1, r0
 8003b06:	187b      	adds	r3, r7, r1
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d044      	beq.n	8003b98 <UART_RxISR_16BIT_FIFOEN+0x32c>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2268      	movs	r2, #104	@ 0x68
 8003b12:	5a9b      	ldrh	r3, [r3, r2]
 8003b14:	187a      	adds	r2, r7, r1
 8003b16:	8812      	ldrh	r2, [r2, #0]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d23d      	bcs.n	8003b98 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b20:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b22:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003b24:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b26:	2301      	movs	r3, #1
 8003b28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f383 8810 	msr	PRIMASK, r3
}
 8003b30:	46c0      	nop			@ (mov r8, r8)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689a      	ldr	r2, [r3, #8]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	491b      	ldr	r1, [pc, #108]	@ (8003bac <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003b3e:	400a      	ands	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
 8003b42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003b44:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f383 8810 	msr	PRIMASK, r3
}
 8003b4c:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a17      	ldr	r2, [pc, #92]	@ (8003bb0 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003b52:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b54:	f3ef 8310 	mrs	r3, PRIMASK
 8003b58:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b5a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b5e:	2301      	movs	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f383 8810 	msr	PRIMASK, r3
}
 8003b68:	46c0      	nop			@ (mov r8, r8)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2120      	movs	r1, #32
 8003b76:	430a      	orrs	r2, r1
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	f383 8810 	msr	PRIMASK, r3
}
 8003b84:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003b86:	e007      	b.n	8003b98 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	699a      	ldr	r2, [r3, #24]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2108      	movs	r1, #8
 8003b94:	430a      	orrs	r2, r1
 8003b96:	619a      	str	r2, [r3, #24]
}
 8003b98:	46c0      	nop			@ (mov r8, r8)
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	b022      	add	sp, #136	@ 0x88
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	fffffeff 	.word	0xfffffeff
 8003ba4:	effffffe 	.word	0xeffffffe
 8003ba8:	fbffffff 	.word	0xfbffffff
 8003bac:	efffffff 	.word	0xefffffff
 8003bb0:	08003385 	.word	0x08003385

08003bb4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bbc:	46c0      	nop			@ (mov r8, r8)
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	b002      	add	sp, #8
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003bcc:	46c0      	nop			@ (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b002      	add	sp, #8
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <std>:
 8003be4:	2300      	movs	r3, #0
 8003be6:	b510      	push	{r4, lr}
 8003be8:	0004      	movs	r4, r0
 8003bea:	6003      	str	r3, [r0, #0]
 8003bec:	6043      	str	r3, [r0, #4]
 8003bee:	6083      	str	r3, [r0, #8]
 8003bf0:	8181      	strh	r1, [r0, #12]
 8003bf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8003bf4:	81c2      	strh	r2, [r0, #14]
 8003bf6:	6103      	str	r3, [r0, #16]
 8003bf8:	6143      	str	r3, [r0, #20]
 8003bfa:	6183      	str	r3, [r0, #24]
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	2208      	movs	r2, #8
 8003c00:	305c      	adds	r0, #92	@ 0x5c
 8003c02:	f000 f9ff 	bl	8004004 <memset>
 8003c06:	4b0b      	ldr	r3, [pc, #44]	@ (8003c34 <std+0x50>)
 8003c08:	6224      	str	r4, [r4, #32]
 8003c0a:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003c38 <std+0x54>)
 8003c0e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c10:	4b0a      	ldr	r3, [pc, #40]	@ (8003c3c <std+0x58>)
 8003c12:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c14:	4b0a      	ldr	r3, [pc, #40]	@ (8003c40 <std+0x5c>)
 8003c16:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c18:	4b0a      	ldr	r3, [pc, #40]	@ (8003c44 <std+0x60>)
 8003c1a:	429c      	cmp	r4, r3
 8003c1c:	d005      	beq.n	8003c2a <std+0x46>
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <std+0x64>)
 8003c20:	429c      	cmp	r4, r3
 8003c22:	d002      	beq.n	8003c2a <std+0x46>
 8003c24:	4b09      	ldr	r3, [pc, #36]	@ (8003c4c <std+0x68>)
 8003c26:	429c      	cmp	r4, r3
 8003c28:	d103      	bne.n	8003c32 <std+0x4e>
 8003c2a:	0020      	movs	r0, r4
 8003c2c:	3058      	adds	r0, #88	@ 0x58
 8003c2e:	f000 fa69 	bl	8004104 <__retarget_lock_init_recursive>
 8003c32:	bd10      	pop	{r4, pc}
 8003c34:	08003e2d 	.word	0x08003e2d
 8003c38:	08003e55 	.word	0x08003e55
 8003c3c:	08003e8d 	.word	0x08003e8d
 8003c40:	08003eb9 	.word	0x08003eb9
 8003c44:	20000348 	.word	0x20000348
 8003c48:	200003b0 	.word	0x200003b0
 8003c4c:	20000418 	.word	0x20000418

08003c50 <stdio_exit_handler>:
 8003c50:	b510      	push	{r4, lr}
 8003c52:	4a03      	ldr	r2, [pc, #12]	@ (8003c60 <stdio_exit_handler+0x10>)
 8003c54:	4903      	ldr	r1, [pc, #12]	@ (8003c64 <stdio_exit_handler+0x14>)
 8003c56:	4804      	ldr	r0, [pc, #16]	@ (8003c68 <stdio_exit_handler+0x18>)
 8003c58:	f000 f86c 	bl	8003d34 <_fwalk_sglue>
 8003c5c:	bd10      	pop	{r4, pc}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	2000000c 	.word	0x2000000c
 8003c64:	08004411 	.word	0x08004411
 8003c68:	2000001c 	.word	0x2000001c

08003c6c <cleanup_stdio>:
 8003c6c:	6841      	ldr	r1, [r0, #4]
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003c9c <cleanup_stdio+0x30>)
 8003c70:	b510      	push	{r4, lr}
 8003c72:	0004      	movs	r4, r0
 8003c74:	4299      	cmp	r1, r3
 8003c76:	d001      	beq.n	8003c7c <cleanup_stdio+0x10>
 8003c78:	f000 fbca 	bl	8004410 <_fflush_r>
 8003c7c:	68a1      	ldr	r1, [r4, #8]
 8003c7e:	4b08      	ldr	r3, [pc, #32]	@ (8003ca0 <cleanup_stdio+0x34>)
 8003c80:	4299      	cmp	r1, r3
 8003c82:	d002      	beq.n	8003c8a <cleanup_stdio+0x1e>
 8003c84:	0020      	movs	r0, r4
 8003c86:	f000 fbc3 	bl	8004410 <_fflush_r>
 8003c8a:	68e1      	ldr	r1, [r4, #12]
 8003c8c:	4b05      	ldr	r3, [pc, #20]	@ (8003ca4 <cleanup_stdio+0x38>)
 8003c8e:	4299      	cmp	r1, r3
 8003c90:	d002      	beq.n	8003c98 <cleanup_stdio+0x2c>
 8003c92:	0020      	movs	r0, r4
 8003c94:	f000 fbbc 	bl	8004410 <_fflush_r>
 8003c98:	bd10      	pop	{r4, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	20000348 	.word	0x20000348
 8003ca0:	200003b0 	.word	0x200003b0
 8003ca4:	20000418 	.word	0x20000418

08003ca8 <global_stdio_init.part.0>:
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	4b09      	ldr	r3, [pc, #36]	@ (8003cd0 <global_stdio_init.part.0+0x28>)
 8003cac:	4a09      	ldr	r2, [pc, #36]	@ (8003cd4 <global_stdio_init.part.0+0x2c>)
 8003cae:	2104      	movs	r1, #4
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	4809      	ldr	r0, [pc, #36]	@ (8003cd8 <global_stdio_init.part.0+0x30>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f7ff ff95 	bl	8003be4 <std>
 8003cba:	2201      	movs	r2, #1
 8003cbc:	2109      	movs	r1, #9
 8003cbe:	4807      	ldr	r0, [pc, #28]	@ (8003cdc <global_stdio_init.part.0+0x34>)
 8003cc0:	f7ff ff90 	bl	8003be4 <std>
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	2112      	movs	r1, #18
 8003cc8:	4805      	ldr	r0, [pc, #20]	@ (8003ce0 <global_stdio_init.part.0+0x38>)
 8003cca:	f7ff ff8b 	bl	8003be4 <std>
 8003cce:	bd10      	pop	{r4, pc}
 8003cd0:	20000480 	.word	0x20000480
 8003cd4:	08003c51 	.word	0x08003c51
 8003cd8:	20000348 	.word	0x20000348
 8003cdc:	200003b0 	.word	0x200003b0
 8003ce0:	20000418 	.word	0x20000418

08003ce4 <__sfp_lock_acquire>:
 8003ce4:	b510      	push	{r4, lr}
 8003ce6:	4802      	ldr	r0, [pc, #8]	@ (8003cf0 <__sfp_lock_acquire+0xc>)
 8003ce8:	f000 fa0d 	bl	8004106 <__retarget_lock_acquire_recursive>
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	46c0      	nop			@ (mov r8, r8)
 8003cf0:	20000489 	.word	0x20000489

08003cf4 <__sfp_lock_release>:
 8003cf4:	b510      	push	{r4, lr}
 8003cf6:	4802      	ldr	r0, [pc, #8]	@ (8003d00 <__sfp_lock_release+0xc>)
 8003cf8:	f000 fa06 	bl	8004108 <__retarget_lock_release_recursive>
 8003cfc:	bd10      	pop	{r4, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	20000489 	.word	0x20000489

08003d04 <__sinit>:
 8003d04:	b510      	push	{r4, lr}
 8003d06:	0004      	movs	r4, r0
 8003d08:	f7ff ffec 	bl	8003ce4 <__sfp_lock_acquire>
 8003d0c:	6a23      	ldr	r3, [r4, #32]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d002      	beq.n	8003d18 <__sinit+0x14>
 8003d12:	f7ff ffef 	bl	8003cf4 <__sfp_lock_release>
 8003d16:	bd10      	pop	{r4, pc}
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <__sinit+0x28>)
 8003d1a:	6223      	str	r3, [r4, #32]
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <__sinit+0x2c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f6      	bne.n	8003d12 <__sinit+0xe>
 8003d24:	f7ff ffc0 	bl	8003ca8 <global_stdio_init.part.0>
 8003d28:	e7f3      	b.n	8003d12 <__sinit+0xe>
 8003d2a:	46c0      	nop			@ (mov r8, r8)
 8003d2c:	08003c6d 	.word	0x08003c6d
 8003d30:	20000480 	.word	0x20000480

08003d34 <_fwalk_sglue>:
 8003d34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d36:	0014      	movs	r4, r2
 8003d38:	2600      	movs	r6, #0
 8003d3a:	9000      	str	r0, [sp, #0]
 8003d3c:	9101      	str	r1, [sp, #4]
 8003d3e:	68a5      	ldr	r5, [r4, #8]
 8003d40:	6867      	ldr	r7, [r4, #4]
 8003d42:	3f01      	subs	r7, #1
 8003d44:	d504      	bpl.n	8003d50 <_fwalk_sglue+0x1c>
 8003d46:	6824      	ldr	r4, [r4, #0]
 8003d48:	2c00      	cmp	r4, #0
 8003d4a:	d1f8      	bne.n	8003d3e <_fwalk_sglue+0xa>
 8003d4c:	0030      	movs	r0, r6
 8003d4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003d50:	89ab      	ldrh	r3, [r5, #12]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d908      	bls.n	8003d68 <_fwalk_sglue+0x34>
 8003d56:	220e      	movs	r2, #14
 8003d58:	5eab      	ldrsh	r3, [r5, r2]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	d004      	beq.n	8003d68 <_fwalk_sglue+0x34>
 8003d5e:	0029      	movs	r1, r5
 8003d60:	9800      	ldr	r0, [sp, #0]
 8003d62:	9b01      	ldr	r3, [sp, #4]
 8003d64:	4798      	blx	r3
 8003d66:	4306      	orrs	r6, r0
 8003d68:	3568      	adds	r5, #104	@ 0x68
 8003d6a:	e7ea      	b.n	8003d42 <_fwalk_sglue+0xe>

08003d6c <_puts_r>:
 8003d6c:	6a03      	ldr	r3, [r0, #32]
 8003d6e:	b570      	push	{r4, r5, r6, lr}
 8003d70:	0005      	movs	r5, r0
 8003d72:	000e      	movs	r6, r1
 8003d74:	6884      	ldr	r4, [r0, #8]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <_puts_r+0x12>
 8003d7a:	f7ff ffc3 	bl	8003d04 <__sinit>
 8003d7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d80:	07db      	lsls	r3, r3, #31
 8003d82:	d405      	bmi.n	8003d90 <_puts_r+0x24>
 8003d84:	89a3      	ldrh	r3, [r4, #12]
 8003d86:	059b      	lsls	r3, r3, #22
 8003d88:	d402      	bmi.n	8003d90 <_puts_r+0x24>
 8003d8a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d8c:	f000 f9bb 	bl	8004106 <__retarget_lock_acquire_recursive>
 8003d90:	89a3      	ldrh	r3, [r4, #12]
 8003d92:	071b      	lsls	r3, r3, #28
 8003d94:	d502      	bpl.n	8003d9c <_puts_r+0x30>
 8003d96:	6923      	ldr	r3, [r4, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d11f      	bne.n	8003ddc <_puts_r+0x70>
 8003d9c:	0021      	movs	r1, r4
 8003d9e:	0028      	movs	r0, r5
 8003da0:	f000 f8d2 	bl	8003f48 <__swsetup_r>
 8003da4:	2800      	cmp	r0, #0
 8003da6:	d019      	beq.n	8003ddc <_puts_r+0x70>
 8003da8:	2501      	movs	r5, #1
 8003daa:	426d      	negs	r5, r5
 8003dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dae:	07db      	lsls	r3, r3, #31
 8003db0:	d405      	bmi.n	8003dbe <_puts_r+0x52>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	059b      	lsls	r3, r3, #22
 8003db6:	d402      	bmi.n	8003dbe <_puts_r+0x52>
 8003db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dba:	f000 f9a5 	bl	8004108 <__retarget_lock_release_recursive>
 8003dbe:	0028      	movs	r0, r5
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}
 8003dc2:	3601      	adds	r6, #1
 8003dc4:	60a3      	str	r3, [r4, #8]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	da04      	bge.n	8003dd4 <_puts_r+0x68>
 8003dca:	69a2      	ldr	r2, [r4, #24]
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	dc16      	bgt.n	8003dfe <_puts_r+0x92>
 8003dd0:	290a      	cmp	r1, #10
 8003dd2:	d014      	beq.n	8003dfe <_puts_r+0x92>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	6022      	str	r2, [r4, #0]
 8003dda:	7019      	strb	r1, [r3, #0]
 8003ddc:	68a3      	ldr	r3, [r4, #8]
 8003dde:	7831      	ldrb	r1, [r6, #0]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	2900      	cmp	r1, #0
 8003de4:	d1ed      	bne.n	8003dc2 <_puts_r+0x56>
 8003de6:	60a3      	str	r3, [r4, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	da0f      	bge.n	8003e0c <_puts_r+0xa0>
 8003dec:	0022      	movs	r2, r4
 8003dee:	0028      	movs	r0, r5
 8003df0:	310a      	adds	r1, #10
 8003df2:	f000 f867 	bl	8003ec4 <__swbuf_r>
 8003df6:	3001      	adds	r0, #1
 8003df8:	d0d6      	beq.n	8003da8 <_puts_r+0x3c>
 8003dfa:	250a      	movs	r5, #10
 8003dfc:	e7d6      	b.n	8003dac <_puts_r+0x40>
 8003dfe:	0022      	movs	r2, r4
 8003e00:	0028      	movs	r0, r5
 8003e02:	f000 f85f 	bl	8003ec4 <__swbuf_r>
 8003e06:	3001      	adds	r0, #1
 8003e08:	d1e8      	bne.n	8003ddc <_puts_r+0x70>
 8003e0a:	e7cd      	b.n	8003da8 <_puts_r+0x3c>
 8003e0c:	6823      	ldr	r3, [r4, #0]
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	6022      	str	r2, [r4, #0]
 8003e12:	220a      	movs	r2, #10
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e7f0      	b.n	8003dfa <_puts_r+0x8e>

08003e18 <puts>:
 8003e18:	b510      	push	{r4, lr}
 8003e1a:	4b03      	ldr	r3, [pc, #12]	@ (8003e28 <puts+0x10>)
 8003e1c:	0001      	movs	r1, r0
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	f7ff ffa4 	bl	8003d6c <_puts_r>
 8003e24:	bd10      	pop	{r4, pc}
 8003e26:	46c0      	nop			@ (mov r8, r8)
 8003e28:	20000018 	.word	0x20000018

08003e2c <__sread>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	000c      	movs	r4, r1
 8003e30:	250e      	movs	r5, #14
 8003e32:	5f49      	ldrsh	r1, [r1, r5]
 8003e34:	f000 f914 	bl	8004060 <_read_r>
 8003e38:	2800      	cmp	r0, #0
 8003e3a:	db03      	blt.n	8003e44 <__sread+0x18>
 8003e3c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8003e3e:	181b      	adds	r3, r3, r0
 8003e40:	6563      	str	r3, [r4, #84]	@ 0x54
 8003e42:	bd70      	pop	{r4, r5, r6, pc}
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	4a02      	ldr	r2, [pc, #8]	@ (8003e50 <__sread+0x24>)
 8003e48:	4013      	ands	r3, r2
 8003e4a:	81a3      	strh	r3, [r4, #12]
 8003e4c:	e7f9      	b.n	8003e42 <__sread+0x16>
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	ffffefff 	.word	0xffffefff

08003e54 <__swrite>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	001f      	movs	r7, r3
 8003e58:	898b      	ldrh	r3, [r1, #12]
 8003e5a:	0005      	movs	r5, r0
 8003e5c:	000c      	movs	r4, r1
 8003e5e:	0016      	movs	r6, r2
 8003e60:	05db      	lsls	r3, r3, #23
 8003e62:	d505      	bpl.n	8003e70 <__swrite+0x1c>
 8003e64:	230e      	movs	r3, #14
 8003e66:	5ec9      	ldrsh	r1, [r1, r3]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2302      	movs	r3, #2
 8003e6c:	f000 f8e4 	bl	8004038 <_lseek_r>
 8003e70:	89a3      	ldrh	r3, [r4, #12]
 8003e72:	4a05      	ldr	r2, [pc, #20]	@ (8003e88 <__swrite+0x34>)
 8003e74:	0028      	movs	r0, r5
 8003e76:	4013      	ands	r3, r2
 8003e78:	81a3      	strh	r3, [r4, #12]
 8003e7a:	0032      	movs	r2, r6
 8003e7c:	230e      	movs	r3, #14
 8003e7e:	5ee1      	ldrsh	r1, [r4, r3]
 8003e80:	003b      	movs	r3, r7
 8003e82:	f000 f901 	bl	8004088 <_write_r>
 8003e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e88:	ffffefff 	.word	0xffffefff

08003e8c <__sseek>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	000c      	movs	r4, r1
 8003e90:	250e      	movs	r5, #14
 8003e92:	5f49      	ldrsh	r1, [r1, r5]
 8003e94:	f000 f8d0 	bl	8004038 <_lseek_r>
 8003e98:	89a3      	ldrh	r3, [r4, #12]
 8003e9a:	1c42      	adds	r2, r0, #1
 8003e9c:	d103      	bne.n	8003ea6 <__sseek+0x1a>
 8003e9e:	4a05      	ldr	r2, [pc, #20]	@ (8003eb4 <__sseek+0x28>)
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	81a3      	strh	r3, [r4, #12]
 8003ea4:	bd70      	pop	{r4, r5, r6, pc}
 8003ea6:	2280      	movs	r2, #128	@ 0x80
 8003ea8:	0152      	lsls	r2, r2, #5
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	81a3      	strh	r3, [r4, #12]
 8003eae:	6560      	str	r0, [r4, #84]	@ 0x54
 8003eb0:	e7f8      	b.n	8003ea4 <__sseek+0x18>
 8003eb2:	46c0      	nop			@ (mov r8, r8)
 8003eb4:	ffffefff 	.word	0xffffefff

08003eb8 <__sclose>:
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	230e      	movs	r3, #14
 8003ebc:	5ec9      	ldrsh	r1, [r1, r3]
 8003ebe:	f000 f8a9 	bl	8004014 <_close_r>
 8003ec2:	bd10      	pop	{r4, pc}

08003ec4 <__swbuf_r>:
 8003ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ec6:	0006      	movs	r6, r0
 8003ec8:	000d      	movs	r5, r1
 8003eca:	0014      	movs	r4, r2
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d004      	beq.n	8003eda <__swbuf_r+0x16>
 8003ed0:	6a03      	ldr	r3, [r0, #32]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d101      	bne.n	8003eda <__swbuf_r+0x16>
 8003ed6:	f7ff ff15 	bl	8003d04 <__sinit>
 8003eda:	69a3      	ldr	r3, [r4, #24]
 8003edc:	60a3      	str	r3, [r4, #8]
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	071b      	lsls	r3, r3, #28
 8003ee2:	d502      	bpl.n	8003eea <__swbuf_r+0x26>
 8003ee4:	6923      	ldr	r3, [r4, #16]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d109      	bne.n	8003efe <__swbuf_r+0x3a>
 8003eea:	0021      	movs	r1, r4
 8003eec:	0030      	movs	r0, r6
 8003eee:	f000 f82b 	bl	8003f48 <__swsetup_r>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d003      	beq.n	8003efe <__swbuf_r+0x3a>
 8003ef6:	2501      	movs	r5, #1
 8003ef8:	426d      	negs	r5, r5
 8003efa:	0028      	movs	r0, r5
 8003efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003efe:	6923      	ldr	r3, [r4, #16]
 8003f00:	6820      	ldr	r0, [r4, #0]
 8003f02:	b2ef      	uxtb	r7, r5
 8003f04:	1ac0      	subs	r0, r0, r3
 8003f06:	6963      	ldr	r3, [r4, #20]
 8003f08:	b2ed      	uxtb	r5, r5
 8003f0a:	4283      	cmp	r3, r0
 8003f0c:	dc05      	bgt.n	8003f1a <__swbuf_r+0x56>
 8003f0e:	0021      	movs	r1, r4
 8003f10:	0030      	movs	r0, r6
 8003f12:	f000 fa7d 	bl	8004410 <_fflush_r>
 8003f16:	2800      	cmp	r0, #0
 8003f18:	d1ed      	bne.n	8003ef6 <__swbuf_r+0x32>
 8003f1a:	68a3      	ldr	r3, [r4, #8]
 8003f1c:	3001      	adds	r0, #1
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	60a3      	str	r3, [r4, #8]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	6022      	str	r2, [r4, #0]
 8003f28:	701f      	strb	r7, [r3, #0]
 8003f2a:	6963      	ldr	r3, [r4, #20]
 8003f2c:	4283      	cmp	r3, r0
 8003f2e:	d004      	beq.n	8003f3a <__swbuf_r+0x76>
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	07db      	lsls	r3, r3, #31
 8003f34:	d5e1      	bpl.n	8003efa <__swbuf_r+0x36>
 8003f36:	2d0a      	cmp	r5, #10
 8003f38:	d1df      	bne.n	8003efa <__swbuf_r+0x36>
 8003f3a:	0021      	movs	r1, r4
 8003f3c:	0030      	movs	r0, r6
 8003f3e:	f000 fa67 	bl	8004410 <_fflush_r>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	d0d9      	beq.n	8003efa <__swbuf_r+0x36>
 8003f46:	e7d6      	b.n	8003ef6 <__swbuf_r+0x32>

08003f48 <__swsetup_r>:
 8003f48:	4b2d      	ldr	r3, [pc, #180]	@ (8004000 <__swsetup_r+0xb8>)
 8003f4a:	b570      	push	{r4, r5, r6, lr}
 8003f4c:	0005      	movs	r5, r0
 8003f4e:	6818      	ldr	r0, [r3, #0]
 8003f50:	000c      	movs	r4, r1
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d004      	beq.n	8003f60 <__swsetup_r+0x18>
 8003f56:	6a03      	ldr	r3, [r0, #32]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <__swsetup_r+0x18>
 8003f5c:	f7ff fed2 	bl	8003d04 <__sinit>
 8003f60:	230c      	movs	r3, #12
 8003f62:	5ee2      	ldrsh	r2, [r4, r3]
 8003f64:	0713      	lsls	r3, r2, #28
 8003f66:	d423      	bmi.n	8003fb0 <__swsetup_r+0x68>
 8003f68:	06d3      	lsls	r3, r2, #27
 8003f6a:	d407      	bmi.n	8003f7c <__swsetup_r+0x34>
 8003f6c:	2309      	movs	r3, #9
 8003f6e:	602b      	str	r3, [r5, #0]
 8003f70:	2340      	movs	r3, #64	@ 0x40
 8003f72:	2001      	movs	r0, #1
 8003f74:	4313      	orrs	r3, r2
 8003f76:	81a3      	strh	r3, [r4, #12]
 8003f78:	4240      	negs	r0, r0
 8003f7a:	e03a      	b.n	8003ff2 <__swsetup_r+0xaa>
 8003f7c:	0752      	lsls	r2, r2, #29
 8003f7e:	d513      	bpl.n	8003fa8 <__swsetup_r+0x60>
 8003f80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d008      	beq.n	8003f98 <__swsetup_r+0x50>
 8003f86:	0023      	movs	r3, r4
 8003f88:	3344      	adds	r3, #68	@ 0x44
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	d002      	beq.n	8003f94 <__swsetup_r+0x4c>
 8003f8e:	0028      	movs	r0, r5
 8003f90:	f000 f8bc 	bl	800410c <_free_r>
 8003f94:	2300      	movs	r3, #0
 8003f96:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f98:	2224      	movs	r2, #36	@ 0x24
 8003f9a:	89a3      	ldrh	r3, [r4, #12]
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	81a3      	strh	r3, [r4, #12]
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	6063      	str	r3, [r4, #4]
 8003fa4:	6923      	ldr	r3, [r4, #16]
 8003fa6:	6023      	str	r3, [r4, #0]
 8003fa8:	2308      	movs	r3, #8
 8003faa:	89a2      	ldrh	r2, [r4, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	81a3      	strh	r3, [r4, #12]
 8003fb0:	6923      	ldr	r3, [r4, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <__swsetup_r+0x86>
 8003fb6:	21a0      	movs	r1, #160	@ 0xa0
 8003fb8:	2280      	movs	r2, #128	@ 0x80
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	0089      	lsls	r1, r1, #2
 8003fbe:	0092      	lsls	r2, r2, #2
 8003fc0:	400b      	ands	r3, r1
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d003      	beq.n	8003fce <__swsetup_r+0x86>
 8003fc6:	0021      	movs	r1, r4
 8003fc8:	0028      	movs	r0, r5
 8003fca:	f000 fa77 	bl	80044bc <__smakebuf_r>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	5ee2      	ldrsh	r2, [r4, r3]
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	0013      	movs	r3, r2
 8003fd6:	400b      	ands	r3, r1
 8003fd8:	420a      	tst	r2, r1
 8003fda:	d00b      	beq.n	8003ff4 <__swsetup_r+0xac>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60a3      	str	r3, [r4, #8]
 8003fe0:	6963      	ldr	r3, [r4, #20]
 8003fe2:	425b      	negs	r3, r3
 8003fe4:	61a3      	str	r3, [r4, #24]
 8003fe6:	2000      	movs	r0, #0
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	4283      	cmp	r3, r0
 8003fec:	d101      	bne.n	8003ff2 <__swsetup_r+0xaa>
 8003fee:	0613      	lsls	r3, r2, #24
 8003ff0:	d4be      	bmi.n	8003f70 <__swsetup_r+0x28>
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	0791      	lsls	r1, r2, #30
 8003ff6:	d400      	bmi.n	8003ffa <__swsetup_r+0xb2>
 8003ff8:	6963      	ldr	r3, [r4, #20]
 8003ffa:	60a3      	str	r3, [r4, #8]
 8003ffc:	e7f3      	b.n	8003fe6 <__swsetup_r+0x9e>
 8003ffe:	46c0      	nop			@ (mov r8, r8)
 8004000:	20000018 	.word	0x20000018

08004004 <memset>:
 8004004:	0003      	movs	r3, r0
 8004006:	1882      	adds	r2, r0, r2
 8004008:	4293      	cmp	r3, r2
 800400a:	d100      	bne.n	800400e <memset+0xa>
 800400c:	4770      	bx	lr
 800400e:	7019      	strb	r1, [r3, #0]
 8004010:	3301      	adds	r3, #1
 8004012:	e7f9      	b.n	8004008 <memset+0x4>

08004014 <_close_r>:
 8004014:	2300      	movs	r3, #0
 8004016:	b570      	push	{r4, r5, r6, lr}
 8004018:	4d06      	ldr	r5, [pc, #24]	@ (8004034 <_close_r+0x20>)
 800401a:	0004      	movs	r4, r0
 800401c:	0008      	movs	r0, r1
 800401e:	602b      	str	r3, [r5, #0]
 8004020:	f7fc fc11 	bl	8000846 <_close>
 8004024:	1c43      	adds	r3, r0, #1
 8004026:	d103      	bne.n	8004030 <_close_r+0x1c>
 8004028:	682b      	ldr	r3, [r5, #0]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d000      	beq.n	8004030 <_close_r+0x1c>
 800402e:	6023      	str	r3, [r4, #0]
 8004030:	bd70      	pop	{r4, r5, r6, pc}
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	20000484 	.word	0x20000484

08004038 <_lseek_r>:
 8004038:	b570      	push	{r4, r5, r6, lr}
 800403a:	0004      	movs	r4, r0
 800403c:	0008      	movs	r0, r1
 800403e:	0011      	movs	r1, r2
 8004040:	001a      	movs	r2, r3
 8004042:	2300      	movs	r3, #0
 8004044:	4d05      	ldr	r5, [pc, #20]	@ (800405c <_lseek_r+0x24>)
 8004046:	602b      	str	r3, [r5, #0]
 8004048:	f7fc fc1e 	bl	8000888 <_lseek>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d103      	bne.n	8004058 <_lseek_r+0x20>
 8004050:	682b      	ldr	r3, [r5, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d000      	beq.n	8004058 <_lseek_r+0x20>
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	bd70      	pop	{r4, r5, r6, pc}
 800405a:	46c0      	nop			@ (mov r8, r8)
 800405c:	20000484 	.word	0x20000484

08004060 <_read_r>:
 8004060:	b570      	push	{r4, r5, r6, lr}
 8004062:	0004      	movs	r4, r0
 8004064:	0008      	movs	r0, r1
 8004066:	0011      	movs	r1, r2
 8004068:	001a      	movs	r2, r3
 800406a:	2300      	movs	r3, #0
 800406c:	4d05      	ldr	r5, [pc, #20]	@ (8004084 <_read_r+0x24>)
 800406e:	602b      	str	r3, [r5, #0]
 8004070:	f7fc fbb0 	bl	80007d4 <_read>
 8004074:	1c43      	adds	r3, r0, #1
 8004076:	d103      	bne.n	8004080 <_read_r+0x20>
 8004078:	682b      	ldr	r3, [r5, #0]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d000      	beq.n	8004080 <_read_r+0x20>
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	bd70      	pop	{r4, r5, r6, pc}
 8004082:	46c0      	nop			@ (mov r8, r8)
 8004084:	20000484 	.word	0x20000484

08004088 <_write_r>:
 8004088:	b570      	push	{r4, r5, r6, lr}
 800408a:	0004      	movs	r4, r0
 800408c:	0008      	movs	r0, r1
 800408e:	0011      	movs	r1, r2
 8004090:	001a      	movs	r2, r3
 8004092:	2300      	movs	r3, #0
 8004094:	4d05      	ldr	r5, [pc, #20]	@ (80040ac <_write_r+0x24>)
 8004096:	602b      	str	r3, [r5, #0]
 8004098:	f7fc fbb9 	bl	800080e <_write>
 800409c:	1c43      	adds	r3, r0, #1
 800409e:	d103      	bne.n	80040a8 <_write_r+0x20>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d000      	beq.n	80040a8 <_write_r+0x20>
 80040a6:	6023      	str	r3, [r4, #0]
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
 80040aa:	46c0      	nop			@ (mov r8, r8)
 80040ac:	20000484 	.word	0x20000484

080040b0 <__errno>:
 80040b0:	4b01      	ldr	r3, [pc, #4]	@ (80040b8 <__errno+0x8>)
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	4770      	bx	lr
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	20000018 	.word	0x20000018

080040bc <__libc_init_array>:
 80040bc:	b570      	push	{r4, r5, r6, lr}
 80040be:	2600      	movs	r6, #0
 80040c0:	4c0c      	ldr	r4, [pc, #48]	@ (80040f4 <__libc_init_array+0x38>)
 80040c2:	4d0d      	ldr	r5, [pc, #52]	@ (80040f8 <__libc_init_array+0x3c>)
 80040c4:	1b64      	subs	r4, r4, r5
 80040c6:	10a4      	asrs	r4, r4, #2
 80040c8:	42a6      	cmp	r6, r4
 80040ca:	d109      	bne.n	80040e0 <__libc_init_array+0x24>
 80040cc:	2600      	movs	r6, #0
 80040ce:	f000 fa6d 	bl	80045ac <_init>
 80040d2:	4c0a      	ldr	r4, [pc, #40]	@ (80040fc <__libc_init_array+0x40>)
 80040d4:	4d0a      	ldr	r5, [pc, #40]	@ (8004100 <__libc_init_array+0x44>)
 80040d6:	1b64      	subs	r4, r4, r5
 80040d8:	10a4      	asrs	r4, r4, #2
 80040da:	42a6      	cmp	r6, r4
 80040dc:	d105      	bne.n	80040ea <__libc_init_array+0x2e>
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	00b3      	lsls	r3, r6, #2
 80040e2:	58eb      	ldr	r3, [r5, r3]
 80040e4:	4798      	blx	r3
 80040e6:	3601      	adds	r6, #1
 80040e8:	e7ee      	b.n	80040c8 <__libc_init_array+0xc>
 80040ea:	00b3      	lsls	r3, r6, #2
 80040ec:	58eb      	ldr	r3, [r5, r3]
 80040ee:	4798      	blx	r3
 80040f0:	3601      	adds	r6, #1
 80040f2:	e7f2      	b.n	80040da <__libc_init_array+0x1e>
 80040f4:	080046d8 	.word	0x080046d8
 80040f8:	080046d8 	.word	0x080046d8
 80040fc:	080046dc 	.word	0x080046dc
 8004100:	080046d8 	.word	0x080046d8

08004104 <__retarget_lock_init_recursive>:
 8004104:	4770      	bx	lr

08004106 <__retarget_lock_acquire_recursive>:
 8004106:	4770      	bx	lr

08004108 <__retarget_lock_release_recursive>:
 8004108:	4770      	bx	lr
	...

0800410c <_free_r>:
 800410c:	b570      	push	{r4, r5, r6, lr}
 800410e:	0005      	movs	r5, r0
 8004110:	1e0c      	subs	r4, r1, #0
 8004112:	d010      	beq.n	8004136 <_free_r+0x2a>
 8004114:	3c04      	subs	r4, #4
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da00      	bge.n	800411e <_free_r+0x12>
 800411c:	18e4      	adds	r4, r4, r3
 800411e:	0028      	movs	r0, r5
 8004120:	f000 f8e0 	bl	80042e4 <__malloc_lock>
 8004124:	4a1d      	ldr	r2, [pc, #116]	@ (800419c <_free_r+0x90>)
 8004126:	6813      	ldr	r3, [r2, #0]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d105      	bne.n	8004138 <_free_r+0x2c>
 800412c:	6063      	str	r3, [r4, #4]
 800412e:	6014      	str	r4, [r2, #0]
 8004130:	0028      	movs	r0, r5
 8004132:	f000 f8df 	bl	80042f4 <__malloc_unlock>
 8004136:	bd70      	pop	{r4, r5, r6, pc}
 8004138:	42a3      	cmp	r3, r4
 800413a:	d908      	bls.n	800414e <_free_r+0x42>
 800413c:	6820      	ldr	r0, [r4, #0]
 800413e:	1821      	adds	r1, r4, r0
 8004140:	428b      	cmp	r3, r1
 8004142:	d1f3      	bne.n	800412c <_free_r+0x20>
 8004144:	6819      	ldr	r1, [r3, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	1809      	adds	r1, r1, r0
 800414a:	6021      	str	r1, [r4, #0]
 800414c:	e7ee      	b.n	800412c <_free_r+0x20>
 800414e:	001a      	movs	r2, r3
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d001      	beq.n	800415a <_free_r+0x4e>
 8004156:	42a3      	cmp	r3, r4
 8004158:	d9f9      	bls.n	800414e <_free_r+0x42>
 800415a:	6811      	ldr	r1, [r2, #0]
 800415c:	1850      	adds	r0, r2, r1
 800415e:	42a0      	cmp	r0, r4
 8004160:	d10b      	bne.n	800417a <_free_r+0x6e>
 8004162:	6820      	ldr	r0, [r4, #0]
 8004164:	1809      	adds	r1, r1, r0
 8004166:	1850      	adds	r0, r2, r1
 8004168:	6011      	str	r1, [r2, #0]
 800416a:	4283      	cmp	r3, r0
 800416c:	d1e0      	bne.n	8004130 <_free_r+0x24>
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	1841      	adds	r1, r0, r1
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	6053      	str	r3, [r2, #4]
 8004178:	e7da      	b.n	8004130 <_free_r+0x24>
 800417a:	42a0      	cmp	r0, r4
 800417c:	d902      	bls.n	8004184 <_free_r+0x78>
 800417e:	230c      	movs	r3, #12
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	e7d5      	b.n	8004130 <_free_r+0x24>
 8004184:	6820      	ldr	r0, [r4, #0]
 8004186:	1821      	adds	r1, r4, r0
 8004188:	428b      	cmp	r3, r1
 800418a:	d103      	bne.n	8004194 <_free_r+0x88>
 800418c:	6819      	ldr	r1, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	1809      	adds	r1, r1, r0
 8004192:	6021      	str	r1, [r4, #0]
 8004194:	6063      	str	r3, [r4, #4]
 8004196:	6054      	str	r4, [r2, #4]
 8004198:	e7ca      	b.n	8004130 <_free_r+0x24>
 800419a:	46c0      	nop			@ (mov r8, r8)
 800419c:	20000490 	.word	0x20000490

080041a0 <sbrk_aligned>:
 80041a0:	b570      	push	{r4, r5, r6, lr}
 80041a2:	4e0f      	ldr	r6, [pc, #60]	@ (80041e0 <sbrk_aligned+0x40>)
 80041a4:	000d      	movs	r5, r1
 80041a6:	6831      	ldr	r1, [r6, #0]
 80041a8:	0004      	movs	r4, r0
 80041aa:	2900      	cmp	r1, #0
 80041ac:	d102      	bne.n	80041b4 <sbrk_aligned+0x14>
 80041ae:	f000 f9eb 	bl	8004588 <_sbrk_r>
 80041b2:	6030      	str	r0, [r6, #0]
 80041b4:	0029      	movs	r1, r5
 80041b6:	0020      	movs	r0, r4
 80041b8:	f000 f9e6 	bl	8004588 <_sbrk_r>
 80041bc:	1c43      	adds	r3, r0, #1
 80041be:	d103      	bne.n	80041c8 <sbrk_aligned+0x28>
 80041c0:	2501      	movs	r5, #1
 80041c2:	426d      	negs	r5, r5
 80041c4:	0028      	movs	r0, r5
 80041c6:	bd70      	pop	{r4, r5, r6, pc}
 80041c8:	2303      	movs	r3, #3
 80041ca:	1cc5      	adds	r5, r0, #3
 80041cc:	439d      	bics	r5, r3
 80041ce:	42a8      	cmp	r0, r5
 80041d0:	d0f8      	beq.n	80041c4 <sbrk_aligned+0x24>
 80041d2:	1a29      	subs	r1, r5, r0
 80041d4:	0020      	movs	r0, r4
 80041d6:	f000 f9d7 	bl	8004588 <_sbrk_r>
 80041da:	3001      	adds	r0, #1
 80041dc:	d1f2      	bne.n	80041c4 <sbrk_aligned+0x24>
 80041de:	e7ef      	b.n	80041c0 <sbrk_aligned+0x20>
 80041e0:	2000048c 	.word	0x2000048c

080041e4 <_malloc_r>:
 80041e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041e6:	2203      	movs	r2, #3
 80041e8:	1ccb      	adds	r3, r1, #3
 80041ea:	4393      	bics	r3, r2
 80041ec:	3308      	adds	r3, #8
 80041ee:	0005      	movs	r5, r0
 80041f0:	001f      	movs	r7, r3
 80041f2:	2b0c      	cmp	r3, #12
 80041f4:	d234      	bcs.n	8004260 <_malloc_r+0x7c>
 80041f6:	270c      	movs	r7, #12
 80041f8:	42b9      	cmp	r1, r7
 80041fa:	d833      	bhi.n	8004264 <_malloc_r+0x80>
 80041fc:	0028      	movs	r0, r5
 80041fe:	f000 f871 	bl	80042e4 <__malloc_lock>
 8004202:	4e37      	ldr	r6, [pc, #220]	@ (80042e0 <_malloc_r+0xfc>)
 8004204:	6833      	ldr	r3, [r6, #0]
 8004206:	001c      	movs	r4, r3
 8004208:	2c00      	cmp	r4, #0
 800420a:	d12f      	bne.n	800426c <_malloc_r+0x88>
 800420c:	0039      	movs	r1, r7
 800420e:	0028      	movs	r0, r5
 8004210:	f7ff ffc6 	bl	80041a0 <sbrk_aligned>
 8004214:	0004      	movs	r4, r0
 8004216:	1c43      	adds	r3, r0, #1
 8004218:	d15f      	bne.n	80042da <_malloc_r+0xf6>
 800421a:	6834      	ldr	r4, [r6, #0]
 800421c:	9400      	str	r4, [sp, #0]
 800421e:	9b00      	ldr	r3, [sp, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d14a      	bne.n	80042ba <_malloc_r+0xd6>
 8004224:	2c00      	cmp	r4, #0
 8004226:	d052      	beq.n	80042ce <_malloc_r+0xea>
 8004228:	6823      	ldr	r3, [r4, #0]
 800422a:	0028      	movs	r0, r5
 800422c:	18e3      	adds	r3, r4, r3
 800422e:	9900      	ldr	r1, [sp, #0]
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	f000 f9a9 	bl	8004588 <_sbrk_r>
 8004236:	9b01      	ldr	r3, [sp, #4]
 8004238:	4283      	cmp	r3, r0
 800423a:	d148      	bne.n	80042ce <_malloc_r+0xea>
 800423c:	6823      	ldr	r3, [r4, #0]
 800423e:	0028      	movs	r0, r5
 8004240:	1aff      	subs	r7, r7, r3
 8004242:	0039      	movs	r1, r7
 8004244:	f7ff ffac 	bl	80041a0 <sbrk_aligned>
 8004248:	3001      	adds	r0, #1
 800424a:	d040      	beq.n	80042ce <_malloc_r+0xea>
 800424c:	6823      	ldr	r3, [r4, #0]
 800424e:	19db      	adds	r3, r3, r7
 8004250:	6023      	str	r3, [r4, #0]
 8004252:	6833      	ldr	r3, [r6, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	2a00      	cmp	r2, #0
 8004258:	d133      	bne.n	80042c2 <_malloc_r+0xde>
 800425a:	9b00      	ldr	r3, [sp, #0]
 800425c:	6033      	str	r3, [r6, #0]
 800425e:	e019      	b.n	8004294 <_malloc_r+0xb0>
 8004260:	2b00      	cmp	r3, #0
 8004262:	dac9      	bge.n	80041f8 <_malloc_r+0x14>
 8004264:	230c      	movs	r3, #12
 8004266:	602b      	str	r3, [r5, #0]
 8004268:	2000      	movs	r0, #0
 800426a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800426c:	6821      	ldr	r1, [r4, #0]
 800426e:	1bc9      	subs	r1, r1, r7
 8004270:	d420      	bmi.n	80042b4 <_malloc_r+0xd0>
 8004272:	290b      	cmp	r1, #11
 8004274:	d90a      	bls.n	800428c <_malloc_r+0xa8>
 8004276:	19e2      	adds	r2, r4, r7
 8004278:	6027      	str	r7, [r4, #0]
 800427a:	42a3      	cmp	r3, r4
 800427c:	d104      	bne.n	8004288 <_malloc_r+0xa4>
 800427e:	6032      	str	r2, [r6, #0]
 8004280:	6863      	ldr	r3, [r4, #4]
 8004282:	6011      	str	r1, [r2, #0]
 8004284:	6053      	str	r3, [r2, #4]
 8004286:	e005      	b.n	8004294 <_malloc_r+0xb0>
 8004288:	605a      	str	r2, [r3, #4]
 800428a:	e7f9      	b.n	8004280 <_malloc_r+0x9c>
 800428c:	6862      	ldr	r2, [r4, #4]
 800428e:	42a3      	cmp	r3, r4
 8004290:	d10e      	bne.n	80042b0 <_malloc_r+0xcc>
 8004292:	6032      	str	r2, [r6, #0]
 8004294:	0028      	movs	r0, r5
 8004296:	f000 f82d 	bl	80042f4 <__malloc_unlock>
 800429a:	0020      	movs	r0, r4
 800429c:	2207      	movs	r2, #7
 800429e:	300b      	adds	r0, #11
 80042a0:	1d23      	adds	r3, r4, #4
 80042a2:	4390      	bics	r0, r2
 80042a4:	1ac2      	subs	r2, r0, r3
 80042a6:	4298      	cmp	r0, r3
 80042a8:	d0df      	beq.n	800426a <_malloc_r+0x86>
 80042aa:	1a1b      	subs	r3, r3, r0
 80042ac:	50a3      	str	r3, [r4, r2]
 80042ae:	e7dc      	b.n	800426a <_malloc_r+0x86>
 80042b0:	605a      	str	r2, [r3, #4]
 80042b2:	e7ef      	b.n	8004294 <_malloc_r+0xb0>
 80042b4:	0023      	movs	r3, r4
 80042b6:	6864      	ldr	r4, [r4, #4]
 80042b8:	e7a6      	b.n	8004208 <_malloc_r+0x24>
 80042ba:	9c00      	ldr	r4, [sp, #0]
 80042bc:	6863      	ldr	r3, [r4, #4]
 80042be:	9300      	str	r3, [sp, #0]
 80042c0:	e7ad      	b.n	800421e <_malloc_r+0x3a>
 80042c2:	001a      	movs	r2, r3
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	d1fb      	bne.n	80042c2 <_malloc_r+0xde>
 80042ca:	2300      	movs	r3, #0
 80042cc:	e7da      	b.n	8004284 <_malloc_r+0xa0>
 80042ce:	230c      	movs	r3, #12
 80042d0:	0028      	movs	r0, r5
 80042d2:	602b      	str	r3, [r5, #0]
 80042d4:	f000 f80e 	bl	80042f4 <__malloc_unlock>
 80042d8:	e7c6      	b.n	8004268 <_malloc_r+0x84>
 80042da:	6007      	str	r7, [r0, #0]
 80042dc:	e7da      	b.n	8004294 <_malloc_r+0xb0>
 80042de:	46c0      	nop			@ (mov r8, r8)
 80042e0:	20000490 	.word	0x20000490

080042e4 <__malloc_lock>:
 80042e4:	b510      	push	{r4, lr}
 80042e6:	4802      	ldr	r0, [pc, #8]	@ (80042f0 <__malloc_lock+0xc>)
 80042e8:	f7ff ff0d 	bl	8004106 <__retarget_lock_acquire_recursive>
 80042ec:	bd10      	pop	{r4, pc}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	20000488 	.word	0x20000488

080042f4 <__malloc_unlock>:
 80042f4:	b510      	push	{r4, lr}
 80042f6:	4802      	ldr	r0, [pc, #8]	@ (8004300 <__malloc_unlock+0xc>)
 80042f8:	f7ff ff06 	bl	8004108 <__retarget_lock_release_recursive>
 80042fc:	bd10      	pop	{r4, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	20000488 	.word	0x20000488

08004304 <__sflush_r>:
 8004304:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004306:	220c      	movs	r2, #12
 8004308:	5e8b      	ldrsh	r3, [r1, r2]
 800430a:	0005      	movs	r5, r0
 800430c:	000c      	movs	r4, r1
 800430e:	071a      	lsls	r2, r3, #28
 8004310:	d456      	bmi.n	80043c0 <__sflush_r+0xbc>
 8004312:	684a      	ldr	r2, [r1, #4]
 8004314:	2a00      	cmp	r2, #0
 8004316:	dc02      	bgt.n	800431e <__sflush_r+0x1a>
 8004318:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800431a:	2a00      	cmp	r2, #0
 800431c:	dd4e      	ble.n	80043bc <__sflush_r+0xb8>
 800431e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004320:	2f00      	cmp	r7, #0
 8004322:	d04b      	beq.n	80043bc <__sflush_r+0xb8>
 8004324:	2200      	movs	r2, #0
 8004326:	2080      	movs	r0, #128	@ 0x80
 8004328:	682e      	ldr	r6, [r5, #0]
 800432a:	602a      	str	r2, [r5, #0]
 800432c:	001a      	movs	r2, r3
 800432e:	0140      	lsls	r0, r0, #5
 8004330:	6a21      	ldr	r1, [r4, #32]
 8004332:	4002      	ands	r2, r0
 8004334:	4203      	tst	r3, r0
 8004336:	d033      	beq.n	80043a0 <__sflush_r+0x9c>
 8004338:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800433a:	89a3      	ldrh	r3, [r4, #12]
 800433c:	075b      	lsls	r3, r3, #29
 800433e:	d506      	bpl.n	800434e <__sflush_r+0x4a>
 8004340:	6863      	ldr	r3, [r4, #4]
 8004342:	1ad2      	subs	r2, r2, r3
 8004344:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004346:	2b00      	cmp	r3, #0
 8004348:	d001      	beq.n	800434e <__sflush_r+0x4a>
 800434a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	2300      	movs	r3, #0
 8004350:	0028      	movs	r0, r5
 8004352:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004354:	6a21      	ldr	r1, [r4, #32]
 8004356:	47b8      	blx	r7
 8004358:	89a2      	ldrh	r2, [r4, #12]
 800435a:	1c43      	adds	r3, r0, #1
 800435c:	d106      	bne.n	800436c <__sflush_r+0x68>
 800435e:	6829      	ldr	r1, [r5, #0]
 8004360:	291d      	cmp	r1, #29
 8004362:	d846      	bhi.n	80043f2 <__sflush_r+0xee>
 8004364:	4b29      	ldr	r3, [pc, #164]	@ (800440c <__sflush_r+0x108>)
 8004366:	410b      	asrs	r3, r1
 8004368:	07db      	lsls	r3, r3, #31
 800436a:	d442      	bmi.n	80043f2 <__sflush_r+0xee>
 800436c:	2300      	movs	r3, #0
 800436e:	6063      	str	r3, [r4, #4]
 8004370:	6923      	ldr	r3, [r4, #16]
 8004372:	6023      	str	r3, [r4, #0]
 8004374:	04d2      	lsls	r2, r2, #19
 8004376:	d505      	bpl.n	8004384 <__sflush_r+0x80>
 8004378:	1c43      	adds	r3, r0, #1
 800437a:	d102      	bne.n	8004382 <__sflush_r+0x7e>
 800437c:	682b      	ldr	r3, [r5, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d100      	bne.n	8004384 <__sflush_r+0x80>
 8004382:	6560      	str	r0, [r4, #84]	@ 0x54
 8004384:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004386:	602e      	str	r6, [r5, #0]
 8004388:	2900      	cmp	r1, #0
 800438a:	d017      	beq.n	80043bc <__sflush_r+0xb8>
 800438c:	0023      	movs	r3, r4
 800438e:	3344      	adds	r3, #68	@ 0x44
 8004390:	4299      	cmp	r1, r3
 8004392:	d002      	beq.n	800439a <__sflush_r+0x96>
 8004394:	0028      	movs	r0, r5
 8004396:	f7ff feb9 	bl	800410c <_free_r>
 800439a:	2300      	movs	r3, #0
 800439c:	6363      	str	r3, [r4, #52]	@ 0x34
 800439e:	e00d      	b.n	80043bc <__sflush_r+0xb8>
 80043a0:	2301      	movs	r3, #1
 80043a2:	0028      	movs	r0, r5
 80043a4:	47b8      	blx	r7
 80043a6:	0002      	movs	r2, r0
 80043a8:	1c43      	adds	r3, r0, #1
 80043aa:	d1c6      	bne.n	800433a <__sflush_r+0x36>
 80043ac:	682b      	ldr	r3, [r5, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d0c3      	beq.n	800433a <__sflush_r+0x36>
 80043b2:	2b1d      	cmp	r3, #29
 80043b4:	d001      	beq.n	80043ba <__sflush_r+0xb6>
 80043b6:	2b16      	cmp	r3, #22
 80043b8:	d11a      	bne.n	80043f0 <__sflush_r+0xec>
 80043ba:	602e      	str	r6, [r5, #0]
 80043bc:	2000      	movs	r0, #0
 80043be:	e01e      	b.n	80043fe <__sflush_r+0xfa>
 80043c0:	690e      	ldr	r6, [r1, #16]
 80043c2:	2e00      	cmp	r6, #0
 80043c4:	d0fa      	beq.n	80043bc <__sflush_r+0xb8>
 80043c6:	680f      	ldr	r7, [r1, #0]
 80043c8:	600e      	str	r6, [r1, #0]
 80043ca:	1bba      	subs	r2, r7, r6
 80043cc:	9201      	str	r2, [sp, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	079b      	lsls	r3, r3, #30
 80043d2:	d100      	bne.n	80043d6 <__sflush_r+0xd2>
 80043d4:	694a      	ldr	r2, [r1, #20]
 80043d6:	60a2      	str	r2, [r4, #8]
 80043d8:	9b01      	ldr	r3, [sp, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	ddee      	ble.n	80043bc <__sflush_r+0xb8>
 80043de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80043e0:	0032      	movs	r2, r6
 80043e2:	001f      	movs	r7, r3
 80043e4:	0028      	movs	r0, r5
 80043e6:	9b01      	ldr	r3, [sp, #4]
 80043e8:	6a21      	ldr	r1, [r4, #32]
 80043ea:	47b8      	blx	r7
 80043ec:	2800      	cmp	r0, #0
 80043ee:	dc07      	bgt.n	8004400 <__sflush_r+0xfc>
 80043f0:	89a2      	ldrh	r2, [r4, #12]
 80043f2:	2340      	movs	r3, #64	@ 0x40
 80043f4:	2001      	movs	r0, #1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	b21b      	sxth	r3, r3
 80043fa:	81a3      	strh	r3, [r4, #12]
 80043fc:	4240      	negs	r0, r0
 80043fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004400:	9b01      	ldr	r3, [sp, #4]
 8004402:	1836      	adds	r6, r6, r0
 8004404:	1a1b      	subs	r3, r3, r0
 8004406:	9301      	str	r3, [sp, #4]
 8004408:	e7e6      	b.n	80043d8 <__sflush_r+0xd4>
 800440a:	46c0      	nop			@ (mov r8, r8)
 800440c:	dfbffffe 	.word	0xdfbffffe

08004410 <_fflush_r>:
 8004410:	690b      	ldr	r3, [r1, #16]
 8004412:	b570      	push	{r4, r5, r6, lr}
 8004414:	0005      	movs	r5, r0
 8004416:	000c      	movs	r4, r1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <_fflush_r+0x12>
 800441c:	2500      	movs	r5, #0
 800441e:	0028      	movs	r0, r5
 8004420:	bd70      	pop	{r4, r5, r6, pc}
 8004422:	2800      	cmp	r0, #0
 8004424:	d004      	beq.n	8004430 <_fflush_r+0x20>
 8004426:	6a03      	ldr	r3, [r0, #32]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d101      	bne.n	8004430 <_fflush_r+0x20>
 800442c:	f7ff fc6a 	bl	8003d04 <__sinit>
 8004430:	220c      	movs	r2, #12
 8004432:	5ea3      	ldrsh	r3, [r4, r2]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f1      	beq.n	800441c <_fflush_r+0xc>
 8004438:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800443a:	07d2      	lsls	r2, r2, #31
 800443c:	d404      	bmi.n	8004448 <_fflush_r+0x38>
 800443e:	059b      	lsls	r3, r3, #22
 8004440:	d402      	bmi.n	8004448 <_fflush_r+0x38>
 8004442:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004444:	f7ff fe5f 	bl	8004106 <__retarget_lock_acquire_recursive>
 8004448:	0028      	movs	r0, r5
 800444a:	0021      	movs	r1, r4
 800444c:	f7ff ff5a 	bl	8004304 <__sflush_r>
 8004450:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004452:	0005      	movs	r5, r0
 8004454:	07db      	lsls	r3, r3, #31
 8004456:	d4e2      	bmi.n	800441e <_fflush_r+0xe>
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	059b      	lsls	r3, r3, #22
 800445c:	d4df      	bmi.n	800441e <_fflush_r+0xe>
 800445e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004460:	f7ff fe52 	bl	8004108 <__retarget_lock_release_recursive>
 8004464:	e7db      	b.n	800441e <_fflush_r+0xe>
	...

08004468 <__swhatbuf_r>:
 8004468:	b570      	push	{r4, r5, r6, lr}
 800446a:	000e      	movs	r6, r1
 800446c:	001d      	movs	r5, r3
 800446e:	230e      	movs	r3, #14
 8004470:	5ec9      	ldrsh	r1, [r1, r3]
 8004472:	0014      	movs	r4, r2
 8004474:	b096      	sub	sp, #88	@ 0x58
 8004476:	2900      	cmp	r1, #0
 8004478:	da0c      	bge.n	8004494 <__swhatbuf_r+0x2c>
 800447a:	89b2      	ldrh	r2, [r6, #12]
 800447c:	2380      	movs	r3, #128	@ 0x80
 800447e:	0011      	movs	r1, r2
 8004480:	4019      	ands	r1, r3
 8004482:	421a      	tst	r2, r3
 8004484:	d114      	bne.n	80044b0 <__swhatbuf_r+0x48>
 8004486:	2380      	movs	r3, #128	@ 0x80
 8004488:	00db      	lsls	r3, r3, #3
 800448a:	2000      	movs	r0, #0
 800448c:	6029      	str	r1, [r5, #0]
 800448e:	6023      	str	r3, [r4, #0]
 8004490:	b016      	add	sp, #88	@ 0x58
 8004492:	bd70      	pop	{r4, r5, r6, pc}
 8004494:	466a      	mov	r2, sp
 8004496:	f000 f853 	bl	8004540 <_fstat_r>
 800449a:	2800      	cmp	r0, #0
 800449c:	dbed      	blt.n	800447a <__swhatbuf_r+0x12>
 800449e:	23f0      	movs	r3, #240	@ 0xf0
 80044a0:	9901      	ldr	r1, [sp, #4]
 80044a2:	021b      	lsls	r3, r3, #8
 80044a4:	4019      	ands	r1, r3
 80044a6:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <__swhatbuf_r+0x50>)
 80044a8:	18c9      	adds	r1, r1, r3
 80044aa:	424b      	negs	r3, r1
 80044ac:	4159      	adcs	r1, r3
 80044ae:	e7ea      	b.n	8004486 <__swhatbuf_r+0x1e>
 80044b0:	2100      	movs	r1, #0
 80044b2:	2340      	movs	r3, #64	@ 0x40
 80044b4:	e7e9      	b.n	800448a <__swhatbuf_r+0x22>
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	ffffe000 	.word	0xffffe000

080044bc <__smakebuf_r>:
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	2602      	movs	r6, #2
 80044c0:	898b      	ldrh	r3, [r1, #12]
 80044c2:	0005      	movs	r5, r0
 80044c4:	000c      	movs	r4, r1
 80044c6:	b085      	sub	sp, #20
 80044c8:	4233      	tst	r3, r6
 80044ca:	d007      	beq.n	80044dc <__smakebuf_r+0x20>
 80044cc:	0023      	movs	r3, r4
 80044ce:	3347      	adds	r3, #71	@ 0x47
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	6123      	str	r3, [r4, #16]
 80044d4:	2301      	movs	r3, #1
 80044d6:	6163      	str	r3, [r4, #20]
 80044d8:	b005      	add	sp, #20
 80044da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044dc:	ab03      	add	r3, sp, #12
 80044de:	aa02      	add	r2, sp, #8
 80044e0:	f7ff ffc2 	bl	8004468 <__swhatbuf_r>
 80044e4:	9f02      	ldr	r7, [sp, #8]
 80044e6:	9001      	str	r0, [sp, #4]
 80044e8:	0039      	movs	r1, r7
 80044ea:	0028      	movs	r0, r5
 80044ec:	f7ff fe7a 	bl	80041e4 <_malloc_r>
 80044f0:	2800      	cmp	r0, #0
 80044f2:	d108      	bne.n	8004506 <__smakebuf_r+0x4a>
 80044f4:	220c      	movs	r2, #12
 80044f6:	5ea3      	ldrsh	r3, [r4, r2]
 80044f8:	059a      	lsls	r2, r3, #22
 80044fa:	d4ed      	bmi.n	80044d8 <__smakebuf_r+0x1c>
 80044fc:	2203      	movs	r2, #3
 80044fe:	4393      	bics	r3, r2
 8004500:	431e      	orrs	r6, r3
 8004502:	81a6      	strh	r6, [r4, #12]
 8004504:	e7e2      	b.n	80044cc <__smakebuf_r+0x10>
 8004506:	2380      	movs	r3, #128	@ 0x80
 8004508:	89a2      	ldrh	r2, [r4, #12]
 800450a:	6020      	str	r0, [r4, #0]
 800450c:	4313      	orrs	r3, r2
 800450e:	81a3      	strh	r3, [r4, #12]
 8004510:	9b03      	ldr	r3, [sp, #12]
 8004512:	6120      	str	r0, [r4, #16]
 8004514:	6167      	str	r7, [r4, #20]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00c      	beq.n	8004534 <__smakebuf_r+0x78>
 800451a:	0028      	movs	r0, r5
 800451c:	230e      	movs	r3, #14
 800451e:	5ee1      	ldrsh	r1, [r4, r3]
 8004520:	f000 f820 	bl	8004564 <_isatty_r>
 8004524:	2800      	cmp	r0, #0
 8004526:	d005      	beq.n	8004534 <__smakebuf_r+0x78>
 8004528:	2303      	movs	r3, #3
 800452a:	89a2      	ldrh	r2, [r4, #12]
 800452c:	439a      	bics	r2, r3
 800452e:	3b02      	subs	r3, #2
 8004530:	4313      	orrs	r3, r2
 8004532:	81a3      	strh	r3, [r4, #12]
 8004534:	89a3      	ldrh	r3, [r4, #12]
 8004536:	9a01      	ldr	r2, [sp, #4]
 8004538:	4313      	orrs	r3, r2
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	e7cc      	b.n	80044d8 <__smakebuf_r+0x1c>
	...

08004540 <_fstat_r>:
 8004540:	2300      	movs	r3, #0
 8004542:	b570      	push	{r4, r5, r6, lr}
 8004544:	4d06      	ldr	r5, [pc, #24]	@ (8004560 <_fstat_r+0x20>)
 8004546:	0004      	movs	r4, r0
 8004548:	0008      	movs	r0, r1
 800454a:	0011      	movs	r1, r2
 800454c:	602b      	str	r3, [r5, #0]
 800454e:	f7fc f984 	bl	800085a <_fstat>
 8004552:	1c43      	adds	r3, r0, #1
 8004554:	d103      	bne.n	800455e <_fstat_r+0x1e>
 8004556:	682b      	ldr	r3, [r5, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d000      	beq.n	800455e <_fstat_r+0x1e>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	20000484 	.word	0x20000484

08004564 <_isatty_r>:
 8004564:	2300      	movs	r3, #0
 8004566:	b570      	push	{r4, r5, r6, lr}
 8004568:	4d06      	ldr	r5, [pc, #24]	@ (8004584 <_isatty_r+0x20>)
 800456a:	0004      	movs	r4, r0
 800456c:	0008      	movs	r0, r1
 800456e:	602b      	str	r3, [r5, #0]
 8004570:	f7fc f981 	bl	8000876 <_isatty>
 8004574:	1c43      	adds	r3, r0, #1
 8004576:	d103      	bne.n	8004580 <_isatty_r+0x1c>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d000      	beq.n	8004580 <_isatty_r+0x1c>
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	bd70      	pop	{r4, r5, r6, pc}
 8004582:	46c0      	nop			@ (mov r8, r8)
 8004584:	20000484 	.word	0x20000484

08004588 <_sbrk_r>:
 8004588:	2300      	movs	r3, #0
 800458a:	b570      	push	{r4, r5, r6, lr}
 800458c:	4d06      	ldr	r5, [pc, #24]	@ (80045a8 <_sbrk_r+0x20>)
 800458e:	0004      	movs	r4, r0
 8004590:	0008      	movs	r0, r1
 8004592:	602b      	str	r3, [r5, #0]
 8004594:	f7fc f984 	bl	80008a0 <_sbrk>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d103      	bne.n	80045a4 <_sbrk_r+0x1c>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d000      	beq.n	80045a4 <_sbrk_r+0x1c>
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	20000484 	.word	0x20000484

080045ac <_init>:
 80045ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ae:	46c0      	nop			@ (mov r8, r8)
 80045b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045b2:	bc08      	pop	{r3}
 80045b4:	469e      	mov	lr, r3
 80045b6:	4770      	bx	lr

080045b8 <_fini>:
 80045b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ba:	46c0      	nop			@ (mov r8, r8)
 80045bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045be:	bc08      	pop	{r3}
 80045c0:	469e      	mov	lr, r3
 80045c2:	4770      	bx	lr
