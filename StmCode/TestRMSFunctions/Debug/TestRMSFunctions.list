
TestRMSFunctions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a1c  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08003ad4  08003ad4  00004ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c44  08003c44  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003c44  08003c44  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003c44  08003c44  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c44  08003c44  00004c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c48  08003c48  00004c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003c4c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000000c  08003c58  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08003c58  000052e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ae65  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b3e  00000000  00000000  0000fe99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  000119d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000065a  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014ce6  00000000  00000000  0001286a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeaa  00000000  00000000  00027550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083722  00000000  00000000  000323fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b5b1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c28  00000000  00000000  000b5b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b7788  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000000c 	.word	0x2000000c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003abc 	.word	0x08003abc

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000010 	.word	0x20000010
 80000fc:	08003abc 	.word	0x08003abc

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <HAL_UART_TxCpltCallback>:
        default:
            printf("Unknown error occurred\n");
            break;
    }
}
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000228:	b580      	push	{r7, lr}
 800022a:	b082      	sub	sp, #8
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	681b      	ldr	r3, [r3, #0]
 8000234:	4a04      	ldr	r2, [pc, #16]	@ (8000248 <HAL_UART_TxCpltCallback+0x20>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d102      	bne.n	8000240 <HAL_UART_TxCpltCallback+0x18>
        uart_tx_complete = 1;  // Set flag when transmission is complete
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <HAL_UART_TxCpltCallback+0x24>)
 800023c:	2201      	movs	r2, #1
 800023e:	701a      	strb	r2, [r3, #0]
    }
}
 8000240:	46c0      	nop			@ (mov r8, r8)
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}
 8000248:	40004800 	.word	0x40004800
 800024c:	200002e0 	.word	0x200002e0

08000250 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b082      	sub	sp, #8
 8000254:	af00      	add	r7, sp, #0
 8000256:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART3) {
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a08      	ldr	r2, [pc, #32]	@ (8000280 <HAL_UART_RxCpltCallback+0x30>)
 800025e:	4293      	cmp	r3, r2
 8000260:	d109      	bne.n	8000276 <HAL_UART_RxCpltCallback+0x26>
    	HAL_UART_Receive_IT(&huart3, buffer, 400);
 8000262:	23c8      	movs	r3, #200	@ 0xc8
 8000264:	005a      	lsls	r2, r3, #1
 8000266:	4907      	ldr	r1, [pc, #28]	@ (8000284 <HAL_UART_RxCpltCallback+0x34>)
 8000268:	4b07      	ldr	r3, [pc, #28]	@ (8000288 <HAL_UART_RxCpltCallback+0x38>)
 800026a:	0018      	movs	r0, r3
 800026c:	f001 fc74 	bl	8001b58 <HAL_UART_Receive_IT>
        uart_rx_complete = 1;  // Set flag when reception is complete
 8000270:	4b06      	ldr	r3, [pc, #24]	@ (800028c <HAL_UART_RxCpltCallback+0x3c>)
 8000272:	2201      	movs	r2, #1
 8000274:	701a      	strb	r2, [r3, #0]
    }
}
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b002      	add	sp, #8
 800027c:	bd80      	pop	{r7, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	40004800 	.word	0x40004800
 8000284:	20000150 	.word	0x20000150
 8000288:	20000028 	.word	0x20000028
 800028c:	200002e1 	.word	0x200002e1

08000290 <SIMTransmit>:

ErrorCode SIMTransmit(char *cmd, uint32_t rcv_len, uint32_t rcv_timeout) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
    memset(buffer, 0, sizeof(buffer));
 800029c:	23c8      	movs	r3, #200	@ 0xc8
 800029e:	005a      	lsls	r2, r3, #1
 80002a0:	4b2e      	ldr	r3, [pc, #184]	@ (800035c <SIMTransmit+0xcc>)
 80002a2:	2100      	movs	r1, #0
 80002a4:	0018      	movs	r0, r3
 80002a6:	f003 fbdd 	bl	8003a64 <memset>
    uart_tx_complete = 0;
 80002aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000360 <SIMTransmit+0xd0>)
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
    uart_rx_complete = 0;
 80002b0:	4b2c      	ldr	r3, [pc, #176]	@ (8000364 <SIMTransmit+0xd4>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	701a      	strb	r2, [r3, #0]

    // Start non-blocking transmission
    if (HAL_UART_Transmit_IT(&huart3, (uint8_t *)cmd, strlen(cmd)) != HAL_OK) {
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	0018      	movs	r0, r3
 80002ba:	f7ff ff21 	bl	8000100 <strlen>
 80002be:	0003      	movs	r3, r0
 80002c0:	b29a      	uxth	r2, r3
 80002c2:	68f9      	ldr	r1, [r7, #12]
 80002c4:	4b28      	ldr	r3, [pc, #160]	@ (8000368 <SIMTransmit+0xd8>)
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 fb9e 	bl	8001a08 <HAL_UART_Transmit_IT>
 80002cc:	1e03      	subs	r3, r0, #0
 80002ce:	d001      	beq.n	80002d4 <SIMTransmit+0x44>
        return ERROR_UART_TRANSMIT;
 80002d0:	2301      	movs	r3, #1
 80002d2:	e03f      	b.n	8000354 <SIMTransmit+0xc4>
    }

    // Wait for transmission to complete with timeout
    uint32_t txstart = HAL_GetTick();
 80002d4:	f000 fb06 	bl	80008e4 <HAL_GetTick>
 80002d8:	0003      	movs	r3, r0
 80002da:	61fb      	str	r3, [r7, #28]
    const uint32_t txtimeout = 5000; // Timeout in milliseconds
 80002dc:	4b23      	ldr	r3, [pc, #140]	@ (800036c <SIMTransmit+0xdc>)
 80002de:	61bb      	str	r3, [r7, #24]
    while ((!uart_tx_complete) && ((HAL_GetTick() - txstart < txtimeout))) {
 80002e0:	46c0      	nop			@ (mov r8, r8)
 80002e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000360 <SIMTransmit+0xd0>)
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	b2db      	uxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d107      	bne.n	80002fc <SIMTransmit+0x6c>
 80002ec:	f000 fafa 	bl	80008e4 <HAL_GetTick>
 80002f0:	0002      	movs	r2, r0
 80002f2:	69fb      	ldr	r3, [r7, #28]
 80002f4:	1ad3      	subs	r3, r2, r3
 80002f6:	69ba      	ldr	r2, [r7, #24]
 80002f8:	429a      	cmp	r2, r3
 80002fa:	d8f2      	bhi.n	80002e2 <SIMTransmit+0x52>
        // Optionally perform other tasks or enter low-power mode
    }

    if (!uart_tx_complete) {
 80002fc:	4b18      	ldr	r3, [pc, #96]	@ (8000360 <SIMTransmit+0xd0>)
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	b2db      	uxtb	r3, r3
 8000302:	2b00      	cmp	r3, #0
 8000304:	d101      	bne.n	800030a <SIMTransmit+0x7a>
        return ERROR_TRANS_TIMEOUT;
 8000306:	230d      	movs	r3, #13
 8000308:	e024      	b.n	8000354 <SIMTransmit+0xc4>
    }

    // Start non-blocking reception
    if (HAL_UART_Receive_IT(&huart3, buffer, rcv_len) != HAL_OK) {
 800030a:	68bb      	ldr	r3, [r7, #8]
 800030c:	b29a      	uxth	r2, r3
 800030e:	4913      	ldr	r1, [pc, #76]	@ (800035c <SIMTransmit+0xcc>)
 8000310:	4b15      	ldr	r3, [pc, #84]	@ (8000368 <SIMTransmit+0xd8>)
 8000312:	0018      	movs	r0, r3
 8000314:	f001 fc20 	bl	8001b58 <HAL_UART_Receive_IT>
 8000318:	1e03      	subs	r3, r0, #0
 800031a:	d001      	beq.n	8000320 <SIMTransmit+0x90>
        return ERROR_UART_RECEIVE;
 800031c:	2302      	movs	r3, #2
 800031e:	e019      	b.n	8000354 <SIMTransmit+0xc4>
    }

    // Wait for reception to complete or timeout
    uint32_t rx_start = HAL_GetTick();
 8000320:	f000 fae0 	bl	80008e4 <HAL_GetTick>
 8000324:	0003      	movs	r3, r0
 8000326:	617b      	str	r3, [r7, #20]
    while (!uart_rx_complete && (HAL_GetTick() - rx_start < rcv_timeout)) {//when I put a break point here the code performs unexpectedly
 8000328:	46c0      	nop			@ (mov r8, r8)
 800032a:	4b0e      	ldr	r3, [pc, #56]	@ (8000364 <SIMTransmit+0xd4>)
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	b2db      	uxtb	r3, r3
 8000330:	2b00      	cmp	r3, #0
 8000332:	d107      	bne.n	8000344 <SIMTransmit+0xb4>
 8000334:	f000 fad6 	bl	80008e4 <HAL_GetTick>
 8000338:	0002      	movs	r2, r0
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	1ad3      	subs	r3, r2, r3
 800033e:	687a      	ldr	r2, [r7, #4]
 8000340:	429a      	cmp	r2, r3
 8000342:	d8f2      	bhi.n	800032a <SIMTransmit+0x9a>
        // Optionally handle other tasks or sleep
    }

    if (!uart_rx_complete) {
 8000344:	4b07      	ldr	r3, [pc, #28]	@ (8000364 <SIMTransmit+0xd4>)
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	b2db      	uxtb	r3, r3
 800034a:	2b00      	cmp	r3, #0
 800034c:	d101      	bne.n	8000352 <SIMTransmit+0xc2>
        return ERROR_RECV_TIMEOUT;
 800034e:	230c      	movs	r3, #12
 8000350:	e000      	b.n	8000354 <SIMTransmit+0xc4>
    }

    return ERROR_NONE; // Return success if no errors occurred
 8000352:	2300      	movs	r3, #0
}
 8000354:	0018      	movs	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	b008      	add	sp, #32
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000150 	.word	0x20000150
 8000360:	200002e0 	.word	0x200002e0
 8000364:	200002e1 	.word	0x200002e1
 8000368:	20000028 	.word	0x20000028
 800036c:	00001388 	.word	0x00001388

08000370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000370:	b580      	push	{r7, lr}
 8000372:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000374:	f000 fa3a 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000378:	f000 f812 	bl	80003a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800037c:	f000 f8c0 	bl	8000500 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000380:	f000 f856 	bl	8000430 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000384:	f000 f888 	bl	8000498 <MX_USART4_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  SIMTransmit("AT\r\n", 400, 3000);
 8000388:	4a03      	ldr	r2, [pc, #12]	@ (8000398 <main+0x28>)
 800038a:	23c8      	movs	r3, #200	@ 0xc8
 800038c:	0059      	lsls	r1, r3, #1
 800038e:	4b03      	ldr	r3, [pc, #12]	@ (800039c <main+0x2c>)
 8000390:	0018      	movs	r0, r3
 8000392:	f7ff ff7d 	bl	8000290 <SIMTransmit>
 8000396:	e7f7      	b.n	8000388 <main+0x18>
 8000398:	00000bb8 	.word	0x00000bb8
 800039c:	08003bc4 	.word	0x08003bc4

080003a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003a0:	b590      	push	{r4, r7, lr}
 80003a2:	b093      	sub	sp, #76	@ 0x4c
 80003a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003a6:	2414      	movs	r4, #20
 80003a8:	193b      	adds	r3, r7, r4
 80003aa:	0018      	movs	r0, r3
 80003ac:	2334      	movs	r3, #52	@ 0x34
 80003ae:	001a      	movs	r2, r3
 80003b0:	2100      	movs	r1, #0
 80003b2:	f003 fb57 	bl	8003a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	0018      	movs	r0, r3
 80003ba:	2310      	movs	r3, #16
 80003bc:	001a      	movs	r2, r3
 80003be:	2100      	movs	r1, #0
 80003c0:	f003 fb50 	bl	8003a64 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80003c4:	2380      	movs	r3, #128	@ 0x80
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	0018      	movs	r0, r3
 80003ca:	f000 fdc1 	bl	8000f50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003ce:	193b      	adds	r3, r7, r4
 80003d0:	2202      	movs	r2, #2
 80003d2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d4:	193b      	adds	r3, r7, r4
 80003d6:	2280      	movs	r2, #128	@ 0x80
 80003d8:	0052      	lsls	r2, r2, #1
 80003da:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003dc:	193b      	adds	r3, r7, r4
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003e2:	193b      	adds	r3, r7, r4
 80003e4:	2240      	movs	r2, #64	@ 0x40
 80003e6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003e8:	193b      	adds	r3, r7, r4
 80003ea:	2200      	movs	r2, #0
 80003ec:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	0018      	movs	r0, r3
 80003f2:	f000 fdf9 	bl	8000fe8 <HAL_RCC_OscConfig>
 80003f6:	1e03      	subs	r3, r0, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003fa:	f000 f8dd 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2207      	movs	r2, #7
 8000402:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000404:	1d3b      	adds	r3, r7, #4
 8000406:	2200      	movs	r2, #0
 8000408:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	2200      	movs	r2, #0
 800040e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000410:	1d3b      	adds	r3, r7, #4
 8000412:	2200      	movs	r2, #0
 8000414:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2100      	movs	r1, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f001 f8f4 	bl	8001608 <HAL_RCC_ClockConfig>
 8000420:	1e03      	subs	r3, r0, #0
 8000422:	d001      	beq.n	8000428 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000424:	f000 f8c8 	bl	80005b8 <Error_Handler>
  }
}
 8000428:	46c0      	nop			@ (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b013      	add	sp, #76	@ 0x4c
 800042e:	bd90      	pop	{r4, r7, pc}

08000430 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000434:	4b16      	ldr	r3, [pc, #88]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 8000436:	4a17      	ldr	r2, [pc, #92]	@ (8000494 <MX_USART3_UART_Init+0x64>)
 8000438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800043a:	4b15      	ldr	r3, [pc, #84]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 800043c:	22e1      	movs	r2, #225	@ 0xe1
 800043e:	0252      	lsls	r2, r2, #9
 8000440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000442:	4b13      	ldr	r3, [pc, #76]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000448:	4b11      	ldr	r3, [pc, #68]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800044e:	4b10      	ldr	r3, [pc, #64]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000454:	4b0e      	ldr	r3, [pc, #56]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 8000456:	220c      	movs	r2, #12
 8000458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800045a:	4b0d      	ldr	r3, [pc, #52]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 800045c:	2200      	movs	r2, #0
 800045e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000460:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 8000462:	2200      	movs	r2, #0
 8000464:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000466:	4b0a      	ldr	r3, [pc, #40]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 8000468:	2200      	movs	r2, #0
 800046a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800046c:	4b08      	ldr	r3, [pc, #32]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 800046e:	2200      	movs	r2, #0
 8000470:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000472:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 8000474:	2200      	movs	r2, #0
 8000476:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000478:	4b05      	ldr	r3, [pc, #20]	@ (8000490 <MX_USART3_UART_Init+0x60>)
 800047a:	0018      	movs	r0, r3
 800047c:	f001 fa6e 	bl	800195c <HAL_UART_Init>
 8000480:	1e03      	subs	r3, r0, #0
 8000482:	d001      	beq.n	8000488 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000484:	f000 f898 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000488:	46c0      	nop			@ (mov r8, r8)
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}
 800048e:	46c0      	nop			@ (mov r8, r8)
 8000490:	20000028 	.word	0x20000028
 8000494:	40004800 	.word	0x40004800

08000498 <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800049c:	4b16      	ldr	r3, [pc, #88]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 800049e:	4a17      	ldr	r2, [pc, #92]	@ (80004fc <MX_USART4_UART_Init+0x64>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004a4:	2296      	movs	r2, #150	@ 0x96
 80004a6:	0192      	lsls	r2, r2, #6
 80004a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b13      	ldr	r3, [pc, #76]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b11      	ldr	r3, [pc, #68]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b10      	ldr	r3, [pc, #64]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0e      	ldr	r3, [pc, #56]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0d      	ldr	r3, [pc, #52]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b0b      	ldr	r3, [pc, #44]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004ce:	4b0a      	ldr	r3, [pc, #40]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004d4:	4b08      	ldr	r3, [pc, #32]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004da:	4b07      	ldr	r3, [pc, #28]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004dc:	2200      	movs	r2, #0
 80004de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80004e0:	4b05      	ldr	r3, [pc, #20]	@ (80004f8 <MX_USART4_UART_Init+0x60>)
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fa3a 	bl	800195c <HAL_UART_Init>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80004ec:	f000 f864 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80004f0:	46c0      	nop			@ (mov r8, r8)
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)
 80004f8:	200000bc 	.word	0x200000bc
 80004fc:	40004c00 	.word	0x40004c00

08000500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b08b      	sub	sp, #44	@ 0x2c
 8000504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000506:	2414      	movs	r4, #20
 8000508:	193b      	adds	r3, r7, r4
 800050a:	0018      	movs	r0, r3
 800050c:	2314      	movs	r3, #20
 800050e:	001a      	movs	r2, r3
 8000510:	2100      	movs	r1, #0
 8000512:	f003 faa7 	bl	8003a64 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000516:	4b27      	ldr	r3, [pc, #156]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051a:	4b26      	ldr	r3, [pc, #152]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 800051c:	2104      	movs	r1, #4
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
 8000522:	4b24      	ldr	r3, [pc, #144]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000526:	2204      	movs	r2, #4
 8000528:	4013      	ands	r3, r2
 800052a:	613b      	str	r3, [r7, #16]
 800052c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800052e:	4b21      	ldr	r3, [pc, #132]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000532:	4b20      	ldr	r3, [pc, #128]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000534:	2120      	movs	r1, #32
 8000536:	430a      	orrs	r2, r1
 8000538:	635a      	str	r2, [r3, #52]	@ 0x34
 800053a:	4b1e      	ldr	r3, [pc, #120]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 800053c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800053e:	2220      	movs	r2, #32
 8000540:	4013      	ands	r3, r2
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000546:	4b1b      	ldr	r3, [pc, #108]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000548:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800054a:	4b1a      	ldr	r3, [pc, #104]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 800054c:	2101      	movs	r1, #1
 800054e:	430a      	orrs	r2, r1
 8000550:	635a      	str	r2, [r3, #52]	@ 0x34
 8000552:	4b18      	ldr	r3, [pc, #96]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000556:	2201      	movs	r2, #1
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000562:	4b14      	ldr	r3, [pc, #80]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 8000564:	2102      	movs	r1, #2
 8000566:	430a      	orrs	r2, r1
 8000568:	635a      	str	r2, [r3, #52]	@ 0x34
 800056a:	4b12      	ldr	r3, [pc, #72]	@ (80005b4 <MX_GPIO_Init+0xb4>)
 800056c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800056e:	2202      	movs	r2, #2
 8000570:	4013      	ands	r3, r2
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000576:	23a0      	movs	r3, #160	@ 0xa0
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	2200      	movs	r2, #0
 800057c:	2120      	movs	r1, #32
 800057e:	0018      	movs	r0, r3
 8000580:	f000 fcc8 	bl	8000f14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000584:	0021      	movs	r1, r4
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2220      	movs	r2, #32
 800058a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2201      	movs	r2, #1
 8000590:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2202      	movs	r2, #2
 800059c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800059e:	187a      	adds	r2, r7, r1
 80005a0:	23a0      	movs	r3, #160	@ 0xa0
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	0011      	movs	r1, r2
 80005a6:	0018      	movs	r0, r3
 80005a8:	f000 fb50 	bl	8000c4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b00b      	add	sp, #44	@ 0x2c
 80005b2:	bd90      	pop	{r4, r7, pc}
 80005b4:	40021000 	.word	0x40021000

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	46c0      	nop			@ (mov r8, r8)
 80005c2:	e7fd      	b.n	80005c0 <Error_Handler+0x8>

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000608 <HAL_MspInit+0x44>)
 80005cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000608 <HAL_MspInit+0x44>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80005d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000608 <HAL_MspInit+0x44>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b09      	ldr	r3, [pc, #36]	@ (8000608 <HAL_MspInit+0x44>)
 80005e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005e6:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <HAL_MspInit+0x44>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0549      	lsls	r1, r1, #21
 80005ec:	430a      	orrs	r2, r1
 80005ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005f0:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <HAL_MspInit+0x44>)
 80005f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	055b      	lsls	r3, r3, #21
 80005f8:	4013      	ands	r3, r2
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005fe:	46c0      	nop			@ (mov r8, r8)
 8000600:	46bd      	mov	sp, r7
 8000602:	b002      	add	sp, #8
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			@ (mov r8, r8)
 8000608:	40021000 	.word	0x40021000

0800060c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b08d      	sub	sp, #52	@ 0x34
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000614:	241c      	movs	r4, #28
 8000616:	193b      	adds	r3, r7, r4
 8000618:	0018      	movs	r0, r3
 800061a:	2314      	movs	r3, #20
 800061c:	001a      	movs	r2, r3
 800061e:	2100      	movs	r1, #0
 8000620:	f003 fa20 	bl	8003a64 <memset>
  if(huart->Instance==USART3)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a3e      	ldr	r2, [pc, #248]	@ (8000724 <HAL_UART_MspInit+0x118>)
 800062a:	4293      	cmp	r3, r2
 800062c:	d138      	bne.n	80006a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800062e:	4b3e      	ldr	r3, [pc, #248]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 8000630:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000632:	4b3d      	ldr	r3, [pc, #244]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 8000634:	2180      	movs	r1, #128	@ 0x80
 8000636:	02c9      	lsls	r1, r1, #11
 8000638:	430a      	orrs	r2, r1
 800063a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800063c:	4b3a      	ldr	r3, [pc, #232]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 800063e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000640:	2380      	movs	r3, #128	@ 0x80
 8000642:	02db      	lsls	r3, r3, #11
 8000644:	4013      	ands	r3, r2
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	4b37      	ldr	r3, [pc, #220]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 800064c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800064e:	4b36      	ldr	r3, [pc, #216]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 8000650:	2102      	movs	r1, #2
 8000652:	430a      	orrs	r2, r1
 8000654:	635a      	str	r2, [r3, #52]	@ 0x34
 8000656:	4b34      	ldr	r3, [pc, #208]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 8000658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800065a:	2202      	movs	r2, #2
 800065c:	4013      	ands	r3, r2
 800065e:	617b      	str	r3, [r7, #20]
 8000660:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB0     ------> USART3_RX
    PB2     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000662:	0021      	movs	r1, r4
 8000664:	187b      	adds	r3, r7, r1
 8000666:	2205      	movs	r2, #5
 8000668:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066a:	187b      	adds	r3, r7, r1
 800066c:	2202      	movs	r2, #2
 800066e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	187b      	adds	r3, r7, r1
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	187b      	adds	r3, r7, r1
 8000678:	2200      	movs	r2, #0
 800067a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 800067c:	187b      	adds	r3, r7, r1
 800067e:	2204      	movs	r2, #4
 8000680:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	187b      	adds	r3, r7, r1
 8000684:	4a29      	ldr	r2, [pc, #164]	@ (800072c <HAL_UART_MspInit+0x120>)
 8000686:	0019      	movs	r1, r3
 8000688:	0010      	movs	r0, r2
 800068a:	f000 fadf 	bl	8000c4c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	201d      	movs	r0, #29
 8000694:	f000 f9dc 	bl	8000a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000698:	201d      	movs	r0, #29
 800069a:	f000 f9ee 	bl	8000a7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 800069e:	e03d      	b.n	800071c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART4)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a22      	ldr	r2, [pc, #136]	@ (8000730 <HAL_UART_MspInit+0x124>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d138      	bne.n	800071c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART4_CLK_ENABLE();
 80006aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 80006ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 80006b0:	2180      	movs	r1, #128	@ 0x80
 80006b2:	0309      	lsls	r1, r1, #12
 80006b4:	430a      	orrs	r2, r1
 80006b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 80006ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006bc:	2380      	movs	r3, #128	@ 0x80
 80006be:	031b      	lsls	r3, r3, #12
 80006c0:	4013      	ands	r3, r2
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 80006c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ca:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 80006cc:	2101      	movs	r1, #1
 80006ce:	430a      	orrs	r2, r1
 80006d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_UART_MspInit+0x11c>)
 80006d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006d6:	2201      	movs	r2, #1
 80006d8:	4013      	ands	r3, r2
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006de:	211c      	movs	r1, #28
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2203      	movs	r2, #3
 80006e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2202      	movs	r2, #2
 80006ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	187b      	adds	r3, r7, r1
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 80006f8:	187b      	adds	r3, r7, r1
 80006fa:	2204      	movs	r2, #4
 80006fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	187a      	adds	r2, r7, r1
 8000700:	23a0      	movs	r3, #160	@ 0xa0
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f000 faa0 	bl	8000c4c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 800070c:	2200      	movs	r2, #0
 800070e:	2100      	movs	r1, #0
 8000710:	201d      	movs	r0, #29
 8000712:	f000 f99d 	bl	8000a50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000716:	201d      	movs	r0, #29
 8000718:	f000 f9af 	bl	8000a7a <HAL_NVIC_EnableIRQ>
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b00d      	add	sp, #52	@ 0x34
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	40004800 	.word	0x40004800
 8000728:	40021000 	.word	0x40021000
 800072c:	50000400 	.word	0x50000400
 8000730:	40004c00 	.word	0x40004c00

08000734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000738:	46c0      	nop			@ (mov r8, r8)
 800073a:	e7fd      	b.n	8000738 <NMI_Handler+0x4>

0800073c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000740:	46c0      	nop			@ (mov r8, r8)
 8000742:	e7fd      	b.n	8000740 <HardFault_Handler+0x4>

08000744 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000748:	46c0      	nop			@ (mov r8, r8)
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}

0800074e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074e:	b580      	push	{r7, lr}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075c:	f000 f8b0 	bl	80008c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800076c:	4b05      	ldr	r3, [pc, #20]	@ (8000784 <USART3_4_IRQHandler+0x1c>)
 800076e:	0018      	movs	r0, r3
 8000770:	f001 fa4a 	bl	8001c08 <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8000774:	4b04      	ldr	r3, [pc, #16]	@ (8000788 <USART3_4_IRQHandler+0x20>)
 8000776:	0018      	movs	r0, r3
 8000778:	f001 fa46 	bl	8001c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 800077c:	46c0      	nop			@ (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	46c0      	nop			@ (mov r8, r8)
 8000784:	20000028 	.word	0x20000028
 8000788:	200000bc 	.word	0x200000bc

0800078c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000798:	480d      	ldr	r0, [pc, #52]	@ (80007d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800079a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800079c:	f7ff fff6 	bl	800078c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a0:	480c      	ldr	r0, [pc, #48]	@ (80007d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a2:	490d      	ldr	r1, [pc, #52]	@ (80007d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a4:	4a0d      	ldr	r2, [pc, #52]	@ (80007dc <LoopForever+0xe>)
  movs r3, #0
 80007a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a8:	e002      	b.n	80007b0 <LoopCopyDataInit>

080007aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ae:	3304      	adds	r3, #4

080007b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b4:	d3f9      	bcc.n	80007aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	@ (80007e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b8:	4c0a      	ldr	r4, [pc, #40]	@ (80007e4 <LoopForever+0x16>)
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007bc:	e001      	b.n	80007c2 <LoopFillZerobss>

080007be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c0:	3204      	adds	r2, #4

080007c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c4:	d3fb      	bcc.n	80007be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007c6:	f003 f955 	bl	8003a74 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80007ca:	f7ff fdd1 	bl	8000370 <main>

080007ce <LoopForever>:

LoopForever:
  b LoopForever
 80007ce:	e7fe      	b.n	80007ce <LoopForever>
  ldr   r0, =_estack
 80007d0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80007d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007dc:	08003c4c 	.word	0x08003c4c
  ldr r2, =_sbss
 80007e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80007e4:	200002e8 	.word	0x200002e8

080007e8 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_IRQHandler>
	...

080007ec <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000828 <HAL_Init+0x3c>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_Init+0x3c>)
 80007fe:	2180      	movs	r1, #128	@ 0x80
 8000800:	0049      	lsls	r1, r1, #1
 8000802:	430a      	orrs	r2, r1
 8000804:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000806:	2000      	movs	r0, #0
 8000808:	f000 f810 	bl	800082c <HAL_InitTick>
 800080c:	1e03      	subs	r3, r0, #0
 800080e:	d003      	beq.n	8000818 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000810:	1dfb      	adds	r3, r7, #7
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
 8000816:	e001      	b.n	800081c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000818:	f7ff fed4 	bl	80005c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800081c:	1dfb      	adds	r3, r7, #7
 800081e:	781b      	ldrb	r3, [r3, #0]
}
 8000820:	0018      	movs	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	b002      	add	sp, #8
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000834:	230f      	movs	r3, #15
 8000836:	18fb      	adds	r3, r7, r3
 8000838:	2200      	movs	r2, #0
 800083a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <HAL_InitTick+0x88>)
 800083e:	781b      	ldrb	r3, [r3, #0]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d02b      	beq.n	800089c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_InitTick+0x8c>)
 8000846:	681c      	ldr	r4, [r3, #0]
 8000848:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <HAL_InitTick+0x88>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	0019      	movs	r1, r3
 800084e:	23fa      	movs	r3, #250	@ 0xfa
 8000850:	0098      	lsls	r0, r3, #2
 8000852:	f7ff fc5d 	bl	8000110 <__udivsi3>
 8000856:	0003      	movs	r3, r0
 8000858:	0019      	movs	r1, r3
 800085a:	0020      	movs	r0, r4
 800085c:	f7ff fc58 	bl	8000110 <__udivsi3>
 8000860:	0003      	movs	r3, r0
 8000862:	0018      	movs	r0, r3
 8000864:	f000 f919 	bl	8000a9a <HAL_SYSTICK_Config>
 8000868:	1e03      	subs	r3, r0, #0
 800086a:	d112      	bne.n	8000892 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b03      	cmp	r3, #3
 8000870:	d80a      	bhi.n	8000888 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000872:	6879      	ldr	r1, [r7, #4]
 8000874:	2301      	movs	r3, #1
 8000876:	425b      	negs	r3, r3
 8000878:	2200      	movs	r2, #0
 800087a:	0018      	movs	r0, r3
 800087c:	f000 f8e8 	bl	8000a50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000880:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <HAL_InitTick+0x90>)
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	601a      	str	r2, [r3, #0]
 8000886:	e00d      	b.n	80008a4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000888:	230f      	movs	r3, #15
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
 8000890:	e008      	b.n	80008a4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000892:	230f      	movs	r3, #15
 8000894:	18fb      	adds	r3, r7, r3
 8000896:	2201      	movs	r2, #1
 8000898:	701a      	strb	r2, [r3, #0]
 800089a:	e003      	b.n	80008a4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800089c:	230f      	movs	r3, #15
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	2201      	movs	r2, #1
 80008a2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008a4:	230f      	movs	r3, #15
 80008a6:	18fb      	adds	r3, r7, r3
 80008a8:	781b      	ldrb	r3, [r3, #0]
}
 80008aa:	0018      	movs	r0, r3
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b005      	add	sp, #20
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	46c0      	nop			@ (mov r8, r8)
 80008b4:	20000008 	.word	0x20000008
 80008b8:	20000000 	.word	0x20000000
 80008bc:	20000004 	.word	0x20000004

080008c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008c4:	4b05      	ldr	r3, [pc, #20]	@ (80008dc <HAL_IncTick+0x1c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	001a      	movs	r2, r3
 80008ca:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <HAL_IncTick+0x20>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	18d2      	adds	r2, r2, r3
 80008d0:	4b03      	ldr	r3, [pc, #12]	@ (80008e0 <HAL_IncTick+0x20>)
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	46c0      	nop			@ (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008
 80008e0:	200002e4 	.word	0x200002e4

080008e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  return uwTick;
 80008e8:	4b02      	ldr	r3, [pc, #8]	@ (80008f4 <HAL_GetTick+0x10>)
 80008ea:	681b      	ldr	r3, [r3, #0]
}
 80008ec:	0018      	movs	r0, r3
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			@ (mov r8, r8)
 80008f4:	200002e4 	.word	0x200002e4

080008f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	0002      	movs	r2, r0
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000904:	1dfb      	adds	r3, r7, #7
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	2b7f      	cmp	r3, #127	@ 0x7f
 800090a:	d809      	bhi.n	8000920 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800090c:	1dfb      	adds	r3, r7, #7
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	001a      	movs	r2, r3
 8000912:	231f      	movs	r3, #31
 8000914:	401a      	ands	r2, r3
 8000916:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <__NVIC_EnableIRQ+0x30>)
 8000918:	2101      	movs	r1, #1
 800091a:	4091      	lsls	r1, r2
 800091c:	000a      	movs	r2, r1
 800091e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000920:	46c0      	nop			@ (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	b002      	add	sp, #8
 8000926:	bd80      	pop	{r7, pc}
 8000928:	e000e100 	.word	0xe000e100

0800092c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	0002      	movs	r2, r0
 8000934:	6039      	str	r1, [r7, #0]
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000940:	d828      	bhi.n	8000994 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000942:	4a2f      	ldr	r2, [pc, #188]	@ (8000a00 <__NVIC_SetPriority+0xd4>)
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b25b      	sxtb	r3, r3
 800094a:	089b      	lsrs	r3, r3, #2
 800094c:	33c0      	adds	r3, #192	@ 0xc0
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	589b      	ldr	r3, [r3, r2]
 8000952:	1dfa      	adds	r2, r7, #7
 8000954:	7812      	ldrb	r2, [r2, #0]
 8000956:	0011      	movs	r1, r2
 8000958:	2203      	movs	r2, #3
 800095a:	400a      	ands	r2, r1
 800095c:	00d2      	lsls	r2, r2, #3
 800095e:	21ff      	movs	r1, #255	@ 0xff
 8000960:	4091      	lsls	r1, r2
 8000962:	000a      	movs	r2, r1
 8000964:	43d2      	mvns	r2, r2
 8000966:	401a      	ands	r2, r3
 8000968:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	019b      	lsls	r3, r3, #6
 800096e:	22ff      	movs	r2, #255	@ 0xff
 8000970:	401a      	ands	r2, r3
 8000972:	1dfb      	adds	r3, r7, #7
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	0018      	movs	r0, r3
 8000978:	2303      	movs	r3, #3
 800097a:	4003      	ands	r3, r0
 800097c:	00db      	lsls	r3, r3, #3
 800097e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000980:	481f      	ldr	r0, [pc, #124]	@ (8000a00 <__NVIC_SetPriority+0xd4>)
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b25b      	sxtb	r3, r3
 8000988:	089b      	lsrs	r3, r3, #2
 800098a:	430a      	orrs	r2, r1
 800098c:	33c0      	adds	r3, #192	@ 0xc0
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000992:	e031      	b.n	80009f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000994:	4a1b      	ldr	r2, [pc, #108]	@ (8000a04 <__NVIC_SetPriority+0xd8>)
 8000996:	1dfb      	adds	r3, r7, #7
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	0019      	movs	r1, r3
 800099c:	230f      	movs	r3, #15
 800099e:	400b      	ands	r3, r1
 80009a0:	3b08      	subs	r3, #8
 80009a2:	089b      	lsrs	r3, r3, #2
 80009a4:	3306      	adds	r3, #6
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	18d3      	adds	r3, r2, r3
 80009aa:	3304      	adds	r3, #4
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	1dfa      	adds	r2, r7, #7
 80009b0:	7812      	ldrb	r2, [r2, #0]
 80009b2:	0011      	movs	r1, r2
 80009b4:	2203      	movs	r2, #3
 80009b6:	400a      	ands	r2, r1
 80009b8:	00d2      	lsls	r2, r2, #3
 80009ba:	21ff      	movs	r1, #255	@ 0xff
 80009bc:	4091      	lsls	r1, r2
 80009be:	000a      	movs	r2, r1
 80009c0:	43d2      	mvns	r2, r2
 80009c2:	401a      	ands	r2, r3
 80009c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009c6:	683b      	ldr	r3, [r7, #0]
 80009c8:	019b      	lsls	r3, r3, #6
 80009ca:	22ff      	movs	r2, #255	@ 0xff
 80009cc:	401a      	ands	r2, r3
 80009ce:	1dfb      	adds	r3, r7, #7
 80009d0:	781b      	ldrb	r3, [r3, #0]
 80009d2:	0018      	movs	r0, r3
 80009d4:	2303      	movs	r3, #3
 80009d6:	4003      	ands	r3, r0
 80009d8:	00db      	lsls	r3, r3, #3
 80009da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009dc:	4809      	ldr	r0, [pc, #36]	@ (8000a04 <__NVIC_SetPriority+0xd8>)
 80009de:	1dfb      	adds	r3, r7, #7
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	001c      	movs	r4, r3
 80009e4:	230f      	movs	r3, #15
 80009e6:	4023      	ands	r3, r4
 80009e8:	3b08      	subs	r3, #8
 80009ea:	089b      	lsrs	r3, r3, #2
 80009ec:	430a      	orrs	r2, r1
 80009ee:	3306      	adds	r3, #6
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	18c3      	adds	r3, r0, r3
 80009f4:	3304      	adds	r3, #4
 80009f6:	601a      	str	r2, [r3, #0]
}
 80009f8:	46c0      	nop			@ (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	b003      	add	sp, #12
 80009fe:	bd90      	pop	{r4, r7, pc}
 8000a00:	e000e100 	.word	0xe000e100
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1e5a      	subs	r2, r3, #1
 8000a14:	2380      	movs	r3, #128	@ 0x80
 8000a16:	045b      	lsls	r3, r3, #17
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d301      	bcc.n	8000a20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e010      	b.n	8000a42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a20:	4b0a      	ldr	r3, [pc, #40]	@ (8000a4c <SysTick_Config+0x44>)
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	3a01      	subs	r2, #1
 8000a26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a28:	2301      	movs	r3, #1
 8000a2a:	425b      	negs	r3, r3
 8000a2c:	2103      	movs	r1, #3
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff ff7c 	bl	800092c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a34:	4b05      	ldr	r3, [pc, #20]	@ (8000a4c <SysTick_Config+0x44>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a3a:	4b04      	ldr	r3, [pc, #16]	@ (8000a4c <SysTick_Config+0x44>)
 8000a3c:	2207      	movs	r2, #7
 8000a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	0018      	movs	r0, r3
 8000a44:	46bd      	mov	sp, r7
 8000a46:	b002      	add	sp, #8
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	46c0      	nop			@ (mov r8, r8)
 8000a4c:	e000e010 	.word	0xe000e010

08000a50 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
 8000a5a:	210f      	movs	r1, #15
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	1c02      	adds	r2, r0, #0
 8000a60:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000a62:	68ba      	ldr	r2, [r7, #8]
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	0011      	movs	r1, r2
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f7ff ff5d 	bl	800092c <__NVIC_SetPriority>
}
 8000a72:	46c0      	nop			@ (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	b004      	add	sp, #16
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	0002      	movs	r2, r0
 8000a82:	1dfb      	adds	r3, r7, #7
 8000a84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a86:	1dfb      	adds	r3, r7, #7
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	b25b      	sxtb	r3, r3
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f7ff ff33 	bl	80008f8 <__NVIC_EnableIRQ>
}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	b002      	add	sp, #8
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f7ff ffaf 	bl	8000a08 <SysTick_Config>
 8000aaa:	0003      	movs	r3, r0
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b002      	add	sp, #8
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e050      	b.n	8000b68 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	2225      	movs	r2, #37	@ 0x25
 8000aca:	5c9b      	ldrb	r3, [r3, r2]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b02      	cmp	r3, #2
 8000ad0:	d008      	beq.n	8000ae4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2224      	movs	r2, #36	@ 0x24
 8000adc:	2100      	movs	r1, #0
 8000ade:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	e041      	b.n	8000b68 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	210e      	movs	r1, #14
 8000af0:	438a      	bics	r2, r1
 8000af2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000afe:	491c      	ldr	r1, [pc, #112]	@ (8000b70 <HAL_DMA_Abort+0xbc>)
 8000b00:	400a      	ands	r2, r1
 8000b02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	681a      	ldr	r2, [r3, #0]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	2101      	movs	r1, #1
 8000b10:	438a      	bics	r2, r1
 8000b12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000b14:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <HAL_DMA_Abort+0xc0>)
 8000b16:	6859      	ldr	r1, [r3, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1c:	221c      	movs	r2, #28
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2201      	movs	r2, #1
 8000b22:	409a      	lsls	r2, r3
 8000b24:	4b13      	ldr	r3, [pc, #76]	@ (8000b74 <HAL_DMA_Abort+0xc0>)
 8000b26:	430a      	orrs	r2, r1
 8000b28:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000b32:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d00c      	beq.n	8000b56 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000b46:	490a      	ldr	r1, [pc, #40]	@ (8000b70 <HAL_DMA_Abort+0xbc>)
 8000b48:	400a      	ands	r2, r1
 8000b4a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000b50:	687a      	ldr	r2, [r7, #4]
 8000b52:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000b54:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2225      	movs	r2, #37	@ 0x25
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2224      	movs	r2, #36	@ 0x24
 8000b62:	2100      	movs	r1, #0
 8000b64:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000b66:	2300      	movs	r3, #0
}
 8000b68:	0018      	movs	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	fffffeff 	.word	0xfffffeff
 8000b74:	40020000 	.word	0x40020000

08000b78 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b80:	210f      	movs	r1, #15
 8000b82:	187b      	adds	r3, r7, r1
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2225      	movs	r2, #37	@ 0x25
 8000b8c:	5c9b      	ldrb	r3, [r3, r2]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b02      	cmp	r3, #2
 8000b92:	d006      	beq.n	8000ba2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2204      	movs	r2, #4
 8000b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
 8000ba0:	e049      	b.n	8000c36 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	210e      	movs	r1, #14
 8000bae:	438a      	bics	r2, r1
 8000bb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	438a      	bics	r2, r1
 8000bc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	681a      	ldr	r2, [r3, #0]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bcc:	491d      	ldr	r1, [pc, #116]	@ (8000c44 <HAL_DMA_Abort_IT+0xcc>)
 8000bce:	400a      	ands	r2, r1
 8000bd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000bd2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c48 <HAL_DMA_Abort_IT+0xd0>)
 8000bd4:	6859      	ldr	r1, [r3, #4]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	221c      	movs	r2, #28
 8000bdc:	4013      	ands	r3, r2
 8000bde:	2201      	movs	r2, #1
 8000be0:	409a      	lsls	r2, r3
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <HAL_DMA_Abort_IT+0xd0>)
 8000be4:	430a      	orrs	r2, r1
 8000be6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000bec:	687a      	ldr	r2, [r7, #4]
 8000bee:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000bf0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d00c      	beq.n	8000c14 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c04:	490f      	ldr	r1, [pc, #60]	@ (8000c44 <HAL_DMA_Abort_IT+0xcc>)
 8000c06:	400a      	ands	r2, r1
 8000c08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000c12:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2225      	movs	r2, #37	@ 0x25
 8000c18:	2101      	movs	r1, #1
 8000c1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2224      	movs	r2, #36	@ 0x24
 8000c20:	2100      	movs	r1, #0
 8000c22:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d004      	beq.n	8000c36 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000c30:	687a      	ldr	r2, [r7, #4]
 8000c32:	0010      	movs	r0, r2
 8000c34:	4798      	blx	r3
    }
  }
  return status;
 8000c36:	230f      	movs	r3, #15
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	781b      	ldrb	r3, [r3, #0]
}
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b004      	add	sp, #16
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	fffffeff 	.word	0xfffffeff
 8000c48:	40020000 	.word	0x40020000

08000c4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
 8000c54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c5a:	e147      	b.n	8000eec <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2101      	movs	r1, #1
 8000c62:	697a      	ldr	r2, [r7, #20]
 8000c64:	4091      	lsls	r1, r2
 8000c66:	000a      	movs	r2, r1
 8000c68:	4013      	ands	r3, r2
 8000c6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d100      	bne.n	8000c74 <HAL_GPIO_Init+0x28>
 8000c72:	e138      	b.n	8000ee6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	2203      	movs	r2, #3
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d005      	beq.n	8000c8c <HAL_GPIO_Init+0x40>
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	2203      	movs	r2, #3
 8000c86:	4013      	ands	r3, r2
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d130      	bne.n	8000cee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	689b      	ldr	r3, [r3, #8]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	2203      	movs	r2, #3
 8000c98:	409a      	lsls	r2, r3
 8000c9a:	0013      	movs	r3, r2
 8000c9c:	43da      	mvns	r2, r3
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	4013      	ands	r3, r2
 8000ca2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	005b      	lsls	r3, r3, #1
 8000cac:	409a      	lsls	r2, r3
 8000cae:	0013      	movs	r3, r2
 8000cb0:	693a      	ldr	r2, [r7, #16]
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	693a      	ldr	r2, [r7, #16]
 8000cba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
 8000cc8:	0013      	movs	r3, r2
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	091b      	lsrs	r3, r3, #4
 8000cd8:	2201      	movs	r2, #1
 8000cda:	401a      	ands	r2, r3
 8000cdc:	697b      	ldr	r3, [r7, #20]
 8000cde:	409a      	lsls	r2, r3
 8000ce0:	0013      	movs	r3, r2
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685b      	ldr	r3, [r3, #4]
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	2b03      	cmp	r3, #3
 8000cf8:	d017      	beq.n	8000d2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	68db      	ldr	r3, [r3, #12]
 8000cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	005b      	lsls	r3, r3, #1
 8000d04:	2203      	movs	r2, #3
 8000d06:	409a      	lsls	r2, r3
 8000d08:	0013      	movs	r3, r2
 8000d0a:	43da      	mvns	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	689a      	ldr	r2, [r3, #8]
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	409a      	lsls	r2, r3
 8000d1c:	0013      	movs	r3, r2
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	2203      	movs	r2, #3
 8000d30:	4013      	ands	r3, r2
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d123      	bne.n	8000d7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	08da      	lsrs	r2, r3, #3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	3208      	adds	r2, #8
 8000d3e:	0092      	lsls	r2, r2, #2
 8000d40:	58d3      	ldr	r3, [r2, r3]
 8000d42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	2207      	movs	r2, #7
 8000d48:	4013      	ands	r3, r2
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	220f      	movs	r2, #15
 8000d4e:	409a      	lsls	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	43da      	mvns	r2, r3
 8000d54:	693b      	ldr	r3, [r7, #16]
 8000d56:	4013      	ands	r3, r2
 8000d58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	691a      	ldr	r2, [r3, #16]
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	2107      	movs	r1, #7
 8000d62:	400b      	ands	r3, r1
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	409a      	lsls	r2, r3
 8000d68:	0013      	movs	r3, r2
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4313      	orrs	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	08da      	lsrs	r2, r3, #3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3208      	adds	r2, #8
 8000d78:	0092      	lsls	r2, r2, #2
 8000d7a:	6939      	ldr	r1, [r7, #16]
 8000d7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	2203      	movs	r2, #3
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2203      	movs	r2, #3
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	409a      	lsls	r2, r3
 8000da4:	0013      	movs	r3, r2
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	23c0      	movs	r3, #192	@ 0xc0
 8000db8:	029b      	lsls	r3, r3, #10
 8000dba:	4013      	ands	r3, r2
 8000dbc:	d100      	bne.n	8000dc0 <HAL_GPIO_Init+0x174>
 8000dbe:	e092      	b.n	8000ee6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000dc0:	4a50      	ldr	r2, [pc, #320]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3318      	adds	r3, #24
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	589b      	ldr	r3, [r3, r2]
 8000dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	00db      	lsls	r3, r3, #3
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	23a0      	movs	r3, #160	@ 0xa0
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d013      	beq.n	8000e16 <HAL_GPIO_Init+0x1ca>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a45      	ldr	r2, [pc, #276]	@ (8000f08 <HAL_GPIO_Init+0x2bc>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d00d      	beq.n	8000e12 <HAL_GPIO_Init+0x1c6>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a44      	ldr	r2, [pc, #272]	@ (8000f0c <HAL_GPIO_Init+0x2c0>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d007      	beq.n	8000e0e <HAL_GPIO_Init+0x1c2>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a43      	ldr	r2, [pc, #268]	@ (8000f10 <HAL_GPIO_Init+0x2c4>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d101      	bne.n	8000e0a <HAL_GPIO_Init+0x1be>
 8000e06:	2303      	movs	r3, #3
 8000e08:	e006      	b.n	8000e18 <HAL_GPIO_Init+0x1cc>
 8000e0a:	2305      	movs	r3, #5
 8000e0c:	e004      	b.n	8000e18 <HAL_GPIO_Init+0x1cc>
 8000e0e:	2302      	movs	r3, #2
 8000e10:	e002      	b.n	8000e18 <HAL_GPIO_Init+0x1cc>
 8000e12:	2301      	movs	r3, #1
 8000e14:	e000      	b.n	8000e18 <HAL_GPIO_Init+0x1cc>
 8000e16:	2300      	movs	r3, #0
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	2103      	movs	r1, #3
 8000e1c:	400a      	ands	r2, r1
 8000e1e:	00d2      	lsls	r2, r2, #3
 8000e20:	4093      	lsls	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000e28:	4936      	ldr	r1, [pc, #216]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	089b      	lsrs	r3, r3, #2
 8000e2e:	3318      	adds	r3, #24
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e36:	4b33      	ldr	r3, [pc, #204]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	693b      	ldr	r3, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685a      	ldr	r2, [r3, #4]
 8000e4a:	2380      	movs	r3, #128	@ 0x80
 8000e4c:	035b      	lsls	r3, r3, #13
 8000e4e:	4013      	ands	r3, r2
 8000e50:	d003      	beq.n	8000e5a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000e60:	4b28      	ldr	r3, [pc, #160]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	43da      	mvns	r2, r3
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685a      	ldr	r2, [r3, #4]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	039b      	lsls	r3, r3, #14
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d003      	beq.n	8000e84 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	4313      	orrs	r3, r2
 8000e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e84:	4b1f      	ldr	r3, [pc, #124]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000e8c:	2384      	movs	r3, #132	@ 0x84
 8000e8e:	58d3      	ldr	r3, [r2, r3]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43da      	mvns	r2, r3
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685a      	ldr	r2, [r3, #4]
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	029b      	lsls	r3, r3, #10
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000eb0:	4914      	ldr	r1, [pc, #80]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000eb2:	2284      	movs	r2, #132	@ 0x84
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000eb8:	4a12      	ldr	r2, [pc, #72]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000eba:	2380      	movs	r3, #128	@ 0x80
 8000ebc:	58d3      	ldr	r3, [r2, r3]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	2380      	movs	r3, #128	@ 0x80
 8000ed0:	025b      	lsls	r3, r3, #9
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ede:	4909      	ldr	r1, [pc, #36]	@ (8000f04 <HAL_GPIO_Init+0x2b8>)
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	40da      	lsrs	r2, r3
 8000ef4:	1e13      	subs	r3, r2, #0
 8000ef6:	d000      	beq.n	8000efa <HAL_GPIO_Init+0x2ae>
 8000ef8:	e6b0      	b.n	8000c5c <HAL_GPIO_Init+0x10>
  }
}
 8000efa:	46c0      	nop			@ (mov r8, r8)
 8000efc:	46c0      	nop			@ (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b006      	add	sp, #24
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	40021800 	.word	0x40021800
 8000f08:	50000400 	.word	0x50000400
 8000f0c:	50000800 	.word	0x50000800
 8000f10:	50000c00 	.word	0x50000c00

08000f14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	0008      	movs	r0, r1
 8000f1e:	0011      	movs	r1, r2
 8000f20:	1cbb      	adds	r3, r7, #2
 8000f22:	1c02      	adds	r2, r0, #0
 8000f24:	801a      	strh	r2, [r3, #0]
 8000f26:	1c7b      	adds	r3, r7, #1
 8000f28:	1c0a      	adds	r2, r1, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f2c:	1c7b      	adds	r3, r7, #1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d004      	beq.n	8000f3e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f34:	1cbb      	adds	r3, r7, #2
 8000f36:	881a      	ldrh	r2, [r3, #0]
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f3c:	e003      	b.n	8000f46 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3e:	1cbb      	adds	r3, r7, #2
 8000f40:	881a      	ldrh	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f46:	46c0      	nop			@ (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b002      	add	sp, #8
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000f58:	4b19      	ldr	r3, [pc, #100]	@ (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	@ (8000fc4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8000f5e:	4013      	ands	r3, r2
 8000f60:	0019      	movs	r1, r3
 8000f62:	4b17      	ldr	r3, [pc, #92]	@ (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d11f      	bne.n	8000fb4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8000f74:	4b14      	ldr	r3, [pc, #80]	@ (8000fc8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	0013      	movs	r3, r2
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	189b      	adds	r3, r3, r2
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	4912      	ldr	r1, [pc, #72]	@ (8000fcc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f7ff f8c4 	bl	8000110 <__udivsi3>
 8000f88:	0003      	movs	r3, r0
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000f8e:	e008      	b.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	e001      	b.n	8000fa2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e009      	b.n	8000fb6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8000fa4:	695a      	ldr	r2, [r3, #20]
 8000fa6:	2380      	movs	r3, #128	@ 0x80
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	401a      	ands	r2, r3
 8000fac:	2380      	movs	r3, #128	@ 0x80
 8000fae:	00db      	lsls	r3, r3, #3
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d0ed      	beq.n	8000f90 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	0018      	movs	r0, r3
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	b004      	add	sp, #16
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	46c0      	nop			@ (mov r8, r8)
 8000fc0:	40007000 	.word	0x40007000
 8000fc4:	fffff9ff 	.word	0xfffff9ff
 8000fc8:	20000000 	.word	0x20000000
 8000fcc:	000f4240 	.word	0x000f4240

08000fd0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8000fd6:	689a      	ldr	r2, [r3, #8]
 8000fd8:	23e0      	movs	r3, #224	@ 0xe0
 8000fda:	01db      	lsls	r3, r3, #7
 8000fdc:	4013      	ands	r3, r2
}
 8000fde:	0018      	movs	r0, r3
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40021000 	.word	0x40021000

08000fe8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b088      	sub	sp, #32
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e2f3      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2201      	movs	r2, #1
 8001000:	4013      	ands	r3, r2
 8001002:	d100      	bne.n	8001006 <HAL_RCC_OscConfig+0x1e>
 8001004:	e07c      	b.n	8001100 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001006:	4bc3      	ldr	r3, [pc, #780]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	2238      	movs	r2, #56	@ 0x38
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001010:	4bc0      	ldr	r3, [pc, #768]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	2203      	movs	r2, #3
 8001016:	4013      	ands	r3, r2
 8001018:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2b10      	cmp	r3, #16
 800101e:	d102      	bne.n	8001026 <HAL_RCC_OscConfig+0x3e>
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	2b03      	cmp	r3, #3
 8001024:	d002      	beq.n	800102c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	2b08      	cmp	r3, #8
 800102a:	d10b      	bne.n	8001044 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800102c:	4bb9      	ldr	r3, [pc, #740]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	2380      	movs	r3, #128	@ 0x80
 8001032:	029b      	lsls	r3, r3, #10
 8001034:	4013      	ands	r3, r2
 8001036:	d062      	beq.n	80010fe <HAL_RCC_OscConfig+0x116>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d15e      	bne.n	80010fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001040:	2301      	movs	r3, #1
 8001042:	e2ce      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685a      	ldr	r2, [r3, #4]
 8001048:	2380      	movs	r3, #128	@ 0x80
 800104a:	025b      	lsls	r3, r3, #9
 800104c:	429a      	cmp	r2, r3
 800104e:	d107      	bne.n	8001060 <HAL_RCC_OscConfig+0x78>
 8001050:	4bb0      	ldr	r3, [pc, #704]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4baf      	ldr	r3, [pc, #700]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001056:	2180      	movs	r1, #128	@ 0x80
 8001058:	0249      	lsls	r1, r1, #9
 800105a:	430a      	orrs	r2, r1
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	e020      	b.n	80010a2 <HAL_RCC_OscConfig+0xba>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	23a0      	movs	r3, #160	@ 0xa0
 8001066:	02db      	lsls	r3, r3, #11
 8001068:	429a      	cmp	r2, r3
 800106a:	d10e      	bne.n	800108a <HAL_RCC_OscConfig+0xa2>
 800106c:	4ba9      	ldr	r3, [pc, #676]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4ba8      	ldr	r3, [pc, #672]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001072:	2180      	movs	r1, #128	@ 0x80
 8001074:	02c9      	lsls	r1, r1, #11
 8001076:	430a      	orrs	r2, r1
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	4ba6      	ldr	r3, [pc, #664]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	4ba5      	ldr	r3, [pc, #660]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001080:	2180      	movs	r1, #128	@ 0x80
 8001082:	0249      	lsls	r1, r1, #9
 8001084:	430a      	orrs	r2, r1
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	e00b      	b.n	80010a2 <HAL_RCC_OscConfig+0xba>
 800108a:	4ba2      	ldr	r3, [pc, #648]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	4ba1      	ldr	r3, [pc, #644]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001090:	49a1      	ldr	r1, [pc, #644]	@ (8001318 <HAL_RCC_OscConfig+0x330>)
 8001092:	400a      	ands	r2, r1
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	4b9f      	ldr	r3, [pc, #636]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4b9e      	ldr	r3, [pc, #632]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800109c:	499f      	ldr	r1, [pc, #636]	@ (800131c <HAL_RCC_OscConfig+0x334>)
 800109e:	400a      	ands	r2, r1
 80010a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d014      	beq.n	80010d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010aa:	f7ff fc1b 	bl	80008e4 <HAL_GetTick>
 80010ae:	0003      	movs	r3, r0
 80010b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b2:	e008      	b.n	80010c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010b4:	f7ff fc16 	bl	80008e4 <HAL_GetTick>
 80010b8:	0002      	movs	r2, r0
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	2b64      	cmp	r3, #100	@ 0x64
 80010c0:	d901      	bls.n	80010c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80010c2:	2303      	movs	r3, #3
 80010c4:	e28d      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010c6:	4b93      	ldr	r3, [pc, #588]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	2380      	movs	r3, #128	@ 0x80
 80010cc:	029b      	lsls	r3, r3, #10
 80010ce:	4013      	ands	r3, r2
 80010d0:	d0f0      	beq.n	80010b4 <HAL_RCC_OscConfig+0xcc>
 80010d2:	e015      	b.n	8001100 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d4:	f7ff fc06 	bl	80008e4 <HAL_GetTick>
 80010d8:	0003      	movs	r3, r0
 80010da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010de:	f7ff fc01 	bl	80008e4 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b64      	cmp	r3, #100	@ 0x64
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e278      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010f0:	4b88      	ldr	r3, [pc, #544]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	029b      	lsls	r3, r3, #10
 80010f8:	4013      	ands	r3, r2
 80010fa:	d1f0      	bne.n	80010de <HAL_RCC_OscConfig+0xf6>
 80010fc:	e000      	b.n	8001100 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010fe:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2202      	movs	r2, #2
 8001106:	4013      	ands	r3, r2
 8001108:	d100      	bne.n	800110c <HAL_RCC_OscConfig+0x124>
 800110a:	e099      	b.n	8001240 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800110c:	4b81      	ldr	r3, [pc, #516]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2238      	movs	r2, #56	@ 0x38
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001116:	4b7f      	ldr	r3, [pc, #508]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2203      	movs	r2, #3
 800111c:	4013      	ands	r3, r2
 800111e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	2b10      	cmp	r3, #16
 8001124:	d102      	bne.n	800112c <HAL_RCC_OscConfig+0x144>
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	2b02      	cmp	r3, #2
 800112a:	d002      	beq.n	8001132 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d135      	bne.n	800119e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001132:	4b78      	ldr	r3, [pc, #480]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4013      	ands	r3, r2
 800113c:	d005      	beq.n	800114a <HAL_RCC_OscConfig+0x162>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d101      	bne.n	800114a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	e24b      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800114a:	4b72      	ldr	r3, [pc, #456]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4a74      	ldr	r2, [pc, #464]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 8001150:	4013      	ands	r3, r2
 8001152:	0019      	movs	r1, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	695b      	ldr	r3, [r3, #20]
 8001158:	021a      	lsls	r2, r3, #8
 800115a:	4b6e      	ldr	r3, [pc, #440]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800115c:	430a      	orrs	r2, r1
 800115e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d112      	bne.n	800118c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001166:	4b6b      	ldr	r3, [pc, #428]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a6e      	ldr	r2, [pc, #440]	@ (8001324 <HAL_RCC_OscConfig+0x33c>)
 800116c:	4013      	ands	r3, r2
 800116e:	0019      	movs	r1, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691a      	ldr	r2, [r3, #16]
 8001174:	4b67      	ldr	r3, [pc, #412]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001176:	430a      	orrs	r2, r1
 8001178:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800117a:	4b66      	ldr	r3, [pc, #408]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	0adb      	lsrs	r3, r3, #11
 8001180:	2207      	movs	r2, #7
 8001182:	4013      	ands	r3, r2
 8001184:	4a68      	ldr	r2, [pc, #416]	@ (8001328 <HAL_RCC_OscConfig+0x340>)
 8001186:	40da      	lsrs	r2, r3
 8001188:	4b68      	ldr	r3, [pc, #416]	@ (800132c <HAL_RCC_OscConfig+0x344>)
 800118a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800118c:	4b68      	ldr	r3, [pc, #416]	@ (8001330 <HAL_RCC_OscConfig+0x348>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	0018      	movs	r0, r3
 8001192:	f7ff fb4b 	bl	800082c <HAL_InitTick>
 8001196:	1e03      	subs	r3, r0, #0
 8001198:	d051      	beq.n	800123e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e221      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d030      	beq.n	8001208 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80011a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a5e      	ldr	r2, [pc, #376]	@ (8001324 <HAL_RCC_OscConfig+0x33c>)
 80011ac:	4013      	ands	r3, r2
 80011ae:	0019      	movs	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	4b57      	ldr	r3, [pc, #348]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011b6:	430a      	orrs	r2, r1
 80011b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80011ba:	4b56      	ldr	r3, [pc, #344]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	4b55      	ldr	r3, [pc, #340]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011c0:	2180      	movs	r1, #128	@ 0x80
 80011c2:	0049      	lsls	r1, r1, #1
 80011c4:	430a      	orrs	r2, r1
 80011c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011c8:	f7ff fb8c 	bl	80008e4 <HAL_GetTick>
 80011cc:	0003      	movs	r3, r0
 80011ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d0:	e008      	b.n	80011e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d2:	f7ff fb87 	bl	80008e4 <HAL_GetTick>
 80011d6:	0002      	movs	r2, r0
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	2b02      	cmp	r3, #2
 80011de:	d901      	bls.n	80011e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80011e0:	2303      	movs	r3, #3
 80011e2:	e1fe      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e4:	4b4b      	ldr	r3, [pc, #300]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2380      	movs	r3, #128	@ 0x80
 80011ea:	00db      	lsls	r3, r3, #3
 80011ec:	4013      	ands	r3, r2
 80011ee:	d0f0      	beq.n	80011d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f0:	4b48      	ldr	r3, [pc, #288]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001320 <HAL_RCC_OscConfig+0x338>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	0019      	movs	r1, r3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	021a      	lsls	r2, r3, #8
 8001200:	4b44      	ldr	r3, [pc, #272]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001202:	430a      	orrs	r2, r1
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	e01b      	b.n	8001240 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001208:	4b42      	ldr	r3, [pc, #264]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b41      	ldr	r3, [pc, #260]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800120e:	4949      	ldr	r1, [pc, #292]	@ (8001334 <HAL_RCC_OscConfig+0x34c>)
 8001210:	400a      	ands	r2, r1
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fb66 	bl	80008e4 <HAL_GetTick>
 8001218:	0003      	movs	r3, r0
 800121a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800121c:	e008      	b.n	8001230 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800121e:	f7ff fb61 	bl	80008e4 <HAL_GetTick>
 8001222:	0002      	movs	r2, r0
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d901      	bls.n	8001230 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800122c:	2303      	movs	r3, #3
 800122e:	e1d8      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001230:	4b38      	ldr	r3, [pc, #224]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	2380      	movs	r3, #128	@ 0x80
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4013      	ands	r3, r2
 800123a:	d1f0      	bne.n	800121e <HAL_RCC_OscConfig+0x236>
 800123c:	e000      	b.n	8001240 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800123e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2208      	movs	r2, #8
 8001246:	4013      	ands	r3, r2
 8001248:	d047      	beq.n	80012da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800124a:	4b32      	ldr	r3, [pc, #200]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2238      	movs	r2, #56	@ 0x38
 8001250:	4013      	ands	r3, r2
 8001252:	2b18      	cmp	r3, #24
 8001254:	d10a      	bne.n	800126c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001256:	4b2f      	ldr	r3, [pc, #188]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d03c      	beq.n	80012da <HAL_RCC_OscConfig+0x2f2>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d138      	bne.n	80012da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e1ba      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d019      	beq.n	80012a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001274:	4b27      	ldr	r3, [pc, #156]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 8001276:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001278:	4b26      	ldr	r3, [pc, #152]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800127a:	2101      	movs	r1, #1
 800127c:	430a      	orrs	r2, r1
 800127e:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fb30 	bl	80008e4 <HAL_GetTick>
 8001284:	0003      	movs	r3, r0
 8001286:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff fb2b 	bl	80008e4 <HAL_GetTick>
 800128e:	0002      	movs	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e1a2      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800129c:	4b1d      	ldr	r3, [pc, #116]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 800129e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012a0:	2202      	movs	r2, #2
 80012a2:	4013      	ands	r3, r2
 80012a4:	d0f1      	beq.n	800128a <HAL_RCC_OscConfig+0x2a2>
 80012a6:	e018      	b.n	80012da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80012aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80012ac:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80012ae:	2101      	movs	r1, #1
 80012b0:	438a      	bics	r2, r1
 80012b2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fb16 	bl	80008e4 <HAL_GetTick>
 80012b8:	0003      	movs	r3, r0
 80012ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012bc:	e008      	b.n	80012d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012be:	f7ff fb11 	bl	80008e4 <HAL_GetTick>
 80012c2:	0002      	movs	r2, r0
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d901      	bls.n	80012d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80012cc:	2303      	movs	r3, #3
 80012ce:	e188      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80012d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012d4:	2202      	movs	r2, #2
 80012d6:	4013      	ands	r3, r2
 80012d8:	d1f1      	bne.n	80012be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	2204      	movs	r2, #4
 80012e0:	4013      	ands	r3, r2
 80012e2:	d100      	bne.n	80012e6 <HAL_RCC_OscConfig+0x2fe>
 80012e4:	e0c6      	b.n	8001474 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012e6:	231f      	movs	r3, #31
 80012e8:	18fb      	adds	r3, r7, r3
 80012ea:	2200      	movs	r2, #0
 80012ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80012ee:	4b09      	ldr	r3, [pc, #36]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80012f0:	689b      	ldr	r3, [r3, #8]
 80012f2:	2238      	movs	r2, #56	@ 0x38
 80012f4:	4013      	ands	r3, r2
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d11e      	bne.n	8001338 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80012fa:	4b06      	ldr	r3, [pc, #24]	@ (8001314 <HAL_RCC_OscConfig+0x32c>)
 80012fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012fe:	2202      	movs	r2, #2
 8001300:	4013      	ands	r3, r2
 8001302:	d100      	bne.n	8001306 <HAL_RCC_OscConfig+0x31e>
 8001304:	e0b6      	b.n	8001474 <HAL_RCC_OscConfig+0x48c>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d000      	beq.n	8001310 <HAL_RCC_OscConfig+0x328>
 800130e:	e0b1      	b.n	8001474 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e166      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
 8001314:	40021000 	.word	0x40021000
 8001318:	fffeffff 	.word	0xfffeffff
 800131c:	fffbffff 	.word	0xfffbffff
 8001320:	ffff80ff 	.word	0xffff80ff
 8001324:	ffffc7ff 	.word	0xffffc7ff
 8001328:	00f42400 	.word	0x00f42400
 800132c:	20000000 	.word	0x20000000
 8001330:	20000004 	.word	0x20000004
 8001334:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001338:	4bac      	ldr	r3, [pc, #688]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800133a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800133c:	2380      	movs	r3, #128	@ 0x80
 800133e:	055b      	lsls	r3, r3, #21
 8001340:	4013      	ands	r3, r2
 8001342:	d101      	bne.n	8001348 <HAL_RCC_OscConfig+0x360>
 8001344:	2301      	movs	r3, #1
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x362>
 8001348:	2300      	movs	r3, #0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d011      	beq.n	8001372 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800134e:	4ba7      	ldr	r3, [pc, #668]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001352:	4ba6      	ldr	r3, [pc, #664]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001354:	2180      	movs	r1, #128	@ 0x80
 8001356:	0549      	lsls	r1, r1, #21
 8001358:	430a      	orrs	r2, r1
 800135a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800135c:	4ba3      	ldr	r3, [pc, #652]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800135e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	055b      	lsls	r3, r3, #21
 8001364:	4013      	ands	r3, r2
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800136a:	231f      	movs	r3, #31
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001372:	4b9f      	ldr	r3, [pc, #636]	@ (80015f0 <HAL_RCC_OscConfig+0x608>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	@ 0x80
 8001378:	005b      	lsls	r3, r3, #1
 800137a:	4013      	ands	r3, r2
 800137c:	d11a      	bne.n	80013b4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800137e:	4b9c      	ldr	r3, [pc, #624]	@ (80015f0 <HAL_RCC_OscConfig+0x608>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	4b9b      	ldr	r3, [pc, #620]	@ (80015f0 <HAL_RCC_OscConfig+0x608>)
 8001384:	2180      	movs	r1, #128	@ 0x80
 8001386:	0049      	lsls	r1, r1, #1
 8001388:	430a      	orrs	r2, r1
 800138a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800138c:	f7ff faaa 	bl	80008e4 <HAL_GetTick>
 8001390:	0003      	movs	r3, r0
 8001392:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001394:	e008      	b.n	80013a8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001396:	f7ff faa5 	bl	80008e4 <HAL_GetTick>
 800139a:	0002      	movs	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d901      	bls.n	80013a8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80013a4:	2303      	movs	r3, #3
 80013a6:	e11c      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80013a8:	4b91      	ldr	r3, [pc, #580]	@ (80015f0 <HAL_RCC_OscConfig+0x608>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	2380      	movs	r3, #128	@ 0x80
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4013      	ands	r3, r2
 80013b2:	d0f0      	beq.n	8001396 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d106      	bne.n	80013ca <HAL_RCC_OscConfig+0x3e2>
 80013bc:	4b8b      	ldr	r3, [pc, #556]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013be:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013c0:	4b8a      	ldr	r3, [pc, #552]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013c2:	2101      	movs	r1, #1
 80013c4:	430a      	orrs	r2, r1
 80013c6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013c8:	e01c      	b.n	8001404 <HAL_RCC_OscConfig+0x41c>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	2b05      	cmp	r3, #5
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x404>
 80013d2:	4b86      	ldr	r3, [pc, #536]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013d6:	4b85      	ldr	r3, [pc, #532]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013d8:	2104      	movs	r1, #4
 80013da:	430a      	orrs	r2, r1
 80013dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013de:	4b83      	ldr	r3, [pc, #524]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013e2:	4b82      	ldr	r3, [pc, #520]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013e4:	2101      	movs	r1, #1
 80013e6:	430a      	orrs	r2, r1
 80013e8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0x41c>
 80013ec:	4b7f      	ldr	r3, [pc, #508]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013ee:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013f0:	4b7e      	ldr	r3, [pc, #504]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013f2:	2101      	movs	r1, #1
 80013f4:	438a      	bics	r2, r1
 80013f6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80013f8:	4b7c      	ldr	r3, [pc, #496]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80013fc:	4b7b      	ldr	r3, [pc, #492]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80013fe:	2104      	movs	r1, #4
 8001400:	438a      	bics	r2, r1
 8001402:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d014      	beq.n	8001436 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800140c:	f7ff fa6a 	bl	80008e4 <HAL_GetTick>
 8001410:	0003      	movs	r3, r0
 8001412:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001414:	e009      	b.n	800142a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001416:	f7ff fa65 	bl	80008e4 <HAL_GetTick>
 800141a:	0002      	movs	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	4a74      	ldr	r2, [pc, #464]	@ (80015f4 <HAL_RCC_OscConfig+0x60c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e0db      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800142a:	4b70      	ldr	r3, [pc, #448]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800142c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142e:	2202      	movs	r2, #2
 8001430:	4013      	ands	r3, r2
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x42e>
 8001434:	e013      	b.n	800145e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001436:	f7ff fa55 	bl	80008e4 <HAL_GetTick>
 800143a:	0003      	movs	r3, r0
 800143c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800143e:	e009      	b.n	8001454 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001440:	f7ff fa50 	bl	80008e4 <HAL_GetTick>
 8001444:	0002      	movs	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	4a6a      	ldr	r2, [pc, #424]	@ (80015f4 <HAL_RCC_OscConfig+0x60c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e0c6      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001454:	4b65      	ldr	r3, [pc, #404]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001458:	2202      	movs	r2, #2
 800145a:	4013      	ands	r3, r2
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800145e:	231f      	movs	r3, #31
 8001460:	18fb      	adds	r3, r7, r3
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d105      	bne.n	8001474 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001468:	4b60      	ldr	r3, [pc, #384]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800146a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800146c:	4b5f      	ldr	r3, [pc, #380]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800146e:	4962      	ldr	r1, [pc, #392]	@ (80015f8 <HAL_RCC_OscConfig+0x610>)
 8001470:	400a      	ands	r2, r1
 8001472:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	69db      	ldr	r3, [r3, #28]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d100      	bne.n	800147e <HAL_RCC_OscConfig+0x496>
 800147c:	e0b0      	b.n	80015e0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800147e:	4b5b      	ldr	r3, [pc, #364]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2238      	movs	r2, #56	@ 0x38
 8001484:	4013      	ands	r3, r2
 8001486:	2b10      	cmp	r3, #16
 8001488:	d100      	bne.n	800148c <HAL_RCC_OscConfig+0x4a4>
 800148a:	e078      	b.n	800157e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d153      	bne.n	800153c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001494:	4b55      	ldr	r3, [pc, #340]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b54      	ldr	r3, [pc, #336]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800149a:	4958      	ldr	r1, [pc, #352]	@ (80015fc <HAL_RCC_OscConfig+0x614>)
 800149c:	400a      	ands	r2, r1
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fa20 	bl	80008e4 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014aa:	f7ff fa1b 	bl	80008e4 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e092      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014bc:	4b4b      	ldr	r3, [pc, #300]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	049b      	lsls	r3, r3, #18
 80014c4:	4013      	ands	r3, r2
 80014c6:	d1f0      	bne.n	80014aa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014c8:	4b48      	ldr	r3, [pc, #288]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4a4c      	ldr	r2, [pc, #304]	@ (8001600 <HAL_RCC_OscConfig+0x618>)
 80014ce:	4013      	ands	r3, r2
 80014d0:	0019      	movs	r1, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1a      	ldr	r2, [r3, #32]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e0:	021b      	lsls	r3, r3, #8
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	431a      	orrs	r2, r3
 80014f0:	4b3e      	ldr	r3, [pc, #248]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80014f2:	430a      	orrs	r2, r1
 80014f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	4b3c      	ldr	r3, [pc, #240]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 80014fc:	2180      	movs	r1, #128	@ 0x80
 80014fe:	0449      	lsls	r1, r1, #17
 8001500:	430a      	orrs	r2, r1
 8001502:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001504:	4b39      	ldr	r3, [pc, #228]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800150a:	2180      	movs	r1, #128	@ 0x80
 800150c:	0549      	lsls	r1, r1, #21
 800150e:	430a      	orrs	r2, r1
 8001510:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001512:	f7ff f9e7 	bl	80008e4 <HAL_GetTick>
 8001516:	0003      	movs	r3, r0
 8001518:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800151c:	f7ff f9e2 	bl	80008e4 <HAL_GetTick>
 8001520:	0002      	movs	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b02      	cmp	r3, #2
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e059      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800152e:	4b2f      	ldr	r3, [pc, #188]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	049b      	lsls	r3, r3, #18
 8001536:	4013      	ands	r3, r2
 8001538:	d0f0      	beq.n	800151c <HAL_RCC_OscConfig+0x534>
 800153a:	e051      	b.n	80015e0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800153c:	4b2b      	ldr	r3, [pc, #172]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001542:	492e      	ldr	r1, [pc, #184]	@ (80015fc <HAL_RCC_OscConfig+0x614>)
 8001544:	400a      	ands	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001548:	f7ff f9cc 	bl	80008e4 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff f9c7 	bl	80008e4 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b02      	cmp	r3, #2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e03e      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001564:	4b21      	ldr	r3, [pc, #132]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	2380      	movs	r3, #128	@ 0x80
 800156a:	049b      	lsls	r3, r3, #18
 800156c:	4013      	ands	r3, r2
 800156e:	d1f0      	bne.n	8001552 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001570:	4b1e      	ldr	r3, [pc, #120]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 8001576:	4923      	ldr	r1, [pc, #140]	@ (8001604 <HAL_RCC_OscConfig+0x61c>)
 8001578:	400a      	ands	r2, r1
 800157a:	60da      	str	r2, [r3, #12]
 800157c:	e030      	b.n	80015e0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e02b      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800158a:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <HAL_RCC_OscConfig+0x604>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2203      	movs	r2, #3
 8001594:	401a      	ands	r2, r3
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6a1b      	ldr	r3, [r3, #32]
 800159a:	429a      	cmp	r2, r3
 800159c:	d11e      	bne.n	80015dc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2270      	movs	r2, #112	@ 0x70
 80015a2:	401a      	ands	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d117      	bne.n	80015dc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	23fe      	movs	r3, #254	@ 0xfe
 80015b0:	01db      	lsls	r3, r3, #7
 80015b2:	401a      	ands	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d10e      	bne.n	80015dc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	23f8      	movs	r3, #248	@ 0xf8
 80015c2:	039b      	lsls	r3, r3, #14
 80015c4:	401a      	ands	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	0f5b      	lsrs	r3, r3, #29
 80015d2:	075a      	lsls	r2, r3, #29
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b008      	add	sp, #32
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	46c0      	nop			@ (mov r8, r8)
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40007000 	.word	0x40007000
 80015f4:	00001388 	.word	0x00001388
 80015f8:	efffffff 	.word	0xefffffff
 80015fc:	feffffff 	.word	0xfeffffff
 8001600:	1fc1808c 	.word	0x1fc1808c
 8001604:	effefffc 	.word	0xeffefffc

08001608 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0e9      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800161c:	4b76      	ldr	r3, [pc, #472]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2207      	movs	r2, #7
 8001622:	4013      	ands	r3, r2
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	429a      	cmp	r2, r3
 8001628:	d91e      	bls.n	8001668 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800162a:	4b73      	ldr	r3, [pc, #460]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2207      	movs	r2, #7
 8001630:	4393      	bics	r3, r2
 8001632:	0019      	movs	r1, r3
 8001634:	4b70      	ldr	r3, [pc, #448]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800163c:	f7ff f952 	bl	80008e4 <HAL_GetTick>
 8001640:	0003      	movs	r3, r0
 8001642:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001644:	e009      	b.n	800165a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001646:	f7ff f94d 	bl	80008e4 <HAL_GetTick>
 800164a:	0002      	movs	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	4a6a      	ldr	r2, [pc, #424]	@ (80017fc <HAL_RCC_ClockConfig+0x1f4>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e0ca      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800165a:	4b67      	ldr	r3, [pc, #412]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2207      	movs	r2, #7
 8001660:	4013      	ands	r3, r2
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d1ee      	bne.n	8001646 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2202      	movs	r2, #2
 800166e:	4013      	ands	r3, r2
 8001670:	d015      	beq.n	800169e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2204      	movs	r2, #4
 8001678:	4013      	ands	r3, r2
 800167a:	d006      	beq.n	800168a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800167c:	4b60      	ldr	r3, [pc, #384]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 800167e:	689a      	ldr	r2, [r3, #8]
 8001680:	4b5f      	ldr	r3, [pc, #380]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 8001682:	21e0      	movs	r1, #224	@ 0xe0
 8001684:	01c9      	lsls	r1, r1, #7
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168a:	4b5d      	ldr	r3, [pc, #372]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	4a5d      	ldr	r2, [pc, #372]	@ (8001804 <HAL_RCC_ClockConfig+0x1fc>)
 8001690:	4013      	ands	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	4b59      	ldr	r3, [pc, #356]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 800169a:	430a      	orrs	r2, r1
 800169c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2201      	movs	r2, #1
 80016a4:	4013      	ands	r3, r2
 80016a6:	d057      	beq.n	8001758 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016b0:	4b53      	ldr	r3, [pc, #332]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	d12b      	bne.n	8001714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e097      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d107      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	@ 0x80
 80016ce:	049b      	lsls	r3, r3, #18
 80016d0:	4013      	ands	r3, r2
 80016d2:	d11f      	bne.n	8001714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e08b      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d107      	bne.n	80016f0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e0:	4b47      	ldr	r3, [pc, #284]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	@ 0x80
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	4013      	ands	r3, r2
 80016ea:	d113      	bne.n	8001714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e07f      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d106      	bne.n	8001706 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016f8:	4b41      	ldr	r3, [pc, #260]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80016fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016fc:	2202      	movs	r2, #2
 80016fe:	4013      	ands	r3, r2
 8001700:	d108      	bne.n	8001714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e074      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001706:	4b3e      	ldr	r3, [pc, #248]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 8001708:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800170a:	2202      	movs	r2, #2
 800170c:	4013      	ands	r3, r2
 800170e:	d101      	bne.n	8001714 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	e06d      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001714:	4b3a      	ldr	r3, [pc, #232]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	2207      	movs	r2, #7
 800171a:	4393      	bics	r3, r2
 800171c:	0019      	movs	r1, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4b37      	ldr	r3, [pc, #220]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 8001724:	430a      	orrs	r2, r1
 8001726:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001728:	f7ff f8dc 	bl	80008e4 <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001730:	e009      	b.n	8001746 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001732:	f7ff f8d7 	bl	80008e4 <HAL_GetTick>
 8001736:	0002      	movs	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	4a2f      	ldr	r2, [pc, #188]	@ (80017fc <HAL_RCC_ClockConfig+0x1f4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e054      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001746:	4b2e      	ldr	r3, [pc, #184]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	2238      	movs	r2, #56	@ 0x38
 800174c:	401a      	ands	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	00db      	lsls	r3, r3, #3
 8001754:	429a      	cmp	r2, r3
 8001756:	d1ec      	bne.n	8001732 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001758:	4b27      	ldr	r3, [pc, #156]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2207      	movs	r2, #7
 800175e:	4013      	ands	r3, r2
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d21e      	bcs.n	80017a4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b24      	ldr	r3, [pc, #144]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2207      	movs	r2, #7
 800176c:	4393      	bics	r3, r2
 800176e:	0019      	movs	r1, r3
 8001770:	4b21      	ldr	r3, [pc, #132]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001778:	f7ff f8b4 	bl	80008e4 <HAL_GetTick>
 800177c:	0003      	movs	r3, r0
 800177e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001780:	e009      	b.n	8001796 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001782:	f7ff f8af 	bl	80008e4 <HAL_GetTick>
 8001786:	0002      	movs	r2, r0
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <HAL_RCC_ClockConfig+0x1f4>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e02c      	b.n	80017f0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_RCC_ClockConfig+0x1f0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2207      	movs	r2, #7
 800179c:	4013      	ands	r3, r2
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d1ee      	bne.n	8001782 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2204      	movs	r2, #4
 80017aa:	4013      	ands	r3, r2
 80017ac:	d009      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017ae:	4b14      	ldr	r3, [pc, #80]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	4a15      	ldr	r2, [pc, #84]	@ (8001808 <HAL_RCC_ClockConfig+0x200>)
 80017b4:	4013      	ands	r3, r2
 80017b6:	0019      	movs	r1, r3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68da      	ldr	r2, [r3, #12]
 80017bc:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017c2:	f000 f829 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80017c6:	0001      	movs	r1, r0
 80017c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <HAL_RCC_ClockConfig+0x1f8>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	220f      	movs	r2, #15
 80017d0:	401a      	ands	r2, r3
 80017d2:	4b0e      	ldr	r3, [pc, #56]	@ (800180c <HAL_RCC_ClockConfig+0x204>)
 80017d4:	0092      	lsls	r2, r2, #2
 80017d6:	58d3      	ldr	r3, [r2, r3]
 80017d8:	221f      	movs	r2, #31
 80017da:	4013      	ands	r3, r2
 80017dc:	000a      	movs	r2, r1
 80017de:	40da      	lsrs	r2, r3
 80017e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001810 <HAL_RCC_ClockConfig+0x208>)
 80017e2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017e4:	4b0b      	ldr	r3, [pc, #44]	@ (8001814 <HAL_RCC_ClockConfig+0x20c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	0018      	movs	r0, r3
 80017ea:	f7ff f81f 	bl	800082c <HAL_InitTick>
 80017ee:	0003      	movs	r3, r0
}
 80017f0:	0018      	movs	r0, r3
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b004      	add	sp, #16
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40022000 	.word	0x40022000
 80017fc:	00001388 	.word	0x00001388
 8001800:	40021000 	.word	0x40021000
 8001804:	fffff0ff 	.word	0xfffff0ff
 8001808:	ffff8fff 	.word	0xffff8fff
 800180c:	08003bcc 	.word	0x08003bcc
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004

08001818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800181e:	4b3c      	ldr	r3, [pc, #240]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	2238      	movs	r2, #56	@ 0x38
 8001824:	4013      	ands	r3, r2
 8001826:	d10f      	bne.n	8001848 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001828:	4b39      	ldr	r3, [pc, #228]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	0adb      	lsrs	r3, r3, #11
 800182e:	2207      	movs	r2, #7
 8001830:	4013      	ands	r3, r2
 8001832:	2201      	movs	r2, #1
 8001834:	409a      	lsls	r2, r3
 8001836:	0013      	movs	r3, r2
 8001838:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800183a:	6839      	ldr	r1, [r7, #0]
 800183c:	4835      	ldr	r0, [pc, #212]	@ (8001914 <HAL_RCC_GetSysClockFreq+0xfc>)
 800183e:	f7fe fc67 	bl	8000110 <__udivsi3>
 8001842:	0003      	movs	r3, r0
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	e05d      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001848:	4b31      	ldr	r3, [pc, #196]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2238      	movs	r2, #56	@ 0x38
 800184e:	4013      	ands	r3, r2
 8001850:	2b08      	cmp	r3, #8
 8001852:	d102      	bne.n	800185a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001854:	4b30      	ldr	r3, [pc, #192]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x100>)
 8001856:	613b      	str	r3, [r7, #16]
 8001858:	e054      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800185a:	4b2d      	ldr	r3, [pc, #180]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	2238      	movs	r2, #56	@ 0x38
 8001860:	4013      	ands	r3, r2
 8001862:	2b10      	cmp	r3, #16
 8001864:	d138      	bne.n	80018d8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001866:	4b2a      	ldr	r3, [pc, #168]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	2203      	movs	r2, #3
 800186c:	4013      	ands	r3, r2
 800186e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001870:	4b27      	ldr	r3, [pc, #156]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	2207      	movs	r2, #7
 8001878:	4013      	ands	r3, r2
 800187a:	3301      	adds	r3, #1
 800187c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d10d      	bne.n	80018a0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001884:	68b9      	ldr	r1, [r7, #8]
 8001886:	4824      	ldr	r0, [pc, #144]	@ (8001918 <HAL_RCC_GetSysClockFreq+0x100>)
 8001888:	f7fe fc42 	bl	8000110 <__udivsi3>
 800188c:	0003      	movs	r3, r0
 800188e:	0019      	movs	r1, r3
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	227f      	movs	r2, #127	@ 0x7f
 8001898:	4013      	ands	r3, r2
 800189a:	434b      	muls	r3, r1
 800189c:	617b      	str	r3, [r7, #20]
        break;
 800189e:	e00d      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80018a0:	68b9      	ldr	r1, [r7, #8]
 80018a2:	481c      	ldr	r0, [pc, #112]	@ (8001914 <HAL_RCC_GetSysClockFreq+0xfc>)
 80018a4:	f7fe fc34 	bl	8000110 <__udivsi3>
 80018a8:	0003      	movs	r3, r0
 80018aa:	0019      	movs	r1, r3
 80018ac:	4b18      	ldr	r3, [pc, #96]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	227f      	movs	r2, #127	@ 0x7f
 80018b4:	4013      	ands	r3, r2
 80018b6:	434b      	muls	r3, r1
 80018b8:	617b      	str	r3, [r7, #20]
        break;
 80018ba:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80018bc:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018be:	68db      	ldr	r3, [r3, #12]
 80018c0:	0f5b      	lsrs	r3, r3, #29
 80018c2:	2207      	movs	r2, #7
 80018c4:	4013      	ands	r3, r2
 80018c6:	3301      	adds	r3, #1
 80018c8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	6978      	ldr	r0, [r7, #20]
 80018ce:	f7fe fc1f 	bl	8000110 <__udivsi3>
 80018d2:	0003      	movs	r3, r0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	e015      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80018d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	2238      	movs	r2, #56	@ 0x38
 80018de:	4013      	ands	r3, r2
 80018e0:	2b20      	cmp	r3, #32
 80018e2:	d103      	bne.n	80018ec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80018e4:	2380      	movs	r3, #128	@ 0x80
 80018e6:	021b      	lsls	r3, r3, #8
 80018e8:	613b      	str	r3, [r7, #16]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80018ec:	4b08      	ldr	r3, [pc, #32]	@ (8001910 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	2238      	movs	r2, #56	@ 0x38
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b18      	cmp	r3, #24
 80018f6:	d103      	bne.n	8001900 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80018f8:	23fa      	movs	r3, #250	@ 0xfa
 80018fa:	01db      	lsls	r3, r3, #7
 80018fc:	613b      	str	r3, [r7, #16]
 80018fe:	e001      	b.n	8001904 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001900:	2300      	movs	r3, #0
 8001902:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001904:	693b      	ldr	r3, [r7, #16]
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	b006      	add	sp, #24
 800190c:	bd80      	pop	{r7, pc}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	40021000 	.word	0x40021000
 8001914:	00f42400 	.word	0x00f42400
 8001918:	007a1200 	.word	0x007a1200

0800191c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001920:	4b02      	ldr	r3, [pc, #8]	@ (800192c <HAL_RCC_GetHCLKFreq+0x10>)
 8001922:	681b      	ldr	r3, [r3, #0]
}
 8001924:	0018      	movs	r0, r3
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	46c0      	nop			@ (mov r8, r8)
 800192c:	20000000 	.word	0x20000000

08001930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001934:	f7ff fff2 	bl	800191c <HAL_RCC_GetHCLKFreq>
 8001938:	0004      	movs	r4, r0
 800193a:	f7ff fb49 	bl	8000fd0 <LL_RCC_GetAPB1Prescaler>
 800193e:	0003      	movs	r3, r0
 8001940:	0b1a      	lsrs	r2, r3, #12
 8001942:	4b05      	ldr	r3, [pc, #20]	@ (8001958 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001944:	0092      	lsls	r2, r2, #2
 8001946:	58d3      	ldr	r3, [r2, r3]
 8001948:	221f      	movs	r2, #31
 800194a:	4013      	ands	r3, r2
 800194c:	40dc      	lsrs	r4, r3
 800194e:	0023      	movs	r3, r4
}
 8001950:	0018      	movs	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	bdb0      	pop	{r4, r5, r7, pc}
 8001956:	46c0      	nop			@ (mov r8, r8)
 8001958:	08003c0c 	.word	0x08003c0c

0800195c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e046      	b.n	80019fc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2288      	movs	r2, #136	@ 0x88
 8001972:	589b      	ldr	r3, [r3, r2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2284      	movs	r2, #132	@ 0x84
 800197c:	2100      	movs	r1, #0
 800197e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	0018      	movs	r0, r3
 8001984:	f7fe fe42 	bl	800060c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2288      	movs	r2, #136	@ 0x88
 800198c:	2124      	movs	r1, #36	@ 0x24
 800198e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2101      	movs	r1, #1
 800199c:	438a      	bics	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	0018      	movs	r0, r3
 80019ac:	f000 fe0a 	bl	80025c4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f000 fc62 	bl	800227c <UART_SetConfig>
 80019b8:	0003      	movs	r3, r0
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d101      	bne.n	80019c2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e01c      	b.n	80019fc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	490d      	ldr	r1, [pc, #52]	@ (8001a04 <HAL_UART_Init+0xa8>)
 80019ce:	400a      	ands	r2, r1
 80019d0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	212a      	movs	r1, #42	@ 0x2a
 80019de:	438a      	bics	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2101      	movs	r1, #1
 80019ee:	430a      	orrs	r2, r1
 80019f0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 fe99 	bl	800272c <UART_CheckIdleState>
 80019fa:	0003      	movs	r3, r0
}
 80019fc:	0018      	movs	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b002      	add	sp, #8
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	ffffb7ff 	.word	0xffffb7ff

08001a08 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	@ 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	1dbb      	adds	r3, r7, #6
 8001a14:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2288      	movs	r2, #136	@ 0x88
 8001a1a:	589b      	ldr	r3, [r3, r2]
 8001a1c:	2b20      	cmp	r3, #32
 8001a1e:	d000      	beq.n	8001a22 <HAL_UART_Transmit_IT+0x1a>
 8001a20:	e08d      	b.n	8001b3e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_UART_Transmit_IT+0x28>
 8001a28:	1dbb      	adds	r3, r7, #6
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d101      	bne.n	8001a34 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	e085      	b.n	8001b40 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	2380      	movs	r3, #128	@ 0x80
 8001a3a:	015b      	lsls	r3, r3, #5
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d109      	bne.n	8001a54 <HAL_UART_Transmit_IT+0x4c>
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d105      	bne.n	8001a54 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	d001      	beq.n	8001a54 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e075      	b.n	8001b40 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	68ba      	ldr	r2, [r7, #8]
 8001a58:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	1dba      	adds	r2, r7, #6
 8001a5e:	2154      	movs	r1, #84	@ 0x54
 8001a60:	8812      	ldrh	r2, [r2, #0]
 8001a62:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	1dba      	adds	r2, r7, #6
 8001a68:	2156      	movs	r1, #86	@ 0x56
 8001a6a:	8812      	ldrh	r2, [r2, #0]
 8001a6c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	2200      	movs	r2, #0
 8001a72:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2290      	movs	r2, #144	@ 0x90
 8001a78:	2100      	movs	r1, #0
 8001a7a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2288      	movs	r2, #136	@ 0x88
 8001a80:	2121      	movs	r1, #33	@ 0x21
 8001a82:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	059b      	lsls	r3, r3, #22
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d12a      	bne.n	8001ae6 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	2380      	movs	r3, #128	@ 0x80
 8001a96:	015b      	lsls	r3, r3, #5
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d107      	bne.n	8001aac <HAL_UART_Transmit_IT+0xa4>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d103      	bne.n	8001aac <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	4a28      	ldr	r2, [pc, #160]	@ (8001b48 <HAL_UART_Transmit_IT+0x140>)
 8001aa8:	679a      	str	r2, [r3, #120]	@ 0x78
 8001aaa:	e002      	b.n	8001ab2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4a27      	ldr	r2, [pc, #156]	@ (8001b4c <HAL_UART_Transmit_IT+0x144>)
 8001ab0:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ab2:	f3ef 8310 	mrs	r3, PRIMASK
 8001ab6:	61fb      	str	r3, [r7, #28]
  return(result);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8001aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001abc:	2301      	movs	r3, #1
 8001abe:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ac0:	6a3b      	ldr	r3, [r7, #32]
 8001ac2:	f383 8810 	msr	PRIMASK, r3
}
 8001ac6:	46c0      	nop			@ (mov r8, r8)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	0409      	lsls	r1, r1, #16
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001adc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ae0:	f383 8810 	msr	PRIMASK, r3
}
 8001ae4:	e029      	b.n	8001b3a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	2380      	movs	r3, #128	@ 0x80
 8001aec:	015b      	lsls	r3, r3, #5
 8001aee:	429a      	cmp	r2, r3
 8001af0:	d107      	bne.n	8001b02 <HAL_UART_Transmit_IT+0xfa>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d103      	bne.n	8001b02 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4a14      	ldr	r2, [pc, #80]	@ (8001b50 <HAL_UART_Transmit_IT+0x148>)
 8001afe:	679a      	str	r2, [r3, #120]	@ 0x78
 8001b00:	e002      	b.n	8001b08 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a13      	ldr	r2, [pc, #76]	@ (8001b54 <HAL_UART_Transmit_IT+0x14c>)
 8001b06:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001b08:	f3ef 8310 	mrs	r3, PRIMASK
 8001b0c:	613b      	str	r3, [r7, #16]
  return(result);
 8001b0e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b12:	2301      	movs	r3, #1
 8001b14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	f383 8810 	msr	PRIMASK, r3
}
 8001b1c:	46c0      	nop			@ (mov r8, r8)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2180      	movs	r1, #128	@ 0x80
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	f383 8810 	msr	PRIMASK, r3
}
 8001b38:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001b3e:	2302      	movs	r3, #2
  }
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b00c      	add	sp, #48	@ 0x30
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	08002f01 	.word	0x08002f01
 8001b4c:	08002e15 	.word	0x08002e15
 8001b50:	08002d57 	.word	0x08002d57
 8001b54:	08002ca3 	.word	0x08002ca3

08001b58 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b088      	sub	sp, #32
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	1dbb      	adds	r3, r7, #6
 8001b64:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	228c      	movs	r2, #140	@ 0x8c
 8001b6a:	589b      	ldr	r3, [r3, r2]
 8001b6c:	2b20      	cmp	r3, #32
 8001b6e:	d145      	bne.n	8001bfc <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_UART_Receive_IT+0x26>
 8001b76:	1dbb      	adds	r3, r7, #6
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e03d      	b.n	8001bfe <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	689a      	ldr	r2, [r3, #8]
 8001b86:	2380      	movs	r3, #128	@ 0x80
 8001b88:	015b      	lsls	r3, r3, #5
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d109      	bne.n	8001ba2 <HAL_UART_Receive_IT+0x4a>
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d105      	bne.n	8001ba2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	d001      	beq.n	8001ba2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e02d      	b.n	8001bfe <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	685a      	ldr	r2, [r3, #4]
 8001bae:	2380      	movs	r3, #128	@ 0x80
 8001bb0:	041b      	lsls	r3, r3, #16
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001bb6:	f3ef 8310 	mrs	r3, PRIMASK
 8001bba:	613b      	str	r3, [r7, #16]
  return(result);
 8001bbc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8001bbe:	61fb      	str	r3, [r7, #28]
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	f383 8810 	msr	PRIMASK, r3
}
 8001bca:	46c0      	nop			@ (mov r8, r8)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2180      	movs	r1, #128	@ 0x80
 8001bd8:	04c9      	lsls	r1, r1, #19
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f383 8810 	msr	PRIMASK, r3
}
 8001be8:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001bea:	1dbb      	adds	r3, r7, #6
 8001bec:	881a      	ldrh	r2, [r3, #0]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f000 feb4 	bl	8002960 <UART_Start_Receive_IT>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	e000      	b.n	8001bfe <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8001bfc:	2302      	movs	r3, #2
  }
}
 8001bfe:	0018      	movs	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	b008      	add	sp, #32
 8001c04:	bd80      	pop	{r7, pc}
	...

08001c08 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c08:	b5b0      	push	{r4, r5, r7, lr}
 8001c0a:	b0aa      	sub	sp, #168	@ 0xa8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	22a4      	movs	r2, #164	@ 0xa4
 8001c18:	18b9      	adds	r1, r7, r2
 8001c1a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	20a0      	movs	r0, #160	@ 0xa0
 8001c24:	1839      	adds	r1, r7, r0
 8001c26:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	249c      	movs	r4, #156	@ 0x9c
 8001c30:	1939      	adds	r1, r7, r4
 8001c32:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001c34:	0011      	movs	r1, r2
 8001c36:	18bb      	adds	r3, r7, r2
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4aa2      	ldr	r2, [pc, #648]	@ (8001ec4 <HAL_UART_IRQHandler+0x2bc>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	2298      	movs	r2, #152	@ 0x98
 8001c40:	18bd      	adds	r5, r7, r2
 8001c42:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001c44:	18bb      	adds	r3, r7, r2
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d11a      	bne.n	8001c82 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2220      	movs	r2, #32
 8001c52:	4013      	ands	r3, r2
 8001c54:	d015      	beq.n	8001c82 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001c56:	183b      	adds	r3, r7, r0
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d105      	bne.n	8001c6c <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001c60:	193b      	adds	r3, r7, r4
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2380      	movs	r3, #128	@ 0x80
 8001c66:	055b      	lsls	r3, r3, #21
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d00a      	beq.n	8001c82 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d100      	bne.n	8001c76 <HAL_UART_IRQHandler+0x6e>
 8001c74:	e2dc      	b.n	8002230 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	0010      	movs	r0, r2
 8001c7e:	4798      	blx	r3
      }
      return;
 8001c80:	e2d6      	b.n	8002230 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001c82:	2398      	movs	r3, #152	@ 0x98
 8001c84:	18fb      	adds	r3, r7, r3
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d100      	bne.n	8001c8e <HAL_UART_IRQHandler+0x86>
 8001c8c:	e122      	b.n	8001ed4 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001c8e:	239c      	movs	r3, #156	@ 0x9c
 8001c90:	18fb      	adds	r3, r7, r3
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a8c      	ldr	r2, [pc, #560]	@ (8001ec8 <HAL_UART_IRQHandler+0x2c0>)
 8001c96:	4013      	ands	r3, r2
 8001c98:	d106      	bne.n	8001ca8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001c9a:	23a0      	movs	r3, #160	@ 0xa0
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a8a      	ldr	r2, [pc, #552]	@ (8001ecc <HAL_UART_IRQHandler+0x2c4>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d100      	bne.n	8001ca8 <HAL_UART_IRQHandler+0xa0>
 8001ca6:	e115      	b.n	8001ed4 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ca8:	23a4      	movs	r3, #164	@ 0xa4
 8001caa:	18fb      	adds	r3, r7, r3
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d012      	beq.n	8001cda <HAL_UART_IRQHandler+0xd2>
 8001cb4:	23a0      	movs	r3, #160	@ 0xa0
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	@ 0x80
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d00b      	beq.n	8001cda <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2290      	movs	r2, #144	@ 0x90
 8001cce:	589b      	ldr	r3, [r3, r2]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2190      	movs	r1, #144	@ 0x90
 8001cd8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001cda:	23a4      	movs	r3, #164	@ 0xa4
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d011      	beq.n	8001d0a <HAL_UART_IRQHandler+0x102>
 8001ce6:	239c      	movs	r3, #156	@ 0x9c
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d00b      	beq.n	8001d0a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2202      	movs	r2, #2
 8001cf8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2290      	movs	r2, #144	@ 0x90
 8001cfe:	589b      	ldr	r3, [r3, r2]
 8001d00:	2204      	movs	r2, #4
 8001d02:	431a      	orrs	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2190      	movs	r1, #144	@ 0x90
 8001d08:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001d0a:	23a4      	movs	r3, #164	@ 0xa4
 8001d0c:	18fb      	adds	r3, r7, r3
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2204      	movs	r2, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d011      	beq.n	8001d3a <HAL_UART_IRQHandler+0x132>
 8001d16:	239c      	movs	r3, #156	@ 0x9c
 8001d18:	18fb      	adds	r3, r7, r3
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	4013      	ands	r3, r2
 8001d20:	d00b      	beq.n	8001d3a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2204      	movs	r2, #4
 8001d28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2290      	movs	r2, #144	@ 0x90
 8001d2e:	589b      	ldr	r3, [r3, r2]
 8001d30:	2202      	movs	r2, #2
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2190      	movs	r1, #144	@ 0x90
 8001d38:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001d3a:	23a4      	movs	r3, #164	@ 0xa4
 8001d3c:	18fb      	adds	r3, r7, r3
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2208      	movs	r2, #8
 8001d42:	4013      	ands	r3, r2
 8001d44:	d017      	beq.n	8001d76 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001d46:	23a0      	movs	r3, #160	@ 0xa0
 8001d48:	18fb      	adds	r3, r7, r3
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	4013      	ands	r3, r2
 8001d50:	d105      	bne.n	8001d5e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001d52:	239c      	movs	r3, #156	@ 0x9c
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a5b      	ldr	r2, [pc, #364]	@ (8001ec8 <HAL_UART_IRQHandler+0x2c0>)
 8001d5a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001d5c:	d00b      	beq.n	8001d76 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2208      	movs	r2, #8
 8001d64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2290      	movs	r2, #144	@ 0x90
 8001d6a:	589b      	ldr	r3, [r3, r2]
 8001d6c:	2208      	movs	r2, #8
 8001d6e:	431a      	orrs	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2190      	movs	r1, #144	@ 0x90
 8001d74:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001d76:	23a4      	movs	r3, #164	@ 0xa4
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	2380      	movs	r3, #128	@ 0x80
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4013      	ands	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_UART_IRQHandler+0x1a4>
 8001d84:	23a0      	movs	r3, #160	@ 0xa0
 8001d86:	18fb      	adds	r3, r7, r3
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	2380      	movs	r3, #128	@ 0x80
 8001d8c:	04db      	lsls	r3, r3, #19
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d00c      	beq.n	8001dac <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2280      	movs	r2, #128	@ 0x80
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2290      	movs	r2, #144	@ 0x90
 8001da0:	589b      	ldr	r3, [r3, r2]
 8001da2:	2220      	movs	r2, #32
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2190      	movs	r1, #144	@ 0x90
 8001daa:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2290      	movs	r2, #144	@ 0x90
 8001db0:	589b      	ldr	r3, [r3, r2]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d100      	bne.n	8001db8 <HAL_UART_IRQHandler+0x1b0>
 8001db6:	e23d      	b.n	8002234 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001db8:	23a4      	movs	r3, #164	@ 0xa4
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	d015      	beq.n	8001df0 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001dc4:	23a0      	movs	r3, #160	@ 0xa0
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d106      	bne.n	8001dde <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001dd0:	239c      	movs	r3, #156	@ 0x9c
 8001dd2:	18fb      	adds	r3, r7, r3
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	@ 0x80
 8001dd8:	055b      	lsls	r3, r3, #21
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d008      	beq.n	8001df0 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d004      	beq.n	8001df0 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	0010      	movs	r0, r2
 8001dee:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2290      	movs	r2, #144	@ 0x90
 8001df4:	589b      	ldr	r3, [r3, r2]
 8001df6:	2194      	movs	r1, #148	@ 0x94
 8001df8:	187a      	adds	r2, r7, r1
 8001dfa:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2240      	movs	r2, #64	@ 0x40
 8001e04:	4013      	ands	r3, r2
 8001e06:	2b40      	cmp	r3, #64	@ 0x40
 8001e08:	d004      	beq.n	8001e14 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2228      	movs	r2, #40	@ 0x28
 8001e10:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001e12:	d04c      	beq.n	8001eae <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	0018      	movs	r0, r3
 8001e18:	f000 fec6 	bl	8002ba8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2240      	movs	r2, #64	@ 0x40
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b40      	cmp	r3, #64	@ 0x40
 8001e28:	d13c      	bne.n	8001ea4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e2a:	f3ef 8310 	mrs	r3, PRIMASK
 8001e2e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8001e30:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e32:	2090      	movs	r0, #144	@ 0x90
 8001e34:	183a      	adds	r2, r7, r0
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e3e:	f383 8810 	msr	PRIMASK, r3
}
 8001e42:	46c0      	nop			@ (mov r8, r8)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2140      	movs	r1, #64	@ 0x40
 8001e50:	438a      	bics	r2, r1
 8001e52:	609a      	str	r2, [r3, #8]
 8001e54:	183b      	adds	r3, r7, r0
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001e5c:	f383 8810 	msr	PRIMASK, r3
}
 8001e60:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2280      	movs	r2, #128	@ 0x80
 8001e66:	589b      	ldr	r3, [r3, r2]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d016      	beq.n	8001e9a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2280      	movs	r2, #128	@ 0x80
 8001e70:	589b      	ldr	r3, [r3, r2]
 8001e72:	4a17      	ldr	r2, [pc, #92]	@ (8001ed0 <HAL_UART_IRQHandler+0x2c8>)
 8001e74:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2280      	movs	r2, #128	@ 0x80
 8001e7a:	589b      	ldr	r3, [r3, r2]
 8001e7c:	0018      	movs	r0, r3
 8001e7e:	f7fe fe7b 	bl	8000b78 <HAL_DMA_Abort_IT>
 8001e82:	1e03      	subs	r3, r0, #0
 8001e84:	d01c      	beq.n	8001ec0 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2280      	movs	r2, #128	@ 0x80
 8001e8a:	589b      	ldr	r3, [r3, r2]
 8001e8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	2180      	movs	r1, #128	@ 0x80
 8001e92:	5852      	ldr	r2, [r2, r1]
 8001e94:	0010      	movs	r0, r2
 8001e96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e98:	e012      	b.n	8001ec0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 f9d9 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ea2:	e00d      	b.n	8001ec0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f000 f9d4 	bl	8002254 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eac:	e008      	b.n	8001ec0 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	f000 f9cf 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2290      	movs	r2, #144	@ 0x90
 8001eba:	2100      	movs	r1, #0
 8001ebc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8001ebe:	e1b9      	b.n	8002234 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ec0:	46c0      	nop			@ (mov r8, r8)
    return;
 8001ec2:	e1b7      	b.n	8002234 <HAL_UART_IRQHandler+0x62c>
 8001ec4:	0000080f 	.word	0x0000080f
 8001ec8:	10000001 	.word	0x10000001
 8001ecc:	04000120 	.word	0x04000120
 8001ed0:	08002c75 	.word	0x08002c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d000      	beq.n	8001ede <HAL_UART_IRQHandler+0x2d6>
 8001edc:	e13e      	b.n	800215c <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8001ede:	23a4      	movs	r3, #164	@ 0xa4
 8001ee0:	18fb      	adds	r3, r7, r3
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2210      	movs	r2, #16
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d100      	bne.n	8001eec <HAL_UART_IRQHandler+0x2e4>
 8001eea:	e137      	b.n	800215c <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8001eec:	23a0      	movs	r3, #160	@ 0xa0
 8001eee:	18fb      	adds	r3, r7, r3
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d100      	bne.n	8001efa <HAL_UART_IRQHandler+0x2f2>
 8001ef8:	e130      	b.n	800215c <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2210      	movs	r2, #16
 8001f00:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2240      	movs	r2, #64	@ 0x40
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	2b40      	cmp	r3, #64	@ 0x40
 8001f0e:	d000      	beq.n	8001f12 <HAL_UART_IRQHandler+0x30a>
 8001f10:	e0a4      	b.n	800205c <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2280      	movs	r2, #128	@ 0x80
 8001f16:	589b      	ldr	r3, [r3, r2]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	217e      	movs	r1, #126	@ 0x7e
 8001f1e:	187b      	adds	r3, r7, r1
 8001f20:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8001f22:	187b      	adds	r3, r7, r1
 8001f24:	881b      	ldrh	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d100      	bne.n	8001f2c <HAL_UART_IRQHandler+0x324>
 8001f2a:	e185      	b.n	8002238 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	225c      	movs	r2, #92	@ 0x5c
 8001f30:	5a9b      	ldrh	r3, [r3, r2]
 8001f32:	187a      	adds	r2, r7, r1
 8001f34:	8812      	ldrh	r2, [r2, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d300      	bcc.n	8001f3c <HAL_UART_IRQHandler+0x334>
 8001f3a:	e17d      	b.n	8002238 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	187a      	adds	r2, r7, r1
 8001f40:	215e      	movs	r1, #94	@ 0x5e
 8001f42:	8812      	ldrh	r2, [r2, #0]
 8001f44:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2280      	movs	r2, #128	@ 0x80
 8001f4a:	589b      	ldr	r3, [r3, r2]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2220      	movs	r2, #32
 8001f52:	4013      	ands	r3, r2
 8001f54:	d170      	bne.n	8002038 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f56:	f3ef 8310 	mrs	r3, PRIMASK
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8001f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001f5e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001f60:	2301      	movs	r3, #1
 8001f62:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f66:	f383 8810 	msr	PRIMASK, r3
}
 8001f6a:	46c0      	nop			@ (mov r8, r8)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	49b4      	ldr	r1, [pc, #720]	@ (8002248 <HAL_UART_IRQHandler+0x640>)
 8001f78:	400a      	ands	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
 8001f7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f82:	f383 8810 	msr	PRIMASK, r3
}
 8001f86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001f88:	f3ef 8310 	mrs	r3, PRIMASK
 8001f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8001f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f90:	677b      	str	r3, [r7, #116]	@ 0x74
 8001f92:	2301      	movs	r3, #1
 8001f94:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001f96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f98:	f383 8810 	msr	PRIMASK, r3
}
 8001f9c:	46c0      	nop			@ (mov r8, r8)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	2101      	movs	r1, #1
 8001faa:	438a      	bics	r2, r1
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001fb0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fb4:	f383 8810 	msr	PRIMASK, r3
}
 8001fb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001fba:	f3ef 8310 	mrs	r3, PRIMASK
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8001fc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001fc2:	673b      	str	r3, [r7, #112]	@ 0x70
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001fca:	f383 8810 	msr	PRIMASK, r3
}
 8001fce:	46c0      	nop			@ (mov r8, r8)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689a      	ldr	r2, [r3, #8]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2140      	movs	r1, #64	@ 0x40
 8001fdc:	438a      	bics	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001fe2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001fe4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001fe6:	f383 8810 	msr	PRIMASK, r3
}
 8001fea:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	228c      	movs	r2, #140	@ 0x8c
 8001ff0:	2120      	movs	r1, #32
 8001ff2:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001ffa:	f3ef 8310 	mrs	r3, PRIMASK
 8001ffe:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002002:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002004:	2301      	movs	r3, #1
 8002006:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002008:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800200a:	f383 8810 	msr	PRIMASK, r3
}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2110      	movs	r1, #16
 800201c:	438a      	bics	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002022:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002024:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002026:	f383 8810 	msr	PRIMASK, r3
}
 800202a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2280      	movs	r2, #128	@ 0x80
 8002030:	589b      	ldr	r3, [r3, r2]
 8002032:	0018      	movs	r0, r3
 8002034:	f7fe fd3e 	bl	8000ab4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	225c      	movs	r2, #92	@ 0x5c
 8002042:	5a9a      	ldrh	r2, [r3, r2]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	215e      	movs	r1, #94	@ 0x5e
 8002048:	5a5b      	ldrh	r3, [r3, r1]
 800204a:	b29b      	uxth	r3, r3
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	b29a      	uxth	r2, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	0011      	movs	r1, r2
 8002054:	0018      	movs	r0, r3
 8002056:	f000 f905 	bl	8002264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800205a:	e0ed      	b.n	8002238 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	225c      	movs	r2, #92	@ 0x5c
 8002060:	5a99      	ldrh	r1, [r3, r2]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	225e      	movs	r2, #94	@ 0x5e
 8002066:	5a9b      	ldrh	r3, [r3, r2]
 8002068:	b29a      	uxth	r2, r3
 800206a:	208e      	movs	r0, #142	@ 0x8e
 800206c:	183b      	adds	r3, r7, r0
 800206e:	1a8a      	subs	r2, r1, r2
 8002070:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	225e      	movs	r2, #94	@ 0x5e
 8002076:	5a9b      	ldrh	r3, [r3, r2]
 8002078:	b29b      	uxth	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <HAL_UART_IRQHandler+0x478>
 800207e:	e0dd      	b.n	800223c <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002080:	183b      	adds	r3, r7, r0
 8002082:	881b      	ldrh	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d100      	bne.n	800208a <HAL_UART_IRQHandler+0x482>
 8002088:	e0d8      	b.n	800223c <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800208a:	f3ef 8310 	mrs	r3, PRIMASK
 800208e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002090:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002092:	2488      	movs	r4, #136	@ 0x88
 8002094:	193a      	adds	r2, r7, r4
 8002096:	6013      	str	r3, [r2, #0]
 8002098:	2301      	movs	r3, #1
 800209a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f383 8810 	msr	PRIMASK, r3
}
 80020a2:	46c0      	nop			@ (mov r8, r8)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4967      	ldr	r1, [pc, #412]	@ (800224c <HAL_UART_IRQHandler+0x644>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	193b      	adds	r3, r7, r4
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	f383 8810 	msr	PRIMASK, r3
}
 80020c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020c2:	f3ef 8310 	mrs	r3, PRIMASK
 80020c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80020c8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80020ca:	2484      	movs	r4, #132	@ 0x84
 80020cc:	193a      	adds	r2, r7, r4
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	2301      	movs	r3, #1
 80020d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f383 8810 	msr	PRIMASK, r3
}
 80020da:	46c0      	nop			@ (mov r8, r8)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	495a      	ldr	r1, [pc, #360]	@ (8002250 <HAL_UART_IRQHandler+0x648>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	609a      	str	r2, [r3, #8]
 80020ec:	193b      	adds	r3, r7, r4
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	f383 8810 	msr	PRIMASK, r3
}
 80020f8:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	228c      	movs	r2, #140	@ 0x8c
 80020fe:	2120      	movs	r1, #32
 8002100:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800210e:	f3ef 8310 	mrs	r3, PRIMASK
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002116:	2480      	movs	r4, #128	@ 0x80
 8002118:	193a      	adds	r2, r7, r4
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	2301      	movs	r3, #1
 800211e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002122:	f383 8810 	msr	PRIMASK, r3
}
 8002126:	46c0      	nop			@ (mov r8, r8)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2110      	movs	r1, #16
 8002134:	438a      	bics	r2, r1
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	193b      	adds	r3, r7, r4
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800213e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002140:	f383 8810 	msr	PRIMASK, r3
}
 8002144:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2202      	movs	r2, #2
 800214a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800214c:	183b      	adds	r3, r7, r0
 800214e:	881a      	ldrh	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	0011      	movs	r1, r2
 8002154:	0018      	movs	r0, r3
 8002156:	f000 f885 	bl	8002264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800215a:	e06f      	b.n	800223c <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800215c:	23a4      	movs	r3, #164	@ 0xa4
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	2380      	movs	r3, #128	@ 0x80
 8002164:	035b      	lsls	r3, r3, #13
 8002166:	4013      	ands	r3, r2
 8002168:	d010      	beq.n	800218c <HAL_UART_IRQHandler+0x584>
 800216a:	239c      	movs	r3, #156	@ 0x9c
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	03db      	lsls	r3, r3, #15
 8002174:	4013      	ands	r3, r2
 8002176:	d009      	beq.n	800218c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2280      	movs	r2, #128	@ 0x80
 800217e:	0352      	lsls	r2, r2, #13
 8002180:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f001 fc55 	bl	8003a34 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800218a:	e05a      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800218c:	23a4      	movs	r3, #164	@ 0xa4
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2280      	movs	r2, #128	@ 0x80
 8002194:	4013      	ands	r3, r2
 8002196:	d016      	beq.n	80021c6 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002198:	23a0      	movs	r3, #160	@ 0xa0
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2280      	movs	r2, #128	@ 0x80
 80021a0:	4013      	ands	r3, r2
 80021a2:	d106      	bne.n	80021b2 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80021a4:	239c      	movs	r3, #156	@ 0x9c
 80021a6:	18fb      	adds	r3, r7, r3
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	2380      	movs	r3, #128	@ 0x80
 80021ac:	041b      	lsls	r3, r3, #16
 80021ae:	4013      	ands	r3, r2
 80021b0:	d009      	beq.n	80021c6 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d042      	beq.n	8002240 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	0010      	movs	r0, r2
 80021c2:	4798      	blx	r3
    }
    return;
 80021c4:	e03c      	b.n	8002240 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80021c6:	23a4      	movs	r3, #164	@ 0xa4
 80021c8:	18fb      	adds	r3, r7, r3
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2240      	movs	r2, #64	@ 0x40
 80021ce:	4013      	ands	r3, r2
 80021d0:	d00a      	beq.n	80021e8 <HAL_UART_IRQHandler+0x5e0>
 80021d2:	23a0      	movs	r3, #160	@ 0xa0
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2240      	movs	r2, #64	@ 0x40
 80021da:	4013      	ands	r3, r2
 80021dc:	d004      	beq.n	80021e8 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 ff07 	bl	8002ff4 <UART_EndTransmit_IT>
    return;
 80021e6:	e02c      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80021e8:	23a4      	movs	r3, #164	@ 0xa4
 80021ea:	18fb      	adds	r3, r7, r3
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	2380      	movs	r3, #128	@ 0x80
 80021f0:	041b      	lsls	r3, r3, #16
 80021f2:	4013      	ands	r3, r2
 80021f4:	d00b      	beq.n	800220e <HAL_UART_IRQHandler+0x606>
 80021f6:	23a0      	movs	r3, #160	@ 0xa0
 80021f8:	18fb      	adds	r3, r7, r3
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	@ 0x80
 80021fe:	05db      	lsls	r3, r3, #23
 8002200:	4013      	ands	r3, r2
 8002202:	d004      	beq.n	800220e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	0018      	movs	r0, r3
 8002208:	f001 fc24 	bl	8003a54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800220c:	e019      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800220e:	23a4      	movs	r3, #164	@ 0xa4
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	681a      	ldr	r2, [r3, #0]
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	045b      	lsls	r3, r3, #17
 8002218:	4013      	ands	r3, r2
 800221a:	d012      	beq.n	8002242 <HAL_UART_IRQHandler+0x63a>
 800221c:	23a0      	movs	r3, #160	@ 0xa0
 800221e:	18fb      	adds	r3, r7, r3
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b00      	cmp	r3, #0
 8002224:	da0d      	bge.n	8002242 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	0018      	movs	r0, r3
 800222a:	f001 fc0b 	bl	8003a44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800222e:	e008      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
      return;
 8002230:	46c0      	nop			@ (mov r8, r8)
 8002232:	e006      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
    return;
 8002234:	46c0      	nop			@ (mov r8, r8)
 8002236:	e004      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
      return;
 8002238:	46c0      	nop			@ (mov r8, r8)
 800223a:	e002      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
      return;
 800223c:	46c0      	nop			@ (mov r8, r8)
 800223e:	e000      	b.n	8002242 <HAL_UART_IRQHandler+0x63a>
    return;
 8002240:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002242:	46bd      	mov	sp, r7
 8002244:	b02a      	add	sp, #168	@ 0xa8
 8002246:	bdb0      	pop	{r4, r5, r7, pc}
 8002248:	fffffeff 	.word	0xfffffeff
 800224c:	fffffedf 	.word	0xfffffedf
 8002250:	effffffe 	.word	0xeffffffe

08002254 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800225c:	46c0      	nop			@ (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	b002      	add	sp, #8
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	000a      	movs	r2, r1
 800226e:	1cbb      	adds	r3, r7, #2
 8002270:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002272:	46c0      	nop			@ (mov r8, r8)
 8002274:	46bd      	mov	sp, r7
 8002276:	b002      	add	sp, #8
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b088      	sub	sp, #32
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002284:	231a      	movs	r3, #26
 8002286:	18fb      	adds	r3, r7, r3
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689a      	ldr	r2, [r3, #8]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	431a      	orrs	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	69db      	ldr	r3, [r3, #28]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4abc      	ldr	r2, [pc, #752]	@ (800259c <UART_SetConfig+0x320>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	0019      	movs	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	69fa      	ldr	r2, [r7, #28]
 80022b6:	430a      	orrs	r2, r1
 80022b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	4ab7      	ldr	r2, [pc, #732]	@ (80025a0 <UART_SetConfig+0x324>)
 80022c2:	4013      	ands	r3, r2
 80022c4:	0019      	movs	r1, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68da      	ldr	r2, [r3, #12]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	430a      	orrs	r2, r1
 80022d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	69fa      	ldr	r2, [r7, #28]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	4aae      	ldr	r2, [pc, #696]	@ (80025a4 <UART_SetConfig+0x328>)
 80022ea:	4013      	ands	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	69fa      	ldr	r2, [r7, #28]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fe:	220f      	movs	r2, #15
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	430a      	orrs	r2, r1
 800230e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4aa4      	ldr	r2, [pc, #656]	@ (80025a8 <UART_SetConfig+0x32c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d127      	bne.n	800236a <UART_SetConfig+0xee>
 800231a:	4ba4      	ldr	r3, [pc, #656]	@ (80025ac <UART_SetConfig+0x330>)
 800231c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231e:	2203      	movs	r2, #3
 8002320:	4013      	ands	r3, r2
 8002322:	2b03      	cmp	r3, #3
 8002324:	d017      	beq.n	8002356 <UART_SetConfig+0xda>
 8002326:	d81b      	bhi.n	8002360 <UART_SetConfig+0xe4>
 8002328:	2b02      	cmp	r3, #2
 800232a:	d00a      	beq.n	8002342 <UART_SetConfig+0xc6>
 800232c:	d818      	bhi.n	8002360 <UART_SetConfig+0xe4>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d002      	beq.n	8002338 <UART_SetConfig+0xbc>
 8002332:	2b01      	cmp	r3, #1
 8002334:	d00a      	beq.n	800234c <UART_SetConfig+0xd0>
 8002336:	e013      	b.n	8002360 <UART_SetConfig+0xe4>
 8002338:	231b      	movs	r3, #27
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]
 8002340:	e058      	b.n	80023f4 <UART_SetConfig+0x178>
 8002342:	231b      	movs	r3, #27
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	2202      	movs	r2, #2
 8002348:	701a      	strb	r2, [r3, #0]
 800234a:	e053      	b.n	80023f4 <UART_SetConfig+0x178>
 800234c:	231b      	movs	r3, #27
 800234e:	18fb      	adds	r3, r7, r3
 8002350:	2204      	movs	r2, #4
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e04e      	b.n	80023f4 <UART_SetConfig+0x178>
 8002356:	231b      	movs	r3, #27
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2208      	movs	r2, #8
 800235c:	701a      	strb	r2, [r3, #0]
 800235e:	e049      	b.n	80023f4 <UART_SetConfig+0x178>
 8002360:	231b      	movs	r3, #27
 8002362:	18fb      	adds	r3, r7, r3
 8002364:	2210      	movs	r2, #16
 8002366:	701a      	strb	r2, [r3, #0]
 8002368:	e044      	b.n	80023f4 <UART_SetConfig+0x178>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a90      	ldr	r2, [pc, #576]	@ (80025b0 <UART_SetConfig+0x334>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d127      	bne.n	80023c4 <UART_SetConfig+0x148>
 8002374:	4b8d      	ldr	r3, [pc, #564]	@ (80025ac <UART_SetConfig+0x330>)
 8002376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002378:	220c      	movs	r2, #12
 800237a:	4013      	ands	r3, r2
 800237c:	2b0c      	cmp	r3, #12
 800237e:	d017      	beq.n	80023b0 <UART_SetConfig+0x134>
 8002380:	d81b      	bhi.n	80023ba <UART_SetConfig+0x13e>
 8002382:	2b08      	cmp	r3, #8
 8002384:	d00a      	beq.n	800239c <UART_SetConfig+0x120>
 8002386:	d818      	bhi.n	80023ba <UART_SetConfig+0x13e>
 8002388:	2b00      	cmp	r3, #0
 800238a:	d002      	beq.n	8002392 <UART_SetConfig+0x116>
 800238c:	2b04      	cmp	r3, #4
 800238e:	d00a      	beq.n	80023a6 <UART_SetConfig+0x12a>
 8002390:	e013      	b.n	80023ba <UART_SetConfig+0x13e>
 8002392:	231b      	movs	r3, #27
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e02b      	b.n	80023f4 <UART_SetConfig+0x178>
 800239c:	231b      	movs	r3, #27
 800239e:	18fb      	adds	r3, r7, r3
 80023a0:	2202      	movs	r2, #2
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e026      	b.n	80023f4 <UART_SetConfig+0x178>
 80023a6:	231b      	movs	r3, #27
 80023a8:	18fb      	adds	r3, r7, r3
 80023aa:	2204      	movs	r2, #4
 80023ac:	701a      	strb	r2, [r3, #0]
 80023ae:	e021      	b.n	80023f4 <UART_SetConfig+0x178>
 80023b0:	231b      	movs	r3, #27
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2208      	movs	r2, #8
 80023b6:	701a      	strb	r2, [r3, #0]
 80023b8:	e01c      	b.n	80023f4 <UART_SetConfig+0x178>
 80023ba:	231b      	movs	r3, #27
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2210      	movs	r2, #16
 80023c0:	701a      	strb	r2, [r3, #0]
 80023c2:	e017      	b.n	80023f4 <UART_SetConfig+0x178>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a7a      	ldr	r2, [pc, #488]	@ (80025b4 <UART_SetConfig+0x338>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d104      	bne.n	80023d8 <UART_SetConfig+0x15c>
 80023ce:	231b      	movs	r3, #27
 80023d0:	18fb      	adds	r3, r7, r3
 80023d2:	2200      	movs	r2, #0
 80023d4:	701a      	strb	r2, [r3, #0]
 80023d6:	e00d      	b.n	80023f4 <UART_SetConfig+0x178>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a76      	ldr	r2, [pc, #472]	@ (80025b8 <UART_SetConfig+0x33c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d104      	bne.n	80023ec <UART_SetConfig+0x170>
 80023e2:	231b      	movs	r3, #27
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
 80023ea:	e003      	b.n	80023f4 <UART_SetConfig+0x178>
 80023ec:	231b      	movs	r3, #27
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	2210      	movs	r2, #16
 80023f2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	2380      	movs	r3, #128	@ 0x80
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d000      	beq.n	8002402 <UART_SetConfig+0x186>
 8002400:	e065      	b.n	80024ce <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8002402:	231b      	movs	r3, #27
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b08      	cmp	r3, #8
 800240a:	d015      	beq.n	8002438 <UART_SetConfig+0x1bc>
 800240c:	dc18      	bgt.n	8002440 <UART_SetConfig+0x1c4>
 800240e:	2b04      	cmp	r3, #4
 8002410:	d00d      	beq.n	800242e <UART_SetConfig+0x1b2>
 8002412:	dc15      	bgt.n	8002440 <UART_SetConfig+0x1c4>
 8002414:	2b00      	cmp	r3, #0
 8002416:	d002      	beq.n	800241e <UART_SetConfig+0x1a2>
 8002418:	2b02      	cmp	r3, #2
 800241a:	d005      	beq.n	8002428 <UART_SetConfig+0x1ac>
 800241c:	e010      	b.n	8002440 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800241e:	f7ff fa87 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 8002422:	0003      	movs	r3, r0
 8002424:	617b      	str	r3, [r7, #20]
        break;
 8002426:	e012      	b.n	800244e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002428:	4b64      	ldr	r3, [pc, #400]	@ (80025bc <UART_SetConfig+0x340>)
 800242a:	617b      	str	r3, [r7, #20]
        break;
 800242c:	e00f      	b.n	800244e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800242e:	f7ff f9f3 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 8002432:	0003      	movs	r3, r0
 8002434:	617b      	str	r3, [r7, #20]
        break;
 8002436:	e00a      	b.n	800244e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	617b      	str	r3, [r7, #20]
        break;
 800243e:	e006      	b.n	800244e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002444:	231a      	movs	r3, #26
 8002446:	18fb      	adds	r3, r7, r3
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
        break;
 800244c:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d100      	bne.n	8002456 <UART_SetConfig+0x1da>
 8002454:	e08d      	b.n	8002572 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800245a:	4b59      	ldr	r3, [pc, #356]	@ (80025c0 <UART_SetConfig+0x344>)
 800245c:	0052      	lsls	r2, r2, #1
 800245e:	5ad3      	ldrh	r3, [r2, r3]
 8002460:	0019      	movs	r1, r3
 8002462:	6978      	ldr	r0, [r7, #20]
 8002464:	f7fd fe54 	bl	8000110 <__udivsi3>
 8002468:	0003      	movs	r3, r0
 800246a:	005a      	lsls	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	085b      	lsrs	r3, r3, #1
 8002472:	18d2      	adds	r2, r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	0019      	movs	r1, r3
 800247a:	0010      	movs	r0, r2
 800247c:	f7fd fe48 	bl	8000110 <__udivsi3>
 8002480:	0003      	movs	r3, r0
 8002482:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	2b0f      	cmp	r3, #15
 8002488:	d91c      	bls.n	80024c4 <UART_SetConfig+0x248>
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	2380      	movs	r3, #128	@ 0x80
 800248e:	025b      	lsls	r3, r3, #9
 8002490:	429a      	cmp	r2, r3
 8002492:	d217      	bcs.n	80024c4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	b29a      	uxth	r2, r3
 8002498:	200e      	movs	r0, #14
 800249a:	183b      	adds	r3, r7, r0
 800249c:	210f      	movs	r1, #15
 800249e:	438a      	bics	r2, r1
 80024a0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2207      	movs	r2, #7
 80024aa:	4013      	ands	r3, r2
 80024ac:	b299      	uxth	r1, r3
 80024ae:	183b      	adds	r3, r7, r0
 80024b0:	183a      	adds	r2, r7, r0
 80024b2:	8812      	ldrh	r2, [r2, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	183a      	adds	r2, r7, r0
 80024be:	8812      	ldrh	r2, [r2, #0]
 80024c0:	60da      	str	r2, [r3, #12]
 80024c2:	e056      	b.n	8002572 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80024c4:	231a      	movs	r3, #26
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e051      	b.n	8002572 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80024ce:	231b      	movs	r3, #27
 80024d0:	18fb      	adds	r3, r7, r3
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d015      	beq.n	8002504 <UART_SetConfig+0x288>
 80024d8:	dc18      	bgt.n	800250c <UART_SetConfig+0x290>
 80024da:	2b04      	cmp	r3, #4
 80024dc:	d00d      	beq.n	80024fa <UART_SetConfig+0x27e>
 80024de:	dc15      	bgt.n	800250c <UART_SetConfig+0x290>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d002      	beq.n	80024ea <UART_SetConfig+0x26e>
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d005      	beq.n	80024f4 <UART_SetConfig+0x278>
 80024e8:	e010      	b.n	800250c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80024ea:	f7ff fa21 	bl	8001930 <HAL_RCC_GetPCLK1Freq>
 80024ee:	0003      	movs	r3, r0
 80024f0:	617b      	str	r3, [r7, #20]
        break;
 80024f2:	e012      	b.n	800251a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80024f4:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <UART_SetConfig+0x340>)
 80024f6:	617b      	str	r3, [r7, #20]
        break;
 80024f8:	e00f      	b.n	800251a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80024fa:	f7ff f98d 	bl	8001818 <HAL_RCC_GetSysClockFreq>
 80024fe:	0003      	movs	r3, r0
 8002500:	617b      	str	r3, [r7, #20]
        break;
 8002502:	e00a      	b.n	800251a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002504:	2380      	movs	r3, #128	@ 0x80
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	617b      	str	r3, [r7, #20]
        break;
 800250a:	e006      	b.n	800251a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002510:	231a      	movs	r3, #26
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	2201      	movs	r2, #1
 8002516:	701a      	strb	r2, [r3, #0]
        break;
 8002518:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d028      	beq.n	8002572 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002524:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <UART_SetConfig+0x344>)
 8002526:	0052      	lsls	r2, r2, #1
 8002528:	5ad3      	ldrh	r3, [r2, r3]
 800252a:	0019      	movs	r1, r3
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7fd fdef 	bl	8000110 <__udivsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	001a      	movs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	085b      	lsrs	r3, r3, #1
 800253c:	18d2      	adds	r2, r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	0019      	movs	r1, r3
 8002544:	0010      	movs	r0, r2
 8002546:	f7fd fde3 	bl	8000110 <__udivsi3>
 800254a:	0003      	movs	r3, r0
 800254c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	2b0f      	cmp	r3, #15
 8002552:	d90a      	bls.n	800256a <UART_SetConfig+0x2ee>
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	2380      	movs	r3, #128	@ 0x80
 8002558:	025b      	lsls	r3, r3, #9
 800255a:	429a      	cmp	r2, r3
 800255c:	d205      	bcs.n	800256a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	b29a      	uxth	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60da      	str	r2, [r3, #12]
 8002568:	e003      	b.n	8002572 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800256a:	231a      	movs	r3, #26
 800256c:	18fb      	adds	r3, r7, r3
 800256e:	2201      	movs	r2, #1
 8002570:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	226a      	movs	r2, #106	@ 0x6a
 8002576:	2101      	movs	r1, #1
 8002578:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2268      	movs	r2, #104	@ 0x68
 800257e:	2101      	movs	r1, #1
 8002580:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800258e:	231a      	movs	r3, #26
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	781b      	ldrb	r3, [r3, #0]
}
 8002594:	0018      	movs	r0, r3
 8002596:	46bd      	mov	sp, r7
 8002598:	b008      	add	sp, #32
 800259a:	bd80      	pop	{r7, pc}
 800259c:	cfff69f3 	.word	0xcfff69f3
 80025a0:	ffffcfff 	.word	0xffffcfff
 80025a4:	11fff4ff 	.word	0x11fff4ff
 80025a8:	40013800 	.word	0x40013800
 80025ac:	40021000 	.word	0x40021000
 80025b0:	40004400 	.word	0x40004400
 80025b4:	40004800 	.word	0x40004800
 80025b8:	40004c00 	.word	0x40004c00
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	08003c2c 	.word	0x08003c2c

080025c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b082      	sub	sp, #8
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	2208      	movs	r2, #8
 80025d2:	4013      	ands	r3, r2
 80025d4:	d00b      	beq.n	80025ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002708 <UART_AdvFeatureConfig+0x144>)
 80025de:	4013      	ands	r3, r2
 80025e0:	0019      	movs	r1, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	430a      	orrs	r2, r1
 80025ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	2201      	movs	r2, #1
 80025f4:	4013      	ands	r3, r2
 80025f6:	d00b      	beq.n	8002610 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	4a43      	ldr	r2, [pc, #268]	@ (800270c <UART_AdvFeatureConfig+0x148>)
 8002600:	4013      	ands	r3, r2
 8002602:	0019      	movs	r1, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	430a      	orrs	r2, r1
 800260e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002614:	2202      	movs	r2, #2
 8002616:	4013      	ands	r3, r2
 8002618:	d00b      	beq.n	8002632 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	4a3b      	ldr	r2, [pc, #236]	@ (8002710 <UART_AdvFeatureConfig+0x14c>)
 8002622:	4013      	ands	r3, r2
 8002624:	0019      	movs	r1, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	2204      	movs	r2, #4
 8002638:	4013      	ands	r3, r2
 800263a:	d00b      	beq.n	8002654 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	4a34      	ldr	r2, [pc, #208]	@ (8002714 <UART_AdvFeatureConfig+0x150>)
 8002644:	4013      	ands	r3, r2
 8002646:	0019      	movs	r1, r3
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	430a      	orrs	r2, r1
 8002652:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	2210      	movs	r2, #16
 800265a:	4013      	ands	r3, r2
 800265c:	d00b      	beq.n	8002676 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a2c      	ldr	r2, [pc, #176]	@ (8002718 <UART_AdvFeatureConfig+0x154>)
 8002666:	4013      	ands	r3, r2
 8002668:	0019      	movs	r1, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	430a      	orrs	r2, r1
 8002674:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267a:	2220      	movs	r2, #32
 800267c:	4013      	ands	r3, r2
 800267e:	d00b      	beq.n	8002698 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	4a25      	ldr	r2, [pc, #148]	@ (800271c <UART_AdvFeatureConfig+0x158>)
 8002688:	4013      	ands	r3, r2
 800268a:	0019      	movs	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	430a      	orrs	r2, r1
 8002696:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800269c:	2240      	movs	r2, #64	@ 0x40
 800269e:	4013      	ands	r3, r2
 80026a0:	d01d      	beq.n	80026de <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a1d      	ldr	r2, [pc, #116]	@ (8002720 <UART_AdvFeatureConfig+0x15c>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	0019      	movs	r1, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	430a      	orrs	r2, r1
 80026b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80026be:	2380      	movs	r3, #128	@ 0x80
 80026c0:	035b      	lsls	r3, r3, #13
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d10b      	bne.n	80026de <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	4a15      	ldr	r2, [pc, #84]	@ (8002724 <UART_AdvFeatureConfig+0x160>)
 80026ce:	4013      	ands	r3, r2
 80026d0:	0019      	movs	r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e2:	2280      	movs	r2, #128	@ 0x80
 80026e4:	4013      	ands	r3, r2
 80026e6:	d00b      	beq.n	8002700 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a0e      	ldr	r2, [pc, #56]	@ (8002728 <UART_AdvFeatureConfig+0x164>)
 80026f0:	4013      	ands	r3, r2
 80026f2:	0019      	movs	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	605a      	str	r2, [r3, #4]
  }
}
 8002700:	46c0      	nop			@ (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}
 8002708:	ffff7fff 	.word	0xffff7fff
 800270c:	fffdffff 	.word	0xfffdffff
 8002710:	fffeffff 	.word	0xfffeffff
 8002714:	fffbffff 	.word	0xfffbffff
 8002718:	ffffefff 	.word	0xffffefff
 800271c:	ffffdfff 	.word	0xffffdfff
 8002720:	ffefffff 	.word	0xffefffff
 8002724:	ff9fffff 	.word	0xff9fffff
 8002728:	fff7ffff 	.word	0xfff7ffff

0800272c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b092      	sub	sp, #72	@ 0x48
 8002730:	af02      	add	r7, sp, #8
 8002732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2290      	movs	r2, #144	@ 0x90
 8002738:	2100      	movs	r1, #0
 800273a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800273c:	f7fe f8d2 	bl	80008e4 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2208      	movs	r2, #8
 800274c:	4013      	ands	r3, r2
 800274e:	2b08      	cmp	r3, #8
 8002750:	d12d      	bne.n	80027ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002754:	2280      	movs	r2, #128	@ 0x80
 8002756:	0391      	lsls	r1, r2, #14
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	4a47      	ldr	r2, [pc, #284]	@ (8002878 <UART_CheckIdleState+0x14c>)
 800275c:	9200      	str	r2, [sp, #0]
 800275e:	2200      	movs	r2, #0
 8002760:	f000 f88e 	bl	8002880 <UART_WaitOnFlagUntilTimeout>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d022      	beq.n	80027ae <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002768:	f3ef 8310 	mrs	r3, PRIMASK
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800276e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002770:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002772:	2301      	movs	r3, #1
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	f383 8810 	msr	PRIMASK, r3
}
 800277c:	46c0      	nop			@ (mov r8, r8)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2180      	movs	r1, #128	@ 0x80
 800278a:	438a      	bics	r2, r1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002790:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002794:	f383 8810 	msr	PRIMASK, r3
}
 8002798:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2288      	movs	r2, #136	@ 0x88
 800279e:	2120      	movs	r1, #32
 80027a0:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2284      	movs	r2, #132	@ 0x84
 80027a6:	2100      	movs	r1, #0
 80027a8:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e060      	b.n	8002870 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2204      	movs	r2, #4
 80027b6:	4013      	ands	r3, r2
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d146      	bne.n	800284a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027be:	2280      	movs	r2, #128	@ 0x80
 80027c0:	03d1      	lsls	r1, r2, #15
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002878 <UART_CheckIdleState+0x14c>)
 80027c6:	9200      	str	r2, [sp, #0]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f000 f859 	bl	8002880 <UART_WaitOnFlagUntilTimeout>
 80027ce:	1e03      	subs	r3, r0, #0
 80027d0:	d03b      	beq.n	800284a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80027d2:	f3ef 8310 	mrs	r3, PRIMASK
 80027d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80027d8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80027da:	637b      	str	r3, [r7, #52]	@ 0x34
 80027dc:	2301      	movs	r3, #1
 80027de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	f383 8810 	msr	PRIMASK, r3
}
 80027e6:	46c0      	nop			@ (mov r8, r8)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4922      	ldr	r1, [pc, #136]	@ (800287c <UART_CheckIdleState+0x150>)
 80027f4:	400a      	ands	r2, r1
 80027f6:	601a      	str	r2, [r3, #0]
 80027f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	f383 8810 	msr	PRIMASK, r3
}
 8002802:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002804:	f3ef 8310 	mrs	r3, PRIMASK
 8002808:	61bb      	str	r3, [r7, #24]
  return(result);
 800280a:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
 800280e:	2301      	movs	r3, #1
 8002810:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f383 8810 	msr	PRIMASK, r3
}
 8002818:	46c0      	nop			@ (mov r8, r8)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	438a      	bics	r2, r1
 8002828:	609a      	str	r2, [r3, #8]
 800282a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800282c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	f383 8810 	msr	PRIMASK, r3
}
 8002834:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	228c      	movs	r2, #140	@ 0x8c
 800283a:	2120      	movs	r1, #32
 800283c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2284      	movs	r2, #132	@ 0x84
 8002842:	2100      	movs	r1, #0
 8002844:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e012      	b.n	8002870 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2288      	movs	r2, #136	@ 0x88
 800284e:	2120      	movs	r1, #32
 8002850:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	228c      	movs	r2, #140	@ 0x8c
 8002856:	2120      	movs	r1, #32
 8002858:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2284      	movs	r2, #132	@ 0x84
 800286a:	2100      	movs	r1, #0
 800286c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b010      	add	sp, #64	@ 0x40
 8002876:	bd80      	pop	{r7, pc}
 8002878:	01ffffff 	.word	0x01ffffff
 800287c:	fffffedf 	.word	0xfffffedf

08002880 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	1dfb      	adds	r3, r7, #7
 800288e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002890:	e051      	b.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	3301      	adds	r3, #1
 8002896:	d04e      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002898:	f7fe f824 	bl	80008e4 <HAL_GetTick>
 800289c:	0002      	movs	r2, r0
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	69ba      	ldr	r2, [r7, #24]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d302      	bcc.n	80028ae <UART_WaitOnFlagUntilTimeout+0x2e>
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e051      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2204      	movs	r2, #4
 80028ba:	4013      	ands	r3, r2
 80028bc:	d03b      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b80      	cmp	r3, #128	@ 0x80
 80028c2:	d038      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	2b40      	cmp	r3, #64	@ 0x40
 80028c8:	d035      	beq.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	69db      	ldr	r3, [r3, #28]
 80028d0:	2208      	movs	r2, #8
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b08      	cmp	r3, #8
 80028d6:	d111      	bne.n	80028fc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	2208      	movs	r2, #8
 80028de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	0018      	movs	r0, r3
 80028e4:	f000 f960 	bl	8002ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2290      	movs	r2, #144	@ 0x90
 80028ec:	2108      	movs	r1, #8
 80028ee:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2284      	movs	r2, #132	@ 0x84
 80028f4:	2100      	movs	r1, #0
 80028f6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e02c      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	2380      	movs	r3, #128	@ 0x80
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	401a      	ands	r2, r3
 8002908:	2380      	movs	r3, #128	@ 0x80
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	429a      	cmp	r2, r3
 800290e:	d112      	bne.n	8002936 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2280      	movs	r2, #128	@ 0x80
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	0018      	movs	r0, r3
 800291e:	f000 f943 	bl	8002ba8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2290      	movs	r2, #144	@ 0x90
 8002926:	2120      	movs	r1, #32
 8002928:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2284      	movs	r2, #132	@ 0x84
 800292e:	2100      	movs	r1, #0
 8002930:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e00f      	b.n	8002956 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	68ba      	ldr	r2, [r7, #8]
 800293e:	4013      	ands	r3, r2
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	425a      	negs	r2, r3
 8002946:	4153      	adcs	r3, r2
 8002948:	b2db      	uxtb	r3, r3
 800294a:	001a      	movs	r2, r3
 800294c:	1dfb      	adds	r3, r7, #7
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	429a      	cmp	r2, r3
 8002952:	d09e      	beq.n	8002892 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	0018      	movs	r0, r3
 8002958:	46bd      	mov	sp, r7
 800295a:	b004      	add	sp, #16
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b098      	sub	sp, #96	@ 0x60
 8002964:	af00      	add	r7, sp, #0
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	60b9      	str	r1, [r7, #8]
 800296a:	1dbb      	adds	r3, r7, #6
 800296c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	68ba      	ldr	r2, [r7, #8]
 8002972:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1dba      	adds	r2, r7, #6
 8002978:	215c      	movs	r1, #92	@ 0x5c
 800297a:	8812      	ldrh	r2, [r2, #0]
 800297c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1dba      	adds	r2, r7, #6
 8002982:	215e      	movs	r1, #94	@ 0x5e
 8002984:	8812      	ldrh	r2, [r2, #0]
 8002986:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2200      	movs	r2, #0
 800298c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	689a      	ldr	r2, [r3, #8]
 8002992:	2380      	movs	r3, #128	@ 0x80
 8002994:	015b      	lsls	r3, r3, #5
 8002996:	429a      	cmp	r2, r3
 8002998:	d10d      	bne.n	80029b6 <UART_Start_Receive_IT+0x56>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d104      	bne.n	80029ac <UART_Start_Receive_IT+0x4c>
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2260      	movs	r2, #96	@ 0x60
 80029a6:	497b      	ldr	r1, [pc, #492]	@ (8002b94 <UART_Start_Receive_IT+0x234>)
 80029a8:	5299      	strh	r1, [r3, r2]
 80029aa:	e02e      	b.n	8002a0a <UART_Start_Receive_IT+0xaa>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2260      	movs	r2, #96	@ 0x60
 80029b0:	21ff      	movs	r1, #255	@ 0xff
 80029b2:	5299      	strh	r1, [r3, r2]
 80029b4:	e029      	b.n	8002a0a <UART_Start_Receive_IT+0xaa>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <UART_Start_Receive_IT+0x7a>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <UART_Start_Receive_IT+0x70>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2260      	movs	r2, #96	@ 0x60
 80029ca:	21ff      	movs	r1, #255	@ 0xff
 80029cc:	5299      	strh	r1, [r3, r2]
 80029ce:	e01c      	b.n	8002a0a <UART_Start_Receive_IT+0xaa>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2260      	movs	r2, #96	@ 0x60
 80029d4:	217f      	movs	r1, #127	@ 0x7f
 80029d6:	5299      	strh	r1, [r3, r2]
 80029d8:	e017      	b.n	8002a0a <UART_Start_Receive_IT+0xaa>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	2380      	movs	r3, #128	@ 0x80
 80029e0:	055b      	lsls	r3, r3, #21
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d10d      	bne.n	8002a02 <UART_Start_Receive_IT+0xa2>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d104      	bne.n	80029f8 <UART_Start_Receive_IT+0x98>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2260      	movs	r2, #96	@ 0x60
 80029f2:	217f      	movs	r1, #127	@ 0x7f
 80029f4:	5299      	strh	r1, [r3, r2]
 80029f6:	e008      	b.n	8002a0a <UART_Start_Receive_IT+0xaa>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2260      	movs	r2, #96	@ 0x60
 80029fc:	213f      	movs	r1, #63	@ 0x3f
 80029fe:	5299      	strh	r1, [r3, r2]
 8002a00:	e003      	b.n	8002a0a <UART_Start_Receive_IT+0xaa>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2260      	movs	r2, #96	@ 0x60
 8002a06:	2100      	movs	r1, #0
 8002a08:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	2290      	movs	r2, #144	@ 0x90
 8002a0e:	2100      	movs	r1, #0
 8002a10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	228c      	movs	r2, #140	@ 0x8c
 8002a16:	2122      	movs	r1, #34	@ 0x22
 8002a18:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a1a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a1e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8002a20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002a24:	2301      	movs	r3, #1
 8002a26:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a2a:	f383 8810 	msr	PRIMASK, r3
}
 8002a2e:	46c0      	nop			@ (mov r8, r8)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	609a      	str	r2, [r3, #8]
 8002a40:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a46:	f383 8810 	msr	PRIMASK, r3
}
 8002a4a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002a50:	2380      	movs	r3, #128	@ 0x80
 8002a52:	059b      	lsls	r3, r3, #22
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d150      	bne.n	8002afa <UART_Start_Receive_IT+0x19a>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2268      	movs	r2, #104	@ 0x68
 8002a5c:	5a9b      	ldrh	r3, [r3, r2]
 8002a5e:	1dba      	adds	r2, r7, #6
 8002a60:	8812      	ldrh	r2, [r2, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d349      	bcc.n	8002afa <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	2380      	movs	r3, #128	@ 0x80
 8002a6c:	015b      	lsls	r3, r3, #5
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d107      	bne.n	8002a82 <UART_Start_Receive_IT+0x122>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	4a46      	ldr	r2, [pc, #280]	@ (8002b98 <UART_Start_Receive_IT+0x238>)
 8002a7e:	675a      	str	r2, [r3, #116]	@ 0x74
 8002a80:	e002      	b.n	8002a88 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4a45      	ldr	r2, [pc, #276]	@ (8002b9c <UART_Start_Receive_IT+0x23c>)
 8002a86:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d019      	beq.n	8002ac4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a90:	f3ef 8310 	mrs	r3, PRIMASK
 8002a94:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8002a96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a98:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa0:	f383 8810 	msr	PRIMASK, r3
}
 8002aa4:	46c0      	nop			@ (mov r8, r8)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2180      	movs	r1, #128	@ 0x80
 8002ab2:	0049      	lsls	r1, r1, #1
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002abe:	f383 8810 	msr	PRIMASK, r3
}
 8002ac2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ac4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8002aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8002acc:	657b      	str	r3, [r7, #84]	@ 0x54
 8002ace:	2301      	movs	r3, #1
 8002ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad4:	f383 8810 	msr	PRIMASK, r3
}
 8002ad8:	46c0      	nop			@ (mov r8, r8)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2180      	movs	r1, #128	@ 0x80
 8002ae6:	0549      	lsls	r1, r1, #21
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	609a      	str	r2, [r3, #8]
 8002aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aee:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af2:	f383 8810 	msr	PRIMASK, r3
}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	e047      	b.n	8002b8a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	2380      	movs	r3, #128	@ 0x80
 8002b00:	015b      	lsls	r3, r3, #5
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d107      	bne.n	8002b16 <UART_Start_Receive_IT+0x1b6>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4a23      	ldr	r2, [pc, #140]	@ (8002ba0 <UART_Start_Receive_IT+0x240>)
 8002b12:	675a      	str	r2, [r3, #116]	@ 0x74
 8002b14:	e002      	b.n	8002b1c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4a22      	ldr	r2, [pc, #136]	@ (8002ba4 <UART_Start_Receive_IT+0x244>)
 8002b1a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d019      	beq.n	8002b58 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b24:	f3ef 8310 	mrs	r3, PRIMASK
 8002b28:	61fb      	str	r3, [r7, #28]
  return(result);
 8002b2a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8002b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b2e:	2301      	movs	r3, #1
 8002b30:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	f383 8810 	msr	PRIMASK, r3
}
 8002b38:	46c0      	nop			@ (mov r8, r8)
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2190      	movs	r1, #144	@ 0x90
 8002b46:	0049      	lsls	r1, r1, #1
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	f383 8810 	msr	PRIMASK, r3
}
 8002b56:	e018      	b.n	8002b8a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002b58:	f3ef 8310 	mrs	r3, PRIMASK
 8002b5c:	613b      	str	r3, [r7, #16]
  return(result);
 8002b5e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8002b60:	653b      	str	r3, [r7, #80]	@ 0x50
 8002b62:	2301      	movs	r3, #1
 8002b64:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	f383 8810 	msr	PRIMASK, r3
}
 8002b6c:	46c0      	nop			@ (mov r8, r8)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2120      	movs	r1, #32
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	601a      	str	r2, [r3, #0]
 8002b7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002b80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b82:	69bb      	ldr	r3, [r7, #24]
 8002b84:	f383 8810 	msr	PRIMASK, r3
}
 8002b88:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	b018      	add	sp, #96	@ 0x60
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	000001ff 	.word	0x000001ff
 8002b98:	080036ed 	.word	0x080036ed
 8002b9c:	080033bd 	.word	0x080033bd
 8002ba0:	08003205 	.word	0x08003205
 8002ba4:	0800304d 	.word	0x0800304d

08002ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	@ 0x38
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8002bb6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bba:	2301      	movs	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	f383 8810 	msr	PRIMASK, r3
}
 8002bc4:	46c0      	nop			@ (mov r8, r8)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4926      	ldr	r1, [pc, #152]	@ (8002c6c <UART_EndRxTransfer+0xc4>)
 8002bd2:	400a      	ands	r2, r1
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f383 8810 	msr	PRIMASK, r3
}
 8002be0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002be2:	f3ef 8310 	mrs	r3, PRIMASK
 8002be6:	623b      	str	r3, [r7, #32]
  return(result);
 8002be8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bea:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bec:	2301      	movs	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	491b      	ldr	r1, [pc, #108]	@ (8002c70 <UART_EndRxTransfer+0xc8>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c0e:	f383 8810 	msr	PRIMASK, r3
}
 8002c12:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d118      	bne.n	8002c4e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c1c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c20:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c22:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c26:	2301      	movs	r3, #1
 8002c28:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f383 8810 	msr	PRIMASK, r3
}
 8002c30:	46c0      	nop			@ (mov r8, r8)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2110      	movs	r1, #16
 8002c3e:	438a      	bics	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	f383 8810 	msr	PRIMASK, r3
}
 8002c4c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	228c      	movs	r2, #140	@ 0x8c
 8002c52:	2120      	movs	r1, #32
 8002c54:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	46bd      	mov	sp, r7
 8002c66:	b00e      	add	sp, #56	@ 0x38
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	fffffedf 	.word	0xfffffedf
 8002c70:	effffffe 	.word	0xeffffffe

08002c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	225e      	movs	r2, #94	@ 0x5e
 8002c86:	2100      	movs	r1, #0
 8002c88:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2256      	movs	r2, #86	@ 0x56
 8002c8e:	2100      	movs	r1, #0
 8002c90:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	0018      	movs	r0, r3
 8002c96:	f7ff fadd 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c9a:	46c0      	nop			@ (mov r8, r8)
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	b004      	add	sp, #16
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b08a      	sub	sp, #40	@ 0x28
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2288      	movs	r2, #136	@ 0x88
 8002cae:	589b      	ldr	r3, [r3, r2]
 8002cb0:	2b21      	cmp	r3, #33	@ 0x21
 8002cb2:	d14c      	bne.n	8002d4e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2256      	movs	r2, #86	@ 0x56
 8002cb8:	5a9b      	ldrh	r3, [r3, r2]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d132      	bne.n	8002d26 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cc6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cca:	2301      	movs	r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f383 8810 	msr	PRIMASK, r3
}
 8002cd4:	46c0      	nop			@ (mov r8, r8)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2180      	movs	r1, #128	@ 0x80
 8002ce2:	438a      	bics	r2, r1
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f383 8810 	msr	PRIMASK, r3
}
 8002cf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002cf6:	617b      	str	r3, [r7, #20]
  return(result);
 8002cf8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002cfa:	623b      	str	r3, [r7, #32]
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	f383 8810 	msr	PRIMASK, r3
}
 8002d06:	46c0      	nop			@ (mov r8, r8)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2140      	movs	r1, #64	@ 0x40
 8002d14:	430a      	orrs	r2, r1
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f383 8810 	msr	PRIMASK, r3
}
 8002d22:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002d24:	e013      	b.n	8002d4e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d2a:	781a      	ldrb	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d36:	1c5a      	adds	r2, r3, #1
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2256      	movs	r2, #86	@ 0x56
 8002d40:	5a9b      	ldrh	r3, [r3, r2]
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b299      	uxth	r1, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2256      	movs	r2, #86	@ 0x56
 8002d4c:	5299      	strh	r1, [r3, r2]
}
 8002d4e:	46c0      	nop			@ (mov r8, r8)
 8002d50:	46bd      	mov	sp, r7
 8002d52:	b00a      	add	sp, #40	@ 0x28
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b08c      	sub	sp, #48	@ 0x30
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2288      	movs	r2, #136	@ 0x88
 8002d62:	589b      	ldr	r3, [r3, r2]
 8002d64:	2b21      	cmp	r3, #33	@ 0x21
 8002d66:	d151      	bne.n	8002e0c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2256      	movs	r2, #86	@ 0x56
 8002d6c:	5a9b      	ldrh	r3, [r3, r2]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d132      	bne.n	8002dda <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d74:	f3ef 8310 	mrs	r3, PRIMASK
 8002d78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d7e:	2301      	movs	r3, #1
 8002d80:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	f383 8810 	msr	PRIMASK, r3
}
 8002d88:	46c0      	nop			@ (mov r8, r8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2180      	movs	r1, #128	@ 0x80
 8002d96:	438a      	bics	r2, r1
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f383 8810 	msr	PRIMASK, r3
}
 8002da4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002da6:	f3ef 8310 	mrs	r3, PRIMASK
 8002daa:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dac:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dae:	627b      	str	r3, [r7, #36]	@ 0x24
 8002db0:	2301      	movs	r3, #1
 8002db2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f383 8810 	msr	PRIMASK, r3
}
 8002dba:	46c0      	nop			@ (mov r8, r8)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2140      	movs	r1, #64	@ 0x40
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd0:	6a3b      	ldr	r3, [r7, #32]
 8002dd2:	f383 8810 	msr	PRIMASK, r3
}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002dd8:	e018      	b.n	8002e0c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	001a      	movs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	05d2      	lsls	r2, r2, #23
 8002dec:	0dd2      	lsrs	r2, r2, #23
 8002dee:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df4:	1c9a      	adds	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2256      	movs	r2, #86	@ 0x56
 8002dfe:	5a9b      	ldrh	r3, [r3, r2]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b01      	subs	r3, #1
 8002e04:	b299      	uxth	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2256      	movs	r2, #86	@ 0x56
 8002e0a:	5299      	strh	r1, [r3, r2]
}
 8002e0c:	46c0      	nop			@ (mov r8, r8)
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	b00c      	add	sp, #48	@ 0x30
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b08c      	sub	sp, #48	@ 0x30
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2288      	movs	r2, #136	@ 0x88
 8002e20:	589b      	ldr	r3, [r3, r2]
 8002e22:	2b21      	cmp	r3, #33	@ 0x21
 8002e24:	d165      	bne.n	8002ef2 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002e26:	232e      	movs	r3, #46	@ 0x2e
 8002e28:	18fb      	adds	r3, r7, r3
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	216a      	movs	r1, #106	@ 0x6a
 8002e2e:	5a52      	ldrh	r2, [r2, r1]
 8002e30:	801a      	strh	r2, [r3, #0]
 8002e32:	e059      	b.n	8002ee8 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2256      	movs	r2, #86	@ 0x56
 8002e38:	5a9b      	ldrh	r3, [r3, r2]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d133      	bne.n	8002ea8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e40:	f3ef 8310 	mrs	r3, PRIMASK
 8002e44:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e46:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	f383 8810 	msr	PRIMASK, r3
}
 8002e54:	46c0      	nop			@ (mov r8, r8)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689a      	ldr	r2, [r3, #8]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4926      	ldr	r1, [pc, #152]	@ (8002efc <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8002e62:	400a      	ands	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]
 8002e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e68:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f383 8810 	msr	PRIMASK, r3
}
 8002e70:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e72:	f3ef 8310 	mrs	r3, PRIMASK
 8002e76:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e78:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f383 8810 	msr	PRIMASK, r3
}
 8002e86:	46c0      	nop			@ (mov r8, r8)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2140      	movs	r1, #64	@ 0x40
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	f383 8810 	msr	PRIMASK, r3
}
 8002ea2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8002ea4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8002ea6:	e024      	b.n	8002ef2 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	69db      	ldr	r3, [r3, #28]
 8002eae:	2280      	movs	r2, #128	@ 0x80
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d013      	beq.n	8002edc <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec4:	1c5a      	adds	r2, r3, #1
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2256      	movs	r2, #86	@ 0x56
 8002ece:	5a9b      	ldrh	r3, [r3, r2]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b299      	uxth	r1, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2256      	movs	r2, #86	@ 0x56
 8002eda:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002edc:	212e      	movs	r1, #46	@ 0x2e
 8002ede:	187b      	adds	r3, r7, r1
 8002ee0:	881a      	ldrh	r2, [r3, #0]
 8002ee2:	187b      	adds	r3, r7, r1
 8002ee4:	3a01      	subs	r2, #1
 8002ee6:	801a      	strh	r2, [r3, #0]
 8002ee8:	232e      	movs	r3, #46	@ 0x2e
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1a0      	bne.n	8002e34 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8002ef2:	46c0      	nop			@ (mov r8, r8)
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b00c      	add	sp, #48	@ 0x30
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			@ (mov r8, r8)
 8002efc:	ff7fffff 	.word	0xff7fffff

08002f00 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b08c      	sub	sp, #48	@ 0x30
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2288      	movs	r2, #136	@ 0x88
 8002f0c:	589b      	ldr	r3, [r3, r2]
 8002f0e:	2b21      	cmp	r3, #33	@ 0x21
 8002f10:	d16a      	bne.n	8002fe8 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002f12:	232e      	movs	r3, #46	@ 0x2e
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	216a      	movs	r1, #106	@ 0x6a
 8002f1a:	5a52      	ldrh	r2, [r2, r1]
 8002f1c:	801a      	strh	r2, [r3, #0]
 8002f1e:	e05e      	b.n	8002fde <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2256      	movs	r2, #86	@ 0x56
 8002f24:	5a9b      	ldrh	r3, [r3, r2]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d133      	bne.n	8002f94 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f30:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f32:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f36:	2301      	movs	r3, #1
 8002f38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	f383 8810 	msr	PRIMASK, r3
}
 8002f40:	46c0      	nop			@ (mov r8, r8)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4928      	ldr	r1, [pc, #160]	@ (8002ff0 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8002f4e:	400a      	ands	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]
 8002f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f5e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f62:	617b      	str	r3, [r7, #20]
  return(result);
 8002f64:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f66:	623b      	str	r3, [r7, #32]
 8002f68:	2301      	movs	r3, #1
 8002f6a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	f383 8810 	msr	PRIMASK, r3
}
 8002f72:	46c0      	nop			@ (mov r8, r8)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2140      	movs	r1, #64	@ 0x40
 8002f80:	430a      	orrs	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f383 8810 	msr	PRIMASK, r3
}
 8002f8e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8002f90:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8002f92:	e029      	b.n	8002fe8 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	2280      	movs	r2, #128	@ 0x80
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d018      	beq.n	8002fd2 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	001a      	movs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	05d2      	lsls	r2, r2, #23
 8002fb2:	0dd2      	lsrs	r2, r2, #23
 8002fb4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fba:	1c9a      	adds	r2, r3, #2
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2256      	movs	r2, #86	@ 0x56
 8002fc4:	5a9b      	ldrh	r3, [r3, r2]
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	3b01      	subs	r3, #1
 8002fca:	b299      	uxth	r1, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2256      	movs	r2, #86	@ 0x56
 8002fd0:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002fd2:	212e      	movs	r1, #46	@ 0x2e
 8002fd4:	187b      	adds	r3, r7, r1
 8002fd6:	881a      	ldrh	r2, [r3, #0]
 8002fd8:	187b      	adds	r3, r7, r1
 8002fda:	3a01      	subs	r2, #1
 8002fdc:	801a      	strh	r2, [r3, #0]
 8002fde:	232e      	movs	r3, #46	@ 0x2e
 8002fe0:	18fb      	adds	r3, r7, r3
 8002fe2:	881b      	ldrh	r3, [r3, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d19b      	bne.n	8002f20 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	46bd      	mov	sp, r7
 8002fec:	b00c      	add	sp, #48	@ 0x30
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	ff7fffff 	.word	0xff7fffff

08002ff4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffc:	f3ef 8310 	mrs	r3, PRIMASK
 8003000:	60bb      	str	r3, [r7, #8]
  return(result);
 8003002:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	2301      	movs	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f383 8810 	msr	PRIMASK, r3
}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2140      	movs	r1, #64	@ 0x40
 800301e:	438a      	bics	r2, r1
 8003020:	601a      	str	r2, [r3, #0]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	f383 8810 	msr	PRIMASK, r3
}
 800302c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2288      	movs	r2, #136	@ 0x88
 8003032:	2120      	movs	r1, #32
 8003034:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f7fd f8f2 	bl	8000228 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003044:	46c0      	nop			@ (mov r8, r8)
 8003046:	46bd      	mov	sp, r7
 8003048:	b006      	add	sp, #24
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b094      	sub	sp, #80	@ 0x50
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003054:	204e      	movs	r0, #78	@ 0x4e
 8003056:	183b      	adds	r3, r7, r0
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	2160      	movs	r1, #96	@ 0x60
 800305c:	5a52      	ldrh	r2, [r2, r1]
 800305e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	228c      	movs	r2, #140	@ 0x8c
 8003064:	589b      	ldr	r3, [r3, r2]
 8003066:	2b22      	cmp	r3, #34	@ 0x22
 8003068:	d000      	beq.n	800306c <UART_RxISR_8BIT+0x20>
 800306a:	e0ba      	b.n	80031e2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003072:	214c      	movs	r1, #76	@ 0x4c
 8003074:	187b      	adds	r3, r7, r1
 8003076:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003078:	187b      	adds	r3, r7, r1
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b2da      	uxtb	r2, r3
 800307e:	183b      	adds	r3, r7, r0
 8003080:	881b      	ldrh	r3, [r3, #0]
 8003082:	b2d9      	uxtb	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003088:	400a      	ands	r2, r1
 800308a:	b2d2      	uxtb	r2, r2
 800308c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003092:	1c5a      	adds	r2, r3, #1
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	225e      	movs	r2, #94	@ 0x5e
 800309c:	5a9b      	ldrh	r3, [r3, r2]
 800309e:	b29b      	uxth	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b299      	uxth	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	225e      	movs	r2, #94	@ 0x5e
 80030a8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	225e      	movs	r2, #94	@ 0x5e
 80030ae:	5a9b      	ldrh	r3, [r3, r2]
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d000      	beq.n	80030b8 <UART_RxISR_8BIT+0x6c>
 80030b6:	e09c      	b.n	80031f2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030b8:	f3ef 8310 	mrs	r3, PRIMASK
 80030bc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80030c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030c2:	2301      	movs	r3, #1
 80030c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c8:	f383 8810 	msr	PRIMASK, r3
}
 80030cc:	46c0      	nop			@ (mov r8, r8)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4948      	ldr	r1, [pc, #288]	@ (80031fc <UART_RxISR_8BIT+0x1b0>)
 80030da:	400a      	ands	r2, r1
 80030dc:	601a      	str	r2, [r3, #0]
 80030de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80030e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030ea:	f3ef 8310 	mrs	r3, PRIMASK
 80030ee:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80030f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f4:	2301      	movs	r3, #1
 80030f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030fa:	f383 8810 	msr	PRIMASK, r3
}
 80030fe:	46c0      	nop			@ (mov r8, r8)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2101      	movs	r1, #1
 800310c:	438a      	bics	r2, r1
 800310e:	609a      	str	r2, [r3, #8]
 8003110:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003112:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003116:	f383 8810 	msr	PRIMASK, r3
}
 800311a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	228c      	movs	r2, #140	@ 0x8c
 8003120:	2120      	movs	r1, #32
 8003122:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	2380      	movs	r3, #128	@ 0x80
 8003138:	041b      	lsls	r3, r3, #16
 800313a:	4013      	ands	r3, r2
 800313c:	d018      	beq.n	8003170 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800313e:	f3ef 8310 	mrs	r3, PRIMASK
 8003142:	61bb      	str	r3, [r7, #24]
  return(result);
 8003144:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003146:	643b      	str	r3, [r7, #64]	@ 0x40
 8003148:	2301      	movs	r3, #1
 800314a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	f383 8810 	msr	PRIMASK, r3
}
 8003152:	46c0      	nop			@ (mov r8, r8)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4928      	ldr	r1, [pc, #160]	@ (8003200 <UART_RxISR_8BIT+0x1b4>)
 8003160:	400a      	ands	r2, r1
 8003162:	601a      	str	r2, [r3, #0]
 8003164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003166:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f383 8810 	msr	PRIMASK, r3
}
 800316e:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003174:	2b01      	cmp	r3, #1
 8003176:	d12f      	bne.n	80031d8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317e:	f3ef 8310 	mrs	r3, PRIMASK
 8003182:	60fb      	str	r3, [r7, #12]
  return(result);
 8003184:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003186:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f383 8810 	msr	PRIMASK, r3
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2110      	movs	r1, #16
 80031a0:	438a      	bics	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	2210      	movs	r2, #16
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b10      	cmp	r3, #16
 80031bc:	d103      	bne.n	80031c6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2210      	movs	r2, #16
 80031c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	225c      	movs	r2, #92	@ 0x5c
 80031ca:	5a9a      	ldrh	r2, [r3, r2]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	0011      	movs	r1, r2
 80031d0:	0018      	movs	r0, r3
 80031d2:	f7ff f847 	bl	8002264 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80031d6:	e00c      	b.n	80031f2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f7fd f838 	bl	8000250 <HAL_UART_RxCpltCallback>
}
 80031e0:	e007      	b.n	80031f2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	699a      	ldr	r2, [r3, #24]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2108      	movs	r1, #8
 80031ee:	430a      	orrs	r2, r1
 80031f0:	619a      	str	r2, [r3, #24]
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b014      	add	sp, #80	@ 0x50
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	fffffedf 	.word	0xfffffedf
 8003200:	fbffffff 	.word	0xfbffffff

08003204 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b094      	sub	sp, #80	@ 0x50
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800320c:	204e      	movs	r0, #78	@ 0x4e
 800320e:	183b      	adds	r3, r7, r0
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	2160      	movs	r1, #96	@ 0x60
 8003214:	5a52      	ldrh	r2, [r2, r1]
 8003216:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	228c      	movs	r2, #140	@ 0x8c
 800321c:	589b      	ldr	r3, [r3, r2]
 800321e:	2b22      	cmp	r3, #34	@ 0x22
 8003220:	d000      	beq.n	8003224 <UART_RxISR_16BIT+0x20>
 8003222:	e0ba      	b.n	800339a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800322a:	214c      	movs	r1, #76	@ 0x4c
 800322c:	187b      	adds	r3, r7, r1
 800322e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003234:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8003236:	187b      	adds	r3, r7, r1
 8003238:	183a      	adds	r2, r7, r0
 800323a:	881b      	ldrh	r3, [r3, #0]
 800323c:	8812      	ldrh	r2, [r2, #0]
 800323e:	4013      	ands	r3, r2
 8003240:	b29a      	uxth	r2, r3
 8003242:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003244:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800324a:	1c9a      	adds	r2, r3, #2
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	225e      	movs	r2, #94	@ 0x5e
 8003254:	5a9b      	ldrh	r3, [r3, r2]
 8003256:	b29b      	uxth	r3, r3
 8003258:	3b01      	subs	r3, #1
 800325a:	b299      	uxth	r1, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	225e      	movs	r2, #94	@ 0x5e
 8003260:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	225e      	movs	r2, #94	@ 0x5e
 8003266:	5a9b      	ldrh	r3, [r3, r2]
 8003268:	b29b      	uxth	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d000      	beq.n	8003270 <UART_RxISR_16BIT+0x6c>
 800326e:	e09c      	b.n	80033aa <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	623b      	str	r3, [r7, #32]
  return(result);
 8003276:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003278:	647b      	str	r3, [r7, #68]	@ 0x44
 800327a:	2301      	movs	r3, #1
 800327c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4948      	ldr	r1, [pc, #288]	@ (80033b4 <UART_RxISR_16BIT+0x1b0>)
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003298:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032a2:	f3ef 8310 	mrs	r3, PRIMASK
 80032a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80032a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80032ac:	2301      	movs	r3, #1
 80032ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2101      	movs	r1, #1
 80032c4:	438a      	bics	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	228c      	movs	r2, #140	@ 0x8c
 80032d8:	2120      	movs	r1, #32
 80032da:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	2380      	movs	r3, #128	@ 0x80
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	4013      	ands	r3, r2
 80032f4:	d018      	beq.n	8003328 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f6:	f3ef 8310 	mrs	r3, PRIMASK
 80032fa:	617b      	str	r3, [r7, #20]
  return(result);
 80032fc:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80032fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003300:	2301      	movs	r3, #1
 8003302:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4928      	ldr	r1, [pc, #160]	@ (80033b8 <UART_RxISR_16BIT+0x1b4>)
 8003318:	400a      	ands	r2, r1
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800331e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d12f      	bne.n	8003390 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003336:	f3ef 8310 	mrs	r3, PRIMASK
 800333a:	60bb      	str	r3, [r7, #8]
  return(result);
 800333c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800333e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003340:	2301      	movs	r3, #1
 8003342:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f383 8810 	msr	PRIMASK, r3
}
 800334a:	46c0      	nop			@ (mov r8, r8)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	2110      	movs	r1, #16
 8003358:	438a      	bics	r2, r1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800335e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f383 8810 	msr	PRIMASK, r3
}
 8003366:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69db      	ldr	r3, [r3, #28]
 800336e:	2210      	movs	r2, #16
 8003370:	4013      	ands	r3, r2
 8003372:	2b10      	cmp	r3, #16
 8003374:	d103      	bne.n	800337e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2210      	movs	r2, #16
 800337c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	225c      	movs	r2, #92	@ 0x5c
 8003382:	5a9a      	ldrh	r2, [r3, r2]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	0011      	movs	r1, r2
 8003388:	0018      	movs	r0, r3
 800338a:	f7fe ff6b 	bl	8002264 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800338e:	e00c      	b.n	80033aa <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	0018      	movs	r0, r3
 8003394:	f7fc ff5c 	bl	8000250 <HAL_UART_RxCpltCallback>
}
 8003398:	e007      	b.n	80033aa <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699a      	ldr	r2, [r3, #24]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2108      	movs	r1, #8
 80033a6:	430a      	orrs	r2, r1
 80033a8:	619a      	str	r2, [r3, #24]
}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b014      	add	sp, #80	@ 0x50
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	fffffedf 	.word	0xfffffedf
 80033b8:	fbffffff 	.word	0xfbffffff

080033bc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b0a0      	sub	sp, #128	@ 0x80
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80033c4:	237a      	movs	r3, #122	@ 0x7a
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	2160      	movs	r1, #96	@ 0x60
 80033cc:	5a52      	ldrh	r2, [r2, r1]
 80033ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	228c      	movs	r2, #140	@ 0x8c
 80033ec:	589b      	ldr	r3, [r3, r2]
 80033ee:	2b22      	cmp	r3, #34	@ 0x22
 80033f0:	d000      	beq.n	80033f4 <UART_RxISR_8BIT_FIFOEN+0x38>
 80033f2:	e165      	b.n	80036c0 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80033f4:	236e      	movs	r3, #110	@ 0x6e
 80033f6:	18fb      	adds	r3, r7, r3
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	2168      	movs	r1, #104	@ 0x68
 80033fc:	5a52      	ldrh	r2, [r2, r1]
 80033fe:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003400:	e10c      	b.n	800361c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003408:	216c      	movs	r1, #108	@ 0x6c
 800340a:	187b      	adds	r3, r7, r1
 800340c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800340e:	187b      	adds	r3, r7, r1
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b2da      	uxtb	r2, r3
 8003414:	237a      	movs	r3, #122	@ 0x7a
 8003416:	18fb      	adds	r3, r7, r3
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	b2d9      	uxtb	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003420:	400a      	ands	r2, r1
 8003422:	b2d2      	uxtb	r2, r2
 8003424:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	1c5a      	adds	r2, r3, #1
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	225e      	movs	r2, #94	@ 0x5e
 8003434:	5a9b      	ldrh	r3, [r3, r2]
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b299      	uxth	r1, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	225e      	movs	r2, #94	@ 0x5e
 8003440:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800344a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800344c:	2207      	movs	r2, #7
 800344e:	4013      	ands	r3, r2
 8003450:	d049      	beq.n	80034e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003452:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003454:	2201      	movs	r2, #1
 8003456:	4013      	ands	r3, r2
 8003458:	d010      	beq.n	800347c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800345a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800345c:	2380      	movs	r3, #128	@ 0x80
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	4013      	ands	r3, r2
 8003462:	d00b      	beq.n	800347c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2201      	movs	r2, #1
 800346a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2290      	movs	r2, #144	@ 0x90
 8003470:	589b      	ldr	r3, [r3, r2]
 8003472:	2201      	movs	r2, #1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2190      	movs	r1, #144	@ 0x90
 800347a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800347c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800347e:	2202      	movs	r2, #2
 8003480:	4013      	ands	r3, r2
 8003482:	d00f      	beq.n	80034a4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8003484:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003486:	2201      	movs	r2, #1
 8003488:	4013      	ands	r3, r2
 800348a:	d00b      	beq.n	80034a4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2202      	movs	r2, #2
 8003492:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2290      	movs	r2, #144	@ 0x90
 8003498:	589b      	ldr	r3, [r3, r2]
 800349a:	2204      	movs	r2, #4
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2190      	movs	r1, #144	@ 0x90
 80034a2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80034a6:	2204      	movs	r2, #4
 80034a8:	4013      	ands	r3, r2
 80034aa:	d00f      	beq.n	80034cc <UART_RxISR_8BIT_FIFOEN+0x110>
 80034ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ae:	2201      	movs	r2, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	d00b      	beq.n	80034cc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2204      	movs	r2, #4
 80034ba:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2290      	movs	r2, #144	@ 0x90
 80034c0:	589b      	ldr	r3, [r3, r2]
 80034c2:	2202      	movs	r2, #2
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2190      	movs	r1, #144	@ 0x90
 80034ca:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2290      	movs	r2, #144	@ 0x90
 80034d0:	589b      	ldr	r3, [r3, r2]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d007      	beq.n	80034e6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	0018      	movs	r0, r3
 80034da:	f7fe febb 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2290      	movs	r2, #144	@ 0x90
 80034e2:	2100      	movs	r1, #0
 80034e4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	225e      	movs	r2, #94	@ 0x5e
 80034ea:	5a9b      	ldrh	r3, [r3, r2]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d000      	beq.n	80034f4 <UART_RxISR_8BIT_FIFOEN+0x138>
 80034f2:	e093      	b.n	800361c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034f4:	f3ef 8310 	mrs	r3, PRIMASK
 80034f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80034fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80034fe:	2301      	movs	r3, #1
 8003500:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			@ (mov r8, r8)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4970      	ldr	r1, [pc, #448]	@ (80036d8 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8003516:	400a      	ands	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800351c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003520:	f383 8810 	msr	PRIMASK, r3
}
 8003524:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003526:	f3ef 8310 	mrs	r3, PRIMASK
 800352a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800352c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800352e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003530:	2301      	movs	r3, #1
 8003532:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			@ (mov r8, r8)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689a      	ldr	r2, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4965      	ldr	r1, [pc, #404]	@ (80036dc <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003548:	400a      	ands	r2, r1
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800354e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003550:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003552:	f383 8810 	msr	PRIMASK, r3
}
 8003556:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	228c      	movs	r2, #140	@ 0x8c
 800355c:	2120      	movs	r1, #32
 800355e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685a      	ldr	r2, [r3, #4]
 8003572:	2380      	movs	r3, #128	@ 0x80
 8003574:	041b      	lsls	r3, r3, #16
 8003576:	4013      	ands	r3, r2
 8003578:	d018      	beq.n	80035ac <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800357a:	f3ef 8310 	mrs	r3, PRIMASK
 800357e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003580:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003582:	663b      	str	r3, [r7, #96]	@ 0x60
 8003584:	2301      	movs	r3, #1
 8003586:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358a:	f383 8810 	msr	PRIMASK, r3
}
 800358e:	46c0      	nop			@ (mov r8, r8)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4951      	ldr	r1, [pc, #324]	@ (80036e0 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800359c:	400a      	ands	r2, r1
 800359e:	601a      	str	r2, [r3, #0]
 80035a0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80035a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d12f      	bne.n	8003614 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ba:	f3ef 8310 	mrs	r3, PRIMASK
 80035be:	623b      	str	r3, [r7, #32]
  return(result);
 80035c0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80035c4:	2301      	movs	r3, #1
 80035c6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ca:	f383 8810 	msr	PRIMASK, r3
}
 80035ce:	46c0      	nop			@ (mov r8, r8)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2110      	movs	r1, #16
 80035dc:	438a      	bics	r2, r1
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80035e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e6:	f383 8810 	msr	PRIMASK, r3
}
 80035ea:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2210      	movs	r2, #16
 80035f4:	4013      	ands	r3, r2
 80035f6:	2b10      	cmp	r3, #16
 80035f8:	d103      	bne.n	8003602 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2210      	movs	r2, #16
 8003600:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	225c      	movs	r2, #92	@ 0x5c
 8003606:	5a9a      	ldrh	r2, [r3, r2]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	0011      	movs	r1, r2
 800360c:	0018      	movs	r0, r3
 800360e:	f7fe fe29 	bl	8002264 <HAL_UARTEx_RxEventCallback>
 8003612:	e003      	b.n	800361c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	0018      	movs	r0, r3
 8003618:	f7fc fe1a 	bl	8000250 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800361c:	236e      	movs	r3, #110	@ 0x6e
 800361e:	18fb      	adds	r3, r7, r3
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d004      	beq.n	8003630 <UART_RxISR_8BIT_FIFOEN+0x274>
 8003626:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003628:	2220      	movs	r2, #32
 800362a:	4013      	ands	r3, r2
 800362c:	d000      	beq.n	8003630 <UART_RxISR_8BIT_FIFOEN+0x274>
 800362e:	e6e8      	b.n	8003402 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003630:	205a      	movs	r0, #90	@ 0x5a
 8003632:	183b      	adds	r3, r7, r0
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	215e      	movs	r1, #94	@ 0x5e
 8003638:	5a52      	ldrh	r2, [r2, r1]
 800363a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800363c:	0001      	movs	r1, r0
 800363e:	187b      	adds	r3, r7, r1
 8003640:	881b      	ldrh	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d044      	beq.n	80036d0 <UART_RxISR_8BIT_FIFOEN+0x314>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2268      	movs	r2, #104	@ 0x68
 800364a:	5a9b      	ldrh	r3, [r3, r2]
 800364c:	187a      	adds	r2, r7, r1
 800364e:	8812      	ldrh	r2, [r2, #0]
 8003650:	429a      	cmp	r2, r3
 8003652:	d23d      	bcs.n	80036d0 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003654:	f3ef 8310 	mrs	r3, PRIMASK
 8003658:	60bb      	str	r3, [r7, #8]
  return(result);
 800365a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800365c:	657b      	str	r3, [r7, #84]	@ 0x54
 800365e:	2301      	movs	r3, #1
 8003660:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			@ (mov r8, r8)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	491b      	ldr	r1, [pc, #108]	@ (80036e4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8003676:	400a      	ands	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f383 8810 	msr	PRIMASK, r3
}
 8003684:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800368a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800368c:	f3ef 8310 	mrs	r3, PRIMASK
 8003690:	617b      	str	r3, [r7, #20]
  return(result);
 8003692:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003694:	653b      	str	r3, [r7, #80]	@ 0x50
 8003696:	2301      	movs	r3, #1
 8003698:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	f383 8810 	msr	PRIMASK, r3
}
 80036a0:	46c0      	nop			@ (mov r8, r8)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2120      	movs	r1, #32
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f383 8810 	msr	PRIMASK, r3
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036be:	e007      	b.n	80036d0 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	699a      	ldr	r2, [r3, #24]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2108      	movs	r1, #8
 80036cc:	430a      	orrs	r2, r1
 80036ce:	619a      	str	r2, [r3, #24]
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	46bd      	mov	sp, r7
 80036d4:	b020      	add	sp, #128	@ 0x80
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	fffffeff 	.word	0xfffffeff
 80036dc:	effffffe 	.word	0xeffffffe
 80036e0:	fbffffff 	.word	0xfbffffff
 80036e4:	efffffff 	.word	0xefffffff
 80036e8:	0800304d 	.word	0x0800304d

080036ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b0a2      	sub	sp, #136	@ 0x88
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80036f4:	2382      	movs	r3, #130	@ 0x82
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	2160      	movs	r1, #96	@ 0x60
 80036fc:	5a52      	ldrh	r2, [r2, r1]
 80036fe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	2284      	movs	r2, #132	@ 0x84
 8003708:	18ba      	adds	r2, r7, r2
 800370a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	228c      	movs	r2, #140	@ 0x8c
 8003720:	589b      	ldr	r3, [r3, r2]
 8003722:	2b22      	cmp	r3, #34	@ 0x22
 8003724:	d000      	beq.n	8003728 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003726:	e16f      	b.n	8003a08 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003728:	2376      	movs	r3, #118	@ 0x76
 800372a:	18fb      	adds	r3, r7, r3
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	2168      	movs	r1, #104	@ 0x68
 8003730:	5a52      	ldrh	r2, [r2, r1]
 8003732:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003734:	e114      	b.n	8003960 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800373c:	2174      	movs	r1, #116	@ 0x74
 800373e:	187b      	adds	r3, r7, r1
 8003740:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003746:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003748:	187b      	adds	r3, r7, r1
 800374a:	2282      	movs	r2, #130	@ 0x82
 800374c:	18ba      	adds	r2, r7, r2
 800374e:	881b      	ldrh	r3, [r3, #0]
 8003750:	8812      	ldrh	r2, [r2, #0]
 8003752:	4013      	ands	r3, r2
 8003754:	b29a      	uxth	r2, r3
 8003756:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003758:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800375e:	1c9a      	adds	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	225e      	movs	r2, #94	@ 0x5e
 8003768:	5a9b      	ldrh	r3, [r3, r2]
 800376a:	b29b      	uxth	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	b299      	uxth	r1, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	225e      	movs	r2, #94	@ 0x5e
 8003774:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69db      	ldr	r3, [r3, #28]
 800377c:	2184      	movs	r1, #132	@ 0x84
 800377e:	187a      	adds	r2, r7, r1
 8003780:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003782:	187b      	adds	r3, r7, r1
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2207      	movs	r2, #7
 8003788:	4013      	ands	r3, r2
 800378a:	d04e      	beq.n	800382a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800378c:	187b      	adds	r3, r7, r1
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2201      	movs	r2, #1
 8003792:	4013      	ands	r3, r2
 8003794:	d010      	beq.n	80037b8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003796:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003798:	2380      	movs	r3, #128	@ 0x80
 800379a:	005b      	lsls	r3, r3, #1
 800379c:	4013      	ands	r3, r2
 800379e:	d00b      	beq.n	80037b8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2201      	movs	r2, #1
 80037a6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2290      	movs	r2, #144	@ 0x90
 80037ac:	589b      	ldr	r3, [r3, r2]
 80037ae:	2201      	movs	r2, #1
 80037b0:	431a      	orrs	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2190      	movs	r1, #144	@ 0x90
 80037b6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037b8:	2384      	movs	r3, #132	@ 0x84
 80037ba:	18fb      	adds	r3, r7, r3
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2202      	movs	r2, #2
 80037c0:	4013      	ands	r3, r2
 80037c2:	d00f      	beq.n	80037e4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80037c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037c6:	2201      	movs	r2, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	2202      	movs	r2, #2
 80037d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2290      	movs	r2, #144	@ 0x90
 80037d8:	589b      	ldr	r3, [r3, r2]
 80037da:	2204      	movs	r2, #4
 80037dc:	431a      	orrs	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2190      	movs	r1, #144	@ 0x90
 80037e2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037e4:	2384      	movs	r3, #132	@ 0x84
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2204      	movs	r2, #4
 80037ec:	4013      	ands	r3, r2
 80037ee:	d00f      	beq.n	8003810 <UART_RxISR_16BIT_FIFOEN+0x124>
 80037f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037f2:	2201      	movs	r2, #1
 80037f4:	4013      	ands	r3, r2
 80037f6:	d00b      	beq.n	8003810 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2204      	movs	r2, #4
 80037fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2290      	movs	r2, #144	@ 0x90
 8003804:	589b      	ldr	r3, [r3, r2]
 8003806:	2202      	movs	r2, #2
 8003808:	431a      	orrs	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2190      	movs	r1, #144	@ 0x90
 800380e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2290      	movs	r2, #144	@ 0x90
 8003814:	589b      	ldr	r3, [r3, r2]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d007      	beq.n	800382a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	0018      	movs	r0, r3
 800381e:	f7fe fd19 	bl	8002254 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2290      	movs	r2, #144	@ 0x90
 8003826:	2100      	movs	r1, #0
 8003828:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	225e      	movs	r2, #94	@ 0x5e
 800382e:	5a9b      	ldrh	r3, [r3, r2]
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d000      	beq.n	8003838 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003836:	e093      	b.n	8003960 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003838:	f3ef 8310 	mrs	r3, PRIMASK
 800383c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800383e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003840:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003842:	2301      	movs	r3, #1
 8003844:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003846:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003848:	f383 8810 	msr	PRIMASK, r3
}
 800384c:	46c0      	nop			@ (mov r8, r8)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4971      	ldr	r1, [pc, #452]	@ (8003a20 <UART_RxISR_16BIT_FIFOEN+0x334>)
 800385a:	400a      	ands	r2, r1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003860:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003862:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003864:	f383 8810 	msr	PRIMASK, r3
}
 8003868:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386a:	f3ef 8310 	mrs	r3, PRIMASK
 800386e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003870:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003872:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003874:	2301      	movs	r3, #1
 8003876:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003878:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800387a:	f383 8810 	msr	PRIMASK, r3
}
 800387e:	46c0      	nop			@ (mov r8, r8)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689a      	ldr	r2, [r3, #8]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4966      	ldr	r1, [pc, #408]	@ (8003a24 <UART_RxISR_16BIT_FIFOEN+0x338>)
 800388c:	400a      	ands	r2, r1
 800388e:	609a      	str	r2, [r3, #8]
 8003890:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003892:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003894:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003896:	f383 8810 	msr	PRIMASK, r3
}
 800389a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	228c      	movs	r2, #140	@ 0x8c
 80038a0:	2120      	movs	r1, #32
 80038a2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	2380      	movs	r3, #128	@ 0x80
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	4013      	ands	r3, r2
 80038bc:	d018      	beq.n	80038f0 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038be:	f3ef 8310 	mrs	r3, PRIMASK
 80038c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80038c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80038c8:	2301      	movs	r3, #1
 80038ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ce:	f383 8810 	msr	PRIMASK, r3
}
 80038d2:	46c0      	nop			@ (mov r8, r8)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4952      	ldr	r1, [pc, #328]	@ (8003a28 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	601a      	str	r2, [r3, #0]
 80038e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ea:	f383 8810 	msr	PRIMASK, r3
}
 80038ee:	46c0      	nop			@ (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d12f      	bne.n	8003958 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003902:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003906:	663b      	str	r3, [r7, #96]	@ 0x60
 8003908:	2301      	movs	r3, #1
 800390a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800390c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800390e:	f383 8810 	msr	PRIMASK, r3
}
 8003912:	46c0      	nop			@ (mov r8, r8)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2110      	movs	r1, #16
 8003920:	438a      	bics	r2, r1
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003928:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392a:	f383 8810 	msr	PRIMASK, r3
}
 800392e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	2210      	movs	r2, #16
 8003938:	4013      	ands	r3, r2
 800393a:	2b10      	cmp	r3, #16
 800393c:	d103      	bne.n	8003946 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2210      	movs	r2, #16
 8003944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	225c      	movs	r2, #92	@ 0x5c
 800394a:	5a9a      	ldrh	r2, [r3, r2]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	0011      	movs	r1, r2
 8003950:	0018      	movs	r0, r3
 8003952:	f7fe fc87 	bl	8002264 <HAL_UARTEx_RxEventCallback>
 8003956:	e003      	b.n	8003960 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	0018      	movs	r0, r3
 800395c:	f7fc fc78 	bl	8000250 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003960:	2376      	movs	r3, #118	@ 0x76
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	881b      	ldrh	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d006      	beq.n	8003978 <UART_RxISR_16BIT_FIFOEN+0x28c>
 800396a:	2384      	movs	r3, #132	@ 0x84
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	2220      	movs	r2, #32
 8003972:	4013      	ands	r3, r2
 8003974:	d000      	beq.n	8003978 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8003976:	e6de      	b.n	8003736 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003978:	205e      	movs	r0, #94	@ 0x5e
 800397a:	183b      	adds	r3, r7, r0
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	215e      	movs	r1, #94	@ 0x5e
 8003980:	5a52      	ldrh	r2, [r2, r1]
 8003982:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003984:	0001      	movs	r1, r0
 8003986:	187b      	adds	r3, r7, r1
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d044      	beq.n	8003a18 <UART_RxISR_16BIT_FIFOEN+0x32c>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2268      	movs	r2, #104	@ 0x68
 8003992:	5a9b      	ldrh	r3, [r3, r2]
 8003994:	187a      	adds	r2, r7, r1
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	429a      	cmp	r2, r3
 800399a:	d23d      	bcs.n	8003a18 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800399c:	f3ef 8310 	mrs	r3, PRIMASK
 80039a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80039a2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80039a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80039a6:	2301      	movs	r3, #1
 80039a8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f383 8810 	msr	PRIMASK, r3
}
 80039b0:	46c0      	nop			@ (mov r8, r8)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	491b      	ldr	r1, [pc, #108]	@ (8003a2c <UART_RxISR_16BIT_FIFOEN+0x340>)
 80039be:	400a      	ands	r2, r1
 80039c0:	609a      	str	r2, [r3, #8]
 80039c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80039c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	f383 8810 	msr	PRIMASK, r3
}
 80039cc:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a17      	ldr	r2, [pc, #92]	@ (8003a30 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80039d2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d4:	f3ef 8310 	mrs	r3, PRIMASK
 80039d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80039da:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80039dc:	657b      	str	r3, [r7, #84]	@ 0x54
 80039de:	2301      	movs	r3, #1
 80039e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f383 8810 	msr	PRIMASK, r3
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	2120      	movs	r1, #32
 80039f6:	430a      	orrs	r2, r1
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	f383 8810 	msr	PRIMASK, r3
}
 8003a04:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a06:	e007      	b.n	8003a18 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	699a      	ldr	r2, [r3, #24]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2108      	movs	r1, #8
 8003a14:	430a      	orrs	r2, r1
 8003a16:	619a      	str	r2, [r3, #24]
}
 8003a18:	46c0      	nop			@ (mov r8, r8)
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	b022      	add	sp, #136	@ 0x88
 8003a1e:	bd80      	pop	{r7, pc}
 8003a20:	fffffeff 	.word	0xfffffeff
 8003a24:	effffffe 	.word	0xeffffffe
 8003a28:	fbffffff 	.word	0xfbffffff
 8003a2c:	efffffff 	.word	0xefffffff
 8003a30:	08003205 	.word	0x08003205

08003a34 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3c:	46c0      	nop			@ (mov r8, r8)
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b002      	add	sp, #8
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4c:	46c0      	nop			@ (mov r8, r8)
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	b002      	add	sp, #8
 8003a52:	bd80      	pop	{r7, pc}

08003a54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a5c:	46c0      	nop			@ (mov r8, r8)
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	b002      	add	sp, #8
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <memset>:
 8003a64:	0003      	movs	r3, r0
 8003a66:	1882      	adds	r2, r0, r2
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d100      	bne.n	8003a6e <memset+0xa>
 8003a6c:	4770      	bx	lr
 8003a6e:	7019      	strb	r1, [r3, #0]
 8003a70:	3301      	adds	r3, #1
 8003a72:	e7f9      	b.n	8003a68 <memset+0x4>

08003a74 <__libc_init_array>:
 8003a74:	b570      	push	{r4, r5, r6, lr}
 8003a76:	2600      	movs	r6, #0
 8003a78:	4c0c      	ldr	r4, [pc, #48]	@ (8003aac <__libc_init_array+0x38>)
 8003a7a:	4d0d      	ldr	r5, [pc, #52]	@ (8003ab0 <__libc_init_array+0x3c>)
 8003a7c:	1b64      	subs	r4, r4, r5
 8003a7e:	10a4      	asrs	r4, r4, #2
 8003a80:	42a6      	cmp	r6, r4
 8003a82:	d109      	bne.n	8003a98 <__libc_init_array+0x24>
 8003a84:	2600      	movs	r6, #0
 8003a86:	f000 f819 	bl	8003abc <_init>
 8003a8a:	4c0a      	ldr	r4, [pc, #40]	@ (8003ab4 <__libc_init_array+0x40>)
 8003a8c:	4d0a      	ldr	r5, [pc, #40]	@ (8003ab8 <__libc_init_array+0x44>)
 8003a8e:	1b64      	subs	r4, r4, r5
 8003a90:	10a4      	asrs	r4, r4, #2
 8003a92:	42a6      	cmp	r6, r4
 8003a94:	d105      	bne.n	8003aa2 <__libc_init_array+0x2e>
 8003a96:	bd70      	pop	{r4, r5, r6, pc}
 8003a98:	00b3      	lsls	r3, r6, #2
 8003a9a:	58eb      	ldr	r3, [r5, r3]
 8003a9c:	4798      	blx	r3
 8003a9e:	3601      	adds	r6, #1
 8003aa0:	e7ee      	b.n	8003a80 <__libc_init_array+0xc>
 8003aa2:	00b3      	lsls	r3, r6, #2
 8003aa4:	58eb      	ldr	r3, [r5, r3]
 8003aa6:	4798      	blx	r3
 8003aa8:	3601      	adds	r6, #1
 8003aaa:	e7f2      	b.n	8003a92 <__libc_init_array+0x1e>
 8003aac:	08003c44 	.word	0x08003c44
 8003ab0:	08003c44 	.word	0x08003c44
 8003ab4:	08003c48 	.word	0x08003c48
 8003ab8:	08003c44 	.word	0x08003c44

08003abc <_init>:
 8003abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003abe:	46c0      	nop			@ (mov r8, r8)
 8003ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ac2:	bc08      	pop	{r3}
 8003ac4:	469e      	mov	lr, r3
 8003ac6:	4770      	bx	lr

08003ac8 <_fini>:
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ace:	bc08      	pop	{r3}
 8003ad0:	469e      	mov	lr, r3
 8003ad2:	4770      	bx	lr
