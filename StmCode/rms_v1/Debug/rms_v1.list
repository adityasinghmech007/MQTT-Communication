
rms_v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044f8  080000b8  080000b8  000010b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001538  080045b0  080045b0  000055b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ae8  08005ae8  0000710c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ae8  08005ae8  0000710c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ae8  08005ae8  0000710c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae8  08005ae8  00006ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aec  08005aec  00006aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  08005af0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          00000f3c  2000010c  08005bfc  0000710c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001048  08005bfc  00008048  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000710c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cab1  00000000  00000000  00007134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002420  00000000  00000000  00013be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  00016008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079b  00000000  00000000  000169f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015934  00000000  00000000  0001718b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d6ff  00000000  00000000  0002cabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084864  00000000  00000000  0003a1be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bea22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026dc  00000000  00000000  000bea68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000c1144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000010c 	.word	0x2000010c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08004588 	.word	0x08004588

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000110 	.word	0x20000110
 80000fc:	08004588 	.word	0x08004588

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_shi>:
 8000110:	b403      	push	{r0, r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0040      	lsls	r0, r0, #1
 8000118:	0049      	lsls	r1, r1, #1
 800011a:	5e09      	ldrsh	r1, [r1, r0]
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	448e      	add	lr, r1
 8000120:	bc03      	pop	{r0, r1}
 8000122:	4770      	bx	lr

08000124 <__udivsi3>:
 8000124:	2200      	movs	r2, #0
 8000126:	0843      	lsrs	r3, r0, #1
 8000128:	428b      	cmp	r3, r1
 800012a:	d374      	bcc.n	8000216 <__udivsi3+0xf2>
 800012c:	0903      	lsrs	r3, r0, #4
 800012e:	428b      	cmp	r3, r1
 8000130:	d35f      	bcc.n	80001f2 <__udivsi3+0xce>
 8000132:	0a03      	lsrs	r3, r0, #8
 8000134:	428b      	cmp	r3, r1
 8000136:	d344      	bcc.n	80001c2 <__udivsi3+0x9e>
 8000138:	0b03      	lsrs	r3, r0, #12
 800013a:	428b      	cmp	r3, r1
 800013c:	d328      	bcc.n	8000190 <__udivsi3+0x6c>
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d30d      	bcc.n	8000160 <__udivsi3+0x3c>
 8000144:	22ff      	movs	r2, #255	@ 0xff
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	ba12      	rev	r2, r2
 800014a:	0c03      	lsrs	r3, r0, #16
 800014c:	428b      	cmp	r3, r1
 800014e:	d302      	bcc.n	8000156 <__udivsi3+0x32>
 8000150:	1212      	asrs	r2, r2, #8
 8000152:	0209      	lsls	r1, r1, #8
 8000154:	d065      	beq.n	8000222 <__udivsi3+0xfe>
 8000156:	0b03      	lsrs	r3, r0, #12
 8000158:	428b      	cmp	r3, r1
 800015a:	d319      	bcc.n	8000190 <__udivsi3+0x6c>
 800015c:	e000      	b.n	8000160 <__udivsi3+0x3c>
 800015e:	0a09      	lsrs	r1, r1, #8
 8000160:	0bc3      	lsrs	r3, r0, #15
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x46>
 8000166:	03cb      	lsls	r3, r1, #15
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b83      	lsrs	r3, r0, #14
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x52>
 8000172:	038b      	lsls	r3, r1, #14
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b43      	lsrs	r3, r0, #13
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x5e>
 800017e:	034b      	lsls	r3, r1, #13
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0b03      	lsrs	r3, r0, #12
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x6a>
 800018a:	030b      	lsls	r3, r1, #12
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0ac3      	lsrs	r3, r0, #11
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x76>
 8000196:	02cb      	lsls	r3, r1, #11
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a83      	lsrs	r3, r0, #10
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x82>
 80001a2:	028b      	lsls	r3, r1, #10
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a43      	lsrs	r3, r0, #9
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x8e>
 80001ae:	024b      	lsls	r3, r1, #9
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0a03      	lsrs	r3, r0, #8
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x9a>
 80001ba:	020b      	lsls	r3, r1, #8
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	d2cd      	bcs.n	800015e <__udivsi3+0x3a>
 80001c2:	09c3      	lsrs	r3, r0, #7
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xa8>
 80001c8:	01cb      	lsls	r3, r1, #7
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0983      	lsrs	r3, r0, #6
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xb4>
 80001d4:	018b      	lsls	r3, r1, #6
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0943      	lsrs	r3, r0, #5
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xc0>
 80001e0:	014b      	lsls	r3, r1, #5
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	0903      	lsrs	r3, r0, #4
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xcc>
 80001ec:	010b      	lsls	r3, r1, #4
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	08c3      	lsrs	r3, r0, #3
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xd8>
 80001f8:	00cb      	lsls	r3, r1, #3
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0883      	lsrs	r3, r0, #2
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xe4>
 8000204:	008b      	lsls	r3, r1, #2
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0843      	lsrs	r3, r0, #1
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xf0>
 8000210:	004b      	lsls	r3, r1, #1
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	1a41      	subs	r1, r0, r1
 8000218:	d200      	bcs.n	800021c <__udivsi3+0xf8>
 800021a:	4601      	mov	r1, r0
 800021c:	4152      	adcs	r2, r2
 800021e:	4610      	mov	r0, r2
 8000220:	4770      	bx	lr
 8000222:	e7ff      	b.n	8000224 <__udivsi3+0x100>
 8000224:	b501      	push	{r0, lr}
 8000226:	2000      	movs	r0, #0
 8000228:	f000 f806 	bl	8000238 <__aeabi_idiv0>
 800022c:	bd02      	pop	{r1, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)

08000230 <__aeabi_uidivmod>:
 8000230:	2900      	cmp	r1, #0
 8000232:	d0f7      	beq.n	8000224 <__udivsi3+0x100>
 8000234:	e776      	b.n	8000124 <__udivsi3>
 8000236:	4770      	bx	lr

08000238 <__aeabi_idiv0>:
 8000238:	4770      	bx	lr
 800023a:	46c0      	nop			@ (mov r8, r8)

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b590      	push	{r4, r7, lr}
 800023e:	b087      	sub	sp, #28
 8000240:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000242:	f000 ff63 	bl	800110c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000246:	f000 f88d 	bl	8000364 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800024a:	f000 f93b 	bl	80004c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800024e:	f000 f8d1 	bl	80003f4 <MX_USART3_UART_Init>
  MX_USART4_UART_Init();
 8000252:	f000 f903 	bl	800045c <MX_USART4_UART_Init>
  /* USER CODE BEGIN 2 */
  const char  *ca_cert =
 8000256:	4b3b      	ldr	r3, [pc, #236]	@ (8000344 <main+0x108>)
 8000258:	613b      	str	r3, [r7, #16]
5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy\n\
rqXRfboQnoZsG4q5WTP468SQvvG5\n\
-----END CERTIFICATE-----\n\
";

  const char  *client_cert =
 800025a:	4b3b      	ldr	r3, [pc, #236]	@ (8000348 <main+0x10c>)
 800025c:	60fb      	str	r3, [r7, #12]
AW7mwLHkSQd+xcyqqwrW4c9rEQMCraplvkp+ljOvD0+g+KGHe7o90v3tOnQJElYV\n\
cjntaA9a/XOTIpejsIaU4LKMwU086QJhF726cB3QXCcBBpw4xgRfLxBKAiq+0Q==\n\
-----END CERTIFICATE-----\n\
";

  const char  *private_key =
 800025e:	4b3b      	ldr	r3, [pc, #236]	@ (800034c <main+0x110>)
 8000260:	60bb      	str	r3, [r7, #8]
ToQXAoGBAMEf61tI5knwjkOpHMlNX+RHOxx5xBE4TbivsbObK4Sarw2Jcj/LWkuF\n\
B3bMD2dRRSDQe/r6LJjLERLEZGbLIdMQGPUg8uhrAs7T4MYTN9JIsr0/ehIjqM8v\n\
HbD9l70i/VH23a3tett8GUqErMAkQJMh+Yh40Y6pkNJC3QNJpmA3\n\
-----END RSA PRIVATE KEY-----\n\
";
  bool cert1_status = false;
 8000262:	2317      	movs	r3, #23
 8000264:	18fb      	adds	r3, r7, r3
 8000266:	2200      	movs	r2, #0
 8000268:	701a      	strb	r2, [r3, #0]
  bool cert2_status = false;
 800026a:	2316      	movs	r3, #22
 800026c:	18fb      	adds	r3, r7, r3
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
  bool cert3_status = false;
 8000272:	2315      	movs	r3, #21
 8000274:	18fb      	adds	r3, r7, r3
 8000276:	2200      	movs	r2, #0
 8000278:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 2 */
  //uint32_t data_to_write = 0x12345678;


  while (!cert1_status){
 800027a:	e007      	b.n	800028c <main+0x50>
	  cert1_status =  uploadcertificate1(ca_cert);
 800027c:	2317      	movs	r3, #23
 800027e:	18fc      	adds	r4, r7, r3
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	0018      	movs	r0, r3
 8000284:	f000 fa2c 	bl	80006e0 <uploadcertificate1>
 8000288:	0003      	movs	r3, r0
 800028a:	7023      	strb	r3, [r4, #0]
  while (!cert1_status){
 800028c:	2317      	movs	r3, #23
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	781b      	ldrb	r3, [r3, #0]
 8000292:	2201      	movs	r2, #1
 8000294:	4053      	eors	r3, r2
 8000296:	b2db      	uxtb	r3, r3
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1ef      	bne.n	800027c <main+0x40>
  }
  while (!cert2_status){
 800029c:	e007      	b.n	80002ae <main+0x72>
	  cert2_status =  uploadcertificate2(client_cert);
 800029e:	2316      	movs	r3, #22
 80002a0:	18fc      	adds	r4, r7, r3
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	0018      	movs	r0, r3
 80002a6:	f000 fa77 	bl	8000798 <uploadcertificate2>
 80002aa:	0003      	movs	r3, r0
 80002ac:	7023      	strb	r3, [r4, #0]
  while (!cert2_status){
 80002ae:	2316      	movs	r3, #22
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2201      	movs	r2, #1
 80002b6:	4053      	eors	r3, r2
 80002b8:	b2db      	uxtb	r3, r3
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d1ef      	bne.n	800029e <main+0x62>
  }
  while (!cert3_status){
 80002be:	e007      	b.n	80002d0 <main+0x94>
	  cert3_status =  uploadcertificate3(private_key);
 80002c0:	2315      	movs	r3, #21
 80002c2:	18fc      	adds	r4, r7, r3
 80002c4:	68bb      	ldr	r3, [r7, #8]
 80002c6:	0018      	movs	r0, r3
 80002c8:	f000 fac2 	bl	8000850 <uploadcertificate3>
 80002cc:	0003      	movs	r3, r0
 80002ce:	7023      	strb	r3, [r4, #0]
  while (!cert3_status){
 80002d0:	2315      	movs	r3, #21
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	781b      	ldrb	r3, [r3, #0]
 80002d6:	2201      	movs	r2, #1
 80002d8:	4053      	eors	r3, r2
 80002da:	b2db      	uxtb	r3, r3
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d1ef      	bne.n	80002c0 <main+0x84>
  }
  assignPDPcontext();
 80002e0:	f000 f9ac 	bl	800063c <assignPDPcontext>
 {
  /* USER CODE END WHILE */

//  bool TransmitDataMqtt_flag = false;
//  HAL_StatusTypeDef Inverter_receive_status=HAL_TIMEOUT;
  bool rcvmessage = false;
 80002e4:	2314      	movs	r3, #20
 80002e6:	18fb      	adds	r3, r7, r3
 80002e8:	2200      	movs	r2, #0
 80002ea:	701a      	strb	r2, [r3, #0]
  while(!rcvmessage)
 80002ec:	e00a      	b.n	8000304 <main+0xc8>
  {
	  rcvmessage = Subscribetotopic("testpub1",1600,3000);
 80002ee:	2314      	movs	r3, #20
 80002f0:	18fc      	adds	r4, r7, r3
 80002f2:	4a17      	ldr	r2, [pc, #92]	@ (8000350 <main+0x114>)
 80002f4:	23c8      	movs	r3, #200	@ 0xc8
 80002f6:	00d9      	lsls	r1, r3, #3
 80002f8:	4b16      	ldr	r3, [pc, #88]	@ (8000354 <main+0x118>)
 80002fa:	0018      	movs	r0, r3
 80002fc:	f000 fcc6 	bl	8000c8c <Subscribetotopic>
 8000300:	0003      	movs	r3, r0
 8000302:	7023      	strb	r3, [r4, #0]
  while(!rcvmessage)
 8000304:	2314      	movs	r3, #20
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2201      	movs	r2, #1
 800030c:	4053      	eors	r3, r2
 800030e:	b2db      	uxtb	r3, r3
 8000310:	2b00      	cmp	r3, #0
 8000312:	d1ec      	bne.n	80002ee <main+0xb2>
  }
  // Declare variables for start and end indices
  uint32_t start_idx, end_idx;

  // Assign values to start and end indices at runtime
  start_idx = 95;  // These values can be changed at runtime
 8000314:	235f      	movs	r3, #95	@ 0x5f
 8000316:	607b      	str	r3, [r7, #4]
  end_idx = 1600;    // This can also be user-defined or come from another source
 8000318:	23c8      	movs	r3, #200	@ 0xc8
 800031a:	00db      	lsls	r3, r3, #3
 800031c:	603b      	str	r3, [r7, #0]

      // Extract values from start_idx to end_idx and copy to reqcert buffer
      Extract_Values(buffer, reqcert, start_idx, end_idx);
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	687a      	ldr	r2, [r7, #4]
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <main+0x11c>)
 8000324:	480d      	ldr	r0, [pc, #52]	@ (800035c <main+0x120>)
 8000326:	f000 fd21 	bl	8000d6c <Extract_Values>



  Write_Flash(FLASH_USER_START_ADDR,reqcert,end_idx-start_idx);
 800032a:	683a      	ldr	r2, [r7, #0]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	1ad2      	subs	r2, r2, r3
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <main+0x11c>)
 8000332:	480b      	ldr	r0, [pc, #44]	@ (8000360 <main+0x124>)
 8000334:	0019      	movs	r1, r3
 8000336:	f000 fd37 	bl	8000da8 <Write_Flash>

      // Now reqcert contains the values between buffer[start_idx] and buffer[end_idx - 1]
  UnsubscribefromTopic("testpub1");
 800033a:	4b06      	ldr	r3, [pc, #24]	@ (8000354 <main+0x118>)
 800033c:	0018      	movs	r0, r3
 800033e:	f000 fce5 	bl	8000d0c <UnsubscribefromTopic>
 {
 8000342:	e7cf      	b.n	80002e4 <main+0xa8>
 8000344:	080045b0 	.word	0x080045b0
 8000348:	08004a58 	.word	0x08004a58
 800034c:	08004f24 	.word	0x08004f24
 8000350:	00000bb8 	.word	0x00000bb8
 8000354:	080055b0 	.word	0x080055b0
 8000358:	20000890 	.word	0x20000890
 800035c:	20000250 	.word	0x20000250
 8000360:	0801f800 	.word	0x0801f800

08000364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000364:	b590      	push	{r4, r7, lr}
 8000366:	b093      	sub	sp, #76	@ 0x4c
 8000368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800036a:	2414      	movs	r4, #20
 800036c:	193b      	adds	r3, r7, r4
 800036e:	0018      	movs	r0, r3
 8000370:	2334      	movs	r3, #52	@ 0x34
 8000372:	001a      	movs	r2, r3
 8000374:	2100      	movs	r1, #0
 8000376:	f003 fc73 	bl	8003c60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800037a:	1d3b      	adds	r3, r7, #4
 800037c:	0018      	movs	r0, r3
 800037e:	2310      	movs	r3, #16
 8000380:	001a      	movs	r2, r3
 8000382:	2100      	movs	r1, #0
 8000384:	f003 fc6c 	bl	8003c60 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000388:	2380      	movs	r3, #128	@ 0x80
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	0018      	movs	r0, r3
 800038e:	f001 fc2b 	bl	8001be8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000392:	193b      	adds	r3, r7, r4
 8000394:	2202      	movs	r2, #2
 8000396:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000398:	193b      	adds	r3, r7, r4
 800039a:	2280      	movs	r2, #128	@ 0x80
 800039c:	0052      	lsls	r2, r2, #1
 800039e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003a6:	193b      	adds	r3, r7, r4
 80003a8:	2240      	movs	r2, #64	@ 0x40
 80003aa:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80003ac:	193b      	adds	r3, r7, r4
 80003ae:	2200      	movs	r2, #0
 80003b0:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003b2:	193b      	adds	r3, r7, r4
 80003b4:	0018      	movs	r0, r3
 80003b6:	f001 fc63 	bl	8001c80 <HAL_RCC_OscConfig>
 80003ba:	1e03      	subs	r3, r0, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80003be:	f000 f90f 	bl	80005e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	1d3b      	adds	r3, r7, #4
 80003c4:	2207      	movs	r2, #7
 80003c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003c8:	1d3b      	adds	r3, r7, #4
 80003ca:	2200      	movs	r2, #0
 80003cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2200      	movs	r2, #0
 80003d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003d4:	1d3b      	adds	r3, r7, #4
 80003d6:	2200      	movs	r2, #0
 80003d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003da:	1d3b      	adds	r3, r7, #4
 80003dc:	2100      	movs	r1, #0
 80003de:	0018      	movs	r0, r3
 80003e0:	f001 ff5e 	bl	80022a0 <HAL_RCC_ClockConfig>
 80003e4:	1e03      	subs	r3, r0, #0
 80003e6:	d001      	beq.n	80003ec <SystemClock_Config+0x88>
  {
    Error_Handler();
 80003e8:	f000 f8fa 	bl	80005e0 <Error_Handler>
  }
}
 80003ec:	46c0      	nop			@ (mov r8, r8)
 80003ee:	46bd      	mov	sp, r7
 80003f0:	b013      	add	sp, #76	@ 0x4c
 80003f2:	bd90      	pop	{r4, r7, pc}

080003f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80003f8:	4b16      	ldr	r3, [pc, #88]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 80003fa:	4a17      	ldr	r2, [pc, #92]	@ (8000458 <MX_USART3_UART_Init+0x64>)
 80003fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80003fe:	4b15      	ldr	r3, [pc, #84]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 8000400:	22e1      	movs	r2, #225	@ 0xe1
 8000402:	0252      	lsls	r2, r2, #9
 8000404:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000406:	4b13      	ldr	r3, [pc, #76]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 8000408:	2200      	movs	r2, #0
 800040a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 800040e:	2200      	movs	r2, #0
 8000410:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 8000414:	2200      	movs	r2, #0
 8000416:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000418:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 800041a:	220c      	movs	r2, #12
 800041c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041e:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000424:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 8000426:	2200      	movs	r2, #0
 8000428:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800042a:	4b0a      	ldr	r3, [pc, #40]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 800042c:	2200      	movs	r2, #0
 800042e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000430:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 8000432:	2200      	movs	r2, #0
 8000434:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000436:	4b07      	ldr	r3, [pc, #28]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 8000438:	2200      	movs	r2, #0
 800043a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <MX_USART3_UART_Init+0x60>)
 800043e:	0018      	movs	r0, r3
 8000440:	f002 f8d8 	bl	80025f4 <HAL_UART_Init>
 8000444:	1e03      	subs	r3, r0, #0
 8000446:	d001      	beq.n	800044c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000448:	f000 f8ca 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800044c:	46c0      	nop			@ (mov r8, r8)
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	46c0      	nop			@ (mov r8, r8)
 8000454:	20000128 	.word	0x20000128
 8000458:	40004800 	.word	0x40004800

0800045c <MX_USART4_UART_Init>:
  * @brief USART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART4_UART_Init(void)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8000460:	4b16      	ldr	r3, [pc, #88]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 8000462:	4a17      	ldr	r2, [pc, #92]	@ (80004c0 <MX_USART4_UART_Init+0x64>)
 8000464:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8000466:	4b15      	ldr	r3, [pc, #84]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 8000468:	2296      	movs	r2, #150	@ 0x96
 800046a:	0192      	lsls	r2, r2, #6
 800046c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800046e:	4b13      	ldr	r3, [pc, #76]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 8000470:	2200      	movs	r2, #0
 8000472:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 8000476:	2200      	movs	r2, #0
 8000478:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800047a:	4b10      	ldr	r3, [pc, #64]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 800047c:	2200      	movs	r2, #0
 800047e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000480:	4b0e      	ldr	r3, [pc, #56]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 8000482:	220c      	movs	r2, #12
 8000484:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000486:	4b0d      	ldr	r3, [pc, #52]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 8000488:	2200      	movs	r2, #0
 800048a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800048c:	4b0b      	ldr	r3, [pc, #44]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 800048e:	2200      	movs	r2, #0
 8000490:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000492:	4b0a      	ldr	r3, [pc, #40]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 8000494:	2200      	movs	r2, #0
 8000496:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000498:	4b08      	ldr	r3, [pc, #32]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 800049a:	2200      	movs	r2, #0
 800049c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800049e:	4b07      	ldr	r3, [pc, #28]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80004a4:	4b05      	ldr	r3, [pc, #20]	@ (80004bc <MX_USART4_UART_Init+0x60>)
 80004a6:	0018      	movs	r0, r3
 80004a8:	f002 f8a4 	bl	80025f4 <HAL_UART_Init>
 80004ac:	1e03      	subs	r3, r0, #0
 80004ae:	d001      	beq.n	80004b4 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80004b0:	f000 f896 	bl	80005e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80004b4:	46c0      	nop			@ (mov r8, r8)
 80004b6:	46bd      	mov	sp, r7
 80004b8:	bd80      	pop	{r7, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)
 80004bc:	200001bc 	.word	0x200001bc
 80004c0:	40004c00 	.word	0x40004c00

080004c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004c4:	b590      	push	{r4, r7, lr}
 80004c6:	b08b      	sub	sp, #44	@ 0x2c
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	2414      	movs	r4, #20
 80004cc:	193b      	adds	r3, r7, r4
 80004ce:	0018      	movs	r0, r3
 80004d0:	2314      	movs	r3, #20
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f003 fbc3 	bl	8003c60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004da:	4b3f      	ldr	r3, [pc, #252]	@ (80005d8 <MX_GPIO_Init+0x114>)
 80004dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004de:	4b3e      	ldr	r3, [pc, #248]	@ (80005d8 <MX_GPIO_Init+0x114>)
 80004e0:	2104      	movs	r1, #4
 80004e2:	430a      	orrs	r2, r1
 80004e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004e6:	4b3c      	ldr	r3, [pc, #240]	@ (80005d8 <MX_GPIO_Init+0x114>)
 80004e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004ea:	2204      	movs	r2, #4
 80004ec:	4013      	ands	r3, r2
 80004ee:	613b      	str	r3, [r7, #16]
 80004f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004f2:	4b39      	ldr	r3, [pc, #228]	@ (80005d8 <MX_GPIO_Init+0x114>)
 80004f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004f6:	4b38      	ldr	r3, [pc, #224]	@ (80005d8 <MX_GPIO_Init+0x114>)
 80004f8:	2120      	movs	r1, #32
 80004fa:	430a      	orrs	r2, r1
 80004fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80004fe:	4b36      	ldr	r3, [pc, #216]	@ (80005d8 <MX_GPIO_Init+0x114>)
 8000500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000502:	2220      	movs	r2, #32
 8000504:	4013      	ands	r3, r2
 8000506:	60fb      	str	r3, [r7, #12]
 8000508:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800050a:	4b33      	ldr	r3, [pc, #204]	@ (80005d8 <MX_GPIO_Init+0x114>)
 800050c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800050e:	4b32      	ldr	r3, [pc, #200]	@ (80005d8 <MX_GPIO_Init+0x114>)
 8000510:	2101      	movs	r1, #1
 8000512:	430a      	orrs	r2, r1
 8000514:	635a      	str	r2, [r3, #52]	@ 0x34
 8000516:	4b30      	ldr	r3, [pc, #192]	@ (80005d8 <MX_GPIO_Init+0x114>)
 8000518:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800051a:	2201      	movs	r2, #1
 800051c:	4013      	ands	r3, r2
 800051e:	60bb      	str	r3, [r7, #8]
 8000520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000522:	4b2d      	ldr	r3, [pc, #180]	@ (80005d8 <MX_GPIO_Init+0x114>)
 8000524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000526:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <MX_GPIO_Init+0x114>)
 8000528:	2102      	movs	r1, #2
 800052a:	430a      	orrs	r2, r1
 800052c:	635a      	str	r2, [r3, #52]	@ 0x34
 800052e:	4b2a      	ldr	r3, [pc, #168]	@ (80005d8 <MX_GPIO_Init+0x114>)
 8000530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000532:	2202      	movs	r2, #2
 8000534:	4013      	ands	r3, r2
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 800053a:	23a0      	movs	r3, #160	@ 0xa0
 800053c:	05db      	lsls	r3, r3, #23
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f001 fb32 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7|GPIO_PIN_8, GPIO_PIN_RESET);
 8000548:	23c0      	movs	r3, #192	@ 0xc0
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4823      	ldr	r0, [pc, #140]	@ (80005dc <MX_GPIO_Init+0x118>)
 800054e:	2200      	movs	r2, #0
 8000550:	0019      	movs	r1, r3
 8000552:	f001 fb2b 	bl	8001bac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000556:	193b      	adds	r3, r7, r4
 8000558:	220c      	movs	r2, #12
 800055a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800055c:	193b      	adds	r3, r7, r4
 800055e:	2202      	movs	r2, #2
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2201      	movs	r2, #1
 8000566:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2201      	movs	r2, #1
 8000572:	611a      	str	r2, [r3, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	193a      	adds	r2, r7, r4
 8000576:	23a0      	movs	r3, #160	@ 0xa0
 8000578:	05db      	lsls	r3, r3, #23
 800057a:	0011      	movs	r1, r2
 800057c:	0018      	movs	r0, r3
 800057e:	f001 f9b1 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000582:	193b      	adds	r3, r7, r4
 8000584:	2220      	movs	r2, #32
 8000586:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000588:	193b      	adds	r3, r7, r4
 800058a:	2201      	movs	r2, #1
 800058c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058e:	193b      	adds	r3, r7, r4
 8000590:	2200      	movs	r2, #0
 8000592:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2202      	movs	r2, #2
 8000598:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800059a:	193a      	adds	r2, r7, r4
 800059c:	23a0      	movs	r3, #160	@ 0xa0
 800059e:	05db      	lsls	r3, r3, #23
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f001 f99e 	bl	80018e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80005a8:	0021      	movs	r1, r4
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	22c0      	movs	r2, #192	@ 0xc0
 80005ae:	0052      	lsls	r2, r2, #1
 80005b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b2:	187b      	adds	r3, r7, r1
 80005b4:	2201      	movs	r2, #1
 80005b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	187b      	adds	r3, r7, r1
 80005ba:	2200      	movs	r2, #0
 80005bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	187b      	adds	r3, r7, r1
 80005c0:	2200      	movs	r2, #0
 80005c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	4a05      	ldr	r2, [pc, #20]	@ (80005dc <MX_GPIO_Init+0x118>)
 80005c8:	0019      	movs	r1, r3
 80005ca:	0010      	movs	r0, r2
 80005cc:	f001 f98a 	bl	80018e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b00b      	add	sp, #44	@ 0x2c
 80005d6:	bd90      	pop	{r4, r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	50000400 	.word	0x50000400

080005e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005e4:	b672      	cpsid	i
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005e8:	46c0      	nop			@ (mov r8, r8)
 80005ea:	e7fd      	b.n	80005e8 <Error_Handler+0x8>

080005ec <SIMTransmit>:
//The rcv_len and rcv_timeout functions are specific to the HAL_UART_Receive function for defining variable rcv_len and rcv_timeouts for different AT commands.
//The timeouts and reception length for different ATcommands used in the code are defined on observing the module responses with 2G and 4G networks.
//The timeouts and reception length can be optimized further while testing.

void SIMTransmit(const char *cmd, uint32_t rcv_len, uint32_t rcv_timeout)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	60f8      	str	r0, [r7, #12]
 80005f4:	60b9      	str	r1, [r7, #8]
 80005f6:	607a      	str	r2, [r7, #4]
	//  memset(ATcommand,0,sizeof(ATcommand));

	memset(buffer, 0, sizeof(buffer));
 80005f8:	23c8      	movs	r3, #200	@ 0xc8
 80005fa:	00da      	lsls	r2, r3, #3
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <SIMTransmit+0x48>)
 80005fe:	2100      	movs	r1, #0
 8000600:	0018      	movs	r0, r3
 8000602:	f003 fb2d 	bl	8003c60 <memset>
	HAL_UART_Transmit_IT(&huart3, (uint8_t*) cmd, strlen(cmd));
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	0018      	movs	r0, r3
 800060a:	f7ff fd79 	bl	8000100 <strlen>
 800060e:	0003      	movs	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	68f9      	ldr	r1, [r7, #12]
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <SIMTransmit+0x4c>)
 8000616:	0018      	movs	r0, r3
 8000618:	f002 f928 	bl	800286c <HAL_UART_Transmit_IT>
	//  HAL_Delay(2000);
	HAL_UART_Receive(&huart3, buffer, rcv_len, rcv_timeout);
 800061c:	68bb      	ldr	r3, [r7, #8]
 800061e:	b29a      	uxth	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4904      	ldr	r1, [pc, #16]	@ (8000634 <SIMTransmit+0x48>)
 8000624:	4804      	ldr	r0, [pc, #16]	@ (8000638 <SIMTransmit+0x4c>)
 8000626:	f002 f83b 	bl	80026a0 <HAL_UART_Receive>

}
 800062a:	46c0      	nop			@ (mov r8, r8)
 800062c:	46bd      	mov	sp, r7
 800062e:	b004      	add	sp, #16
 8000630:	bd80      	pop	{r7, pc}
 8000632:	46c0      	nop			@ (mov r8, r8)
 8000634:	20000250 	.word	0x20000250
 8000638:	20000128 	.word	0x20000128

0800063c <assignPDPcontext>:

bool assignPDPcontext(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	SIMTransmit("AT+QICSGP=1,1,\"airtelgprs.com\",\"\",\"\",0\r\n", 100, 3000);
 8000640:	4a20      	ldr	r2, [pc, #128]	@ (80006c4 <assignPDPcontext+0x88>)
 8000642:	4b21      	ldr	r3, [pc, #132]	@ (80006c8 <assignPDPcontext+0x8c>)
 8000644:	2164      	movs	r1, #100	@ 0x64
 8000646:	0018      	movs	r0, r3
 8000648:	f7ff ffd0 	bl	80005ec <SIMTransmit>
	if (strstr((char*) buffer, "OK"))
 800064c:	4a1f      	ldr	r2, [pc, #124]	@ (80006cc <assignPDPcontext+0x90>)
 800064e:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <assignPDPcontext+0x94>)
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f003 fb0c 	bl	8003c70 <strstr>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d01d      	beq.n	8000698 <assignPDPcontext+0x5c>
			{
		SIMTransmit("AT+QIACT=1\r\n", 100, 3000);
 800065c:	4a19      	ldr	r2, [pc, #100]	@ (80006c4 <assignPDPcontext+0x88>)
 800065e:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <assignPDPcontext+0x98>)
 8000660:	2164      	movs	r1, #100	@ 0x64
 8000662:	0018      	movs	r0, r3
 8000664:	f7ff ffc2 	bl	80005ec <SIMTransmit>
		if (strstr((char*) buffer, "OK"))
 8000668:	4a18      	ldr	r2, [pc, #96]	@ (80006cc <assignPDPcontext+0x90>)
 800066a:	4b19      	ldr	r3, [pc, #100]	@ (80006d0 <assignPDPcontext+0x94>)
 800066c:	0011      	movs	r1, r2
 800066e:	0018      	movs	r0, r3
 8000670:	f003 fafe 	bl	8003c70 <strstr>
 8000674:	1e03      	subs	r3, r0, #0
 8000676:	d021      	beq.n	80006bc <assignPDPcontext+0x80>
				{
			SIMTransmit("AT+QIACT?\r\n", 100, 3000);
 8000678:	4a12      	ldr	r2, [pc, #72]	@ (80006c4 <assignPDPcontext+0x88>)
 800067a:	4b17      	ldr	r3, [pc, #92]	@ (80006d8 <assignPDPcontext+0x9c>)
 800067c:	2164      	movs	r1, #100	@ 0x64
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ffb4 	bl	80005ec <SIMTransmit>

			if (strstr((char*) buffer, "+QIACT: 1,1,1"))
 8000684:	4a15      	ldr	r2, [pc, #84]	@ (80006dc <assignPDPcontext+0xa0>)
 8000686:	4b12      	ldr	r3, [pc, #72]	@ (80006d0 <assignPDPcontext+0x94>)
 8000688:	0011      	movs	r1, r2
 800068a:	0018      	movs	r0, r3
 800068c:	f003 faf0 	bl	8003c70 <strstr>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d013      	beq.n	80006bc <assignPDPcontext+0x80>
					{
				return true;
 8000694:	2301      	movs	r3, #1
 8000696:	e012      	b.n	80006be <assignPDPcontext+0x82>
			}
		}
	}
	else
	{
		SIMTransmit("AT+QIACT?\r\n", 100, 3000);
 8000698:	4a0a      	ldr	r2, [pc, #40]	@ (80006c4 <assignPDPcontext+0x88>)
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <assignPDPcontext+0x9c>)
 800069c:	2164      	movs	r1, #100	@ 0x64
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff ffa4 	bl	80005ec <SIMTransmit>

		if (strstr((char*) buffer, "+QIACT: 1,1,1"))
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <assignPDPcontext+0xa0>)
 80006a6:	4b0a      	ldr	r3, [pc, #40]	@ (80006d0 <assignPDPcontext+0x94>)
 80006a8:	0011      	movs	r1, r2
 80006aa:	0018      	movs	r0, r3
 80006ac:	f003 fae0 	bl	8003c70 <strstr>
 80006b0:	1e03      	subs	r3, r0, #0
 80006b2:	d001      	beq.n	80006b8 <assignPDPcontext+0x7c>
				{
			return true;
 80006b4:	2301      	movs	r3, #1
 80006b6:	e002      	b.n	80006be <assignPDPcontext+0x82>
		}
		return true;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e000      	b.n	80006be <assignPDPcontext+0x82>
	}
	return false;
 80006bc:	2300      	movs	r3, #0
}
 80006be:	0018      	movs	r0, r3
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	00000bb8 	.word	0x00000bb8
 80006c8:	08005720 	.word	0x08005720
 80006cc:	0800574c 	.word	0x0800574c
 80006d0:	20000250 	.word	0x20000250
 80006d4:	08005750 	.word	0x08005750
 80006d8:	08005760 	.word	0x08005760
 80006dc:	0800576c 	.word	0x0800576c

080006e0 <uploadcertificate1>:

bool uploadcertificate1(const char *cert)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	uint32_t cert_len = strlen(cert);
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff fd08 	bl	8000100 <strlen>
 80006f0:	0003      	movs	r3, r0
 80006f2:	60fb      	str	r3, [r7, #12]
	SIMTransmit("AT+QFUPL=\"UFS:root\",1187,5\r\n", 80, 3000);
 80006f4:	4a20      	ldr	r2, [pc, #128]	@ (8000778 <uploadcertificate1+0x98>)
 80006f6:	4b21      	ldr	r3, [pc, #132]	@ (800077c <uploadcertificate1+0x9c>)
 80006f8:	2150      	movs	r1, #80	@ 0x50
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ff76 	bl	80005ec <SIMTransmit>

	if (strstr((char*) buffer, "CONNECT"))
 8000700:	4a1f      	ldr	r2, [pc, #124]	@ (8000780 <uploadcertificate1+0xa0>)
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <uploadcertificate1+0xa4>)
 8000704:	0011      	movs	r1, r2
 8000706:	0018      	movs	r0, r3
 8000708:	f003 fab2 	bl	8003c70 <strstr>
 800070c:	1e03      	subs	r3, r0, #0
 800070e:	d011      	beq.n	8000734 <uploadcertificate1+0x54>
			{
		SIMTransmit((char*) cert, cert_len, 3000);
 8000710:	4a19      	ldr	r2, [pc, #100]	@ (8000778 <uploadcertificate1+0x98>)
 8000712:	68f9      	ldr	r1, [r7, #12]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff ff68 	bl	80005ec <SIMTransmit>
		if (strstr((char*) buffer, "+QFUPL: 1187,2d19"))
 800071c:	4a1a      	ldr	r2, [pc, #104]	@ (8000788 <uploadcertificate1+0xa8>)
 800071e:	4b19      	ldr	r3, [pc, #100]	@ (8000784 <uploadcertificate1+0xa4>)
 8000720:	0011      	movs	r1, r2
 8000722:	0018      	movs	r0, r3
 8000724:	f003 faa4 	bl	8003c70 <strstr>
 8000728:	1e03      	subs	r3, r0, #0
 800072a:	d001      	beq.n	8000730 <uploadcertificate1+0x50>
				{
			return true;
 800072c:	2301      	movs	r3, #1
 800072e:	e01f      	b.n	8000770 <uploadcertificate1+0x90>
		}
		return false;
 8000730:	2300      	movs	r3, #0
 8000732:	e01d      	b.n	8000770 <uploadcertificate1+0x90>
	}
	else if (strstr((char*) buffer, "+CME ERROR: 407"))
 8000734:	4a15      	ldr	r2, [pc, #84]	@ (800078c <uploadcertificate1+0xac>)
 8000736:	4b13      	ldr	r3, [pc, #76]	@ (8000784 <uploadcertificate1+0xa4>)
 8000738:	0011      	movs	r1, r2
 800073a:	0018      	movs	r0, r3
 800073c:	f003 fa98 	bl	8003c70 <strstr>
 8000740:	1e03      	subs	r3, r0, #0
 8000742:	d014      	beq.n	800076e <uploadcertificate1+0x8e>
			{
		SIMTransmit("AT+QFDEL=\"UFS:root\"\r\n", 50, 2000);
 8000744:	23fa      	movs	r3, #250	@ 0xfa
 8000746:	00da      	lsls	r2, r3, #3
 8000748:	4b11      	ldr	r3, [pc, #68]	@ (8000790 <uploadcertificate1+0xb0>)
 800074a:	2132      	movs	r1, #50	@ 0x32
 800074c:	0018      	movs	r0, r3
 800074e:	f7ff ff4d 	bl	80005ec <SIMTransmit>
		if (strstr((char*) buffer, "OK"))
 8000752:	4a10      	ldr	r2, [pc, #64]	@ (8000794 <uploadcertificate1+0xb4>)
 8000754:	4b0b      	ldr	r3, [pc, #44]	@ (8000784 <uploadcertificate1+0xa4>)
 8000756:	0011      	movs	r1, r2
 8000758:	0018      	movs	r0, r3
 800075a:	f003 fa89 	bl	8003c70 <strstr>
 800075e:	1e03      	subs	r3, r0, #0
 8000760:	d005      	beq.n	800076e <uploadcertificate1+0x8e>
				{
			return uploadcertificate1(cert); // Fixed to return the recursive call result
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff ffbb 	bl	80006e0 <uploadcertificate1>
 800076a:	0003      	movs	r3, r0
 800076c:	e000      	b.n	8000770 <uploadcertificate1+0x90>
		}
	}
	return false;
 800076e:	2300      	movs	r3, #0
}
 8000770:	0018      	movs	r0, r3
 8000772:	46bd      	mov	sp, r7
 8000774:	b004      	add	sp, #16
 8000776:	bd80      	pop	{r7, pc}
 8000778:	00000bb8 	.word	0x00000bb8
 800077c:	0800577c 	.word	0x0800577c
 8000780:	0800579c 	.word	0x0800579c
 8000784:	20000250 	.word	0x20000250
 8000788:	080057a4 	.word	0x080057a4
 800078c:	080057b8 	.word	0x080057b8
 8000790:	080057c8 	.word	0x080057c8
 8000794:	0800574c 	.word	0x0800574c

08000798 <uploadcertificate2>:

bool uploadcertificate2(const char *cert) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	uint32_t cert_len = strlen(cert);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fcac 	bl	8000100 <strlen>
 80007a8:	0003      	movs	r3, r0
 80007aa:	60fb      	str	r3, [r7, #12]
	SIMTransmit("AT+QFUPL=\"UFS:cert\",1224,7\r\n", 80, 3000);
 80007ac:	4a20      	ldr	r2, [pc, #128]	@ (8000830 <uploadcertificate2+0x98>)
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <uploadcertificate2+0x9c>)
 80007b0:	2150      	movs	r1, #80	@ 0x50
 80007b2:	0018      	movs	r0, r3
 80007b4:	f7ff ff1a 	bl	80005ec <SIMTransmit>

	if (strstr((char*) buffer, "CONNECT")) {
 80007b8:	4a1f      	ldr	r2, [pc, #124]	@ (8000838 <uploadcertificate2+0xa0>)
 80007ba:	4b20      	ldr	r3, [pc, #128]	@ (800083c <uploadcertificate2+0xa4>)
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f003 fa56 	bl	8003c70 <strstr>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d011      	beq.n	80007ec <uploadcertificate2+0x54>
		SIMTransmit((char*) cert, cert_len, 3000);
 80007c8:	4a19      	ldr	r2, [pc, #100]	@ (8000830 <uploadcertificate2+0x98>)
 80007ca:	68f9      	ldr	r1, [r7, #12]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ff0c 	bl	80005ec <SIMTransmit>

		if (strstr((char*) buffer, "+QFUPL: 1224,1313")) {
 80007d4:	4a1a      	ldr	r2, [pc, #104]	@ (8000840 <uploadcertificate2+0xa8>)
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <uploadcertificate2+0xa4>)
 80007d8:	0011      	movs	r1, r2
 80007da:	0018      	movs	r0, r3
 80007dc:	f003 fa48 	bl	8003c70 <strstr>
 80007e0:	1e03      	subs	r3, r0, #0
 80007e2:	d001      	beq.n	80007e8 <uploadcertificate2+0x50>
			return true;
 80007e4:	2301      	movs	r3, #1
 80007e6:	e01f      	b.n	8000828 <uploadcertificate2+0x90>
		}
		return false;
 80007e8:	2300      	movs	r3, #0
 80007ea:	e01d      	b.n	8000828 <uploadcertificate2+0x90>
	} else if (strstr((char*) buffer, "+CME ERROR: 407")) {
 80007ec:	4a15      	ldr	r2, [pc, #84]	@ (8000844 <uploadcertificate2+0xac>)
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <uploadcertificate2+0xa4>)
 80007f0:	0011      	movs	r1, r2
 80007f2:	0018      	movs	r0, r3
 80007f4:	f003 fa3c 	bl	8003c70 <strstr>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d014      	beq.n	8000826 <uploadcertificate2+0x8e>
		SIMTransmit("AT+QFDEL=\"UFS:cert\"\r\n", 50, 2000);
 80007fc:	23fa      	movs	r3, #250	@ 0xfa
 80007fe:	00da      	lsls	r2, r3, #3
 8000800:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <uploadcertificate2+0xb0>)
 8000802:	2132      	movs	r1, #50	@ 0x32
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fef1 	bl	80005ec <SIMTransmit>
		if (strstr((char*) buffer, "OK")) {
 800080a:	4a10      	ldr	r2, [pc, #64]	@ (800084c <uploadcertificate2+0xb4>)
 800080c:	4b0b      	ldr	r3, [pc, #44]	@ (800083c <uploadcertificate2+0xa4>)
 800080e:	0011      	movs	r1, r2
 8000810:	0018      	movs	r0, r3
 8000812:	f003 fa2d 	bl	8003c70 <strstr>
 8000816:	1e03      	subs	r3, r0, #0
 8000818:	d005      	beq.n	8000826 <uploadcertificate2+0x8e>
			return uploadcertificate2(cert); // Fixed to return the recursive call result
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff ffbb 	bl	8000798 <uploadcertificate2>
 8000822:	0003      	movs	r3, r0
 8000824:	e000      	b.n	8000828 <uploadcertificate2+0x90>
		}
	}
	return false;
 8000826:	2300      	movs	r3, #0
}
 8000828:	0018      	movs	r0, r3
 800082a:	46bd      	mov	sp, r7
 800082c:	b004      	add	sp, #16
 800082e:	bd80      	pop	{r7, pc}
 8000830:	00000bb8 	.word	0x00000bb8
 8000834:	080057e0 	.word	0x080057e0
 8000838:	0800579c 	.word	0x0800579c
 800083c:	20000250 	.word	0x20000250
 8000840:	08005800 	.word	0x08005800
 8000844:	080057b8 	.word	0x080057b8
 8000848:	08005814 	.word	0x08005814
 800084c:	0800574c 	.word	0x0800574c

08000850 <uploadcertificate3>:

bool uploadcertificate3(const char *cert) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
	uint32_t cert_len = strlen(cert);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fc50 	bl	8000100 <strlen>
 8000860:	0003      	movs	r3, r0
 8000862:	60fb      	str	r3, [r7, #12]
	SIMTransmit("AT+QFUPL=\"UFS:key\",1675,7\r\n", 80, 3000);
 8000864:	4a20      	ldr	r2, [pc, #128]	@ (80008e8 <uploadcertificate3+0x98>)
 8000866:	4b21      	ldr	r3, [pc, #132]	@ (80008ec <uploadcertificate3+0x9c>)
 8000868:	2150      	movs	r1, #80	@ 0x50
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff febe 	bl	80005ec <SIMTransmit>

	if (strstr((char*) buffer, "CONNECT")) {
 8000870:	4a1f      	ldr	r2, [pc, #124]	@ (80008f0 <uploadcertificate3+0xa0>)
 8000872:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <uploadcertificate3+0xa4>)
 8000874:	0011      	movs	r1, r2
 8000876:	0018      	movs	r0, r3
 8000878:	f003 f9fa 	bl	8003c70 <strstr>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d011      	beq.n	80008a4 <uploadcertificate3+0x54>
		SIMTransmit((char*) cert, cert_len, 3000);
 8000880:	4a19      	ldr	r2, [pc, #100]	@ (80008e8 <uploadcertificate3+0x98>)
 8000882:	68f9      	ldr	r1, [r7, #12]
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff feb0 	bl	80005ec <SIMTransmit>

		if (strstr((char*) buffer, "+QFUPL: 1675,5a38")) {
 800088c:	4a1a      	ldr	r2, [pc, #104]	@ (80008f8 <uploadcertificate3+0xa8>)
 800088e:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <uploadcertificate3+0xa4>)
 8000890:	0011      	movs	r1, r2
 8000892:	0018      	movs	r0, r3
 8000894:	f003 f9ec 	bl	8003c70 <strstr>
 8000898:	1e03      	subs	r3, r0, #0
 800089a:	d001      	beq.n	80008a0 <uploadcertificate3+0x50>
			return true;
 800089c:	2301      	movs	r3, #1
 800089e:	e01f      	b.n	80008e0 <uploadcertificate3+0x90>
		}
		return false;
 80008a0:	2300      	movs	r3, #0
 80008a2:	e01d      	b.n	80008e0 <uploadcertificate3+0x90>
	} else if (strstr((char*) buffer, "+CME ERROR: 407")) {
 80008a4:	4a15      	ldr	r2, [pc, #84]	@ (80008fc <uploadcertificate3+0xac>)
 80008a6:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <uploadcertificate3+0xa4>)
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f003 f9e0 	bl	8003c70 <strstr>
 80008b0:	1e03      	subs	r3, r0, #0
 80008b2:	d014      	beq.n	80008de <uploadcertificate3+0x8e>
		SIMTransmit("AT+QFDEL=\"UFS:key\"\r\n", 50, 2000);
 80008b4:	23fa      	movs	r3, #250	@ 0xfa
 80008b6:	00da      	lsls	r2, r3, #3
 80008b8:	4b11      	ldr	r3, [pc, #68]	@ (8000900 <uploadcertificate3+0xb0>)
 80008ba:	2132      	movs	r1, #50	@ 0x32
 80008bc:	0018      	movs	r0, r3
 80008be:	f7ff fe95 	bl	80005ec <SIMTransmit>
		if (strstr((char*) buffer, "OK")) {
 80008c2:	4a10      	ldr	r2, [pc, #64]	@ (8000904 <uploadcertificate3+0xb4>)
 80008c4:	4b0b      	ldr	r3, [pc, #44]	@ (80008f4 <uploadcertificate3+0xa4>)
 80008c6:	0011      	movs	r1, r2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f003 f9d1 	bl	8003c70 <strstr>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d005      	beq.n	80008de <uploadcertificate3+0x8e>
			return uploadcertificate3(cert); // Fixed to return the recursive call result
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff ffbb 	bl	8000850 <uploadcertificate3>
 80008da:	0003      	movs	r3, r0
 80008dc:	e000      	b.n	80008e0 <uploadcertificate3+0x90>
		}
	}
	return false;
 80008de:	2300      	movs	r3, #0
}
 80008e0:	0018      	movs	r0, r3
 80008e2:	46bd      	mov	sp, r7
 80008e4:	b004      	add	sp, #16
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	00000bb8 	.word	0x00000bb8
 80008ec:	0800582c 	.word	0x0800582c
 80008f0:	0800579c 	.word	0x0800579c
 80008f4:	20000250 	.word	0x20000250
 80008f8:	08005848 	.word	0x08005848
 80008fc:	080057b8 	.word	0x080057b8
 8000900:	0800585c 	.word	0x0800585c
 8000904:	0800574c 	.word	0x0800574c

08000908 <checkConnection>:
//The checkConnection function firstly checks the response of the module by sending an AT command continuously and waiting for either the timeout to occur or the module to response an OK response.
//After the module returns OK to the basic connection command it confirms the module's connectivity with the microController, now the function checks for the network registration of the module by the second AT command
//which is "AT+CGREG?\r\n" , the response of this command must either be "+CGREG:0,1" for local network connectivity and "+CGREG:0,5" for roaming connectivity.
//If the module don't respond or if the module is not able to find any network connection within the timeout period then the function response with a false output.
bool checkConnection(void)
{
 8000908:	b5b0      	push	{r4, r5, r7, lr}
 800090a:	af00      	add	r7, sp, #0
	ATisOK = 0;
 800090c:	4b2f      	ldr	r3, [pc, #188]	@ (80009cc <checkConnection+0xc4>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
	CGREGisOK = 0;
 8000912:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <checkConnection+0xc8>)
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]

	// Check for OK response for AT
	previousTick = HAL_GetTick();
 8000918:	f000 fc74 	bl	8001204 <HAL_GetTick>
 800091c:	0002      	movs	r2, r0
 800091e:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <checkConnection+0xcc>)
 8000920:	601a      	str	r2, [r3, #0]
	while (!ATisOK && previousTick + conn_timeout > HAL_GetTick())
 8000922:	e016      	b.n	8000952 <checkConnection+0x4a>
	{
		count++;
 8000924:	4b2c      	ldr	r3, [pc, #176]	@ (80009d8 <checkConnection+0xd0>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	1c5a      	adds	r2, r3, #1
 800092a:	4b2b      	ldr	r3, [pc, #172]	@ (80009d8 <checkConnection+0xd0>)
 800092c:	601a      	str	r2, [r3, #0]
		SIMTransmit("AT\r\n", 100, 2000);
 800092e:	23fa      	movs	r3, #250	@ 0xfa
 8000930:	00da      	lsls	r2, r3, #3
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <checkConnection+0xd4>)
 8000934:	2164      	movs	r1, #100	@ 0x64
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fe58 	bl	80005ec <SIMTransmit>

		if (strstr((char*) buffer, "OK"))
 800093c:	4a28      	ldr	r2, [pc, #160]	@ (80009e0 <checkConnection+0xd8>)
 800093e:	4b29      	ldr	r3, [pc, #164]	@ (80009e4 <checkConnection+0xdc>)
 8000940:	0011      	movs	r1, r2
 8000942:	0018      	movs	r0, r3
 8000944:	f003 f994 	bl	8003c70 <strstr>
 8000948:	1e03      	subs	r3, r0, #0
 800094a:	d002      	beq.n	8000952 <checkConnection+0x4a>
				{
			ATisOK = 1;
 800094c:	4b1f      	ldr	r3, [pc, #124]	@ (80009cc <checkConnection+0xc4>)
 800094e:	2201      	movs	r2, #1
 8000950:	701a      	strb	r2, [r3, #0]
	while (!ATisOK && previousTick + conn_timeout > HAL_GetTick())
 8000952:	4b1e      	ldr	r3, [pc, #120]	@ (80009cc <checkConnection+0xc4>)
 8000954:	781b      	ldrb	r3, [r3, #0]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d108      	bne.n	800096c <checkConnection+0x64>
 800095a:	4b1e      	ldr	r3, [pc, #120]	@ (80009d4 <checkConnection+0xcc>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a22      	ldr	r2, [pc, #136]	@ (80009e8 <checkConnection+0xe0>)
 8000960:	189c      	adds	r4, r3, r2
 8000962:	f000 fc4f 	bl	8001204 <HAL_GetTick>
 8000966:	0003      	movs	r3, r0
 8000968:	429c      	cmp	r4, r3
 800096a:	d8db      	bhi.n	8000924 <checkConnection+0x1c>
		}
	}

	// Check for network registration.
	if (ATisOK)
 800096c:	4b17      	ldr	r3, [pc, #92]	@ (80009cc <checkConnection+0xc4>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d026      	beq.n	80009c2 <checkConnection+0xba>
	{
		previousTick = HAL_GetTick();
 8000974:	f000 fc46 	bl	8001204 <HAL_GetTick>
 8000978:	0002      	movs	r2, r0
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <checkConnection+0xcc>)
 800097c:	601a      	str	r2, [r3, #0]
		while (!CGREGisOK && previousTick + conn_timeout > HAL_GetTick())
 800097e:	e013      	b.n	80009a8 <checkConnection+0xa0>
		{
			SIMTransmit("AT+CGREG?\r\n", 100, 2000);
 8000980:	23fa      	movs	r3, #250	@ 0xfa
 8000982:	00da      	lsls	r2, r3, #3
 8000984:	4b19      	ldr	r3, [pc, #100]	@ (80009ec <checkConnection+0xe4>)
 8000986:	2164      	movs	r1, #100	@ 0x64
 8000988:	0018      	movs	r0, r3
 800098a:	f7ff fe2f 	bl	80005ec <SIMTransmit>
			if (strstr((char*) buffer, "+CGREG: 0,1")) // Use 0,5 For Roaming
 800098e:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <checkConnection+0xe8>)
 8000990:	4b14      	ldr	r3, [pc, #80]	@ (80009e4 <checkConnection+0xdc>)
 8000992:	0011      	movs	r1, r2
 8000994:	0018      	movs	r0, r3
 8000996:	f003 f96b 	bl	8003c70 <strstr>
 800099a:	1e03      	subs	r3, r0, #0
 800099c:	d004      	beq.n	80009a8 <checkConnection+0xa0>
					{
				CGREGisOK = 1;
 800099e:	4b0c      	ldr	r3, [pc, #48]	@ (80009d0 <checkConnection+0xc8>)
 80009a0:	2201      	movs	r2, #1
 80009a2:	701a      	strb	r2, [r3, #0]
				return true;
 80009a4:	2301      	movs	r3, #1
 80009a6:	e00d      	b.n	80009c4 <checkConnection+0xbc>
		while (!CGREGisOK && previousTick + conn_timeout > HAL_GetTick())
 80009a8:	4b09      	ldr	r3, [pc, #36]	@ (80009d0 <checkConnection+0xc8>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d108      	bne.n	80009c2 <checkConnection+0xba>
 80009b0:	4b08      	ldr	r3, [pc, #32]	@ (80009d4 <checkConnection+0xcc>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a0c      	ldr	r2, [pc, #48]	@ (80009e8 <checkConnection+0xe0>)
 80009b6:	189c      	adds	r4, r3, r2
 80009b8:	f000 fc24 	bl	8001204 <HAL_GetTick>
 80009bc:	0003      	movs	r3, r0
 80009be:	429c      	cmp	r4, r3
 80009c0:	d8de      	bhi.n	8000980 <checkConnection+0x78>
			}
		}
	}
	return false;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	0018      	movs	r0, r3
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bdb0      	pop	{r4, r5, r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	20000ed0 	.word	0x20000ed0
 80009d0:	20000ed1 	.word	0x20000ed1
 80009d4:	20000ed4 	.word	0x20000ed4
 80009d8:	20000ed8 	.word	0x20000ed8
 80009dc:	08005874 	.word	0x08005874
 80009e0:	0800574c 	.word	0x0800574c
 80009e4:	20000250 	.word	0x20000250
 80009e8:	00009c40 	.word	0x00009c40
 80009ec:	0800587c 	.word	0x0800587c
 80009f0:	08005888 	.word	0x08005888

080009f4 <initializeMQTT>:
// There is a timeout defined for each command named conn_timeout that is same as the checkConnection()function.
// Each command is repeatively send to the Quectel module for execution until the module responses with an OK response.
// If there is a timeout for any command the function will stop executing further and then return false as output.
// If all commands are executed successfully then the function returns true.
bool initializeMQTT(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 80009fa:	f000 fc03 	bl	8001204 <HAL_GetTick>
 80009fe:	0003      	movs	r3, r0
 8000a00:	60bb      	str	r3, [r7, #8]
	const uint32_t timeout = 10000;
 8000a02:	4b16      	ldr	r3, [pc, #88]	@ (8000a5c <initializeMQTT+0x68>)
 8000a04:	607b      	str	r3, [r7, #4]
	while (HAL_GetTick() - startTime < timeout)
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	f000 fbfc 	bl	8001204 <HAL_GetTick>
 8000a0c:	0002      	movs	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d91b      	bls.n	8000a50 <initializeMQTT+0x5c>
	{
		for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	e013      	b.n	8000a46 <initializeMQTT+0x52>
				{
			SIMTransmit(commands[i], 400, 3000);
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <initializeMQTT+0x6c>)
 8000a20:	68fa      	ldr	r2, [r7, #12]
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	58d3      	ldr	r3, [r2, r3]
 8000a26:	480f      	ldr	r0, [pc, #60]	@ (8000a64 <initializeMQTT+0x70>)
 8000a28:	22c8      	movs	r2, #200	@ 0xc8
 8000a2a:	0051      	lsls	r1, r2, #1
 8000a2c:	0002      	movs	r2, r0
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fddc 	bl	80005ec <SIMTransmit>
			if (!strstr((char*) buffer, "OK"))
 8000a34:	4a0c      	ldr	r2, [pc, #48]	@ (8000a68 <initializeMQTT+0x74>)
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <initializeMQTT+0x78>)
 8000a38:	0011      	movs	r1, r2
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f003 f918 	bl	8003c70 <strstr>
		for (int i = 0; i < sizeof(commands) / sizeof(commands[0]); i++)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	3301      	adds	r3, #1
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b09      	cmp	r3, #9
 8000a4a:	d9e8      	bls.n	8000a1e <initializeMQTT+0x2a>
					{
				continue;
			}
		}
		return true;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e000      	b.n	8000a52 <initializeMQTT+0x5e>

	}
	return false;
 8000a50:	2300      	movs	r3, #0
}
 8000a52:	0018      	movs	r0, r3
 8000a54:	46bd      	mov	sp, r7
 8000a56:	b004      	add	sp, #16
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	00002710 	.word	0x00002710
 8000a60:	20000000 	.word	0x20000000
 8000a64:	00000bb8 	.word	0x00000bb8
 8000a68:	0800574c 	.word	0x0800574c
 8000a6c:	20000250 	.word	0x20000250

08000a70 <openMQTT>:
// This function also handles the responses of both of the commands, the details of the responses can be seen from the MQTT application note mentioned in the start.
// If a response of "+QMTOPEN: 0,2" is received it means that either the connection is being made or already a connection is established. But as the module was not able to transmit the message,
// So the previous connection is closed using "AT+QMTCLOSE" AT command and the loop is continued to try to connect to the server again.

bool openMQTT(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8000a76:	f000 fbc5 	bl	8001204 <HAL_GetTick>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	607b      	str	r3, [r7, #4]
	const uint32_t timeout = 100000;
 8000a7e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b7c <openMQTT+0x10c>)
 8000a80:	603b      	str	r3, [r7, #0]

	while (HAL_GetTick() - startTime < timeout)
 8000a82:	e06e      	b.n	8000b62 <openMQTT+0xf2>
	{
		// Send the command to open an MQTT connection
		SIMTransmit(
 8000a84:	4a3e      	ldr	r2, [pc, #248]	@ (8000b80 <openMQTT+0x110>)
 8000a86:	4b3f      	ldr	r3, [pc, #252]	@ (8000b84 <openMQTT+0x114>)
 8000a88:	2164      	movs	r1, #100	@ 0x64
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f7ff fdae 	bl	80005ec <SIMTransmit>
				"AT+QMTOPEN=0,\"a2wusdljipwadj-ats.iot.ap-south-1.amazonaws.com\",8883\r\n",
				100, 50000);

		if (strstr((char*) buffer, "+QMTOPEN: 0,0"))
 8000a90:	4a3d      	ldr	r2, [pc, #244]	@ (8000b88 <openMQTT+0x118>)
 8000a92:	4b3e      	ldr	r3, [pc, #248]	@ (8000b8c <openMQTT+0x11c>)
 8000a94:	0011      	movs	r1, r2
 8000a96:	0018      	movs	r0, r3
 8000a98:	f003 f8ea 	bl	8003c70 <strstr>
 8000a9c:	1e03      	subs	r3, r0, #0
 8000a9e:	d001      	beq.n	8000aa4 <openMQTT+0x34>
				{
			// Successfully opened, proceed to connect
			return true;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e067      	b.n	8000b74 <openMQTT+0x104>

		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,-1"))
 8000aa4:	4a3a      	ldr	r2, [pc, #232]	@ (8000b90 <openMQTT+0x120>)
 8000aa6:	4b39      	ldr	r3, [pc, #228]	@ (8000b8c <openMQTT+0x11c>)
 8000aa8:	0011      	movs	r1, r2
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f003 f8e0 	bl	8003c70 <strstr>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d008      	beq.n	8000ac6 <openMQTT+0x56>
				{
			// Connection failed, close and retry
			if (disconnectMQTT())
 8000ab4:	f000 f8b6 	bl	8000c24 <disconnectMQTT>
 8000ab8:	1e03      	subs	r3, r0, #0
 8000aba:	d000      	beq.n	8000abe <openMQTT+0x4e>
			{
				continue;
 8000abc:	e051      	b.n	8000b62 <openMQTT+0xf2>
			}
			else
			{
				return connectMQTT();
 8000abe:	f000 f873 	bl	8000ba8 <connectMQTT>
 8000ac2:	0003      	movs	r3, r0
 8000ac4:	e056      	b.n	8000b74 <openMQTT+0x104>

			}
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,1"))
 8000ac6:	4a33      	ldr	r2, [pc, #204]	@ (8000b94 <openMQTT+0x124>)
 8000ac8:	4b30      	ldr	r3, [pc, #192]	@ (8000b8c <openMQTT+0x11c>)
 8000aca:	0011      	movs	r1, r2
 8000acc:	0018      	movs	r0, r3
 8000ace:	f003 f8cf 	bl	8003c70 <strstr>
 8000ad2:	1e03      	subs	r3, r0, #0
 8000ad4:	d005      	beq.n	8000ae2 <openMQTT+0x72>
				{
			// MQTT client identifier not valid, reinitialize and retry
			initializeMQTT();
 8000ad6:	f7ff ff8d 	bl	80009f4 <initializeMQTT>
			return openMQTT();
 8000ada:	f7ff ffc9 	bl	8000a70 <openMQTT>
 8000ade:	0003      	movs	r3, r0
 8000ae0:	e048      	b.n	8000b74 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,2"))
 8000ae2:	4a2d      	ldr	r2, [pc, #180]	@ (8000b98 <openMQTT+0x128>)
 8000ae4:	4b29      	ldr	r3, [pc, #164]	@ (8000b8c <openMQTT+0x11c>)
 8000ae6:	0011      	movs	r1, r2
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f003 f8c1 	bl	8003c70 <strstr>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d005      	beq.n	8000afe <openMQTT+0x8e>
				{
			// Server is unavailable, close and retry
			disconnectMQTT();
 8000af2:	f000 f897 	bl	8000c24 <disconnectMQTT>
			return openMQTT();
 8000af6:	f7ff ffbb 	bl	8000a70 <openMQTT>
 8000afa:	0003      	movs	r3, r0
 8000afc:	e03a      	b.n	8000b74 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,3"))
 8000afe:	4a27      	ldr	r2, [pc, #156]	@ (8000b9c <openMQTT+0x12c>)
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <openMQTT+0x11c>)
 8000b02:	0011      	movs	r1, r2
 8000b04:	0018      	movs	r0, r3
 8000b06:	f003 f8b3 	bl	8003c70 <strstr>
 8000b0a:	1e03      	subs	r3, r0, #0
 8000b0c:	d007      	beq.n	8000b1e <openMQTT+0xae>
				{
			// Connection rejected, assign PDP context and retry
			assignPDPcontext();
 8000b0e:	f7ff fd95 	bl	800063c <assignPDPcontext>
			initializeMQTT();
 8000b12:	f7ff ff6f 	bl	80009f4 <initializeMQTT>
			return openMQTT();
 8000b16:	f7ff ffab 	bl	8000a70 <openMQTT>
 8000b1a:	0003      	movs	r3, r0
 8000b1c:	e02a      	b.n	8000b74 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,4"))
 8000b1e:	4a20      	ldr	r2, [pc, #128]	@ (8000ba0 <openMQTT+0x130>)
 8000b20:	4b1a      	ldr	r3, [pc, #104]	@ (8000b8c <openMQTT+0x11c>)
 8000b22:	0011      	movs	r1, r2
 8000b24:	0018      	movs	r0, r3
 8000b26:	f003 f8a3 	bl	8003c70 <strstr>
 8000b2a:	1e03      	subs	r3, r0, #0
 8000b2c:	d005      	beq.n	8000b3a <openMQTT+0xca>
				{
			// TCP/IP connection failure, initialize and retry
			initializeMQTT();
 8000b2e:	f7ff ff61 	bl	80009f4 <initializeMQTT>
			return openMQTT();
 8000b32:	f7ff ff9d 	bl	8000a70 <openMQTT>
 8000b36:	0003      	movs	r3, r0
 8000b38:	e01c      	b.n	8000b74 <openMQTT+0x104>
		}
		else if (strstr((char*) buffer, "+QMTOPEN: 0,5"))
 8000b3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000ba4 <openMQTT+0x134>)
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <openMQTT+0x11c>)
 8000b3e:	0011      	movs	r1, r2
 8000b40:	0018      	movs	r0, r3
 8000b42:	f003 f895 	bl	8003c70 <strstr>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d009      	beq.n	8000b5e <openMQTT+0xee>
				{
			// Protocol not supported, check connection and retry
			checkConnection();
 8000b4a:	f7ff fedd 	bl	8000908 <checkConnection>
			assignPDPcontext();
 8000b4e:	f7ff fd75 	bl	800063c <assignPDPcontext>
			initializeMQTT();
 8000b52:	f7ff ff4f 	bl	80009f4 <initializeMQTT>
			return openMQTT();
 8000b56:	f7ff ff8b 	bl	8000a70 <openMQTT>
 8000b5a:	0003      	movs	r3, r0
 8000b5c:	e00a      	b.n	8000b74 <openMQTT+0x104>
		}
		else
		{
			// Unknown error, return false
			return false;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	e008      	b.n	8000b74 <openMQTT+0x104>
	while (HAL_GetTick() - startTime < timeout)
 8000b62:	f000 fb4f 	bl	8001204 <HAL_GetTick>
 8000b66:	0002      	movs	r2, r0
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	1ad3      	subs	r3, r2, r3
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d888      	bhi.n	8000a84 <openMQTT+0x14>
		}

		// Delay between retries
	}
	return false;  // Timeout occurred
 8000b72:	2300      	movs	r3, #0
}
 8000b74:	0018      	movs	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b002      	add	sp, #8
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	000186a0 	.word	0x000186a0
 8000b80:	0000c350 	.word	0x0000c350
 8000b84:	08005894 	.word	0x08005894
 8000b88:	080058dc 	.word	0x080058dc
 8000b8c:	20000250 	.word	0x20000250
 8000b90:	080058ec 	.word	0x080058ec
 8000b94:	080058fc 	.word	0x080058fc
 8000b98:	0800590c 	.word	0x0800590c
 8000b9c:	0800591c 	.word	0x0800591c
 8000ba0:	0800592c 	.word	0x0800592c
 8000ba4:	0800593c 	.word	0x0800593c

08000ba8 <connectMQTT>:

bool connectMQTT(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8000bae:	f000 fb29 	bl	8001204 <HAL_GetTick>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	607b      	str	r3, [r7, #4]
	const uint32_t timeout = 10000;
 8000bb6:	4b15      	ldr	r3, [pc, #84]	@ (8000c0c <connectMQTT+0x64>)
 8000bb8:	603b      	str	r3, [r7, #0]

	while (HAL_GetTick() - startTime < timeout)
 8000bba:	e019      	b.n	8000bf0 <connectMQTT+0x48>
	{
		SIMTransmit("AT+QMTCONN=0,\"test2\"\r\n", 100, 3000);
 8000bbc:	4a14      	ldr	r2, [pc, #80]	@ (8000c10 <connectMQTT+0x68>)
 8000bbe:	4b15      	ldr	r3, [pc, #84]	@ (8000c14 <connectMQTT+0x6c>)
 8000bc0:	2164      	movs	r1, #100	@ 0x64
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	f7ff fd12 	bl	80005ec <SIMTransmit>

		if (strstr((char*) buffer, "+QMTCONN: 0,0,0"))
 8000bc8:	4a13      	ldr	r2, [pc, #76]	@ (8000c18 <connectMQTT+0x70>)
 8000bca:	4b14      	ldr	r3, [pc, #80]	@ (8000c1c <connectMQTT+0x74>)
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f003 f84e 	bl	8003c70 <strstr>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <connectMQTT+0x34>
				{
			return true;  // Connection successful
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e012      	b.n	8000c02 <connectMQTT+0x5a>
		}
		else if (strstr((char*) buffer, "+QMTCONN: 0,1"))
 8000bdc:	4a10      	ldr	r2, [pc, #64]	@ (8000c20 <connectMQTT+0x78>)
 8000bde:	4b0f      	ldr	r3, [pc, #60]	@ (8000c1c <connectMQTT+0x74>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f003 f844 	bl	8003c70 <strstr>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <connectMQTT+0x48>
				{
			return false;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e008      	b.n	8000c02 <connectMQTT+0x5a>
	while (HAL_GetTick() - startTime < timeout)
 8000bf0:	f000 fb08 	bl	8001204 <HAL_GetTick>
 8000bf4:	0002      	movs	r2, r0
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	1ad3      	subs	r3, r2, r3
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d8dd      	bhi.n	8000bbc <connectMQTT+0x14>

		}
	}
	return false;
 8000c00:	2300      	movs	r3, #0

}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			@ (mov r8, r8)
 8000c0c:	00002710 	.word	0x00002710
 8000c10:	00000bb8 	.word	0x00000bb8
 8000c14:	0800594c 	.word	0x0800594c
 8000c18:	08005964 	.word	0x08005964
 8000c1c:	20000250 	.word	0x20000250
 8000c20:	08005974 	.word	0x08005974

08000c24 <disconnectMQTT>:

// Function to disconnect from MQTT broker
bool disconnectMQTT(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
	uint32_t startTime = HAL_GetTick();
 8000c2a:	f000 faeb 	bl	8001204 <HAL_GetTick>
 8000c2e:	0003      	movs	r3, r0
 8000c30:	607b      	str	r3, [r7, #4]
	const uint32_t timeout = 10000; // 10 seconds timeout
 8000c32:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <disconnectMQTT+0x58>)
 8000c34:	603b      	str	r3, [r7, #0]

	while (HAL_GetTick() - startTime < timeout)
 8000c36:	46c0      	nop			@ (mov r8, r8)
 8000c38:	f000 fae4 	bl	8001204 <HAL_GetTick>
 8000c3c:	0002      	movs	r2, r0
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	683a      	ldr	r2, [r7, #0]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d913      	bls.n	8000c70 <disconnectMQTT+0x4c>
	{
		SIMTransmit("AT+QMTCLOSE=0\r\n", 400, 2000);
 8000c48:	23fa      	movs	r3, #250	@ 0xfa
 8000c4a:	00da      	lsls	r2, r3, #3
 8000c4c:	23c8      	movs	r3, #200	@ 0xc8
 8000c4e:	0059      	lsls	r1, r3, #1
 8000c50:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <disconnectMQTT+0x5c>)
 8000c52:	0018      	movs	r0, r3
 8000c54:	f7ff fcca 	bl	80005ec <SIMTransmit>

		if (strstr((char*) buffer, "+QMTCLOSE: 0,0"))
 8000c58:	4a0a      	ldr	r2, [pc, #40]	@ (8000c84 <disconnectMQTT+0x60>)
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <disconnectMQTT+0x64>)
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f003 f806 	bl	8003c70 <strstr>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <disconnectMQTT+0x48>
				{
			// Successful disconnect
			return true;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e002      	b.n	8000c72 <disconnectMQTT+0x4e>
		}
		else
		{
			// Error occurred, you might want to handle this differently
			return false;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	e000      	b.n	8000c72 <disconnectMQTT+0x4e>
		}
	}

	// Timeout occurred
	return false;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	0018      	movs	r0, r3
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b002      	add	sp, #8
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			@ (mov r8, r8)
 8000c7c:	00002710 	.word	0x00002710
 8000c80:	08005984 	.word	0x08005984
 8000c84:	08005994 	.word	0x08005994
 8000c88:	20000250 	.word	0x20000250

08000c8c <Subscribetotopic>:

	return false;
}

bool Subscribetotopic(const char *topic,uint32_t rcv_len, uint32_t rcv_timeout)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b09f      	sub	sp, #124	@ 0x7c
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]

    char command[100]; // Buffer to hold the AT command
    if (checkConnection())
 8000c98:	f7ff fe36 	bl	8000908 <checkConnection>
 8000c9c:	1e03      	subs	r3, r0, #0
 8000c9e:	d02a      	beq.n	8000cf6 <Subscribetotopic+0x6a>
    	{
    		if (initializeMQTT())
 8000ca0:	f7ff fea8 	bl	80009f4 <initializeMQTT>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d024      	beq.n	8000cf2 <Subscribetotopic+0x66>
    		{
    			if (openMQTT())
 8000ca8:	f7ff fee2 	bl	8000a70 <openMQTT>
 8000cac:	1e03      	subs	r3, r0, #0
 8000cae:	d01e      	beq.n	8000cee <Subscribetotopic+0x62>
    			{
    				if (connectMQTT())
 8000cb0:	f7ff ff7a 	bl	8000ba8 <connectMQTT>
 8000cb4:	1e03      	subs	r3, r0, #0
 8000cb6:	d018      	beq.n	8000cea <Subscribetotopic+0x5e>
    				{
    				    // Format the command with the provided topic
    				    snprintf(command, sizeof(command), "AT+QMTSUB=0,1,\"%s\",0\r\n", topic);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	4a11      	ldr	r2, [pc, #68]	@ (8000d00 <Subscribetotopic+0x74>)
 8000cbc:	2414      	movs	r4, #20
 8000cbe:	1938      	adds	r0, r7, r4
 8000cc0:	2164      	movs	r1, #100	@ 0x64
 8000cc2:	f002 ff99 	bl	8003bf8 <sniprintf>

    				    // Transmit the command
    				    SIMTransmit(command, rcv_len, rcv_timeout);
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f7ff fc8d 	bl	80005ec <SIMTransmit>

    				    // Check for a successful subscription response
    				    if (strstr((char*) buffer, "+QMTSUB: 0,1,0,0"))
 8000cd2:	4a0c      	ldr	r2, [pc, #48]	@ (8000d04 <Subscribetotopic+0x78>)
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d08 <Subscribetotopic+0x7c>)
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f002 ffc9 	bl	8003c70 <strstr>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <Subscribetotopic+0x5a>
    				    {
    				        return true;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e008      	b.n	8000cf8 <Subscribetotopic+0x6c>
    				    }
    				    return false;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e006      	b.n	8000cf8 <Subscribetotopic+0x6c>
    				}
    				return false;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e004      	b.n	8000cf8 <Subscribetotopic+0x6c>
    			}
    			return false;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e002      	b.n	8000cf8 <Subscribetotopic+0x6c>
    		}
    		return false;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e000      	b.n	8000cf8 <Subscribetotopic+0x6c>
    	}
    return false;
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b01f      	add	sp, #124	@ 0x7c
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	080059dc 	.word	0x080059dc
 8000d04:	080059f4 	.word	0x080059f4
 8000d08:	20000250 	.word	0x20000250

08000d0c <UnsubscribefromTopic>:
bool UnsubscribefromTopic(const char *topic) {
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b09d      	sub	sp, #116	@ 0x74
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
    char command[100]; // Buffer to hold the AT command

    // Format the command with the provided topic
    snprintf(command, sizeof(command), "AT+QMTUNS=0,1,\"%s\"\r\n", topic);
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4a11      	ldr	r2, [pc, #68]	@ (8000d5c <UnsubscribefromTopic+0x50>)
 8000d18:	240c      	movs	r4, #12
 8000d1a:	1938      	adds	r0, r7, r4
 8000d1c:	2164      	movs	r1, #100	@ 0x64
 8000d1e:	f002 ff6b 	bl	8003bf8 <sniprintf>

    // Transmit the command
    SIMTransmit(command, 400, 3000);
 8000d22:	4a0f      	ldr	r2, [pc, #60]	@ (8000d60 <UnsubscribefromTopic+0x54>)
 8000d24:	23c8      	movs	r3, #200	@ 0xc8
 8000d26:	0059      	lsls	r1, r3, #1
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff fc5e 	bl	80005ec <SIMTransmit>

    {    // Check for a successful unsubscribe response
    if (strstr((char*) buffer, "+QMTUNS: 0,1,0"))
 8000d30:	4a0c      	ldr	r2, [pc, #48]	@ (8000d64 <UnsubscribefromTopic+0x58>)
 8000d32:	4b0d      	ldr	r3, [pc, #52]	@ (8000d68 <UnsubscribefromTopic+0x5c>)
 8000d34:	0011      	movs	r1, r2
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 ff9a 	bl	8003c70 <strstr>
 8000d3c:	1e03      	subs	r3, r0, #0
 8000d3e:	d007      	beq.n	8000d50 <UnsubscribefromTopic+0x44>
    {
    	if (disconnectMQTT())
 8000d40:	f7ff ff70 	bl	8000c24 <disconnectMQTT>
 8000d44:	1e03      	subs	r3, r0, #0
 8000d46:	d001      	beq.n	8000d4c <UnsubscribefromTopic+0x40>
    	{
    		return true;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e002      	b.n	8000d52 <UnsubscribefromTopic+0x46>
    	}
    	return false;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	e000      	b.n	8000d52 <UnsubscribefromTopic+0x46>
    }
        return false;
 8000d50:	2300      	movs	r3, #0
    }
    return false;
}
 8000d52:	0018      	movs	r0, r3
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b01d      	add	sp, #116	@ 0x74
 8000d58:	bd90      	pop	{r4, r7, pc}
 8000d5a:	46c0      	nop			@ (mov r8, r8)
 8000d5c:	08005a08 	.word	0x08005a08
 8000d60:	00000bb8 	.word	0x00000bb8
 8000d64:	08005a20 	.word	0x08005a20
 8000d68:	20000250 	.word	0x20000250

08000d6c <Extract_Values>:
void ReadDataFromFlash(uint32_t startAddress, uint8_t *buffer, uint32_t length) {
    for (uint32_t i = 0; i < length; i++) {
        buffer[i] = *(uint8_t *)(startAddress + i);
    }
}
void Extract_Values(uint8_t *src_buffer, uint8_t *dest_buffer, uint32_t start_idx, uint32_t end_idx) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	60b9      	str	r1, [r7, #8]
 8000d76:	607a      	str	r2, [r7, #4]
 8000d78:	603b      	str	r3, [r7, #0]
    // Ensure valid range before copying
    if (start_idx < end_idx && end_idx <= BUFFER_SIZE) {
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d20e      	bcs.n	8000da0 <Extract_Values+0x34>
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	23c8      	movs	r3, #200	@ 0xc8
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d809      	bhi.n	8000da0 <Extract_Values+0x34>
        memcpy(dest_buffer, &src_buffer[start_idx], end_idx - start_idx);
 8000d8c:	68fa      	ldr	r2, [r7, #12]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	18d1      	adds	r1, r2, r3
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	1ad2      	subs	r2, r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	f002 ffaa 	bl	8003cf4 <memcpy>
    }
}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b004      	add	sp, #16
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <Write_Flash>:
// Modified Write_Flash function to handle 64-bit writes
void Write_Flash(uint32_t address, uint8_t *data, uint32_t length) {
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08c      	sub	sp, #48	@ 0x30
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
    HAL_FLASH_Unlock();  // Unlock flash for writing
 8000db4:	f000 fc3e 	bl	8001634 <HAL_FLASH_Unlock>

    // Ensure that the address is within the flash user range
    if (address >= FLASH_USER_START_ADDR && address <= FLASH_USER_END_ADDR) {
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4a2b      	ldr	r2, [pc, #172]	@ (8000e68 <Write_Flash+0xc0>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d94e      	bls.n	8000e5e <Write_Flash+0xb6>
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	4a2a      	ldr	r2, [pc, #168]	@ (8000e6c <Write_Flash+0xc4>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d84a      	bhi.n	8000e5e <Write_Flash+0xb6>
        // Erase the page where the data will be written
        FLASH_EraseInitTypeDef EraseInitStruct;
        uint32_t PageError = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	61bb      	str	r3, [r7, #24]

        EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000dcc:	211c      	movs	r1, #28
 8000dce:	187b      	adds	r3, r7, r1
 8000dd0:	2202      	movs	r2, #2
 8000dd2:	601a      	str	r2, [r3, #0]
        EraseInitStruct.Page = (address - FLASH_BASE) / FLASH_PAGE_SIZE;
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	22f8      	movs	r2, #248	@ 0xf8
 8000dd8:	0612      	lsls	r2, r2, #24
 8000dda:	4694      	mov	ip, r2
 8000ddc:	4463      	add	r3, ip
 8000dde:	0ada      	lsrs	r2, r3, #11
 8000de0:	187b      	adds	r3, r7, r1
 8000de2:	609a      	str	r2, [r3, #8]
        EraseInitStruct.NbPages = 1;
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2201      	movs	r2, #1
 8000de8:	60da      	str	r2, [r3, #12]

        if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK) {
 8000dea:	2318      	movs	r3, #24
 8000dec:	18fa      	adds	r2, r7, r3
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	0011      	movs	r1, r2
 8000df2:	0018      	movs	r0, r3
 8000df4:	f000 fcd2 	bl	800179c <HAL_FLASHEx_Erase>
 8000df8:	1e03      	subs	r3, r0, #0
 8000dfa:	d002      	beq.n	8000e02 <Write_Flash+0x5a>
            // Handle the error
            HAL_FLASH_Lock();  // Lock flash again
 8000dfc:	f000 fc3e 	bl	800167c <HAL_FLASH_Lock>
            return;
 8000e00:	e02f      	b.n	8000e62 <Write_Flash+0xba>
        }

        // Write data to flash in 64-bit (8-byte) chunks
        uint64_t data64 = 0;  // Variable to hold 8 bytes for each write
 8000e02:	2200      	movs	r2, #0
 8000e04:	2300      	movs	r3, #0
 8000e06:	613a      	str	r2, [r7, #16]
 8000e08:	617b      	str	r3, [r7, #20]
        for (uint32_t i = 0; i < length; i += 8) {
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e0e:	e022      	b.n	8000e56 <Write_Flash+0xae>
            // Pack up to 8 bytes into data64
            memset(&data64, 0xFF, sizeof(data64));  // Initialize with 0xFF (flash default state)
 8000e10:	2201      	movs	r2, #1
 8000e12:	4252      	negs	r2, r2
 8000e14:	17d3      	asrs	r3, r2, #31
 8000e16:	613a      	str	r2, [r7, #16]
 8000e18:	617b      	str	r3, [r7, #20]
            memcpy(&data64, &data[i], (length - i >= 8) ? 8 : length - i);  // Copy data
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e1e:	18d1      	adds	r1, r2, r3
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b08      	cmp	r3, #8
 8000e28:	d900      	bls.n	8000e2c <Write_Flash+0x84>
 8000e2a:	2308      	movs	r3, #8
 8000e2c:	2210      	movs	r2, #16
 8000e2e:	18b8      	adds	r0, r7, r2
 8000e30:	001a      	movs	r2, r3
 8000e32:	f002 ff5f 	bl	8003cf4 <memcpy>

            // Write the packed 64-bit data into flash
            if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, data64) != HAL_OK) {
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e3a:	18d1      	adds	r1, r2, r3
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	2001      	movs	r0, #1
 8000e42:	f000 fba9 	bl	8001598 <HAL_FLASH_Program>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d002      	beq.n	8000e50 <Write_Flash+0xa8>
                // Handle the error
                HAL_FLASH_Lock();  // Lock flash again
 8000e4a:	f000 fc17 	bl	800167c <HAL_FLASH_Lock>
                return;
 8000e4e:	e008      	b.n	8000e62 <Write_Flash+0xba>
        for (uint32_t i = 0; i < length; i += 8) {
 8000e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e52:	3308      	adds	r3, #8
 8000e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000e56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d3d8      	bcc.n	8000e10 <Write_Flash+0x68>
            }
        }
    }

    HAL_FLASH_Lock();  // Lock the flash after writing
 8000e5e:	f000 fc0d 	bl	800167c <HAL_FLASH_Lock>
}
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b00c      	add	sp, #48	@ 0x30
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	0801f7ff 	.word	0x0801f7ff
 8000e6c:	0801ffff 	.word	0x0801ffff

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e7a:	4b10      	ldr	r3, [pc, #64]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e82:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	2201      	movs	r2, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e92:	4b0a      	ldr	r3, [pc, #40]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	0549      	lsls	r1, r1, #21
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <HAL_MspInit+0x4c>)
 8000e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	055b      	lsls	r3, r3, #21
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000eaa:	23c0      	movs	r3, #192	@ 0xc0
 8000eac:	00db      	lsls	r3, r3, #3
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f000 f9b2 	bl	8001218 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eb4:	46c0      	nop			@ (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	b002      	add	sp, #8
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b08d      	sub	sp, #52	@ 0x34
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	241c      	movs	r4, #28
 8000eca:	193b      	adds	r3, r7, r4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2314      	movs	r3, #20
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f002 fec4 	bl	8003c60 <memset>
  if(huart->Instance==USART3)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a3e      	ldr	r2, [pc, #248]	@ (8000fd8 <HAL_UART_MspInit+0x118>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d138      	bne.n	8000f54 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000ee4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ee6:	4b3d      	ldr	r3, [pc, #244]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	02c9      	lsls	r1, r1, #11
 8000eec:	430a      	orrs	r2, r1
 8000eee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ef0:	4b3a      	ldr	r3, [pc, #232]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000ef2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ef4:	2380      	movs	r3, #128	@ 0x80
 8000ef6:	02db      	lsls	r3, r3, #11
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	4b37      	ldr	r3, [pc, #220]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f02:	4b36      	ldr	r3, [pc, #216]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f04:	2102      	movs	r1, #2
 8000f06:	430a      	orrs	r2, r1
 8000f08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f0a:	4b34      	ldr	r3, [pc, #208]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f0e:	2202      	movs	r2, #2
 8000f10:	4013      	ands	r3, r2
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB0     ------> USART3_RX
    PB2     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8000f16:	0021      	movs	r1, r4
 8000f18:	187b      	adds	r3, r7, r1
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2202      	movs	r2, #2
 8000f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2204      	movs	r2, #4
 8000f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	4a29      	ldr	r2, [pc, #164]	@ (8000fe0 <HAL_UART_MspInit+0x120>)
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	0010      	movs	r0, r2
 8000f3e:	f000 fcd1 	bl	80018e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	201d      	movs	r0, #29
 8000f48:	f000 fa28 	bl	800139c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000f4c:	201d      	movs	r0, #29
 8000f4e:	f000 fa3a 	bl	80013c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }

}
 8000f52:	e03d      	b.n	8000fd0 <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART4)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a22      	ldr	r2, [pc, #136]	@ (8000fe4 <HAL_UART_MspInit+0x124>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d138      	bne.n	8000fd0 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART4_CLK_ENABLE();
 8000f5e:	4b1f      	ldr	r3, [pc, #124]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f62:	4b1e      	ldr	r3, [pc, #120]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f64:	2180      	movs	r1, #128	@ 0x80
 8000f66:	0309      	lsls	r1, r1, #12
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f70:	2380      	movs	r3, #128	@ 0x80
 8000f72:	031b      	lsls	r3, r3, #12
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
 8000f78:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7a:	4b18      	ldr	r3, [pc, #96]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f7e:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f80:	2101      	movs	r1, #1
 8000f82:	430a      	orrs	r2, r1
 8000f84:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f86:	4b15      	ldr	r3, [pc, #84]	@ (8000fdc <HAL_UART_MspInit+0x11c>)
 8000f88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f92:	211c      	movs	r1, #28
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2203      	movs	r2, #3
 8000f98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2202      	movs	r2, #2
 8000f9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART4;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2204      	movs	r2, #4
 8000fb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb2:	187a      	adds	r2, r7, r1
 8000fb4:	23a0      	movs	r3, #160	@ 0xa0
 8000fb6:	05db      	lsls	r3, r3, #23
 8000fb8:	0011      	movs	r1, r2
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 fc92 	bl	80018e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	201d      	movs	r0, #29
 8000fc6:	f000 f9e9 	bl	800139c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000fca:	201d      	movs	r0, #29
 8000fcc:	f000 f9fb 	bl	80013c6 <HAL_NVIC_EnableIRQ>
}
 8000fd0:	46c0      	nop			@ (mov r8, r8)
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	b00d      	add	sp, #52	@ 0x34
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	40004800 	.word	0x40004800
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	50000400 	.word	0x50000400
 8000fe4:	40004c00 	.word	0x40004c00

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	46c0      	nop			@ (mov r8, r8)
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001006:	46c0      	nop			@ (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001010:	f000 f8e6 	bl	80011e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001014:	46c0      	nop			@ (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001020:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <USART3_4_IRQHandler+0x1c>)
 8001022:	0018      	movs	r0, r3
 8001024:	f001 fcca 	bl	80029bc <HAL_UART_IRQHandler>
  HAL_UART_IRQHandler(&huart4);
 8001028:	4b04      	ldr	r3, [pc, #16]	@ (800103c <USART3_4_IRQHandler+0x20>)
 800102a:	0018      	movs	r0, r3
 800102c:	f001 fcc6 	bl	80029bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8001030:	46c0      	nop			@ (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			@ (mov r8, r8)
 8001038:	20000128 	.word	0x20000128
 800103c:	200001bc 	.word	0x200001bc

08001040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001048:	4a14      	ldr	r2, [pc, #80]	@ (800109c <_sbrk+0x5c>)
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <_sbrk+0x60>)
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001054:	4b13      	ldr	r3, [pc, #76]	@ (80010a4 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800105c:	4b11      	ldr	r3, [pc, #68]	@ (80010a4 <_sbrk+0x64>)
 800105e:	4a12      	ldr	r2, [pc, #72]	@ (80010a8 <_sbrk+0x68>)
 8001060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001062:	4b10      	ldr	r3, [pc, #64]	@ (80010a4 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	18d3      	adds	r3, r2, r3
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	429a      	cmp	r2, r3
 800106e:	d207      	bcs.n	8001080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001070:	f002 fe14 	bl	8003c9c <__errno>
 8001074:	0003      	movs	r3, r0
 8001076:	220c      	movs	r2, #12
 8001078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800107a:	2301      	movs	r3, #1
 800107c:	425b      	negs	r3, r3
 800107e:	e009      	b.n	8001094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001080:	4b08      	ldr	r3, [pc, #32]	@ (80010a4 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001086:	4b07      	ldr	r3, [pc, #28]	@ (80010a4 <_sbrk+0x64>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	18d2      	adds	r2, r2, r3
 800108e:	4b05      	ldr	r3, [pc, #20]	@ (80010a4 <_sbrk+0x64>)
 8001090:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001092:	68fb      	ldr	r3, [r7, #12]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	b006      	add	sp, #24
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20009000 	.word	0x20009000
 80010a0:	00000400 	.word	0x00000400
 80010a4:	20000edc 	.word	0x20000edc
 80010a8:	20001048 	.word	0x20001048

080010ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	46c0      	nop			@ (mov r8, r8)
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010b8:	480d      	ldr	r0, [pc, #52]	@ (80010f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010bc:	f7ff fff6 	bl	80010ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c0:	480c      	ldr	r0, [pc, #48]	@ (80010f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80010c2:	490d      	ldr	r1, [pc, #52]	@ (80010f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010c4:	4a0d      	ldr	r2, [pc, #52]	@ (80010fc <LoopForever+0xe>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010c8:	e002      	b.n	80010d0 <LoopCopyDataInit>

080010ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ce:	3304      	adds	r3, #4

080010d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010d4:	d3f9      	bcc.n	80010ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001100 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010d8:	4c0a      	ldr	r4, [pc, #40]	@ (8001104 <LoopForever+0x16>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010dc:	e001      	b.n	80010e2 <LoopFillZerobss>

080010de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e0:	3204      	adds	r2, #4

080010e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010e4:	d3fb      	bcc.n	80010de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010e6:	f002 fddf 	bl	8003ca8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010ea:	f7ff f8a7 	bl	800023c <main>

080010ee <LoopForever>:

LoopForever:
  b LoopForever
 80010ee:	e7fe      	b.n	80010ee <LoopForever>
  ldr   r0, =_estack
 80010f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010f8:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 80010fc:	08005af0 	.word	0x08005af0
  ldr r2, =_sbss
 8001100:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001104:	20001048 	.word	0x20001048

08001108 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001108:	e7fe      	b.n	8001108 <ADC1_IRQHandler>
	...

0800110c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	2200      	movs	r2, #0
 8001116:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b0b      	ldr	r3, [pc, #44]	@ (8001148 <HAL_Init+0x3c>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b0a      	ldr	r3, [pc, #40]	@ (8001148 <HAL_Init+0x3c>)
 800111e:	2180      	movs	r1, #128	@ 0x80
 8001120:	0049      	lsls	r1, r1, #1
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f810 	bl	800114c <HAL_InitTick>
 800112c:	1e03      	subs	r3, r0, #0
 800112e:	d003      	beq.n	8001138 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001130:	1dfb      	adds	r3, r7, #7
 8001132:	2201      	movs	r2, #1
 8001134:	701a      	strb	r2, [r3, #0]
 8001136:	e001      	b.n	800113c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001138:	f7ff fe9a 	bl	8000e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	1dfb      	adds	r3, r7, #7
 800113e:	781b      	ldrb	r3, [r3, #0]
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b002      	add	sp, #8
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40022000 	.word	0x40022000

0800114c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800114c:	b590      	push	{r4, r7, lr}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001154:	230f      	movs	r3, #15
 8001156:	18fb      	adds	r3, r7, r3
 8001158:	2200      	movs	r2, #0
 800115a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_InitTick+0x88>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d02b      	beq.n	80011bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001164:	4b1c      	ldr	r3, [pc, #112]	@ (80011d8 <HAL_InitTick+0x8c>)
 8001166:	681c      	ldr	r4, [r3, #0]
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <HAL_InitTick+0x88>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	0019      	movs	r1, r3
 800116e:	23fa      	movs	r3, #250	@ 0xfa
 8001170:	0098      	lsls	r0, r3, #2
 8001172:	f7fe ffd7 	bl	8000124 <__udivsi3>
 8001176:	0003      	movs	r3, r0
 8001178:	0019      	movs	r1, r3
 800117a:	0020      	movs	r0, r4
 800117c:	f7fe ffd2 	bl	8000124 <__udivsi3>
 8001180:	0003      	movs	r3, r0
 8001182:	0018      	movs	r0, r3
 8001184:	f000 f92f 	bl	80013e6 <HAL_SYSTICK_Config>
 8001188:	1e03      	subs	r3, r0, #0
 800118a:	d112      	bne.n	80011b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b03      	cmp	r3, #3
 8001190:	d80a      	bhi.n	80011a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	2301      	movs	r3, #1
 8001196:	425b      	negs	r3, r3
 8001198:	2200      	movs	r2, #0
 800119a:	0018      	movs	r0, r3
 800119c:	f000 f8fe 	bl	800139c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_InitTick+0x90>)
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	e00d      	b.n	80011c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80011a8:	230f      	movs	r3, #15
 80011aa:	18fb      	adds	r3, r7, r3
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
 80011b0:	e008      	b.n	80011c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011b2:	230f      	movs	r3, #15
 80011b4:	18fb      	adds	r3, r7, r3
 80011b6:	2201      	movs	r2, #1
 80011b8:	701a      	strb	r2, [r3, #0]
 80011ba:	e003      	b.n	80011c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011bc:	230f      	movs	r3, #15
 80011be:	18fb      	adds	r3, r7, r3
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80011c4:	230f      	movs	r3, #15
 80011c6:	18fb      	adds	r3, r7, r3
 80011c8:	781b      	ldrb	r3, [r3, #0]
}
 80011ca:	0018      	movs	r0, r3
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b005      	add	sp, #20
 80011d0:	bd90      	pop	{r4, r7, pc}
 80011d2:	46c0      	nop			@ (mov r8, r8)
 80011d4:	20000030 	.word	0x20000030
 80011d8:	20000028 	.word	0x20000028
 80011dc:	2000002c 	.word	0x2000002c

080011e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011e4:	4b05      	ldr	r3, [pc, #20]	@ (80011fc <HAL_IncTick+0x1c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	001a      	movs	r2, r3
 80011ea:	4b05      	ldr	r3, [pc, #20]	@ (8001200 <HAL_IncTick+0x20>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	18d2      	adds	r2, r2, r3
 80011f0:	4b03      	ldr	r3, [pc, #12]	@ (8001200 <HAL_IncTick+0x20>)
 80011f2:	601a      	str	r2, [r3, #0]
}
 80011f4:	46c0      	nop			@ (mov r8, r8)
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	46c0      	nop			@ (mov r8, r8)
 80011fc:	20000030 	.word	0x20000030
 8001200:	20000ee0 	.word	0x20000ee0

08001204 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  return uwTick;
 8001208:	4b02      	ldr	r3, [pc, #8]	@ (8001214 <HAL_GetTick+0x10>)
 800120a:	681b      	ldr	r3, [r3, #0]
}
 800120c:	0018      	movs	r0, r3
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			@ (mov r8, r8)
 8001214:	20000ee0 	.word	0x20000ee0

08001218 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a06      	ldr	r2, [pc, #24]	@ (8001240 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001226:	4013      	ands	r3, r2
 8001228:	0019      	movs	r1, r3
 800122a:	4b04      	ldr	r3, [pc, #16]	@ (800123c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	430a      	orrs	r2, r1
 8001230:	601a      	str	r2, [r3, #0]
}
 8001232:	46c0      	nop			@ (mov r8, r8)
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			@ (mov r8, r8)
 800123c:	40010000 	.word	0x40010000
 8001240:	fffff9ff 	.word	0xfffff9ff

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001250:	1dfb      	adds	r3, r7, #7
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b7f      	cmp	r3, #127	@ 0x7f
 8001256:	d809      	bhi.n	800126c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001258:	1dfb      	adds	r3, r7, #7
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	001a      	movs	r2, r3
 800125e:	231f      	movs	r3, #31
 8001260:	401a      	ands	r2, r3
 8001262:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <__NVIC_EnableIRQ+0x30>)
 8001264:	2101      	movs	r1, #1
 8001266:	4091      	lsls	r1, r2
 8001268:	000a      	movs	r2, r1
 800126a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800126c:	46c0      	nop			@ (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	b002      	add	sp, #8
 8001272:	bd80      	pop	{r7, pc}
 8001274:	e000e100 	.word	0xe000e100

08001278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001278:	b590      	push	{r4, r7, lr}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	0002      	movs	r2, r0
 8001280:	6039      	str	r1, [r7, #0]
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001286:	1dfb      	adds	r3, r7, #7
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	2b7f      	cmp	r3, #127	@ 0x7f
 800128c:	d828      	bhi.n	80012e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800128e:	4a2f      	ldr	r2, [pc, #188]	@ (800134c <__NVIC_SetPriority+0xd4>)
 8001290:	1dfb      	adds	r3, r7, #7
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	b25b      	sxtb	r3, r3
 8001296:	089b      	lsrs	r3, r3, #2
 8001298:	33c0      	adds	r3, #192	@ 0xc0
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	589b      	ldr	r3, [r3, r2]
 800129e:	1dfa      	adds	r2, r7, #7
 80012a0:	7812      	ldrb	r2, [r2, #0]
 80012a2:	0011      	movs	r1, r2
 80012a4:	2203      	movs	r2, #3
 80012a6:	400a      	ands	r2, r1
 80012a8:	00d2      	lsls	r2, r2, #3
 80012aa:	21ff      	movs	r1, #255	@ 0xff
 80012ac:	4091      	lsls	r1, r2
 80012ae:	000a      	movs	r2, r1
 80012b0:	43d2      	mvns	r2, r2
 80012b2:	401a      	ands	r2, r3
 80012b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	019b      	lsls	r3, r3, #6
 80012ba:	22ff      	movs	r2, #255	@ 0xff
 80012bc:	401a      	ands	r2, r3
 80012be:	1dfb      	adds	r3, r7, #7
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	0018      	movs	r0, r3
 80012c4:	2303      	movs	r3, #3
 80012c6:	4003      	ands	r3, r0
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012cc:	481f      	ldr	r0, [pc, #124]	@ (800134c <__NVIC_SetPriority+0xd4>)
 80012ce:	1dfb      	adds	r3, r7, #7
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	b25b      	sxtb	r3, r3
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	430a      	orrs	r2, r1
 80012d8:	33c0      	adds	r3, #192	@ 0xc0
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012de:	e031      	b.n	8001344 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012e0:	4a1b      	ldr	r2, [pc, #108]	@ (8001350 <__NVIC_SetPriority+0xd8>)
 80012e2:	1dfb      	adds	r3, r7, #7
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	0019      	movs	r1, r3
 80012e8:	230f      	movs	r3, #15
 80012ea:	400b      	ands	r3, r1
 80012ec:	3b08      	subs	r3, #8
 80012ee:	089b      	lsrs	r3, r3, #2
 80012f0:	3306      	adds	r3, #6
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	18d3      	adds	r3, r2, r3
 80012f6:	3304      	adds	r3, #4
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1dfa      	adds	r2, r7, #7
 80012fc:	7812      	ldrb	r2, [r2, #0]
 80012fe:	0011      	movs	r1, r2
 8001300:	2203      	movs	r2, #3
 8001302:	400a      	ands	r2, r1
 8001304:	00d2      	lsls	r2, r2, #3
 8001306:	21ff      	movs	r1, #255	@ 0xff
 8001308:	4091      	lsls	r1, r2
 800130a:	000a      	movs	r2, r1
 800130c:	43d2      	mvns	r2, r2
 800130e:	401a      	ands	r2, r3
 8001310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	019b      	lsls	r3, r3, #6
 8001316:	22ff      	movs	r2, #255	@ 0xff
 8001318:	401a      	ands	r2, r3
 800131a:	1dfb      	adds	r3, r7, #7
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	0018      	movs	r0, r3
 8001320:	2303      	movs	r3, #3
 8001322:	4003      	ands	r3, r0
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001328:	4809      	ldr	r0, [pc, #36]	@ (8001350 <__NVIC_SetPriority+0xd8>)
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	001c      	movs	r4, r3
 8001330:	230f      	movs	r3, #15
 8001332:	4023      	ands	r3, r4
 8001334:	3b08      	subs	r3, #8
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	430a      	orrs	r2, r1
 800133a:	3306      	adds	r3, #6
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	18c3      	adds	r3, r0, r3
 8001340:	3304      	adds	r3, #4
 8001342:	601a      	str	r2, [r3, #0]
}
 8001344:	46c0      	nop			@ (mov r8, r8)
 8001346:	46bd      	mov	sp, r7
 8001348:	b003      	add	sp, #12
 800134a:	bd90      	pop	{r4, r7, pc}
 800134c:	e000e100 	.word	0xe000e100
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	1e5a      	subs	r2, r3, #1
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	045b      	lsls	r3, r3, #17
 8001364:	429a      	cmp	r2, r3
 8001366:	d301      	bcc.n	800136c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001368:	2301      	movs	r3, #1
 800136a:	e010      	b.n	800138e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800136c:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <SysTick_Config+0x44>)
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	3a01      	subs	r2, #1
 8001372:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001374:	2301      	movs	r3, #1
 8001376:	425b      	negs	r3, r3
 8001378:	2103      	movs	r1, #3
 800137a:	0018      	movs	r0, r3
 800137c:	f7ff ff7c 	bl	8001278 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001380:	4b05      	ldr	r3, [pc, #20]	@ (8001398 <SysTick_Config+0x44>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001386:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <SysTick_Config+0x44>)
 8001388:	2207      	movs	r2, #7
 800138a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800138c:	2300      	movs	r3, #0
}
 800138e:	0018      	movs	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	e000e010 	.word	0xe000e010

0800139c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	210f      	movs	r1, #15
 80013a8:	187b      	adds	r3, r7, r1
 80013aa:	1c02      	adds	r2, r0, #0
 80013ac:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	0011      	movs	r1, r2
 80013b8:	0018      	movs	r0, r3
 80013ba:	f7ff ff5d 	bl	8001278 <__NVIC_SetPriority>
}
 80013be:	46c0      	nop			@ (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b082      	sub	sp, #8
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	0002      	movs	r2, r0
 80013ce:	1dfb      	adds	r3, r7, #7
 80013d0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d2:	1dfb      	adds	r3, r7, #7
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	b25b      	sxtb	r3, r3
 80013d8:	0018      	movs	r0, r3
 80013da:	f7ff ff33 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013de:	46c0      	nop			@ (mov r8, r8)
 80013e0:	46bd      	mov	sp, r7
 80013e2:	b002      	add	sp, #8
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b082      	sub	sp, #8
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	0018      	movs	r0, r3
 80013f2:	f7ff ffaf 	bl	8001354 <SysTick_Config>
 80013f6:	0003      	movs	r3, r0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b002      	add	sp, #8
 80013fe:	bd80      	pop	{r7, pc}

08001400 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e050      	b.n	80014b4 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2225      	movs	r2, #37	@ 0x25
 8001416:	5c9b      	ldrb	r3, [r3, r2]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d008      	beq.n	8001430 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2204      	movs	r2, #4
 8001422:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2224      	movs	r2, #36	@ 0x24
 8001428:	2100      	movs	r1, #0
 800142a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e041      	b.n	80014b4 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	210e      	movs	r1, #14
 800143c:	438a      	bics	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	491c      	ldr	r1, [pc, #112]	@ (80014bc <HAL_DMA_Abort+0xbc>)
 800144c:	400a      	ands	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2101      	movs	r1, #1
 800145c:	438a      	bics	r2, r1
 800145e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001460:	4b17      	ldr	r3, [pc, #92]	@ (80014c0 <HAL_DMA_Abort+0xc0>)
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001468:	221c      	movs	r2, #28
 800146a:	4013      	ands	r3, r2
 800146c:	2201      	movs	r2, #1
 800146e:	409a      	lsls	r2, r3
 8001470:	4b13      	ldr	r3, [pc, #76]	@ (80014c0 <HAL_DMA_Abort+0xc0>)
 8001472:	430a      	orrs	r2, r1
 8001474:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800147e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001484:	2b00      	cmp	r3, #0
 8001486:	d00c      	beq.n	80014a2 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001492:	490a      	ldr	r1, [pc, #40]	@ (80014bc <HAL_DMA_Abort+0xbc>)
 8001494:	400a      	ands	r2, r1
 8001496:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80014a0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2225      	movs	r2, #37	@ 0x25
 80014a6:	2101      	movs	r1, #1
 80014a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2224      	movs	r2, #36	@ 0x24
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
}
 80014b4:	0018      	movs	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	b002      	add	sp, #8
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	fffffeff 	.word	0xfffffeff
 80014c0:	40020000 	.word	0x40020000

080014c4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014cc:	210f      	movs	r1, #15
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	2200      	movs	r2, #0
 80014d2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2225      	movs	r2, #37	@ 0x25
 80014d8:	5c9b      	ldrb	r3, [r3, r2]
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d006      	beq.n	80014ee <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2204      	movs	r2, #4
 80014e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80014e6:	187b      	adds	r3, r7, r1
 80014e8:	2201      	movs	r2, #1
 80014ea:	701a      	strb	r2, [r3, #0]
 80014ec:	e049      	b.n	8001582 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	210e      	movs	r1, #14
 80014fa:	438a      	bics	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	438a      	bics	r2, r1
 800150c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001518:	491d      	ldr	r1, [pc, #116]	@ (8001590 <HAL_DMA_Abort_IT+0xcc>)
 800151a:	400a      	ands	r2, r1
 800151c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800151e:	4b1d      	ldr	r3, [pc, #116]	@ (8001594 <HAL_DMA_Abort_IT+0xd0>)
 8001520:	6859      	ldr	r1, [r3, #4]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	221c      	movs	r2, #28
 8001528:	4013      	ands	r3, r2
 800152a:	2201      	movs	r2, #1
 800152c:	409a      	lsls	r2, r3
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <HAL_DMA_Abort_IT+0xd0>)
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001538:	687a      	ldr	r2, [r7, #4]
 800153a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800153c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001542:	2b00      	cmp	r3, #0
 8001544:	d00c      	beq.n	8001560 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001550:	490f      	ldr	r1, [pc, #60]	@ (8001590 <HAL_DMA_Abort_IT+0xcc>)
 8001552:	400a      	ands	r2, r1
 8001554:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800155e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2225      	movs	r2, #37	@ 0x25
 8001564:	2101      	movs	r1, #1
 8001566:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2224      	movs	r2, #36	@ 0x24
 800156c:	2100      	movs	r1, #0
 800156e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001574:	2b00      	cmp	r3, #0
 8001576:	d004      	beq.n	8001582 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	0010      	movs	r0, r2
 8001580:	4798      	blx	r3
    }
  }
  return status;
 8001582:	230f      	movs	r3, #15
 8001584:	18fb      	adds	r3, r7, r3
 8001586:	781b      	ldrb	r3, [r3, #0]
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}
 8001590:	fffffeff 	.word	0xfffffeff
 8001594:	40020000 	.word	0x40020000

08001598 <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	603a      	str	r2, [r7, #0]
 80015a4:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80015a6:	4b21      	ldr	r3, [pc, #132]	@ (800162c <HAL_FLASH_Program+0x94>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d101      	bne.n	80015b2 <HAL_FLASH_Program+0x1a>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e038      	b.n	8001624 <HAL_FLASH_Program+0x8c>
 80015b2:	4b1e      	ldr	r3, [pc, #120]	@ (800162c <HAL_FLASH_Program+0x94>)
 80015b4:	2201      	movs	r2, #1
 80015b6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	@ (800162c <HAL_FLASH_Program+0x94>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015be:	2517      	movs	r5, #23
 80015c0:	197c      	adds	r4, r7, r5
 80015c2:	23fa      	movs	r3, #250	@ 0xfa
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	0018      	movs	r0, r3
 80015c8:	f000 f87a 	bl	80016c0 <FLASH_WaitForLastOperation>
 80015cc:	0003      	movs	r3, r0
 80015ce:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80015d0:	197b      	adds	r3, r7, r5
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d11f      	bne.n	8001618 <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d106      	bne.n	80015ec <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	68b9      	ldr	r1, [r7, #8]
 80015e4:	0008      	movs	r0, r1
 80015e6:	f000 f8b9 	bl	800175c <FLASH_Program_DoubleWord>
 80015ea:	e005      	b.n	80015f8 <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	0011      	movs	r1, r2
 80015f2:	0018      	movs	r0, r3
 80015f4:	f002 ffd4 	bl	80045a0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80015f8:	2317      	movs	r3, #23
 80015fa:	18fc      	adds	r4, r7, r3
 80015fc:	23fa      	movs	r3, #250	@ 0xfa
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	0018      	movs	r0, r3
 8001602:	f000 f85d 	bl	80016c0 <FLASH_WaitForLastOperation>
 8001606:	0003      	movs	r3, r0
 8001608:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_FLASH_Program+0x98>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	43d9      	mvns	r1, r3
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <HAL_FLASH_Program+0x98>)
 8001614:	400a      	ands	r2, r1
 8001616:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <HAL_FLASH_Program+0x94>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800161e:	2317      	movs	r3, #23
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	781b      	ldrb	r3, [r3, #0]
}
 8001624:	0018      	movs	r0, r3
 8001626:	46bd      	mov	sp, r7
 8001628:	b006      	add	sp, #24
 800162a:	bdb0      	pop	{r4, r5, r7, pc}
 800162c:	20000ee4 	.word	0x20000ee4
 8001630:	40022000 	.word	0x40022000

08001634 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800163a:	1dfb      	adds	r3, r7, #7
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <HAL_FLASH_Unlock+0x3c>)
 8001642:	695b      	ldr	r3, [r3, #20]
 8001644:	2b00      	cmp	r3, #0
 8001646:	da0c      	bge.n	8001662 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <HAL_FLASH_Unlock+0x3c>)
 800164a:	4a0a      	ldr	r2, [pc, #40]	@ (8001674 <HAL_FLASH_Unlock+0x40>)
 800164c:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <HAL_FLASH_Unlock+0x3c>)
 8001650:	4a09      	ldr	r2, [pc, #36]	@ (8001678 <HAL_FLASH_Unlock+0x44>)
 8001652:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <HAL_FLASH_Unlock+0x3c>)
 8001656:	695b      	ldr	r3, [r3, #20]
 8001658:	2b00      	cmp	r3, #0
 800165a:	da02      	bge.n	8001662 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 800165c:	1dfb      	adds	r3, r7, #7
 800165e:	2201      	movs	r2, #1
 8001660:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
}
 8001666:	0018      	movs	r0, r3
 8001668:	46bd      	mov	sp, r7
 800166a:	b002      	add	sp, #8
 800166c:	bd80      	pop	{r7, pc}
 800166e:	46c0      	nop			@ (mov r8, r8)
 8001670:	40022000 	.word	0x40022000
 8001674:	45670123 	.word	0x45670123
 8001678:	cdef89ab 	.word	0xcdef89ab

0800167c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001682:	1dfb      	adds	r3, r7, #7
 8001684:	2201      	movs	r2, #1
 8001686:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001688:	23fa      	movs	r3, #250	@ 0xfa
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	0018      	movs	r0, r3
 800168e:	f000 f817 	bl	80016c0 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001692:	4b0a      	ldr	r3, [pc, #40]	@ (80016bc <HAL_FLASH_Lock+0x40>)
 8001694:	695a      	ldr	r2, [r3, #20]
 8001696:	4b09      	ldr	r3, [pc, #36]	@ (80016bc <HAL_FLASH_Lock+0x40>)
 8001698:	2180      	movs	r1, #128	@ 0x80
 800169a:	0609      	lsls	r1, r1, #24
 800169c:	430a      	orrs	r2, r1
 800169e:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 80016a0:	4b06      	ldr	r3, [pc, #24]	@ (80016bc <HAL_FLASH_Lock+0x40>)
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da02      	bge.n	80016ae <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 80016a8:	1dfb      	adds	r3, r7, #7
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80016ae:	1dfb      	adds	r3, r7, #7
 80016b0:	781b      	ldrb	r3, [r3, #0]
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	b002      	add	sp, #8
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			@ (mov r8, r8)
 80016bc:	40022000 	.word	0x40022000

080016c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 80016c8:	f7ff fd9c 	bl	8001204 <HAL_GetTick>
 80016cc:	0003      	movs	r3, r0
 80016ce:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 80016d0:	2380      	movs	r3, #128	@ 0x80
 80016d2:	025b      	lsls	r3, r3, #9
 80016d4:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 80016d6:	e00c      	b.n	80016f2 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	d009      	beq.n	80016f2 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80016de:	f7ff fd91 	bl	8001204 <HAL_GetTick>
 80016e2:	0002      	movs	r2, r0
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	429a      	cmp	r2, r3
 80016ec:	d801      	bhi.n	80016f2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e028      	b.n	8001744 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80016f2:	4b16      	ldr	r3, [pc, #88]	@ (800174c <FLASH_WaitForLastOperation+0x8c>)
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	4013      	ands	r3, r2
 80016fa:	d1ed      	bne.n	80016d8 <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80016fc:	4b13      	ldr	r3, [pc, #76]	@ (800174c <FLASH_WaitForLastOperation+0x8c>)
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	4a13      	ldr	r2, [pc, #76]	@ (8001750 <FLASH_WaitForLastOperation+0x90>)
 8001702:	4013      	ands	r3, r2
 8001704:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <FLASH_WaitForLastOperation+0x8c>)
 8001708:	4a12      	ldr	r2, [pc, #72]	@ (8001754 <FLASH_WaitForLastOperation+0x94>)
 800170a:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d011      	beq.n	8001736 <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8001712:	4b11      	ldr	r3, [pc, #68]	@ (8001758 <FLASH_WaitForLastOperation+0x98>)
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e013      	b.n	8001744 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	d009      	beq.n	8001736 <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001722:	f7ff fd6f 	bl	8001204 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	429a      	cmp	r2, r3
 8001730:	d801      	bhi.n	8001736 <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e006      	b.n	8001744 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 8001736:	4b05      	ldr	r3, [pc, #20]	@ (800174c <FLASH_WaitForLastOperation+0x8c>)
 8001738:	691a      	ldr	r2, [r3, #16]
 800173a:	2380      	movs	r3, #128	@ 0x80
 800173c:	02db      	lsls	r3, r3, #11
 800173e:	4013      	ands	r3, r2
 8001740:	d1ec      	bne.n	800171c <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 8001742:	2300      	movs	r3, #0
}
 8001744:	0018      	movs	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	b004      	add	sp, #16
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40022000 	.word	0x40022000
 8001750:	000083fa 	.word	0x000083fa
 8001754:	000083fb 	.word	0x000083fb
 8001758:	20000ee4 	.word	0x20000ee4

0800175c <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800175c:	b5b0      	push	{r4, r5, r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	603a      	str	r2, [r7, #0]
 8001766:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001768:	4b0b      	ldr	r3, [pc, #44]	@ (8001798 <FLASH_Program_DoubleWord+0x3c>)
 800176a:	695a      	ldr	r2, [r3, #20]
 800176c:	4b0a      	ldr	r3, [pc, #40]	@ (8001798 <FLASH_Program_DoubleWord+0x3c>)
 800176e:	2101      	movs	r1, #1
 8001770:	430a      	orrs	r2, r1
 8001772:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800177a:	f3bf 8f6f 	isb	sy
}
 800177e:	46c0      	nop			@ (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	001c      	movs	r4, r3
 8001784:	2300      	movs	r3, #0
 8001786:	001d      	movs	r5, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3304      	adds	r3, #4
 800178c:	0022      	movs	r2, r4
 800178e:	601a      	str	r2, [r3, #0]
}
 8001790:	46c0      	nop			@ (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bdb0      	pop	{r4, r5, r7, pc}
 8001798:	40022000 	.word	0x40022000

0800179c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800179c:	b5b0      	push	{r4, r5, r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80017a6:	4b35      	ldr	r3, [pc, #212]	@ (800187c <HAL_FLASHEx_Erase+0xe0>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d101      	bne.n	80017b2 <HAL_FLASHEx_Erase+0x16>
 80017ae:	2302      	movs	r3, #2
 80017b0:	e05f      	b.n	8001872 <HAL_FLASHEx_Erase+0xd6>
 80017b2:	4b32      	ldr	r3, [pc, #200]	@ (800187c <HAL_FLASHEx_Erase+0xe0>)
 80017b4:	2201      	movs	r2, #1
 80017b6:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017b8:	4b30      	ldr	r3, [pc, #192]	@ (800187c <HAL_FLASHEx_Erase+0xe0>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017be:	250f      	movs	r5, #15
 80017c0:	197c      	adds	r4, r7, r5
 80017c2:	23fa      	movs	r3, #250	@ 0xfa
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	0018      	movs	r0, r3
 80017c8:	f7ff ff7a 	bl	80016c0 <FLASH_WaitForLastOperation>
 80017cc:	0003      	movs	r3, r0
 80017ce:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 80017d0:	002c      	movs	r4, r5
 80017d2:	193b      	adds	r3, r7, r4
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d145      	bne.n	8001866 <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2204      	movs	r2, #4
 80017de:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b04      	cmp	r3, #4
 80017e6:	d10d      	bne.n	8001804 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	0018      	movs	r0, r3
 80017ee:	f000 f849 	bl	8001884 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80017f2:	193c      	adds	r4, r7, r4
 80017f4:	23fa      	movs	r3, #250	@ 0xfa
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff ff61 	bl	80016c0 <FLASH_WaitForLastOperation>
 80017fe:	0003      	movs	r3, r0
 8001800:	7023      	strb	r3, [r4, #0]
 8001802:	e030      	b.n	8001866 <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	4252      	negs	r2, r2
 800180a:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	e01a      	b.n	800184a <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	0011      	movs	r1, r2
 800181c:	0018      	movs	r0, r3
 800181e:	f000 f845 	bl	80018ac <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001822:	250f      	movs	r5, #15
 8001824:	197c      	adds	r4, r7, r5
 8001826:	23fa      	movs	r3, #250	@ 0xfa
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	0018      	movs	r0, r3
 800182c:	f7ff ff48 	bl	80016c0 <FLASH_WaitForLastOperation>
 8001830:	0003      	movs	r3, r0
 8001832:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 8001834:	197b      	adds	r3, r7, r5
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	601a      	str	r2, [r3, #0]
          break;
 8001842:	e00a      	b.n	800185a <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	3301      	adds	r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	18d3      	adds	r3, r2, r3
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	429a      	cmp	r2, r3
 8001858:	d3dc      	bcc.n	8001814 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800185a:	4b09      	ldr	r3, [pc, #36]	@ (8001880 <HAL_FLASHEx_Erase+0xe4>)
 800185c:	695a      	ldr	r2, [r3, #20]
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_FLASHEx_Erase+0xe4>)
 8001860:	2102      	movs	r1, #2
 8001862:	438a      	bics	r2, r1
 8001864:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_FLASHEx_Erase+0xe0>)
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800186c:	230f      	movs	r3, #15
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	781b      	ldrb	r3, [r3, #0]
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b004      	add	sp, #16
 8001878:	bdb0      	pop	{r4, r5, r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	20000ee4 	.word	0x20000ee4
 8001880:	40022000 	.word	0x40022000

08001884 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <FLASH_MassErase+0x24>)
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	431a      	orrs	r2, r3
 8001894:	4b04      	ldr	r3, [pc, #16]	@ (80018a8 <FLASH_MassErase+0x24>)
 8001896:	2180      	movs	r1, #128	@ 0x80
 8001898:	0249      	lsls	r1, r1, #9
 800189a:	430a      	orrs	r2, r1
 800189c:	615a      	str	r2, [r3, #20]
}
 800189e:	46c0      	nop			@ (mov r8, r8)
 80018a0:	46bd      	mov	sp, r7
 80018a2:	b002      	add	sp, #8
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	40022000 	.word	0x40022000

080018ac <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 80018b6:	4b08      	ldr	r3, [pc, #32]	@ (80018d8 <FLASH_PageErase+0x2c>)
 80018b8:	695b      	ldr	r3, [r3, #20]
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <FLASH_PageErase+0x30>)
 80018bc:	4013      	ands	r3, r2
 80018be:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	00da      	lsls	r2, r3, #3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	431a      	orrs	r2, r3
 80018c8:	4b03      	ldr	r3, [pc, #12]	@ (80018d8 <FLASH_PageErase+0x2c>)
 80018ca:	4905      	ldr	r1, [pc, #20]	@ (80018e0 <FLASH_PageErase+0x34>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
}
 80018d0:	46c0      	nop			@ (mov r8, r8)
 80018d2:	46bd      	mov	sp, r7
 80018d4:	b004      	add	sp, #16
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40022000 	.word	0x40022000
 80018dc:	ffffe007 	.word	0xffffe007
 80018e0:	00010002 	.word	0x00010002

080018e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018f2:	e147      	b.n	8001b84 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2101      	movs	r1, #1
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4091      	lsls	r1, r2
 80018fe:	000a      	movs	r2, r1
 8001900:	4013      	ands	r3, r2
 8001902:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d100      	bne.n	800190c <HAL_GPIO_Init+0x28>
 800190a:	e138      	b.n	8001b7e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	2203      	movs	r2, #3
 8001912:	4013      	ands	r3, r2
 8001914:	2b01      	cmp	r3, #1
 8001916:	d005      	beq.n	8001924 <HAL_GPIO_Init+0x40>
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	2b02      	cmp	r3, #2
 8001922:	d130      	bne.n	8001986 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	005b      	lsls	r3, r3, #1
 800192e:	2203      	movs	r2, #3
 8001930:	409a      	lsls	r2, r3
 8001932:	0013      	movs	r3, r2
 8001934:	43da      	mvns	r2, r3
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	4013      	ands	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	005b      	lsls	r3, r3, #1
 8001944:	409a      	lsls	r2, r3
 8001946:	0013      	movs	r3, r2
 8001948:	693a      	ldr	r2, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800195a:	2201      	movs	r2, #1
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	409a      	lsls	r2, r3
 8001960:	0013      	movs	r3, r2
 8001962:	43da      	mvns	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4013      	ands	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	2201      	movs	r2, #1
 8001972:	401a      	ands	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2203      	movs	r2, #3
 800198c:	4013      	ands	r3, r2
 800198e:	2b03      	cmp	r3, #3
 8001990:	d017      	beq.n	80019c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	2203      	movs	r2, #3
 800199e:	409a      	lsls	r2, r3
 80019a0:	0013      	movs	r3, r2
 80019a2:	43da      	mvns	r2, r3
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	689a      	ldr	r2, [r3, #8]
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	409a      	lsls	r2, r3
 80019b4:	0013      	movs	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2203      	movs	r2, #3
 80019c8:	4013      	ands	r3, r2
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d123      	bne.n	8001a16 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	08da      	lsrs	r2, r3, #3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	3208      	adds	r2, #8
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	58d3      	ldr	r3, [r2, r3]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	2207      	movs	r2, #7
 80019e0:	4013      	ands	r3, r2
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	220f      	movs	r2, #15
 80019e6:	409a      	lsls	r2, r3
 80019e8:	0013      	movs	r3, r2
 80019ea:	43da      	mvns	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	691a      	ldr	r2, [r3, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2107      	movs	r1, #7
 80019fa:	400b      	ands	r3, r1
 80019fc:	009b      	lsls	r3, r3, #2
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	6939      	ldr	r1, [r7, #16]
 8001a14:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	409a      	lsls	r2, r3
 8001a24:	0013      	movs	r3, r2
 8001a26:	43da      	mvns	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2203      	movs	r2, #3
 8001a34:	401a      	ands	r2, r3
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685a      	ldr	r2, [r3, #4]
 8001a4e:	23c0      	movs	r3, #192	@ 0xc0
 8001a50:	029b      	lsls	r3, r3, #10
 8001a52:	4013      	ands	r3, r2
 8001a54:	d100      	bne.n	8001a58 <HAL_GPIO_Init+0x174>
 8001a56:	e092      	b.n	8001b7e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001a58:	4a50      	ldr	r2, [pc, #320]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3318      	adds	r3, #24
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	589b      	ldr	r3, [r3, r2]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	220f      	movs	r2, #15
 8001a70:	409a      	lsls	r2, r3
 8001a72:	0013      	movs	r3, r2
 8001a74:	43da      	mvns	r2, r3
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	23a0      	movs	r3, #160	@ 0xa0
 8001a80:	05db      	lsls	r3, r3, #23
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d013      	beq.n	8001aae <HAL_GPIO_Init+0x1ca>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a45      	ldr	r2, [pc, #276]	@ (8001ba0 <HAL_GPIO_Init+0x2bc>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d00d      	beq.n	8001aaa <HAL_GPIO_Init+0x1c6>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a44      	ldr	r2, [pc, #272]	@ (8001ba4 <HAL_GPIO_Init+0x2c0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d007      	beq.n	8001aa6 <HAL_GPIO_Init+0x1c2>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4a43      	ldr	r2, [pc, #268]	@ (8001ba8 <HAL_GPIO_Init+0x2c4>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d101      	bne.n	8001aa2 <HAL_GPIO_Init+0x1be>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aa2:	2305      	movs	r3, #5
 8001aa4:	e004      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	e002      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x1cc>
 8001aae:	2300      	movs	r3, #0
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	2103      	movs	r1, #3
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	00d2      	lsls	r2, r2, #3
 8001ab8:	4093      	lsls	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001ac0:	4936      	ldr	r1, [pc, #216]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	3318      	adds	r3, #24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ace:	4b33      	ldr	r3, [pc, #204]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	4013      	ands	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685a      	ldr	r2, [r3, #4]
 8001ae2:	2380      	movs	r3, #128	@ 0x80
 8001ae4:	035b      	lsls	r3, r3, #13
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001af2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001af4:	693a      	ldr	r2, [r7, #16]
 8001af6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001af8:	4b28      	ldr	r3, [pc, #160]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	43da      	mvns	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4013      	ands	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	2380      	movs	r3, #128	@ 0x80
 8001b0e:	039b      	lsls	r3, r3, #14
 8001b10:	4013      	ands	r3, r2
 8001b12:	d003      	beq.n	8001b1c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001b14:	693a      	ldr	r2, [r7, #16]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b22:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b24:	2384      	movs	r3, #132	@ 0x84
 8001b26:	58d3      	ldr	r3, [r2, r3]
 8001b28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	43da      	mvns	r2, r3
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685a      	ldr	r2, [r3, #4]
 8001b38:	2380      	movs	r3, #128	@ 0x80
 8001b3a:	029b      	lsls	r3, r3, #10
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d003      	beq.n	8001b48 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b48:	4914      	ldr	r1, [pc, #80]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b4a:	2284      	movs	r2, #132	@ 0x84
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001b50:	4a12      	ldr	r2, [pc, #72]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b52:	2380      	movs	r3, #128	@ 0x80
 8001b54:	58d3      	ldr	r3, [r2, r3]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b76:	4909      	ldr	r1, [pc, #36]	@ (8001b9c <HAL_GPIO_Init+0x2b8>)
 8001b78:	2280      	movs	r2, #128	@ 0x80
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3301      	adds	r3, #1
 8001b82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	40da      	lsrs	r2, r3
 8001b8c:	1e13      	subs	r3, r2, #0
 8001b8e:	d000      	beq.n	8001b92 <HAL_GPIO_Init+0x2ae>
 8001b90:	e6b0      	b.n	80018f4 <HAL_GPIO_Init+0x10>
  }
}
 8001b92:	46c0      	nop			@ (mov r8, r8)
 8001b94:	46c0      	nop			@ (mov r8, r8)
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b006      	add	sp, #24
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	50000400 	.word	0x50000400
 8001ba4:	50000800 	.word	0x50000800
 8001ba8:	50000c00 	.word	0x50000c00

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	0008      	movs	r0, r1
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	1cbb      	adds	r3, r7, #2
 8001bba:	1c02      	adds	r2, r0, #0
 8001bbc:	801a      	strh	r2, [r3, #0]
 8001bbe:	1c7b      	adds	r3, r7, #1
 8001bc0:	1c0a      	adds	r2, r1, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc4:	1c7b      	adds	r3, r7, #1
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d004      	beq.n	8001bd6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bcc:	1cbb      	adds	r3, r7, #2
 8001bce:	881a      	ldrh	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bd4:	e003      	b.n	8001bde <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bd6:	1cbb      	adds	r3, r7, #2
 8001bd8:	881a      	ldrh	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001bde:	46c0      	nop			@ (mov r8, r8)
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b002      	add	sp, #8
 8001be4:	bd80      	pop	{r7, pc}
	...

08001be8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001bf0:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	4b17      	ldr	r3, [pc, #92]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d11f      	bne.n	8001c4c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c0c:	4b14      	ldr	r3, [pc, #80]	@ (8001c60 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	0013      	movs	r3, r2
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	189b      	adds	r3, r3, r2
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	4912      	ldr	r1, [pc, #72]	@ (8001c64 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7fe fa82 	bl	8000124 <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	3301      	adds	r3, #1
 8001c24:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c26:	e008      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	3b01      	subs	r3, #1
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e001      	b.n	8001c3a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e009      	b.n	8001c4e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c3a:	4b07      	ldr	r3, [pc, #28]	@ (8001c58 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c3c:	695a      	ldr	r2, [r3, #20]
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	401a      	ands	r2, r3
 8001c44:	2380      	movs	r3, #128	@ 0x80
 8001c46:	00db      	lsls	r3, r3, #3
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d0ed      	beq.n	8001c28 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	0018      	movs	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	b004      	add	sp, #16
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	46c0      	nop			@ (mov r8, r8)
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	fffff9ff 	.word	0xfffff9ff
 8001c60:	20000028 	.word	0x20000028
 8001c64:	000f4240 	.word	0x000f4240

08001c68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <LL_RCC_GetAPB1Prescaler+0x14>)
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	23e0      	movs	r3, #224	@ 0xe0
 8001c72:	01db      	lsls	r3, r3, #7
 8001c74:	4013      	ands	r3, r2
}
 8001c76:	0018      	movs	r0, r3
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40021000 	.word	0x40021000

08001c80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b088      	sub	sp, #32
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e2f3      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d100      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1e>
 8001c9c:	e07c      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c9e:	4bc3      	ldr	r3, [pc, #780]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	2238      	movs	r2, #56	@ 0x38
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ca8:	4bc0      	ldr	r3, [pc, #768]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2203      	movs	r2, #3
 8001cae:	4013      	ands	r3, r2
 8001cb0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	2b10      	cmp	r3, #16
 8001cb6:	d102      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3e>
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	2b03      	cmp	r3, #3
 8001cbc:	d002      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d10b      	bne.n	8001cdc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc4:	4bb9      	ldr	r3, [pc, #740]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	@ 0x80
 8001cca:	029b      	lsls	r3, r3, #10
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d062      	beq.n	8001d96 <HAL_RCC_OscConfig+0x116>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d15e      	bne.n	8001d96 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e2ce      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	2380      	movs	r3, #128	@ 0x80
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d107      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x78>
 8001ce8:	4bb0      	ldr	r3, [pc, #704]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4baf      	ldr	r3, [pc, #700]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001cee:	2180      	movs	r1, #128	@ 0x80
 8001cf0:	0249      	lsls	r1, r1, #9
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e020      	b.n	8001d3a <HAL_RCC_OscConfig+0xba>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685a      	ldr	r2, [r3, #4]
 8001cfc:	23a0      	movs	r3, #160	@ 0xa0
 8001cfe:	02db      	lsls	r3, r3, #11
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d10e      	bne.n	8001d22 <HAL_RCC_OscConfig+0xa2>
 8001d04:	4ba9      	ldr	r3, [pc, #676]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4ba8      	ldr	r3, [pc, #672]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	2180      	movs	r1, #128	@ 0x80
 8001d0c:	02c9      	lsls	r1, r1, #11
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	601a      	str	r2, [r3, #0]
 8001d12:	4ba6      	ldr	r3, [pc, #664]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	4ba5      	ldr	r3, [pc, #660]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d18:	2180      	movs	r1, #128	@ 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e00b      	b.n	8001d3a <HAL_RCC_OscConfig+0xba>
 8001d22:	4ba2      	ldr	r3, [pc, #648]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	4ba1      	ldr	r3, [pc, #644]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d28:	49a1      	ldr	r1, [pc, #644]	@ (8001fb0 <HAL_RCC_OscConfig+0x330>)
 8001d2a:	400a      	ands	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	4b9f      	ldr	r3, [pc, #636]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	4b9e      	ldr	r3, [pc, #632]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d34:	499f      	ldr	r1, [pc, #636]	@ (8001fb4 <HAL_RCC_OscConfig+0x334>)
 8001d36:	400a      	ands	r2, r1
 8001d38:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d014      	beq.n	8001d6c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff fa5f 	bl	8001204 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fa5a 	bl	8001204 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	@ 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e28d      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d5e:	4b93      	ldr	r3, [pc, #588]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	@ 0x80
 8001d64:	029b      	lsls	r3, r3, #10
 8001d66:	4013      	ands	r3, r2
 8001d68:	d0f0      	beq.n	8001d4c <HAL_RCC_OscConfig+0xcc>
 8001d6a:	e015      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6c:	f7ff fa4a 	bl	8001204 <HAL_GetTick>
 8001d70:	0003      	movs	r3, r0
 8001d72:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d76:	f7ff fa45 	bl	8001204 <HAL_GetTick>
 8001d7a:	0002      	movs	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	@ 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e278      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d88:	4b88      	ldr	r3, [pc, #544]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	029b      	lsls	r3, r3, #10
 8001d90:	4013      	ands	r3, r2
 8001d92:	d1f0      	bne.n	8001d76 <HAL_RCC_OscConfig+0xf6>
 8001d94:	e000      	b.n	8001d98 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d96:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d100      	bne.n	8001da4 <HAL_RCC_OscConfig+0x124>
 8001da2:	e099      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001da4:	4b81      	ldr	r3, [pc, #516]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2238      	movs	r2, #56	@ 0x38
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dae:	4b7f      	ldr	r3, [pc, #508]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	2203      	movs	r2, #3
 8001db4:	4013      	ands	r3, r2
 8001db6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001db8:	69bb      	ldr	r3, [r7, #24]
 8001dba:	2b10      	cmp	r3, #16
 8001dbc:	d102      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x144>
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d002      	beq.n	8001dca <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d135      	bne.n	8001e36 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dca:	4b78      	ldr	r3, [pc, #480]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	@ 0x80
 8001dd0:	00db      	lsls	r3, r3, #3
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d005      	beq.n	8001de2 <HAL_RCC_OscConfig+0x162>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d101      	bne.n	8001de2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e24b      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de2:	4b72      	ldr	r3, [pc, #456]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4a74      	ldr	r2, [pc, #464]	@ (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	695b      	ldr	r3, [r3, #20]
 8001df0:	021a      	lsls	r2, r3, #8
 8001df2:	4b6e      	ldr	r3, [pc, #440]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d112      	bne.n	8001e24 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001dfe:	4b6b      	ldr	r3, [pc, #428]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a6e      	ldr	r2, [pc, #440]	@ (8001fbc <HAL_RCC_OscConfig+0x33c>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691a      	ldr	r2, [r3, #16]
 8001e0c:	4b67      	ldr	r3, [pc, #412]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e12:	4b66      	ldr	r3, [pc, #408]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	0adb      	lsrs	r3, r3, #11
 8001e18:	2207      	movs	r2, #7
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	4a68      	ldr	r2, [pc, #416]	@ (8001fc0 <HAL_RCC_OscConfig+0x340>)
 8001e1e:	40da      	lsrs	r2, r3
 8001e20:	4b68      	ldr	r3, [pc, #416]	@ (8001fc4 <HAL_RCC_OscConfig+0x344>)
 8001e22:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e24:	4b68      	ldr	r3, [pc, #416]	@ (8001fc8 <HAL_RCC_OscConfig+0x348>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff f98f 	bl	800114c <HAL_InitTick>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d051      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e221      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d030      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e3e:	4b5b      	ldr	r3, [pc, #364]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a5e      	ldr	r2, [pc, #376]	@ (8001fbc <HAL_RCC_OscConfig+0x33c>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	0019      	movs	r1, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	691a      	ldr	r2, [r3, #16]
 8001e4c:	4b57      	ldr	r3, [pc, #348]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e52:	4b56      	ldr	r3, [pc, #344]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	4b55      	ldr	r3, [pc, #340]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e58:	2180      	movs	r1, #128	@ 0x80
 8001e5a:	0049      	lsls	r1, r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f9d0 	bl	8001204 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7ff f9cb 	bl	8001204 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1fe      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e7c:	4b4b      	ldr	r3, [pc, #300]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	@ 0x80
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4013      	ands	r3, r2
 8001e86:	d0f0      	beq.n	8001e6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e88:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	4a4a      	ldr	r2, [pc, #296]	@ (8001fb8 <HAL_RCC_OscConfig+0x338>)
 8001e8e:	4013      	ands	r3, r2
 8001e90:	0019      	movs	r1, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695b      	ldr	r3, [r3, #20]
 8001e96:	021a      	lsls	r2, r3, #8
 8001e98:	4b44      	ldr	r3, [pc, #272]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	e01b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ea0:	4b42      	ldr	r3, [pc, #264]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b41      	ldr	r3, [pc, #260]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ea6:	4949      	ldr	r1, [pc, #292]	@ (8001fcc <HAL_RCC_OscConfig+0x34c>)
 8001ea8:	400a      	ands	r2, r1
 8001eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7ff f9aa 	bl	8001204 <HAL_GetTick>
 8001eb0:	0003      	movs	r3, r0
 8001eb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eb6:	f7ff f9a5 	bl	8001204 <HAL_GetTick>
 8001eba:	0002      	movs	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e1d8      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ec8:	4b38      	ldr	r3, [pc, #224]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	2380      	movs	r3, #128	@ 0x80
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x236>
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed6:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2208      	movs	r2, #8
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d047      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001ee2:	4b32      	ldr	r3, [pc, #200]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2238      	movs	r2, #56	@ 0x38
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b18      	cmp	r3, #24
 8001eec:	d10a      	bne.n	8001f04 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001eee:	4b2f      	ldr	r3, [pc, #188]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001ef0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ef2:	2202      	movs	r2, #2
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	d03c      	beq.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d138      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e1ba      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d019      	beq.n	8001f40 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f0c:	4b27      	ldr	r3, [pc, #156]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f0e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f10:	4b26      	ldr	r3, [pc, #152]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	430a      	orrs	r2, r1
 8001f16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7ff f974 	bl	8001204 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f22:	f7ff f96f 	bl	8001204 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e1a2      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f34:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d0f1      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2a2>
 8001f3e:	e018      	b.n	8001f72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f40:	4b1a      	ldr	r3, [pc, #104]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f42:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f46:	2101      	movs	r1, #1
 8001f48:	438a      	bics	r2, r1
 8001f4a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4c:	f7ff f95a 	bl	8001204 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f56:	f7ff f955 	bl	8001204 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e188      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4013      	ands	r3, r2
 8001f70:	d1f1      	bne.n	8001f56 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2204      	movs	r2, #4
 8001f78:	4013      	ands	r3, r2
 8001f7a:	d100      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2fe>
 8001f7c:	e0c6      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f7e:	231f      	movs	r3, #31
 8001f80:	18fb      	adds	r3, r7, r3
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f86:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2238      	movs	r2, #56	@ 0x38
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	2b20      	cmp	r3, #32
 8001f90:	d11e      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f92:	4b06      	ldr	r3, [pc, #24]	@ (8001fac <HAL_RCC_OscConfig+0x32c>)
 8001f94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f96:	2202      	movs	r2, #2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	d100      	bne.n	8001f9e <HAL_RCC_OscConfig+0x31e>
 8001f9c:	e0b6      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d000      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x328>
 8001fa6:	e0b1      	b.n	800210c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e166      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
 8001fac:	40021000 	.word	0x40021000
 8001fb0:	fffeffff 	.word	0xfffeffff
 8001fb4:	fffbffff 	.word	0xfffbffff
 8001fb8:	ffff80ff 	.word	0xffff80ff
 8001fbc:	ffffc7ff 	.word	0xffffc7ff
 8001fc0:	00f42400 	.word	0x00f42400
 8001fc4:	20000028 	.word	0x20000028
 8001fc8:	2000002c 	.word	0x2000002c
 8001fcc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001fd0:	4bac      	ldr	r3, [pc, #688]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8001fd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fd4:	2380      	movs	r3, #128	@ 0x80
 8001fd6:	055b      	lsls	r3, r3, #21
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d101      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x360>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_RCC_OscConfig+0x362>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d011      	beq.n	800200a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	4ba7      	ldr	r3, [pc, #668]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8001fe8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fea:	4ba6      	ldr	r3, [pc, #664]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8001fec:	2180      	movs	r1, #128	@ 0x80
 8001fee:	0549      	lsls	r1, r1, #21
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ff4:	4ba3      	ldr	r3, [pc, #652]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8001ff6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ff8:	2380      	movs	r3, #128	@ 0x80
 8001ffa:	055b      	lsls	r3, r3, #21
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002002:	231f      	movs	r3, #31
 8002004:	18fb      	adds	r3, r7, r3
 8002006:	2201      	movs	r2, #1
 8002008:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800200a:	4b9f      	ldr	r3, [pc, #636]	@ (8002288 <HAL_RCC_OscConfig+0x608>)
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	2380      	movs	r3, #128	@ 0x80
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4013      	ands	r3, r2
 8002014:	d11a      	bne.n	800204c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002016:	4b9c      	ldr	r3, [pc, #624]	@ (8002288 <HAL_RCC_OscConfig+0x608>)
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	4b9b      	ldr	r3, [pc, #620]	@ (8002288 <HAL_RCC_OscConfig+0x608>)
 800201c:	2180      	movs	r1, #128	@ 0x80
 800201e:	0049      	lsls	r1, r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002024:	f7ff f8ee 	bl	8001204 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800202c:	e008      	b.n	8002040 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202e:	f7ff f8e9 	bl	8001204 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d901      	bls.n	8002040 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	e11c      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002040:	4b91      	ldr	r3, [pc, #580]	@ (8002288 <HAL_RCC_OscConfig+0x608>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	2380      	movs	r3, #128	@ 0x80
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	4013      	ands	r3, r2
 800204a:	d0f0      	beq.n	800202e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	2b01      	cmp	r3, #1
 8002052:	d106      	bne.n	8002062 <HAL_RCC_OscConfig+0x3e2>
 8002054:	4b8b      	ldr	r3, [pc, #556]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002056:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002058:	4b8a      	ldr	r3, [pc, #552]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800205a:	2101      	movs	r1, #1
 800205c:	430a      	orrs	r2, r1
 800205e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002060:	e01c      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b05      	cmp	r3, #5
 8002068:	d10c      	bne.n	8002084 <HAL_RCC_OscConfig+0x404>
 800206a:	4b86      	ldr	r3, [pc, #536]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800206c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800206e:	4b85      	ldr	r3, [pc, #532]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002070:	2104      	movs	r1, #4
 8002072:	430a      	orrs	r2, r1
 8002074:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002076:	4b83      	ldr	r3, [pc, #524]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002078:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800207a:	4b82      	ldr	r3, [pc, #520]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800207c:	2101      	movs	r1, #1
 800207e:	430a      	orrs	r2, r1
 8002080:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002082:	e00b      	b.n	800209c <HAL_RCC_OscConfig+0x41c>
 8002084:	4b7f      	ldr	r3, [pc, #508]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002086:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002088:	4b7e      	ldr	r3, [pc, #504]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800208a:	2101      	movs	r1, #1
 800208c:	438a      	bics	r2, r1
 800208e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002090:	4b7c      	ldr	r3, [pc, #496]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002092:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002094:	4b7b      	ldr	r3, [pc, #492]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002096:	2104      	movs	r1, #4
 8002098:	438a      	bics	r2, r1
 800209a:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d014      	beq.n	80020ce <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a4:	f7ff f8ae 	bl	8001204 <HAL_GetTick>
 80020a8:	0003      	movs	r3, r0
 80020aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ac:	e009      	b.n	80020c2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff f8a9 	bl	8001204 <HAL_GetTick>
 80020b2:	0002      	movs	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	4a74      	ldr	r2, [pc, #464]	@ (800228c <HAL_RCC_OscConfig+0x60c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e0db      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c2:	4b70      	ldr	r3, [pc, #448]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 80020c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020c6:	2202      	movs	r2, #2
 80020c8:	4013      	ands	r3, r2
 80020ca:	d0f0      	beq.n	80020ae <HAL_RCC_OscConfig+0x42e>
 80020cc:	e013      	b.n	80020f6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ce:	f7ff f899 	bl	8001204 <HAL_GetTick>
 80020d2:	0003      	movs	r3, r0
 80020d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d6:	e009      	b.n	80020ec <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7ff f894 	bl	8001204 <HAL_GetTick>
 80020dc:	0002      	movs	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	4a6a      	ldr	r2, [pc, #424]	@ (800228c <HAL_RCC_OscConfig+0x60c>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0c6      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020ec:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 80020ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020f0:	2202      	movs	r2, #2
 80020f2:	4013      	ands	r3, r2
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020f6:	231f      	movs	r3, #31
 80020f8:	18fb      	adds	r3, r7, r3
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002100:	4b60      	ldr	r3, [pc, #384]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002102:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002104:	4b5f      	ldr	r3, [pc, #380]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002106:	4962      	ldr	r1, [pc, #392]	@ (8002290 <HAL_RCC_OscConfig+0x610>)
 8002108:	400a      	ands	r2, r1
 800210a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d100      	bne.n	8002116 <HAL_RCC_OscConfig+0x496>
 8002114:	e0b0      	b.n	8002278 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002116:	4b5b      	ldr	r3, [pc, #364]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2238      	movs	r2, #56	@ 0x38
 800211c:	4013      	ands	r3, r2
 800211e:	2b10      	cmp	r3, #16
 8002120:	d100      	bne.n	8002124 <HAL_RCC_OscConfig+0x4a4>
 8002122:	e078      	b.n	8002216 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d153      	bne.n	80021d4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	4b55      	ldr	r3, [pc, #340]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b54      	ldr	r3, [pc, #336]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002132:	4958      	ldr	r1, [pc, #352]	@ (8002294 <HAL_RCC_OscConfig+0x614>)
 8002134:	400a      	ands	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f864 	bl	8001204 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002142:	f7ff f85f 	bl	8001204 <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e092      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	@ 0x80
 800215a:	049b      	lsls	r3, r3, #18
 800215c:	4013      	ands	r3, r2
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002160:	4b48      	ldr	r3, [pc, #288]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	4a4c      	ldr	r2, [pc, #304]	@ (8002298 <HAL_RCC_OscConfig+0x618>)
 8002166:	4013      	ands	r3, r2
 8002168:	0019      	movs	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1a      	ldr	r2, [r3, #32]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002178:	021b      	lsls	r3, r3, #8
 800217a:	431a      	orrs	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	431a      	orrs	r2, r3
 8002188:	4b3e      	ldr	r3, [pc, #248]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800218a:	430a      	orrs	r2, r1
 800218c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218e:	4b3d      	ldr	r3, [pc, #244]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b3c      	ldr	r3, [pc, #240]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002194:	2180      	movs	r1, #128	@ 0x80
 8002196:	0449      	lsls	r1, r1, #17
 8002198:	430a      	orrs	r2, r1
 800219a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800219c:	4b39      	ldr	r3, [pc, #228]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b38      	ldr	r3, [pc, #224]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 80021a2:	2180      	movs	r1, #128	@ 0x80
 80021a4:	0549      	lsls	r1, r1, #21
 80021a6:	430a      	orrs	r2, r1
 80021a8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021aa:	f7ff f82b 	bl	8001204 <HAL_GetTick>
 80021ae:	0003      	movs	r3, r0
 80021b0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021b4:	f7ff f826 	bl	8001204 <HAL_GetTick>
 80021b8:	0002      	movs	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e059      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c6:	4b2f      	ldr	r3, [pc, #188]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	2380      	movs	r3, #128	@ 0x80
 80021cc:	049b      	lsls	r3, r3, #18
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0f0      	beq.n	80021b4 <HAL_RCC_OscConfig+0x534>
 80021d2:	e051      	b.n	8002278 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 80021da:	492e      	ldr	r1, [pc, #184]	@ (8002294 <HAL_RCC_OscConfig+0x614>)
 80021dc:	400a      	ands	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e0:	f7ff f810 	bl	8001204 <HAL_GetTick>
 80021e4:	0003      	movs	r3, r0
 80021e6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff f80b 	bl	8001204 <HAL_GetTick>
 80021ee:	0002      	movs	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e03e      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021fc:	4b21      	ldr	r3, [pc, #132]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	2380      	movs	r3, #128	@ 0x80
 8002202:	049b      	lsls	r3, r3, #18
 8002204:	4013      	ands	r3, r2
 8002206:	d1f0      	bne.n	80021ea <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002208:	4b1e      	ldr	r3, [pc, #120]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	4b1d      	ldr	r3, [pc, #116]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 800220e:	4923      	ldr	r1, [pc, #140]	@ (800229c <HAL_RCC_OscConfig+0x61c>)
 8002210:	400a      	ands	r2, r1
 8002212:	60da      	str	r2, [r3, #12]
 8002214:	e030      	b.n	8002278 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	69db      	ldr	r3, [r3, #28]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e02b      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002222:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <HAL_RCC_OscConfig+0x604>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	2203      	movs	r2, #3
 800222c:	401a      	ands	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	429a      	cmp	r2, r3
 8002234:	d11e      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2270      	movs	r2, #112	@ 0x70
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d117      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	23fe      	movs	r3, #254	@ 0xfe
 8002248:	01db      	lsls	r3, r3, #7
 800224a:	401a      	ands	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002250:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002252:	429a      	cmp	r2, r3
 8002254:	d10e      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002256:	697a      	ldr	r2, [r7, #20]
 8002258:	23f8      	movs	r3, #248	@ 0xf8
 800225a:	039b      	lsls	r3, r3, #14
 800225c:	401a      	ands	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002262:	429a      	cmp	r2, r3
 8002264:	d106      	bne.n	8002274 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	0f5b      	lsrs	r3, r3, #29
 800226a:	075a      	lsls	r2, r3, #29
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e000      	b.n	800227a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	0018      	movs	r0, r3
 800227c:	46bd      	mov	sp, r7
 800227e:	b008      	add	sp, #32
 8002280:	bd80      	pop	{r7, pc}
 8002282:	46c0      	nop			@ (mov r8, r8)
 8002284:	40021000 	.word	0x40021000
 8002288:	40007000 	.word	0x40007000
 800228c:	00001388 	.word	0x00001388
 8002290:	efffffff 	.word	0xefffffff
 8002294:	feffffff 	.word	0xfeffffff
 8002298:	1fc1808c 	.word	0x1fc1808c
 800229c:	effefffc 	.word	0xeffefffc

080022a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d101      	bne.n	80022b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0e9      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022b4:	4b76      	ldr	r3, [pc, #472]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2207      	movs	r2, #7
 80022ba:	4013      	ands	r3, r2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d91e      	bls.n	8002300 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b73      	ldr	r3, [pc, #460]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2207      	movs	r2, #7
 80022c8:	4393      	bics	r3, r2
 80022ca:	0019      	movs	r1, r3
 80022cc:	4b70      	ldr	r3, [pc, #448]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022d4:	f7fe ff96 	bl	8001204 <HAL_GetTick>
 80022d8:	0003      	movs	r3, r0
 80022da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022dc:	e009      	b.n	80022f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022de:	f7fe ff91 	bl	8001204 <HAL_GetTick>
 80022e2:	0002      	movs	r2, r0
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	4a6a      	ldr	r2, [pc, #424]	@ (8002494 <HAL_RCC_ClockConfig+0x1f4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e0ca      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022f2:	4b67      	ldr	r3, [pc, #412]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2207      	movs	r2, #7
 80022f8:	4013      	ands	r3, r2
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d1ee      	bne.n	80022de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2202      	movs	r2, #2
 8002306:	4013      	ands	r3, r2
 8002308:	d015      	beq.n	8002336 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	2204      	movs	r2, #4
 8002310:	4013      	ands	r3, r2
 8002312:	d006      	beq.n	8002322 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002314:	4b60      	ldr	r3, [pc, #384]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	4b5f      	ldr	r3, [pc, #380]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 800231a:	21e0      	movs	r1, #224	@ 0xe0
 800231c:	01c9      	lsls	r1, r1, #7
 800231e:	430a      	orrs	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002322:	4b5d      	ldr	r3, [pc, #372]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	4a5d      	ldr	r2, [pc, #372]	@ (800249c <HAL_RCC_ClockConfig+0x1fc>)
 8002328:	4013      	ands	r3, r2
 800232a:	0019      	movs	r1, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4b59      	ldr	r3, [pc, #356]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002332:	430a      	orrs	r2, r1
 8002334:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2201      	movs	r2, #1
 800233c:	4013      	ands	r3, r2
 800233e:	d057      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d107      	bne.n	8002358 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002348:	4b53      	ldr	r3, [pc, #332]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	2380      	movs	r3, #128	@ 0x80
 800234e:	029b      	lsls	r3, r3, #10
 8002350:	4013      	ands	r3, r2
 8002352:	d12b      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e097      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b02      	cmp	r3, #2
 800235e:	d107      	bne.n	8002370 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002360:	4b4d      	ldr	r3, [pc, #308]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	2380      	movs	r3, #128	@ 0x80
 8002366:	049b      	lsls	r3, r3, #18
 8002368:	4013      	ands	r3, r2
 800236a:	d11f      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e08b      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d107      	bne.n	8002388 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002378:	4b47      	ldr	r3, [pc, #284]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	2380      	movs	r3, #128	@ 0x80
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4013      	ands	r3, r2
 8002382:	d113      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e07f      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d106      	bne.n	800239e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002390:	4b41      	ldr	r3, [pc, #260]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002392:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002394:	2202      	movs	r2, #2
 8002396:	4013      	ands	r3, r2
 8002398:	d108      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e074      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239e:	4b3e      	ldr	r3, [pc, #248]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d101      	bne.n	80023ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e06d      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ac:	4b3a      	ldr	r3, [pc, #232]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	2207      	movs	r2, #7
 80023b2:	4393      	bics	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023bc:	430a      	orrs	r2, r1
 80023be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c0:	f7fe ff20 	bl	8001204 <HAL_GetTick>
 80023c4:	0003      	movs	r3, r0
 80023c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c8:	e009      	b.n	80023de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ca:	f7fe ff1b 	bl	8001204 <HAL_GetTick>
 80023ce:	0002      	movs	r2, r0
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	4a2f      	ldr	r2, [pc, #188]	@ (8002494 <HAL_RCC_ClockConfig+0x1f4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d901      	bls.n	80023de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023da:	2303      	movs	r3, #3
 80023dc:	e054      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023de:	4b2e      	ldr	r3, [pc, #184]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2238      	movs	r2, #56	@ 0x38
 80023e4:	401a      	ands	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d1ec      	bne.n	80023ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023f0:	4b27      	ldr	r3, [pc, #156]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2207      	movs	r2, #7
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d21e      	bcs.n	800243c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fe:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2207      	movs	r2, #7
 8002404:	4393      	bics	r3, r2
 8002406:	0019      	movs	r1, r3
 8002408:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002410:	f7fe fef8 	bl	8001204 <HAL_GetTick>
 8002414:	0003      	movs	r3, r0
 8002416:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002418:	e009      	b.n	800242e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800241a:	f7fe fef3 	bl	8001204 <HAL_GetTick>
 800241e:	0002      	movs	r2, r0
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	4a1b      	ldr	r2, [pc, #108]	@ (8002494 <HAL_RCC_ClockConfig+0x1f4>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e02c      	b.n	8002488 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <HAL_RCC_ClockConfig+0x1f0>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2207      	movs	r2, #7
 8002434:	4013      	ands	r3, r2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d1ee      	bne.n	800241a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2204      	movs	r2, #4
 8002442:	4013      	ands	r3, r2
 8002444:	d009      	beq.n	800245a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002446:	4b14      	ldr	r3, [pc, #80]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	4a15      	ldr	r2, [pc, #84]	@ (80024a0 <HAL_RCC_ClockConfig+0x200>)
 800244c:	4013      	ands	r3, r2
 800244e:	0019      	movs	r1, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800245a:	f000 f829 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800245e:	0001      	movs	r1, r0
 8002460:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <HAL_RCC_ClockConfig+0x1f8>)
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	220f      	movs	r2, #15
 8002468:	401a      	ands	r2, r3
 800246a:	4b0e      	ldr	r3, [pc, #56]	@ (80024a4 <HAL_RCC_ClockConfig+0x204>)
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	58d3      	ldr	r3, [r2, r3]
 8002470:	221f      	movs	r2, #31
 8002472:	4013      	ands	r3, r2
 8002474:	000a      	movs	r2, r1
 8002476:	40da      	lsrs	r2, r3
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_RCC_ClockConfig+0x208>)
 800247a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <HAL_RCC_ClockConfig+0x20c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0018      	movs	r0, r3
 8002482:	f7fe fe63 	bl	800114c <HAL_InitTick>
 8002486:	0003      	movs	r3, r0
}
 8002488:	0018      	movs	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	b004      	add	sp, #16
 800248e:	bd80      	pop	{r7, pc}
 8002490:	40022000 	.word	0x40022000
 8002494:	00001388 	.word	0x00001388
 8002498:	40021000 	.word	0x40021000
 800249c:	fffff0ff 	.word	0xfffff0ff
 80024a0:	ffff8fff 	.word	0xffff8fff
 80024a4:	08005a3c 	.word	0x08005a3c
 80024a8:	20000028 	.word	0x20000028
 80024ac:	2000002c 	.word	0x2000002c

080024b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b6:	4b3c      	ldr	r3, [pc, #240]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2238      	movs	r2, #56	@ 0x38
 80024bc:	4013      	ands	r3, r2
 80024be:	d10f      	bne.n	80024e0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024c0:	4b39      	ldr	r3, [pc, #228]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0adb      	lsrs	r3, r3, #11
 80024c6:	2207      	movs	r2, #7
 80024c8:	4013      	ands	r3, r2
 80024ca:	2201      	movs	r2, #1
 80024cc:	409a      	lsls	r2, r3
 80024ce:	0013      	movs	r3, r2
 80024d0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80024d2:	6839      	ldr	r1, [r7, #0]
 80024d4:	4835      	ldr	r0, [pc, #212]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xfc>)
 80024d6:	f7fd fe25 	bl	8000124 <__udivsi3>
 80024da:	0003      	movs	r3, r0
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	e05d      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024e0:	4b31      	ldr	r3, [pc, #196]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2238      	movs	r2, #56	@ 0x38
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b08      	cmp	r3, #8
 80024ea:	d102      	bne.n	80024f2 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024ec:	4b30      	ldr	r3, [pc, #192]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x100>)
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	e054      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024f2:	4b2d      	ldr	r3, [pc, #180]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2238      	movs	r2, #56	@ 0x38
 80024f8:	4013      	ands	r3, r2
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d138      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024fe:	4b2a      	ldr	r3, [pc, #168]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	2203      	movs	r2, #3
 8002504:	4013      	ands	r3, r2
 8002506:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002508:	4b27      	ldr	r3, [pc, #156]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	2207      	movs	r2, #7
 8002510:	4013      	ands	r3, r2
 8002512:	3301      	adds	r3, #1
 8002514:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2b03      	cmp	r3, #3
 800251a:	d10d      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800251c:	68b9      	ldr	r1, [r7, #8]
 800251e:	4824      	ldr	r0, [pc, #144]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x100>)
 8002520:	f7fd fe00 	bl	8000124 <__udivsi3>
 8002524:	0003      	movs	r3, r0
 8002526:	0019      	movs	r1, r3
 8002528:	4b1f      	ldr	r3, [pc, #124]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	0a1b      	lsrs	r3, r3, #8
 800252e:	227f      	movs	r2, #127	@ 0x7f
 8002530:	4013      	ands	r3, r2
 8002532:	434b      	muls	r3, r1
 8002534:	617b      	str	r3, [r7, #20]
        break;
 8002536:	e00d      	b.n	8002554 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	481c      	ldr	r0, [pc, #112]	@ (80025ac <HAL_RCC_GetSysClockFreq+0xfc>)
 800253c:	f7fd fdf2 	bl	8000124 <__udivsi3>
 8002540:	0003      	movs	r3, r0
 8002542:	0019      	movs	r1, r3
 8002544:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	0a1b      	lsrs	r3, r3, #8
 800254a:	227f      	movs	r2, #127	@ 0x7f
 800254c:	4013      	ands	r3, r2
 800254e:	434b      	muls	r3, r1
 8002550:	617b      	str	r3, [r7, #20]
        break;
 8002552:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002554:	4b14      	ldr	r3, [pc, #80]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0f5b      	lsrs	r3, r3, #29
 800255a:	2207      	movs	r2, #7
 800255c:	4013      	ands	r3, r2
 800255e:	3301      	adds	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002562:	6879      	ldr	r1, [r7, #4]
 8002564:	6978      	ldr	r0, [r7, #20]
 8002566:	f7fd fddd 	bl	8000124 <__udivsi3>
 800256a:	0003      	movs	r3, r0
 800256c:	613b      	str	r3, [r7, #16]
 800256e:	e015      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002570:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2238      	movs	r2, #56	@ 0x38
 8002576:	4013      	ands	r3, r2
 8002578:	2b20      	cmp	r3, #32
 800257a:	d103      	bne.n	8002584 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800257c:	2380      	movs	r3, #128	@ 0x80
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	e00b      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002584:	4b08      	ldr	r3, [pc, #32]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2238      	movs	r2, #56	@ 0x38
 800258a:	4013      	ands	r3, r2
 800258c:	2b18      	cmp	r3, #24
 800258e:	d103      	bne.n	8002598 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002590:	23fa      	movs	r3, #250	@ 0xfa
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	613b      	str	r3, [r7, #16]
 8002596:	e001      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800259c:	693b      	ldr	r3, [r7, #16]
}
 800259e:	0018      	movs	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	b006      	add	sp, #24
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	46c0      	nop			@ (mov r8, r8)
 80025a8:	40021000 	.word	0x40021000
 80025ac:	00f42400 	.word	0x00f42400
 80025b0:	007a1200 	.word	0x007a1200

080025b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025b8:	4b02      	ldr	r3, [pc, #8]	@ (80025c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ba:	681b      	ldr	r3, [r3, #0]
}
 80025bc:	0018      	movs	r0, r3
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	46c0      	nop			@ (mov r8, r8)
 80025c4:	20000028 	.word	0x20000028

080025c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80025cc:	f7ff fff2 	bl	80025b4 <HAL_RCC_GetHCLKFreq>
 80025d0:	0004      	movs	r4, r0
 80025d2:	f7ff fb49 	bl	8001c68 <LL_RCC_GetAPB1Prescaler>
 80025d6:	0003      	movs	r3, r0
 80025d8:	0b1a      	lsrs	r2, r3, #12
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025dc:	0092      	lsls	r2, r2, #2
 80025de:	58d3      	ldr	r3, [r2, r3]
 80025e0:	221f      	movs	r2, #31
 80025e2:	4013      	ands	r3, r2
 80025e4:	40dc      	lsrs	r4, r3
 80025e6:	0023      	movs	r3, r4
}
 80025e8:	0018      	movs	r0, r3
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bdb0      	pop	{r4, r5, r7, pc}
 80025ee:	46c0      	nop			@ (mov r8, r8)
 80025f0:	08005a7c 	.word	0x08005a7c

080025f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e046      	b.n	8002694 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2288      	movs	r2, #136	@ 0x88
 800260a:	589b      	ldr	r3, [r3, r2]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2284      	movs	r2, #132	@ 0x84
 8002614:	2100      	movs	r1, #0
 8002616:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f7fe fc50 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2288      	movs	r2, #136	@ 0x88
 8002624:	2124      	movs	r1, #36	@ 0x24
 8002626:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2101      	movs	r1, #1
 8002634:	438a      	bics	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263c:	2b00      	cmp	r3, #0
 800263e:	d003      	beq.n	8002648 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	0018      	movs	r0, r3
 8002644:	f000 fea0 	bl	8003388 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	0018      	movs	r0, r3
 800264c:	f000 fcf8 	bl	8003040 <UART_SetConfig>
 8002650:	0003      	movs	r3, r0
 8002652:	2b01      	cmp	r3, #1
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e01c      	b.n	8002694 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	490d      	ldr	r1, [pc, #52]	@ (800269c <HAL_UART_Init+0xa8>)
 8002666:	400a      	ands	r2, r1
 8002668:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	212a      	movs	r1, #42	@ 0x2a
 8002676:	438a      	bics	r2, r1
 8002678:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2101      	movs	r1, #1
 8002686:	430a      	orrs	r2, r1
 8002688:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 ff2f 	bl	80034f0 <UART_CheckIdleState>
 8002692:	0003      	movs	r3, r0
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}
 800269c:	ffffb7ff 	.word	0xffffb7ff

080026a0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	@ 0x28
 80026a4:	af02      	add	r7, sp, #8
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	603b      	str	r3, [r7, #0]
 80026ac:	1dbb      	adds	r3, r7, #6
 80026ae:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	228c      	movs	r2, #140	@ 0x8c
 80026b4:	589b      	ldr	r3, [r3, r2]
 80026b6:	2b20      	cmp	r3, #32
 80026b8:	d000      	beq.n	80026bc <HAL_UART_Receive+0x1c>
 80026ba:	e0d0      	b.n	800285e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d003      	beq.n	80026ca <HAL_UART_Receive+0x2a>
 80026c2:	1dbb      	adds	r3, r7, #6
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e0c8      	b.n	8002860 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	2380      	movs	r3, #128	@ 0x80
 80026d4:	015b      	lsls	r3, r3, #5
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d109      	bne.n	80026ee <HAL_UART_Receive+0x4e>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d105      	bne.n	80026ee <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2201      	movs	r2, #1
 80026e6:	4013      	ands	r3, r2
 80026e8:	d001      	beq.n	80026ee <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e0b8      	b.n	8002860 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2290      	movs	r2, #144	@ 0x90
 80026f2:	2100      	movs	r1, #0
 80026f4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	228c      	movs	r2, #140	@ 0x8c
 80026fa:	2122      	movs	r1, #34	@ 0x22
 80026fc:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002704:	f7fe fd7e 	bl	8001204 <HAL_GetTick>
 8002708:	0003      	movs	r3, r0
 800270a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	1dba      	adds	r2, r7, #6
 8002710:	215c      	movs	r1, #92	@ 0x5c
 8002712:	8812      	ldrh	r2, [r2, #0]
 8002714:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1dba      	adds	r2, r7, #6
 800271a:	215e      	movs	r1, #94	@ 0x5e
 800271c:	8812      	ldrh	r2, [r2, #0]
 800271e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	2380      	movs	r3, #128	@ 0x80
 8002726:	015b      	lsls	r3, r3, #5
 8002728:	429a      	cmp	r2, r3
 800272a:	d10d      	bne.n	8002748 <HAL_UART_Receive+0xa8>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	691b      	ldr	r3, [r3, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d104      	bne.n	800273e <HAL_UART_Receive+0x9e>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2260      	movs	r2, #96	@ 0x60
 8002738:	494b      	ldr	r1, [pc, #300]	@ (8002868 <HAL_UART_Receive+0x1c8>)
 800273a:	5299      	strh	r1, [r3, r2]
 800273c:	e02e      	b.n	800279c <HAL_UART_Receive+0xfc>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2260      	movs	r2, #96	@ 0x60
 8002742:	21ff      	movs	r1, #255	@ 0xff
 8002744:	5299      	strh	r1, [r3, r2]
 8002746:	e029      	b.n	800279c <HAL_UART_Receive+0xfc>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10d      	bne.n	800276c <HAL_UART_Receive+0xcc>
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d104      	bne.n	8002762 <HAL_UART_Receive+0xc2>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2260      	movs	r2, #96	@ 0x60
 800275c:	21ff      	movs	r1, #255	@ 0xff
 800275e:	5299      	strh	r1, [r3, r2]
 8002760:	e01c      	b.n	800279c <HAL_UART_Receive+0xfc>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2260      	movs	r2, #96	@ 0x60
 8002766:	217f      	movs	r1, #127	@ 0x7f
 8002768:	5299      	strh	r1, [r3, r2]
 800276a:	e017      	b.n	800279c <HAL_UART_Receive+0xfc>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	2380      	movs	r3, #128	@ 0x80
 8002772:	055b      	lsls	r3, r3, #21
 8002774:	429a      	cmp	r2, r3
 8002776:	d10d      	bne.n	8002794 <HAL_UART_Receive+0xf4>
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d104      	bne.n	800278a <HAL_UART_Receive+0xea>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2260      	movs	r2, #96	@ 0x60
 8002784:	217f      	movs	r1, #127	@ 0x7f
 8002786:	5299      	strh	r1, [r3, r2]
 8002788:	e008      	b.n	800279c <HAL_UART_Receive+0xfc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2260      	movs	r2, #96	@ 0x60
 800278e:	213f      	movs	r1, #63	@ 0x3f
 8002790:	5299      	strh	r1, [r3, r2]
 8002792:	e003      	b.n	800279c <HAL_UART_Receive+0xfc>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	2260      	movs	r2, #96	@ 0x60
 8002798:	2100      	movs	r1, #0
 800279a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800279c:	2312      	movs	r3, #18
 800279e:	18fb      	adds	r3, r7, r3
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	2160      	movs	r1, #96	@ 0x60
 80027a4:	5a52      	ldrh	r2, [r2, r1]
 80027a6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	2380      	movs	r3, #128	@ 0x80
 80027ae:	015b      	lsls	r3, r3, #5
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d108      	bne.n	80027c6 <HAL_UART_Receive+0x126>
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d104      	bne.n	80027c6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	e003      	b.n	80027ce <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80027ce:	e03a      	b.n	8002846 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027d0:	697a      	ldr	r2, [r7, #20]
 80027d2:	68f8      	ldr	r0, [r7, #12]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	0013      	movs	r3, r2
 80027da:	2200      	movs	r2, #0
 80027dc:	2120      	movs	r1, #32
 80027de:	f000 ff31 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 80027e2:	1e03      	subs	r3, r0, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	228c      	movs	r2, #140	@ 0x8c
 80027ea:	2120      	movs	r1, #32
 80027ec:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e036      	b.n	8002860 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10e      	bne.n	8002816 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	b29b      	uxth	r3, r3
 8002800:	2212      	movs	r2, #18
 8002802:	18ba      	adds	r2, r7, r2
 8002804:	8812      	ldrh	r2, [r2, #0]
 8002806:	4013      	ands	r3, r2
 8002808:	b29a      	uxth	r2, r3
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	3302      	adds	r3, #2
 8002812:	61bb      	str	r3, [r7, #24]
 8002814:	e00e      	b.n	8002834 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2212      	movs	r2, #18
 8002820:	18ba      	adds	r2, r7, r2
 8002822:	8812      	ldrh	r2, [r2, #0]
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	4013      	ands	r3, r2
 8002828:	b2da      	uxtb	r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	3301      	adds	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	225e      	movs	r2, #94	@ 0x5e
 8002838:	5a9b      	ldrh	r3, [r3, r2]
 800283a:	b29b      	uxth	r3, r3
 800283c:	3b01      	subs	r3, #1
 800283e:	b299      	uxth	r1, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	225e      	movs	r2, #94	@ 0x5e
 8002844:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	225e      	movs	r2, #94	@ 0x5e
 800284a:	5a9b      	ldrh	r3, [r3, r2]
 800284c:	b29b      	uxth	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1be      	bne.n	80027d0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	228c      	movs	r2, #140	@ 0x8c
 8002856:	2120      	movs	r1, #32
 8002858:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 800285e:	2302      	movs	r3, #2
  }
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	b008      	add	sp, #32
 8002866:	bd80      	pop	{r7, pc}
 8002868:	000001ff 	.word	0x000001ff

0800286c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b08c      	sub	sp, #48	@ 0x30
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	1dbb      	adds	r3, r7, #6
 8002878:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2288      	movs	r2, #136	@ 0x88
 800287e:	589b      	ldr	r3, [r3, r2]
 8002880:	2b20      	cmp	r3, #32
 8002882:	d000      	beq.n	8002886 <HAL_UART_Transmit_IT+0x1a>
 8002884:	e08d      	b.n	80029a2 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_UART_Transmit_IT+0x28>
 800288c:	1dbb      	adds	r3, r7, #6
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e085      	b.n	80029a4 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	015b      	lsls	r3, r3, #5
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d109      	bne.n	80028b8 <HAL_UART_Transmit_IT+0x4c>
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d105      	bne.n	80028b8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4013      	ands	r3, r2
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e075      	b.n	80029a4 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	68ba      	ldr	r2, [r7, #8]
 80028bc:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	1dba      	adds	r2, r7, #6
 80028c2:	2154      	movs	r1, #84	@ 0x54
 80028c4:	8812      	ldrh	r2, [r2, #0]
 80028c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	1dba      	adds	r2, r7, #6
 80028cc:	2156      	movs	r1, #86	@ 0x56
 80028ce:	8812      	ldrh	r2, [r2, #0]
 80028d0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2290      	movs	r2, #144	@ 0x90
 80028dc:	2100      	movs	r1, #0
 80028de:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2288      	movs	r2, #136	@ 0x88
 80028e4:	2121      	movs	r1, #33	@ 0x21
 80028e6:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80028ec:	2380      	movs	r3, #128	@ 0x80
 80028ee:	059b      	lsls	r3, r3, #22
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d12a      	bne.n	800294a <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	2380      	movs	r3, #128	@ 0x80
 80028fa:	015b      	lsls	r3, r3, #5
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d107      	bne.n	8002910 <HAL_UART_Transmit_IT+0xa4>
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <HAL_UART_Transmit_IT+0x140>)
 800290c:	679a      	str	r2, [r3, #120]	@ 0x78
 800290e:	e002      	b.n	8002916 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <HAL_UART_Transmit_IT+0x144>)
 8002914:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002916:	f3ef 8310 	mrs	r3, PRIMASK
 800291a:	61fb      	str	r3, [r7, #28]
  return(result);
 800291c:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002920:	2301      	movs	r3, #1
 8002922:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002924:	6a3b      	ldr	r3, [r7, #32]
 8002926:	f383 8810 	msr	PRIMASK, r3
}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2180      	movs	r1, #128	@ 0x80
 8002938:	0409      	lsls	r1, r1, #16
 800293a:	430a      	orrs	r2, r1
 800293c:	609a      	str	r2, [r3, #8]
 800293e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002944:	f383 8810 	msr	PRIMASK, r3
}
 8002948:	e029      	b.n	800299e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	689a      	ldr	r2, [r3, #8]
 800294e:	2380      	movs	r3, #128	@ 0x80
 8002950:	015b      	lsls	r3, r3, #5
 8002952:	429a      	cmp	r2, r3
 8002954:	d107      	bne.n	8002966 <HAL_UART_Transmit_IT+0xfa>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d103      	bne.n	8002966 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	4a14      	ldr	r2, [pc, #80]	@ (80029b4 <HAL_UART_Transmit_IT+0x148>)
 8002962:	679a      	str	r2, [r3, #120]	@ 0x78
 8002964:	e002      	b.n	800296c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4a13      	ldr	r2, [pc, #76]	@ (80029b8 <HAL_UART_Transmit_IT+0x14c>)
 800296a:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800296c:	f3ef 8310 	mrs	r3, PRIMASK
 8002970:	613b      	str	r3, [r7, #16]
  return(result);
 8002972:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002976:	2301      	movs	r3, #1
 8002978:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f383 8810 	msr	PRIMASK, r3
}
 8002980:	46c0      	nop			@ (mov r8, r8)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2180      	movs	r1, #128	@ 0x80
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002994:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002996:	69bb      	ldr	r3, [r7, #24]
 8002998:	f383 8810 	msr	PRIMASK, r3
}
 800299c:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	e000      	b.n	80029a4 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 80029a2:	2302      	movs	r3, #2
  }
}
 80029a4:	0018      	movs	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b00c      	add	sp, #48	@ 0x30
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	08003a7d 	.word	0x08003a7d
 80029b0:	08003991 	.word	0x08003991
 80029b4:	080038d3 	.word	0x080038d3
 80029b8:	0800381f 	.word	0x0800381f

080029bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029bc:	b5b0      	push	{r4, r5, r7, lr}
 80029be:	b0aa      	sub	sp, #168	@ 0xa8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	22a4      	movs	r2, #164	@ 0xa4
 80029cc:	18b9      	adds	r1, r7, r2
 80029ce:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	20a0      	movs	r0, #160	@ 0xa0
 80029d8:	1839      	adds	r1, r7, r0
 80029da:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	249c      	movs	r4, #156	@ 0x9c
 80029e4:	1939      	adds	r1, r7, r4
 80029e6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029e8:	0011      	movs	r1, r2
 80029ea:	18bb      	adds	r3, r7, r2
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4aa2      	ldr	r2, [pc, #648]	@ (8002c78 <HAL_UART_IRQHandler+0x2bc>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	2298      	movs	r2, #152	@ 0x98
 80029f4:	18bd      	adds	r5, r7, r2
 80029f6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80029f8:	18bb      	adds	r3, r7, r2
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d11a      	bne.n	8002a36 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a00:	187b      	adds	r3, r7, r1
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2220      	movs	r2, #32
 8002a06:	4013      	ands	r3, r2
 8002a08:	d015      	beq.n	8002a36 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a0a:	183b      	adds	r3, r7, r0
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2220      	movs	r2, #32
 8002a10:	4013      	ands	r3, r2
 8002a12:	d105      	bne.n	8002a20 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a14:	193b      	adds	r3, r7, r4
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	2380      	movs	r3, #128	@ 0x80
 8002a1a:	055b      	lsls	r3, r3, #21
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	d00a      	beq.n	8002a36 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d100      	bne.n	8002a2a <HAL_UART_IRQHandler+0x6e>
 8002a28:	e2dc      	b.n	8002fe4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	0010      	movs	r0, r2
 8002a32:	4798      	blx	r3
      }
      return;
 8002a34:	e2d6      	b.n	8002fe4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002a36:	2398      	movs	r3, #152	@ 0x98
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d100      	bne.n	8002a42 <HAL_UART_IRQHandler+0x86>
 8002a40:	e122      	b.n	8002c88 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002a42:	239c      	movs	r3, #156	@ 0x9c
 8002a44:	18fb      	adds	r3, r7, r3
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a8c      	ldr	r2, [pc, #560]	@ (8002c7c <HAL_UART_IRQHandler+0x2c0>)
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002a4e:	23a0      	movs	r3, #160	@ 0xa0
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a8a      	ldr	r2, [pc, #552]	@ (8002c80 <HAL_UART_IRQHandler+0x2c4>)
 8002a56:	4013      	ands	r3, r2
 8002a58:	d100      	bne.n	8002a5c <HAL_UART_IRQHandler+0xa0>
 8002a5a:	e115      	b.n	8002c88 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a5c:	23a4      	movs	r3, #164	@ 0xa4
 8002a5e:	18fb      	adds	r3, r7, r3
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2201      	movs	r2, #1
 8002a64:	4013      	ands	r3, r2
 8002a66:	d012      	beq.n	8002a8e <HAL_UART_IRQHandler+0xd2>
 8002a68:	23a0      	movs	r3, #160	@ 0xa0
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	2380      	movs	r3, #128	@ 0x80
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	4013      	ands	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2290      	movs	r2, #144	@ 0x90
 8002a82:	589b      	ldr	r3, [r3, r2]
 8002a84:	2201      	movs	r2, #1
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2190      	movs	r1, #144	@ 0x90
 8002a8c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a8e:	23a4      	movs	r3, #164	@ 0xa4
 8002a90:	18fb      	adds	r3, r7, r3
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2202      	movs	r2, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d011      	beq.n	8002abe <HAL_UART_IRQHandler+0x102>
 8002a9a:	239c      	movs	r3, #156	@ 0x9c
 8002a9c:	18fb      	adds	r3, r7, r3
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d00b      	beq.n	8002abe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2202      	movs	r2, #2
 8002aac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2290      	movs	r2, #144	@ 0x90
 8002ab2:	589b      	ldr	r3, [r3, r2]
 8002ab4:	2204      	movs	r2, #4
 8002ab6:	431a      	orrs	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2190      	movs	r1, #144	@ 0x90
 8002abc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002abe:	23a4      	movs	r3, #164	@ 0xa4
 8002ac0:	18fb      	adds	r3, r7, r3
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2204      	movs	r2, #4
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d011      	beq.n	8002aee <HAL_UART_IRQHandler+0x132>
 8002aca:	239c      	movs	r3, #156	@ 0x9c
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	d00b      	beq.n	8002aee <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2204      	movs	r2, #4
 8002adc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2290      	movs	r2, #144	@ 0x90
 8002ae2:	589b      	ldr	r3, [r3, r2]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2190      	movs	r1, #144	@ 0x90
 8002aec:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002aee:	23a4      	movs	r3, #164	@ 0xa4
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2208      	movs	r2, #8
 8002af6:	4013      	ands	r3, r2
 8002af8:	d017      	beq.n	8002b2a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002afa:	23a0      	movs	r3, #160	@ 0xa0
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2220      	movs	r2, #32
 8002b02:	4013      	ands	r3, r2
 8002b04:	d105      	bne.n	8002b12 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002b06:	239c      	movs	r3, #156	@ 0x9c
 8002b08:	18fb      	adds	r3, r7, r3
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5b      	ldr	r2, [pc, #364]	@ (8002c7c <HAL_UART_IRQHandler+0x2c0>)
 8002b0e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002b10:	d00b      	beq.n	8002b2a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2208      	movs	r2, #8
 8002b18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2290      	movs	r2, #144	@ 0x90
 8002b1e:	589b      	ldr	r3, [r3, r2]
 8002b20:	2208      	movs	r2, #8
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2190      	movs	r1, #144	@ 0x90
 8002b28:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b2a:	23a4      	movs	r3, #164	@ 0xa4
 8002b2c:	18fb      	adds	r3, r7, r3
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	2380      	movs	r3, #128	@ 0x80
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4013      	ands	r3, r2
 8002b36:	d013      	beq.n	8002b60 <HAL_UART_IRQHandler+0x1a4>
 8002b38:	23a0      	movs	r3, #160	@ 0xa0
 8002b3a:	18fb      	adds	r3, r7, r3
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	04db      	lsls	r3, r3, #19
 8002b42:	4013      	ands	r3, r2
 8002b44:	d00c      	beq.n	8002b60 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2280      	movs	r2, #128	@ 0x80
 8002b4c:	0112      	lsls	r2, r2, #4
 8002b4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2290      	movs	r2, #144	@ 0x90
 8002b54:	589b      	ldr	r3, [r3, r2]
 8002b56:	2220      	movs	r2, #32
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2190      	movs	r1, #144	@ 0x90
 8002b5e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2290      	movs	r2, #144	@ 0x90
 8002b64:	589b      	ldr	r3, [r3, r2]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d100      	bne.n	8002b6c <HAL_UART_IRQHandler+0x1b0>
 8002b6a:	e23d      	b.n	8002fe8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002b6c:	23a4      	movs	r3, #164	@ 0xa4
 8002b6e:	18fb      	adds	r3, r7, r3
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2220      	movs	r2, #32
 8002b74:	4013      	ands	r3, r2
 8002b76:	d015      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002b78:	23a0      	movs	r3, #160	@ 0xa0
 8002b7a:	18fb      	adds	r3, r7, r3
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	4013      	ands	r3, r2
 8002b82:	d106      	bne.n	8002b92 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002b84:	239c      	movs	r3, #156	@ 0x9c
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	2380      	movs	r3, #128	@ 0x80
 8002b8c:	055b      	lsls	r3, r3, #21
 8002b8e:	4013      	ands	r3, r2
 8002b90:	d008      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d004      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	0010      	movs	r0, r2
 8002ba2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2290      	movs	r2, #144	@ 0x90
 8002ba8:	589b      	ldr	r3, [r3, r2]
 8002baa:	2194      	movs	r1, #148	@ 0x94
 8002bac:	187a      	adds	r2, r7, r1
 8002bae:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2240      	movs	r2, #64	@ 0x40
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b40      	cmp	r3, #64	@ 0x40
 8002bbc:	d004      	beq.n	8002bc8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002bbe:	187b      	adds	r3, r7, r1
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2228      	movs	r2, #40	@ 0x28
 8002bc4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002bc6:	d04c      	beq.n	8002c62 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	0018      	movs	r0, r3
 8002bcc:	f000 fdaa 	bl	8003724 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2240      	movs	r2, #64	@ 0x40
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b40      	cmp	r3, #64	@ 0x40
 8002bdc:	d13c      	bne.n	8002c58 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bde:	f3ef 8310 	mrs	r3, PRIMASK
 8002be2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002be4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002be6:	2090      	movs	r0, #144	@ 0x90
 8002be8:	183a      	adds	r2, r7, r0
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	2301      	movs	r3, #1
 8002bee:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bf0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bf2:	f383 8810 	msr	PRIMASK, r3
}
 8002bf6:	46c0      	nop			@ (mov r8, r8)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689a      	ldr	r2, [r3, #8]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2140      	movs	r1, #64	@ 0x40
 8002c04:	438a      	bics	r2, r1
 8002c06:	609a      	str	r2, [r3, #8]
 8002c08:	183b      	adds	r3, r7, r0
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c0e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c10:	f383 8810 	msr	PRIMASK, r3
}
 8002c14:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2280      	movs	r2, #128	@ 0x80
 8002c1a:	589b      	ldr	r3, [r3, r2]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d016      	beq.n	8002c4e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2280      	movs	r2, #128	@ 0x80
 8002c24:	589b      	ldr	r3, [r3, r2]
 8002c26:	4a17      	ldr	r2, [pc, #92]	@ (8002c84 <HAL_UART_IRQHandler+0x2c8>)
 8002c28:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2280      	movs	r2, #128	@ 0x80
 8002c2e:	589b      	ldr	r3, [r3, r2]
 8002c30:	0018      	movs	r0, r3
 8002c32:	f7fe fc47 	bl	80014c4 <HAL_DMA_Abort_IT>
 8002c36:	1e03      	subs	r3, r0, #0
 8002c38:	d01c      	beq.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2280      	movs	r2, #128	@ 0x80
 8002c3e:	589b      	ldr	r3, [r3, r2]
 8002c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	2180      	movs	r1, #128	@ 0x80
 8002c46:	5852      	ldr	r2, [r2, r1]
 8002c48:	0010      	movs	r0, r2
 8002c4a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c4c:	e012      	b.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	0018      	movs	r0, r3
 8002c52:	f000 f9e1 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c56:	e00d      	b.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	f000 f9dc 	bl	8003018 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c60:	e008      	b.n	8002c74 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 f9d7 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2290      	movs	r2, #144	@ 0x90
 8002c6e:	2100      	movs	r1, #0
 8002c70:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002c72:	e1b9      	b.n	8002fe8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c74:	46c0      	nop			@ (mov r8, r8)
    return;
 8002c76:	e1b7      	b.n	8002fe8 <HAL_UART_IRQHandler+0x62c>
 8002c78:	0000080f 	.word	0x0000080f
 8002c7c:	10000001 	.word	0x10000001
 8002c80:	04000120 	.word	0x04000120
 8002c84:	080037f1 	.word	0x080037f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d000      	beq.n	8002c92 <HAL_UART_IRQHandler+0x2d6>
 8002c90:	e13e      	b.n	8002f10 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c92:	23a4      	movs	r3, #164	@ 0xa4
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d100      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x2e4>
 8002c9e:	e137      	b.n	8002f10 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002ca0:	23a0      	movs	r3, #160	@ 0xa0
 8002ca2:	18fb      	adds	r3, r7, r3
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2210      	movs	r2, #16
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d100      	bne.n	8002cae <HAL_UART_IRQHandler+0x2f2>
 8002cac:	e130      	b.n	8002f10 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2210      	movs	r2, #16
 8002cb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2240      	movs	r2, #64	@ 0x40
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b40      	cmp	r3, #64	@ 0x40
 8002cc2:	d000      	beq.n	8002cc6 <HAL_UART_IRQHandler+0x30a>
 8002cc4:	e0a4      	b.n	8002e10 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2280      	movs	r2, #128	@ 0x80
 8002cca:	589b      	ldr	r3, [r3, r2]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	217e      	movs	r1, #126	@ 0x7e
 8002cd2:	187b      	adds	r3, r7, r1
 8002cd4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002cd6:	187b      	adds	r3, r7, r1
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d100      	bne.n	8002ce0 <HAL_UART_IRQHandler+0x324>
 8002cde:	e185      	b.n	8002fec <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	225c      	movs	r2, #92	@ 0x5c
 8002ce4:	5a9b      	ldrh	r3, [r3, r2]
 8002ce6:	187a      	adds	r2, r7, r1
 8002ce8:	8812      	ldrh	r2, [r2, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d300      	bcc.n	8002cf0 <HAL_UART_IRQHandler+0x334>
 8002cee:	e17d      	b.n	8002fec <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	187a      	adds	r2, r7, r1
 8002cf4:	215e      	movs	r1, #94	@ 0x5e
 8002cf6:	8812      	ldrh	r2, [r2, #0]
 8002cf8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2280      	movs	r2, #128	@ 0x80
 8002cfe:	589b      	ldr	r3, [r3, r2]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2220      	movs	r2, #32
 8002d06:	4013      	ands	r3, r2
 8002d08:	d170      	bne.n	8002dec <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8002d0e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d12:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d14:	2301      	movs	r3, #1
 8002d16:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d1a:	f383 8810 	msr	PRIMASK, r3
}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	49b4      	ldr	r1, [pc, #720]	@ (8002ffc <HAL_UART_IRQHandler+0x640>)
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002d32:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d36:	f383 8810 	msr	PRIMASK, r3
}
 8002d3a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d44:	677b      	str	r3, [r7, #116]	@ 0x74
 8002d46:	2301      	movs	r3, #1
 8002d48:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d4c:	f383 8810 	msr	PRIMASK, r3
}
 8002d50:	46c0      	nop			@ (mov r8, r8)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	438a      	bics	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
 8002d62:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002d64:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d66:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d68:	f383 8810 	msr	PRIMASK, r3
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002d72:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d76:	673b      	str	r3, [r7, #112]	@ 0x70
 8002d78:	2301      	movs	r3, #1
 8002d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d7e:	f383 8810 	msr	PRIMASK, r3
}
 8002d82:	46c0      	nop			@ (mov r8, r8)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2140      	movs	r1, #64	@ 0x40
 8002d90:	438a      	bics	r2, r1
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d96:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d9a:	f383 8810 	msr	PRIMASK, r3
}
 8002d9e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	228c      	movs	r2, #140	@ 0x8c
 8002da4:	2120      	movs	r1, #32
 8002da6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dae:	f3ef 8310 	mrs	r3, PRIMASK
 8002db2:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002db8:	2301      	movs	r3, #1
 8002dba:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dbc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002dbe:	f383 8810 	msr	PRIMASK, r3
}
 8002dc2:	46c0      	nop			@ (mov r8, r8)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2110      	movs	r1, #16
 8002dd0:	438a      	bics	r2, r1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002dda:	f383 8810 	msr	PRIMASK, r3
}
 8002dde:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2280      	movs	r2, #128	@ 0x80
 8002de4:	589b      	ldr	r3, [r3, r2]
 8002de6:	0018      	movs	r0, r3
 8002de8:	f7fe fb0a 	bl	8001400 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2202      	movs	r2, #2
 8002df0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	225c      	movs	r2, #92	@ 0x5c
 8002df6:	5a9a      	ldrh	r2, [r3, r2]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	215e      	movs	r1, #94	@ 0x5e
 8002dfc:	5a5b      	ldrh	r3, [r3, r1]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	b29a      	uxth	r2, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	0011      	movs	r1, r2
 8002e08:	0018      	movs	r0, r3
 8002e0a:	f000 f90d 	bl	8003028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e0e:	e0ed      	b.n	8002fec <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	225c      	movs	r2, #92	@ 0x5c
 8002e14:	5a99      	ldrh	r1, [r3, r2]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	225e      	movs	r2, #94	@ 0x5e
 8002e1a:	5a9b      	ldrh	r3, [r3, r2]
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	208e      	movs	r0, #142	@ 0x8e
 8002e20:	183b      	adds	r3, r7, r0
 8002e22:	1a8a      	subs	r2, r1, r2
 8002e24:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	225e      	movs	r2, #94	@ 0x5e
 8002e2a:	5a9b      	ldrh	r3, [r3, r2]
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d100      	bne.n	8002e34 <HAL_UART_IRQHandler+0x478>
 8002e32:	e0dd      	b.n	8002ff0 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8002e34:	183b      	adds	r3, r7, r0
 8002e36:	881b      	ldrh	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d100      	bne.n	8002e3e <HAL_UART_IRQHandler+0x482>
 8002e3c:	e0d8      	b.n	8002ff0 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e44:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e46:	2488      	movs	r4, #136	@ 0x88
 8002e48:	193a      	adds	r2, r7, r4
 8002e4a:	6013      	str	r3, [r2, #0]
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	f383 8810 	msr	PRIMASK, r3
}
 8002e56:	46c0      	nop			@ (mov r8, r8)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4967      	ldr	r1, [pc, #412]	@ (8003000 <HAL_UART_IRQHandler+0x644>)
 8002e64:	400a      	ands	r2, r1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f383 8810 	msr	PRIMASK, r3
}
 8002e74:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e76:	f3ef 8310 	mrs	r3, PRIMASK
 8002e7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e7c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002e7e:	2484      	movs	r4, #132	@ 0x84
 8002e80:	193a      	adds	r2, r7, r4
 8002e82:	6013      	str	r3, [r2, #0]
 8002e84:	2301      	movs	r3, #1
 8002e86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e88:	69fb      	ldr	r3, [r7, #28]
 8002e8a:	f383 8810 	msr	PRIMASK, r3
}
 8002e8e:	46c0      	nop			@ (mov r8, r8)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	495a      	ldr	r1, [pc, #360]	@ (8003004 <HAL_UART_IRQHandler+0x648>)
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	193b      	adds	r3, r7, r4
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f383 8810 	msr	PRIMASK, r3
}
 8002eac:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	228c      	movs	r2, #140	@ 0x8c
 8002eb2:	2120      	movs	r1, #32
 8002eb4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eca:	2480      	movs	r4, #128	@ 0x80
 8002ecc:	193a      	adds	r2, r7, r4
 8002ece:	6013      	str	r3, [r2, #0]
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed6:	f383 8810 	msr	PRIMASK, r3
}
 8002eda:	46c0      	nop			@ (mov r8, r8)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2110      	movs	r1, #16
 8002ee8:	438a      	bics	r2, r1
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	193b      	adds	r3, r7, r4
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	f383 8810 	msr	PRIMASK, r3
}
 8002ef8:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f00:	183b      	adds	r3, r7, r0
 8002f02:	881a      	ldrh	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	0011      	movs	r1, r2
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f000 f88d 	bl	8003028 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f0e:	e06f      	b.n	8002ff0 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f10:	23a4      	movs	r3, #164	@ 0xa4
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	2380      	movs	r3, #128	@ 0x80
 8002f18:	035b      	lsls	r3, r3, #13
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d010      	beq.n	8002f40 <HAL_UART_IRQHandler+0x584>
 8002f1e:	239c      	movs	r3, #156	@ 0x9c
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	@ 0x80
 8002f26:	03db      	lsls	r3, r3, #15
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d009      	beq.n	8002f40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2280      	movs	r2, #128	@ 0x80
 8002f32:	0352      	lsls	r2, r2, #13
 8002f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	0018      	movs	r0, r3
 8002f3a:	f000 fe45 	bl	8003bc8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f3e:	e05a      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002f40:	23a4      	movs	r3, #164	@ 0xa4
 8002f42:	18fb      	adds	r3, r7, r3
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2280      	movs	r2, #128	@ 0x80
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d016      	beq.n	8002f7a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002f4c:	23a0      	movs	r3, #160	@ 0xa0
 8002f4e:	18fb      	adds	r3, r7, r3
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2280      	movs	r2, #128	@ 0x80
 8002f54:	4013      	ands	r3, r2
 8002f56:	d106      	bne.n	8002f66 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002f58:	239c      	movs	r3, #156	@ 0x9c
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	2380      	movs	r3, #128	@ 0x80
 8002f60:	041b      	lsls	r3, r3, #16
 8002f62:	4013      	ands	r3, r2
 8002f64:	d009      	beq.n	8002f7a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d042      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	0010      	movs	r0, r2
 8002f76:	4798      	blx	r3
    }
    return;
 8002f78:	e03c      	b.n	8002ff4 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f7a:	23a4      	movs	r3, #164	@ 0xa4
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2240      	movs	r2, #64	@ 0x40
 8002f82:	4013      	ands	r3, r2
 8002f84:	d00a      	beq.n	8002f9c <HAL_UART_IRQHandler+0x5e0>
 8002f86:	23a0      	movs	r3, #160	@ 0xa0
 8002f88:	18fb      	adds	r3, r7, r3
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2240      	movs	r2, #64	@ 0x40
 8002f8e:	4013      	ands	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	0018      	movs	r0, r3
 8002f96:	f000 fdeb 	bl	8003b70 <UART_EndTransmit_IT>
    return;
 8002f9a:	e02c      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f9c:	23a4      	movs	r3, #164	@ 0xa4
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	2380      	movs	r3, #128	@ 0x80
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	d00b      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x606>
 8002faa:	23a0      	movs	r3, #160	@ 0xa0
 8002fac:	18fb      	adds	r3, r7, r3
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2380      	movs	r3, #128	@ 0x80
 8002fb2:	05db      	lsls	r3, r3, #23
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d004      	beq.n	8002fc2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	0018      	movs	r0, r3
 8002fbc:	f000 fe14 	bl	8003be8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fc0:	e019      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002fc2:	23a4      	movs	r3, #164	@ 0xa4
 8002fc4:	18fb      	adds	r3, r7, r3
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	045b      	lsls	r3, r3, #17
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d012      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
 8002fd0:	23a0      	movs	r3, #160	@ 0xa0
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	da0d      	bge.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 fdfb 	bl	8003bd8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fe2:	e008      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002fe4:	46c0      	nop			@ (mov r8, r8)
 8002fe6:	e006      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	e004      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002fec:	46c0      	nop			@ (mov r8, r8)
 8002fee:	e002      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
      return;
 8002ff0:	46c0      	nop			@ (mov r8, r8)
 8002ff2:	e000      	b.n	8002ff6 <HAL_UART_IRQHandler+0x63a>
    return;
 8002ff4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	b02a      	add	sp, #168	@ 0xa8
 8002ffa:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffc:	fffffeff 	.word	0xfffffeff
 8003000:	fffffedf 	.word	0xfffffedf
 8003004:	effffffe 	.word	0xeffffffe

08003008 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b082      	sub	sp, #8
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003010:	46c0      	nop			@ (mov r8, r8)
 8003012:	46bd      	mov	sp, r7
 8003014:	b002      	add	sp, #8
 8003016:	bd80      	pop	{r7, pc}

08003018 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b082      	sub	sp, #8
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	000a      	movs	r2, r1
 8003032:	1cbb      	adds	r3, r7, #2
 8003034:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003036:	46c0      	nop			@ (mov r8, r8)
 8003038:	46bd      	mov	sp, r7
 800303a:	b002      	add	sp, #8
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003048:	231a      	movs	r3, #26
 800304a:	18fb      	adds	r3, r7, r3
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	431a      	orrs	r2, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69db      	ldr	r3, [r3, #28]
 8003064:	4313      	orrs	r3, r2
 8003066:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4abc      	ldr	r2, [pc, #752]	@ (8003360 <UART_SetConfig+0x320>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	69fa      	ldr	r2, [r7, #28]
 800307a:	430a      	orrs	r2, r1
 800307c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	4ab7      	ldr	r2, [pc, #732]	@ (8003364 <UART_SetConfig+0x324>)
 8003086:	4013      	ands	r3, r2
 8003088:	0019      	movs	r1, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68da      	ldr	r2, [r3, #12]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	69fa      	ldr	r2, [r7, #28]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	4aae      	ldr	r2, [pc, #696]	@ (8003368 <UART_SetConfig+0x328>)
 80030ae:	4013      	ands	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	69fa      	ldr	r2, [r7, #28]
 80030b8:	430a      	orrs	r2, r1
 80030ba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	220f      	movs	r2, #15
 80030c4:	4393      	bics	r3, r2
 80030c6:	0019      	movs	r1, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4aa4      	ldr	r2, [pc, #656]	@ (800336c <UART_SetConfig+0x32c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d127      	bne.n	800312e <UART_SetConfig+0xee>
 80030de:	4ba4      	ldr	r3, [pc, #656]	@ (8003370 <UART_SetConfig+0x330>)
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	2203      	movs	r2, #3
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b03      	cmp	r3, #3
 80030e8:	d017      	beq.n	800311a <UART_SetConfig+0xda>
 80030ea:	d81b      	bhi.n	8003124 <UART_SetConfig+0xe4>
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d00a      	beq.n	8003106 <UART_SetConfig+0xc6>
 80030f0:	d818      	bhi.n	8003124 <UART_SetConfig+0xe4>
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d002      	beq.n	80030fc <UART_SetConfig+0xbc>
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d00a      	beq.n	8003110 <UART_SetConfig+0xd0>
 80030fa:	e013      	b.n	8003124 <UART_SetConfig+0xe4>
 80030fc:	231b      	movs	r3, #27
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	2200      	movs	r2, #0
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e058      	b.n	80031b8 <UART_SetConfig+0x178>
 8003106:	231b      	movs	r3, #27
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	2202      	movs	r2, #2
 800310c:	701a      	strb	r2, [r3, #0]
 800310e:	e053      	b.n	80031b8 <UART_SetConfig+0x178>
 8003110:	231b      	movs	r3, #27
 8003112:	18fb      	adds	r3, r7, r3
 8003114:	2204      	movs	r2, #4
 8003116:	701a      	strb	r2, [r3, #0]
 8003118:	e04e      	b.n	80031b8 <UART_SetConfig+0x178>
 800311a:	231b      	movs	r3, #27
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	2208      	movs	r2, #8
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	e049      	b.n	80031b8 <UART_SetConfig+0x178>
 8003124:	231b      	movs	r3, #27
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	2210      	movs	r2, #16
 800312a:	701a      	strb	r2, [r3, #0]
 800312c:	e044      	b.n	80031b8 <UART_SetConfig+0x178>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a90      	ldr	r2, [pc, #576]	@ (8003374 <UART_SetConfig+0x334>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d127      	bne.n	8003188 <UART_SetConfig+0x148>
 8003138:	4b8d      	ldr	r3, [pc, #564]	@ (8003370 <UART_SetConfig+0x330>)
 800313a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313c:	220c      	movs	r2, #12
 800313e:	4013      	ands	r3, r2
 8003140:	2b0c      	cmp	r3, #12
 8003142:	d017      	beq.n	8003174 <UART_SetConfig+0x134>
 8003144:	d81b      	bhi.n	800317e <UART_SetConfig+0x13e>
 8003146:	2b08      	cmp	r3, #8
 8003148:	d00a      	beq.n	8003160 <UART_SetConfig+0x120>
 800314a:	d818      	bhi.n	800317e <UART_SetConfig+0x13e>
 800314c:	2b00      	cmp	r3, #0
 800314e:	d002      	beq.n	8003156 <UART_SetConfig+0x116>
 8003150:	2b04      	cmp	r3, #4
 8003152:	d00a      	beq.n	800316a <UART_SetConfig+0x12a>
 8003154:	e013      	b.n	800317e <UART_SetConfig+0x13e>
 8003156:	231b      	movs	r3, #27
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	2200      	movs	r2, #0
 800315c:	701a      	strb	r2, [r3, #0]
 800315e:	e02b      	b.n	80031b8 <UART_SetConfig+0x178>
 8003160:	231b      	movs	r3, #27
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]
 8003168:	e026      	b.n	80031b8 <UART_SetConfig+0x178>
 800316a:	231b      	movs	r3, #27
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2204      	movs	r2, #4
 8003170:	701a      	strb	r2, [r3, #0]
 8003172:	e021      	b.n	80031b8 <UART_SetConfig+0x178>
 8003174:	231b      	movs	r3, #27
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	2208      	movs	r2, #8
 800317a:	701a      	strb	r2, [r3, #0]
 800317c:	e01c      	b.n	80031b8 <UART_SetConfig+0x178>
 800317e:	231b      	movs	r3, #27
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	2210      	movs	r2, #16
 8003184:	701a      	strb	r2, [r3, #0]
 8003186:	e017      	b.n	80031b8 <UART_SetConfig+0x178>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a7a      	ldr	r2, [pc, #488]	@ (8003378 <UART_SetConfig+0x338>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d104      	bne.n	800319c <UART_SetConfig+0x15c>
 8003192:	231b      	movs	r3, #27
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	2200      	movs	r2, #0
 8003198:	701a      	strb	r2, [r3, #0]
 800319a:	e00d      	b.n	80031b8 <UART_SetConfig+0x178>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a76      	ldr	r2, [pc, #472]	@ (800337c <UART_SetConfig+0x33c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d104      	bne.n	80031b0 <UART_SetConfig+0x170>
 80031a6:	231b      	movs	r3, #27
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
 80031ae:	e003      	b.n	80031b8 <UART_SetConfig+0x178>
 80031b0:	231b      	movs	r3, #27
 80031b2:	18fb      	adds	r3, r7, r3
 80031b4:	2210      	movs	r2, #16
 80031b6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	69da      	ldr	r2, [r3, #28]
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	021b      	lsls	r3, r3, #8
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d000      	beq.n	80031c6 <UART_SetConfig+0x186>
 80031c4:	e065      	b.n	8003292 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80031c6:	231b      	movs	r3, #27
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b08      	cmp	r3, #8
 80031ce:	d015      	beq.n	80031fc <UART_SetConfig+0x1bc>
 80031d0:	dc18      	bgt.n	8003204 <UART_SetConfig+0x1c4>
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d00d      	beq.n	80031f2 <UART_SetConfig+0x1b2>
 80031d6:	dc15      	bgt.n	8003204 <UART_SetConfig+0x1c4>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <UART_SetConfig+0x1a2>
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d005      	beq.n	80031ec <UART_SetConfig+0x1ac>
 80031e0:	e010      	b.n	8003204 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e2:	f7ff f9f1 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80031e6:	0003      	movs	r3, r0
 80031e8:	617b      	str	r3, [r7, #20]
        break;
 80031ea:	e012      	b.n	8003212 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031ec:	4b64      	ldr	r3, [pc, #400]	@ (8003380 <UART_SetConfig+0x340>)
 80031ee:	617b      	str	r3, [r7, #20]
        break;
 80031f0:	e00f      	b.n	8003212 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031f2:	f7ff f95d 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 80031f6:	0003      	movs	r3, r0
 80031f8:	617b      	str	r3, [r7, #20]
        break;
 80031fa:	e00a      	b.n	8003212 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031fc:	2380      	movs	r3, #128	@ 0x80
 80031fe:	021b      	lsls	r3, r3, #8
 8003200:	617b      	str	r3, [r7, #20]
        break;
 8003202:	e006      	b.n	8003212 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003208:	231a      	movs	r3, #26
 800320a:	18fb      	adds	r3, r7, r3
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
        break;
 8003210:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d100      	bne.n	800321a <UART_SetConfig+0x1da>
 8003218:	e08d      	b.n	8003336 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800321e:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <UART_SetConfig+0x344>)
 8003220:	0052      	lsls	r2, r2, #1
 8003222:	5ad3      	ldrh	r3, [r2, r3]
 8003224:	0019      	movs	r1, r3
 8003226:	6978      	ldr	r0, [r7, #20]
 8003228:	f7fc ff7c 	bl	8000124 <__udivsi3>
 800322c:	0003      	movs	r3, r0
 800322e:	005a      	lsls	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	085b      	lsrs	r3, r3, #1
 8003236:	18d2      	adds	r2, r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	0019      	movs	r1, r3
 800323e:	0010      	movs	r0, r2
 8003240:	f7fc ff70 	bl	8000124 <__udivsi3>
 8003244:	0003      	movs	r3, r0
 8003246:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	2b0f      	cmp	r3, #15
 800324c:	d91c      	bls.n	8003288 <UART_SetConfig+0x248>
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	2380      	movs	r3, #128	@ 0x80
 8003252:	025b      	lsls	r3, r3, #9
 8003254:	429a      	cmp	r2, r3
 8003256:	d217      	bcs.n	8003288 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	b29a      	uxth	r2, r3
 800325c:	200e      	movs	r0, #14
 800325e:	183b      	adds	r3, r7, r0
 8003260:	210f      	movs	r1, #15
 8003262:	438a      	bics	r2, r1
 8003264:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	085b      	lsrs	r3, r3, #1
 800326a:	b29b      	uxth	r3, r3
 800326c:	2207      	movs	r2, #7
 800326e:	4013      	ands	r3, r2
 8003270:	b299      	uxth	r1, r3
 8003272:	183b      	adds	r3, r7, r0
 8003274:	183a      	adds	r2, r7, r0
 8003276:	8812      	ldrh	r2, [r2, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	183a      	adds	r2, r7, r0
 8003282:	8812      	ldrh	r2, [r2, #0]
 8003284:	60da      	str	r2, [r3, #12]
 8003286:	e056      	b.n	8003336 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003288:	231a      	movs	r3, #26
 800328a:	18fb      	adds	r3, r7, r3
 800328c:	2201      	movs	r2, #1
 800328e:	701a      	strb	r2, [r3, #0]
 8003290:	e051      	b.n	8003336 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003292:	231b      	movs	r3, #27
 8003294:	18fb      	adds	r3, r7, r3
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d015      	beq.n	80032c8 <UART_SetConfig+0x288>
 800329c:	dc18      	bgt.n	80032d0 <UART_SetConfig+0x290>
 800329e:	2b04      	cmp	r3, #4
 80032a0:	d00d      	beq.n	80032be <UART_SetConfig+0x27e>
 80032a2:	dc15      	bgt.n	80032d0 <UART_SetConfig+0x290>
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d002      	beq.n	80032ae <UART_SetConfig+0x26e>
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d005      	beq.n	80032b8 <UART_SetConfig+0x278>
 80032ac:	e010      	b.n	80032d0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ae:	f7ff f98b 	bl	80025c8 <HAL_RCC_GetPCLK1Freq>
 80032b2:	0003      	movs	r3, r0
 80032b4:	617b      	str	r3, [r7, #20]
        break;
 80032b6:	e012      	b.n	80032de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032b8:	4b31      	ldr	r3, [pc, #196]	@ (8003380 <UART_SetConfig+0x340>)
 80032ba:	617b      	str	r3, [r7, #20]
        break;
 80032bc:	e00f      	b.n	80032de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032be:	f7ff f8f7 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 80032c2:	0003      	movs	r3, r0
 80032c4:	617b      	str	r3, [r7, #20]
        break;
 80032c6:	e00a      	b.n	80032de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032c8:	2380      	movs	r3, #128	@ 0x80
 80032ca:	021b      	lsls	r3, r3, #8
 80032cc:	617b      	str	r3, [r7, #20]
        break;
 80032ce:	e006      	b.n	80032de <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80032d0:	2300      	movs	r3, #0
 80032d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80032d4:	231a      	movs	r3, #26
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2201      	movs	r2, #1
 80032da:	701a      	strb	r2, [r3, #0]
        break;
 80032dc:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d028      	beq.n	8003336 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032e8:	4b26      	ldr	r3, [pc, #152]	@ (8003384 <UART_SetConfig+0x344>)
 80032ea:	0052      	lsls	r2, r2, #1
 80032ec:	5ad3      	ldrh	r3, [r2, r3]
 80032ee:	0019      	movs	r1, r3
 80032f0:	6978      	ldr	r0, [r7, #20]
 80032f2:	f7fc ff17 	bl	8000124 <__udivsi3>
 80032f6:	0003      	movs	r3, r0
 80032f8:	001a      	movs	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	18d2      	adds	r2, r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	0019      	movs	r1, r3
 8003308:	0010      	movs	r0, r2
 800330a:	f7fc ff0b 	bl	8000124 <__udivsi3>
 800330e:	0003      	movs	r3, r0
 8003310:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d90a      	bls.n	800332e <UART_SetConfig+0x2ee>
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	2380      	movs	r3, #128	@ 0x80
 800331c:	025b      	lsls	r3, r3, #9
 800331e:	429a      	cmp	r2, r3
 8003320:	d205      	bcs.n	800332e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	b29a      	uxth	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	60da      	str	r2, [r3, #12]
 800332c:	e003      	b.n	8003336 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800332e:	231a      	movs	r3, #26
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	2201      	movs	r2, #1
 8003334:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	226a      	movs	r2, #106	@ 0x6a
 800333a:	2101      	movs	r1, #1
 800333c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2268      	movs	r2, #104	@ 0x68
 8003342:	2101      	movs	r1, #1
 8003344:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003352:	231a      	movs	r3, #26
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	781b      	ldrb	r3, [r3, #0]
}
 8003358:	0018      	movs	r0, r3
 800335a:	46bd      	mov	sp, r7
 800335c:	b008      	add	sp, #32
 800335e:	bd80      	pop	{r7, pc}
 8003360:	cfff69f3 	.word	0xcfff69f3
 8003364:	ffffcfff 	.word	0xffffcfff
 8003368:	11fff4ff 	.word	0x11fff4ff
 800336c:	40013800 	.word	0x40013800
 8003370:	40021000 	.word	0x40021000
 8003374:	40004400 	.word	0x40004400
 8003378:	40004800 	.word	0x40004800
 800337c:	40004c00 	.word	0x40004c00
 8003380:	00f42400 	.word	0x00f42400
 8003384:	08005a9c 	.word	0x08005a9c

08003388 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	2208      	movs	r2, #8
 8003396:	4013      	ands	r3, r2
 8003398:	d00b      	beq.n	80033b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a4a      	ldr	r2, [pc, #296]	@ (80034cc <UART_AdvFeatureConfig+0x144>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	2201      	movs	r2, #1
 80033b8:	4013      	ands	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4a43      	ldr	r2, [pc, #268]	@ (80034d0 <UART_AdvFeatureConfig+0x148>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d8:	2202      	movs	r2, #2
 80033da:	4013      	ands	r3, r2
 80033dc:	d00b      	beq.n	80033f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	4a3b      	ldr	r2, [pc, #236]	@ (80034d4 <UART_AdvFeatureConfig+0x14c>)
 80033e6:	4013      	ands	r3, r2
 80033e8:	0019      	movs	r1, r3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033fa:	2204      	movs	r2, #4
 80033fc:	4013      	ands	r3, r2
 80033fe:	d00b      	beq.n	8003418 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	4a34      	ldr	r2, [pc, #208]	@ (80034d8 <UART_AdvFeatureConfig+0x150>)
 8003408:	4013      	ands	r3, r2
 800340a:	0019      	movs	r1, r3
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800341c:	2210      	movs	r2, #16
 800341e:	4013      	ands	r3, r2
 8003420:	d00b      	beq.n	800343a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	4a2c      	ldr	r2, [pc, #176]	@ (80034dc <UART_AdvFeatureConfig+0x154>)
 800342a:	4013      	ands	r3, r2
 800342c:	0019      	movs	r1, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	430a      	orrs	r2, r1
 8003438:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800343e:	2220      	movs	r2, #32
 8003440:	4013      	ands	r3, r2
 8003442:	d00b      	beq.n	800345c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	4a25      	ldr	r2, [pc, #148]	@ (80034e0 <UART_AdvFeatureConfig+0x158>)
 800344c:	4013      	ands	r3, r2
 800344e:	0019      	movs	r1, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	430a      	orrs	r2, r1
 800345a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003460:	2240      	movs	r2, #64	@ 0x40
 8003462:	4013      	ands	r3, r2
 8003464:	d01d      	beq.n	80034a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4a1d      	ldr	r2, [pc, #116]	@ (80034e4 <UART_AdvFeatureConfig+0x15c>)
 800346e:	4013      	ands	r3, r2
 8003470:	0019      	movs	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	430a      	orrs	r2, r1
 800347c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003482:	2380      	movs	r3, #128	@ 0x80
 8003484:	035b      	lsls	r3, r3, #13
 8003486:	429a      	cmp	r2, r3
 8003488:	d10b      	bne.n	80034a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	4a15      	ldr	r2, [pc, #84]	@ (80034e8 <UART_AdvFeatureConfig+0x160>)
 8003492:	4013      	ands	r3, r2
 8003494:	0019      	movs	r1, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a6:	2280      	movs	r2, #128	@ 0x80
 80034a8:	4013      	ands	r3, r2
 80034aa:	d00b      	beq.n	80034c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	4a0e      	ldr	r2, [pc, #56]	@ (80034ec <UART_AdvFeatureConfig+0x164>)
 80034b4:	4013      	ands	r3, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	605a      	str	r2, [r3, #4]
  }
}
 80034c4:	46c0      	nop			@ (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	ffff7fff 	.word	0xffff7fff
 80034d0:	fffdffff 	.word	0xfffdffff
 80034d4:	fffeffff 	.word	0xfffeffff
 80034d8:	fffbffff 	.word	0xfffbffff
 80034dc:	ffffefff 	.word	0xffffefff
 80034e0:	ffffdfff 	.word	0xffffdfff
 80034e4:	ffefffff 	.word	0xffefffff
 80034e8:	ff9fffff 	.word	0xff9fffff
 80034ec:	fff7ffff 	.word	0xfff7ffff

080034f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b092      	sub	sp, #72	@ 0x48
 80034f4:	af02      	add	r7, sp, #8
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2290      	movs	r2, #144	@ 0x90
 80034fc:	2100      	movs	r1, #0
 80034fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003500:	f7fd fe80 	bl	8001204 <HAL_GetTick>
 8003504:	0003      	movs	r3, r0
 8003506:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2208      	movs	r2, #8
 8003510:	4013      	ands	r3, r2
 8003512:	2b08      	cmp	r3, #8
 8003514:	d12d      	bne.n	8003572 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003518:	2280      	movs	r2, #128	@ 0x80
 800351a:	0391      	lsls	r1, r2, #14
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	4a47      	ldr	r2, [pc, #284]	@ (800363c <UART_CheckIdleState+0x14c>)
 8003520:	9200      	str	r2, [sp, #0]
 8003522:	2200      	movs	r2, #0
 8003524:	f000 f88e 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8003528:	1e03      	subs	r3, r0, #0
 800352a:	d022      	beq.n	8003572 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800352c:	f3ef 8310 	mrs	r3, PRIMASK
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003534:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003536:	2301      	movs	r3, #1
 8003538:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800353c:	f383 8810 	msr	PRIMASK, r3
}
 8003540:	46c0      	nop			@ (mov r8, r8)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2180      	movs	r1, #128	@ 0x80
 800354e:	438a      	bics	r2, r1
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003554:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003556:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003558:	f383 8810 	msr	PRIMASK, r3
}
 800355c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2288      	movs	r2, #136	@ 0x88
 8003562:	2120      	movs	r1, #32
 8003564:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2284      	movs	r2, #132	@ 0x84
 800356a:	2100      	movs	r1, #0
 800356c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e060      	b.n	8003634 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2204      	movs	r2, #4
 800357a:	4013      	ands	r3, r2
 800357c:	2b04      	cmp	r3, #4
 800357e:	d146      	bne.n	800360e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003580:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003582:	2280      	movs	r2, #128	@ 0x80
 8003584:	03d1      	lsls	r1, r2, #15
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4a2c      	ldr	r2, [pc, #176]	@ (800363c <UART_CheckIdleState+0x14c>)
 800358a:	9200      	str	r2, [sp, #0]
 800358c:	2200      	movs	r2, #0
 800358e:	f000 f859 	bl	8003644 <UART_WaitOnFlagUntilTimeout>
 8003592:	1e03      	subs	r3, r0, #0
 8003594:	d03b      	beq.n	800360e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003596:	f3ef 8310 	mrs	r3, PRIMASK
 800359a:	60fb      	str	r3, [r7, #12]
  return(result);
 800359c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800359e:	637b      	str	r3, [r7, #52]	@ 0x34
 80035a0:	2301      	movs	r3, #1
 80035a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4922      	ldr	r1, [pc, #136]	@ (8003640 <UART_CheckIdleState+0x150>)
 80035b8:	400a      	ands	r2, r1
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	f383 8810 	msr	PRIMASK, r3
}
 80035c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c8:	f3ef 8310 	mrs	r3, PRIMASK
 80035cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80035ce:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d2:	2301      	movs	r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	f383 8810 	msr	PRIMASK, r3
}
 80035dc:	46c0      	nop			@ (mov r8, r8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	689a      	ldr	r2, [r3, #8]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	438a      	bics	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f2:	6a3b      	ldr	r3, [r7, #32]
 80035f4:	f383 8810 	msr	PRIMASK, r3
}
 80035f8:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	228c      	movs	r2, #140	@ 0x8c
 80035fe:	2120      	movs	r1, #32
 8003600:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2284      	movs	r2, #132	@ 0x84
 8003606:	2100      	movs	r1, #0
 8003608:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800360a:	2303      	movs	r3, #3
 800360c:	e012      	b.n	8003634 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2288      	movs	r2, #136	@ 0x88
 8003612:	2120      	movs	r1, #32
 8003614:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	228c      	movs	r2, #140	@ 0x8c
 800361a:	2120      	movs	r1, #32
 800361c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2284      	movs	r2, #132	@ 0x84
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003632:	2300      	movs	r3, #0
}
 8003634:	0018      	movs	r0, r3
 8003636:	46bd      	mov	sp, r7
 8003638:	b010      	add	sp, #64	@ 0x40
 800363a:	bd80      	pop	{r7, pc}
 800363c:	01ffffff 	.word	0x01ffffff
 8003640:	fffffedf 	.word	0xfffffedf

08003644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	1dfb      	adds	r3, r7, #7
 8003652:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003654:	e051      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3301      	adds	r3, #1
 800365a:	d04e      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365c:	f7fd fdd2 	bl	8001204 <HAL_GetTick>
 8003660:	0002      	movs	r2, r0
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <UART_WaitOnFlagUntilTimeout+0x2e>
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003672:	2303      	movs	r3, #3
 8003674:	e051      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2204      	movs	r2, #4
 800367e:	4013      	ands	r3, r2
 8003680:	d03b      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b80      	cmp	r3, #128	@ 0x80
 8003686:	d038      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb6>
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	2b40      	cmp	r3, #64	@ 0x40
 800368c:	d035      	beq.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	69db      	ldr	r3, [r3, #28]
 8003694:	2208      	movs	r2, #8
 8003696:	4013      	ands	r3, r2
 8003698:	2b08      	cmp	r3, #8
 800369a:	d111      	bne.n	80036c0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2208      	movs	r2, #8
 80036a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f000 f83c 	bl	8003724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2290      	movs	r2, #144	@ 0x90
 80036b0:	2108      	movs	r1, #8
 80036b2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2284      	movs	r2, #132	@ 0x84
 80036b8:	2100      	movs	r1, #0
 80036ba:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e02c      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69da      	ldr	r2, [r3, #28]
 80036c6:	2380      	movs	r3, #128	@ 0x80
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	401a      	ands	r2, r3
 80036cc:	2380      	movs	r3, #128	@ 0x80
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d112      	bne.n	80036fa <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2280      	movs	r2, #128	@ 0x80
 80036da:	0112      	lsls	r2, r2, #4
 80036dc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0018      	movs	r0, r3
 80036e2:	f000 f81f 	bl	8003724 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2290      	movs	r2, #144	@ 0x90
 80036ea:	2120      	movs	r1, #32
 80036ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2284      	movs	r2, #132	@ 0x84
 80036f2:	2100      	movs	r1, #0
 80036f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e00f      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69db      	ldr	r3, [r3, #28]
 8003700:	68ba      	ldr	r2, [r7, #8]
 8003702:	4013      	ands	r3, r2
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	425a      	negs	r2, r3
 800370a:	4153      	adcs	r3, r2
 800370c:	b2db      	uxtb	r3, r3
 800370e:	001a      	movs	r2, r3
 8003710:	1dfb      	adds	r3, r7, #7
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d09e      	beq.n	8003656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b08e      	sub	sp, #56	@ 0x38
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800372c:	f3ef 8310 	mrs	r3, PRIMASK
 8003730:	617b      	str	r3, [r7, #20]
  return(result);
 8003732:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003734:	637b      	str	r3, [r7, #52]	@ 0x34
 8003736:	2301      	movs	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f383 8810 	msr	PRIMASK, r3
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4926      	ldr	r1, [pc, #152]	@ (80037e8 <UART_EndRxTransfer+0xc4>)
 800374e:	400a      	ands	r2, r1
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	f383 8810 	msr	PRIMASK, r3
}
 800375c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800375e:	f3ef 8310 	mrs	r3, PRIMASK
 8003762:	623b      	str	r3, [r7, #32]
  return(result);
 8003764:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003766:	633b      	str	r3, [r7, #48]	@ 0x30
 8003768:	2301      	movs	r3, #1
 800376a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376e:	f383 8810 	msr	PRIMASK, r3
}
 8003772:	46c0      	nop			@ (mov r8, r8)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	491b      	ldr	r1, [pc, #108]	@ (80037ec <UART_EndRxTransfer+0xc8>)
 8003780:	400a      	ands	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800378a:	f383 8810 	msr	PRIMASK, r3
}
 800378e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003794:	2b01      	cmp	r3, #1
 8003796:	d118      	bne.n	80037ca <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003798:	f3ef 8310 	mrs	r3, PRIMASK
 800379c:	60bb      	str	r3, [r7, #8]
  return(result);
 800379e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80037a2:	2301      	movs	r3, #1
 80037a4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f383 8810 	msr	PRIMASK, r3
}
 80037ac:	46c0      	nop			@ (mov r8, r8)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2110      	movs	r1, #16
 80037ba:	438a      	bics	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f383 8810 	msr	PRIMASK, r3
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	228c      	movs	r2, #140	@ 0x8c
 80037ce:	2120      	movs	r1, #32
 80037d0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80037de:	46c0      	nop			@ (mov r8, r8)
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b00e      	add	sp, #56	@ 0x38
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	fffffedf 	.word	0xfffffedf
 80037ec:	effffffe 	.word	0xeffffffe

080037f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	225e      	movs	r2, #94	@ 0x5e
 8003802:	2100      	movs	r1, #0
 8003804:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2256      	movs	r2, #86	@ 0x56
 800380a:	2100      	movs	r1, #0
 800380c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	0018      	movs	r0, r3
 8003812:	f7ff fc01 	bl	8003018 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003816:	46c0      	nop			@ (mov r8, r8)
 8003818:	46bd      	mov	sp, r7
 800381a:	b004      	add	sp, #16
 800381c:	bd80      	pop	{r7, pc}

0800381e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b08a      	sub	sp, #40	@ 0x28
 8003822:	af00      	add	r7, sp, #0
 8003824:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2288      	movs	r2, #136	@ 0x88
 800382a:	589b      	ldr	r3, [r3, r2]
 800382c:	2b21      	cmp	r3, #33	@ 0x21
 800382e:	d14c      	bne.n	80038ca <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2256      	movs	r2, #86	@ 0x56
 8003834:	5a9b      	ldrh	r3, [r3, r2]
 8003836:	b29b      	uxth	r3, r3
 8003838:	2b00      	cmp	r3, #0
 800383a:	d132      	bne.n	80038a2 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800383c:	f3ef 8310 	mrs	r3, PRIMASK
 8003840:	60bb      	str	r3, [r7, #8]
  return(result);
 8003842:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
 8003846:	2301      	movs	r3, #1
 8003848:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f383 8810 	msr	PRIMASK, r3
}
 8003850:	46c0      	nop			@ (mov r8, r8)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2180      	movs	r1, #128	@ 0x80
 800385e:	438a      	bics	r2, r1
 8003860:	601a      	str	r2, [r3, #0]
 8003862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	f383 8810 	msr	PRIMASK, r3
}
 800386c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800386e:	f3ef 8310 	mrs	r3, PRIMASK
 8003872:	617b      	str	r3, [r7, #20]
  return(result);
 8003874:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003876:	623b      	str	r3, [r7, #32]
 8003878:	2301      	movs	r3, #1
 800387a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f383 8810 	msr	PRIMASK, r3
}
 8003882:	46c0      	nop			@ (mov r8, r8)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2140      	movs	r1, #64	@ 0x40
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f383 8810 	msr	PRIMASK, r3
}
 800389e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80038a0:	e013      	b.n	80038ca <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2256      	movs	r2, #86	@ 0x56
 80038bc:	5a9b      	ldrh	r3, [r3, r2]
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b299      	uxth	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2256      	movs	r2, #86	@ 0x56
 80038c8:	5299      	strh	r1, [r3, r2]
}
 80038ca:	46c0      	nop			@ (mov r8, r8)
 80038cc:	46bd      	mov	sp, r7
 80038ce:	b00a      	add	sp, #40	@ 0x28
 80038d0:	bd80      	pop	{r7, pc}

080038d2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038d2:	b580      	push	{r7, lr}
 80038d4:	b08c      	sub	sp, #48	@ 0x30
 80038d6:	af00      	add	r7, sp, #0
 80038d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2288      	movs	r2, #136	@ 0x88
 80038de:	589b      	ldr	r3, [r3, r2]
 80038e0:	2b21      	cmp	r3, #33	@ 0x21
 80038e2:	d151      	bne.n	8003988 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2256      	movs	r2, #86	@ 0x56
 80038e8:	5a9b      	ldrh	r3, [r3, r2]
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d132      	bne.n	8003956 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038f0:	f3ef 8310 	mrs	r3, PRIMASK
 80038f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80038f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80038f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80038fa:	2301      	movs	r3, #1
 80038fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2180      	movs	r1, #128	@ 0x80
 8003912:	438a      	bics	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003922:	f3ef 8310 	mrs	r3, PRIMASK
 8003926:	61bb      	str	r3, [r7, #24]
  return(result);
 8003928:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800392a:	627b      	str	r3, [r7, #36]	@ 0x24
 800392c:	2301      	movs	r3, #1
 800392e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f383 8810 	msr	PRIMASK, r3
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	2140      	movs	r1, #64	@ 0x40
 8003944:	430a      	orrs	r2, r1
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800394a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	f383 8810 	msr	PRIMASK, r3
}
 8003952:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003954:	e018      	b.n	8003988 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800395a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800395c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800395e:	881b      	ldrh	r3, [r3, #0]
 8003960:	001a      	movs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	05d2      	lsls	r2, r2, #23
 8003968:	0dd2      	lsrs	r2, r2, #23
 800396a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003970:	1c9a      	adds	r2, r3, #2
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2256      	movs	r2, #86	@ 0x56
 800397a:	5a9b      	ldrh	r3, [r3, r2]
 800397c:	b29b      	uxth	r3, r3
 800397e:	3b01      	subs	r3, #1
 8003980:	b299      	uxth	r1, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2256      	movs	r2, #86	@ 0x56
 8003986:	5299      	strh	r1, [r3, r2]
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	46bd      	mov	sp, r7
 800398c:	b00c      	add	sp, #48	@ 0x30
 800398e:	bd80      	pop	{r7, pc}

08003990 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b08c      	sub	sp, #48	@ 0x30
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2288      	movs	r2, #136	@ 0x88
 800399c:	589b      	ldr	r3, [r3, r2]
 800399e:	2b21      	cmp	r3, #33	@ 0x21
 80039a0:	d165      	bne.n	8003a6e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80039a2:	232e      	movs	r3, #46	@ 0x2e
 80039a4:	18fb      	adds	r3, r7, r3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	216a      	movs	r1, #106	@ 0x6a
 80039aa:	5a52      	ldrh	r2, [r2, r1]
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e059      	b.n	8003a64 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2256      	movs	r2, #86	@ 0x56
 80039b4:	5a9b      	ldrh	r3, [r3, r2]
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d133      	bne.n	8003a24 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039bc:	f3ef 8310 	mrs	r3, PRIMASK
 80039c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80039c2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80039c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039c6:	2301      	movs	r3, #1
 80039c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f383 8810 	msr	PRIMASK, r3
}
 80039d0:	46c0      	nop			@ (mov r8, r8)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4926      	ldr	r1, [pc, #152]	@ (8003a78 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80039de:	400a      	ands	r2, r1
 80039e0:	609a      	str	r2, [r3, #8]
 80039e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	f383 8810 	msr	PRIMASK, r3
}
 80039ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039ee:	f3ef 8310 	mrs	r3, PRIMASK
 80039f2:	61bb      	str	r3, [r7, #24]
  return(result);
 80039f4:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80039f8:	2301      	movs	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	f383 8810 	msr	PRIMASK, r3
}
 8003a02:	46c0      	nop			@ (mov r8, r8)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2140      	movs	r1, #64	@ 0x40
 8003a10:	430a      	orrs	r2, r1
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a16:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a18:	6a3b      	ldr	r3, [r7, #32]
 8003a1a:	f383 8810 	msr	PRIMASK, r3
}
 8003a1e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003a20:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003a22:	e024      	b.n	8003a6e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	69db      	ldr	r3, [r3, #28]
 8003a2a:	2280      	movs	r2, #128	@ 0x80
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	d013      	beq.n	8003a58 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a34:	781a      	ldrb	r2, [r3, #0]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a40:	1c5a      	adds	r2, r3, #1
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2256      	movs	r2, #86	@ 0x56
 8003a4a:	5a9b      	ldrh	r3, [r3, r2]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b299      	uxth	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2256      	movs	r2, #86	@ 0x56
 8003a56:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a58:	212e      	movs	r1, #46	@ 0x2e
 8003a5a:	187b      	adds	r3, r7, r1
 8003a5c:	881a      	ldrh	r2, [r3, #0]
 8003a5e:	187b      	adds	r3, r7, r1
 8003a60:	3a01      	subs	r2, #1
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	232e      	movs	r3, #46	@ 0x2e
 8003a66:	18fb      	adds	r3, r7, r3
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1a0      	bne.n	80039b0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003a6e:	46c0      	nop			@ (mov r8, r8)
 8003a70:	46bd      	mov	sp, r7
 8003a72:	b00c      	add	sp, #48	@ 0x30
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	46c0      	nop			@ (mov r8, r8)
 8003a78:	ff7fffff 	.word	0xff7fffff

08003a7c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b08c      	sub	sp, #48	@ 0x30
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2288      	movs	r2, #136	@ 0x88
 8003a88:	589b      	ldr	r3, [r3, r2]
 8003a8a:	2b21      	cmp	r3, #33	@ 0x21
 8003a8c:	d16a      	bne.n	8003b64 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003a8e:	232e      	movs	r3, #46	@ 0x2e
 8003a90:	18fb      	adds	r3, r7, r3
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	216a      	movs	r1, #106	@ 0x6a
 8003a96:	5a52      	ldrh	r2, [r2, r1]
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	e05e      	b.n	8003b5a <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2256      	movs	r2, #86	@ 0x56
 8003aa0:	5a9b      	ldrh	r3, [r3, r2]
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d133      	bne.n	8003b10 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa8:	f3ef 8310 	mrs	r3, PRIMASK
 8003aac:	60bb      	str	r3, [r7, #8]
  return(result);
 8003aae:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003ab0:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f383 8810 	msr	PRIMASK, r3
}
 8003abc:	46c0      	nop			@ (mov r8, r8)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4928      	ldr	r1, [pc, #160]	@ (8003b6c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8003aca:	400a      	ands	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
 8003ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	f383 8810 	msr	PRIMASK, r3
}
 8003ad8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ada:	f3ef 8310 	mrs	r3, PRIMASK
 8003ade:	617b      	str	r3, [r7, #20]
  return(result);
 8003ae0:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	f383 8810 	msr	PRIMASK, r3
}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2140      	movs	r1, #64	@ 0x40
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f383 8810 	msr	PRIMASK, r3
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8003b0c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8003b0e:	e029      	b.n	8003b64 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	2280      	movs	r2, #128	@ 0x80
 8003b18:	4013      	ands	r3, r2
 8003b1a:	d018      	beq.n	8003b4e <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	001a      	movs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	05d2      	lsls	r2, r2, #23
 8003b2e:	0dd2      	lsrs	r2, r2, #23
 8003b30:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b36:	1c9a      	adds	r2, r3, #2
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2256      	movs	r2, #86	@ 0x56
 8003b40:	5a9b      	ldrh	r3, [r3, r2]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	3b01      	subs	r3, #1
 8003b46:	b299      	uxth	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2256      	movs	r2, #86	@ 0x56
 8003b4c:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003b4e:	212e      	movs	r1, #46	@ 0x2e
 8003b50:	187b      	adds	r3, r7, r1
 8003b52:	881a      	ldrh	r2, [r3, #0]
 8003b54:	187b      	adds	r3, r7, r1
 8003b56:	3a01      	subs	r2, #1
 8003b58:	801a      	strh	r2, [r3, #0]
 8003b5a:	232e      	movs	r3, #46	@ 0x2e
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d19b      	bne.n	8003a9c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003b64:	46c0      	nop			@ (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b00c      	add	sp, #48	@ 0x30
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	ff7fffff 	.word	0xff7fffff

08003b70 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b78:	f3ef 8310 	mrs	r3, PRIMASK
 8003b7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b7e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	2301      	movs	r3, #1
 8003b84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f383 8810 	msr	PRIMASK, r3
}
 8003b8c:	46c0      	nop			@ (mov r8, r8)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2140      	movs	r1, #64	@ 0x40
 8003b9a:	438a      	bics	r2, r1
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2288      	movs	r2, #136	@ 0x88
 8003bae:	2120      	movs	r1, #32
 8003bb0:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	f7ff fa24 	bl	8003008 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	b006      	add	sp, #24
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b002      	add	sp, #8
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003be0:	46c0      	nop			@ (mov r8, r8)
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b002      	add	sp, #8
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003bf0:	46c0      	nop			@ (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <sniprintf>:
 8003bf8:	b40c      	push	{r2, r3}
 8003bfa:	b530      	push	{r4, r5, lr}
 8003bfc:	4b17      	ldr	r3, [pc, #92]	@ (8003c5c <sniprintf+0x64>)
 8003bfe:	000c      	movs	r4, r1
 8003c00:	681d      	ldr	r5, [r3, #0]
 8003c02:	b09d      	sub	sp, #116	@ 0x74
 8003c04:	2900      	cmp	r1, #0
 8003c06:	da08      	bge.n	8003c1a <sniprintf+0x22>
 8003c08:	238b      	movs	r3, #139	@ 0x8b
 8003c0a:	2001      	movs	r0, #1
 8003c0c:	602b      	str	r3, [r5, #0]
 8003c0e:	4240      	negs	r0, r0
 8003c10:	b01d      	add	sp, #116	@ 0x74
 8003c12:	bc30      	pop	{r4, r5}
 8003c14:	bc08      	pop	{r3}
 8003c16:	b002      	add	sp, #8
 8003c18:	4718      	bx	r3
 8003c1a:	2382      	movs	r3, #130	@ 0x82
 8003c1c:	466a      	mov	r2, sp
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	8293      	strh	r3, [r2, #20]
 8003c22:	2300      	movs	r3, #0
 8003c24:	9002      	str	r0, [sp, #8]
 8003c26:	9006      	str	r0, [sp, #24]
 8003c28:	4299      	cmp	r1, r3
 8003c2a:	d000      	beq.n	8003c2e <sniprintf+0x36>
 8003c2c:	1e4b      	subs	r3, r1, #1
 8003c2e:	9304      	str	r3, [sp, #16]
 8003c30:	9307      	str	r3, [sp, #28]
 8003c32:	2301      	movs	r3, #1
 8003c34:	466a      	mov	r2, sp
 8003c36:	425b      	negs	r3, r3
 8003c38:	82d3      	strh	r3, [r2, #22]
 8003c3a:	0028      	movs	r0, r5
 8003c3c:	ab21      	add	r3, sp, #132	@ 0x84
 8003c3e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003c40:	a902      	add	r1, sp, #8
 8003c42:	9301      	str	r3, [sp, #4]
 8003c44:	f000 f9bc 	bl	8003fc0 <_svfiprintf_r>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	da01      	bge.n	8003c50 <sniprintf+0x58>
 8003c4c:	238b      	movs	r3, #139	@ 0x8b
 8003c4e:	602b      	str	r3, [r5, #0]
 8003c50:	2c00      	cmp	r4, #0
 8003c52:	d0dd      	beq.n	8003c10 <sniprintf+0x18>
 8003c54:	2200      	movs	r2, #0
 8003c56:	9b02      	ldr	r3, [sp, #8]
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	e7d9      	b.n	8003c10 <sniprintf+0x18>
 8003c5c:	20000034 	.word	0x20000034

08003c60 <memset>:
 8003c60:	0003      	movs	r3, r0
 8003c62:	1882      	adds	r2, r0, r2
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d100      	bne.n	8003c6a <memset+0xa>
 8003c68:	4770      	bx	lr
 8003c6a:	7019      	strb	r1, [r3, #0]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	e7f9      	b.n	8003c64 <memset+0x4>

08003c70 <strstr>:
 8003c70:	780a      	ldrb	r2, [r1, #0]
 8003c72:	b530      	push	{r4, r5, lr}
 8003c74:	2a00      	cmp	r2, #0
 8003c76:	d10c      	bne.n	8003c92 <strstr+0x22>
 8003c78:	bd30      	pop	{r4, r5, pc}
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d108      	bne.n	8003c90 <strstr+0x20>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	5ccc      	ldrb	r4, [r1, r3]
 8003c82:	2c00      	cmp	r4, #0
 8003c84:	d0f8      	beq.n	8003c78 <strstr+0x8>
 8003c86:	5cc5      	ldrb	r5, [r0, r3]
 8003c88:	42a5      	cmp	r5, r4
 8003c8a:	d101      	bne.n	8003c90 <strstr+0x20>
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	e7f7      	b.n	8003c80 <strstr+0x10>
 8003c90:	3001      	adds	r0, #1
 8003c92:	7803      	ldrb	r3, [r0, #0]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <strstr+0xa>
 8003c98:	0018      	movs	r0, r3
 8003c9a:	e7ed      	b.n	8003c78 <strstr+0x8>

08003c9c <__errno>:
 8003c9c:	4b01      	ldr	r3, [pc, #4]	@ (8003ca4 <__errno+0x8>)
 8003c9e:	6818      	ldr	r0, [r3, #0]
 8003ca0:	4770      	bx	lr
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	20000034 	.word	0x20000034

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	2600      	movs	r6, #0
 8003cac:	4c0c      	ldr	r4, [pc, #48]	@ (8003ce0 <__libc_init_array+0x38>)
 8003cae:	4d0d      	ldr	r5, [pc, #52]	@ (8003ce4 <__libc_init_array+0x3c>)
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	2600      	movs	r6, #0
 8003cba:	f000 fc65 	bl	8004588 <_init>
 8003cbe:	4c0a      	ldr	r4, [pc, #40]	@ (8003ce8 <__libc_init_array+0x40>)
 8003cc0:	4d0a      	ldr	r5, [pc, #40]	@ (8003cec <__libc_init_array+0x44>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	00b3      	lsls	r3, r6, #2
 8003cce:	58eb      	ldr	r3, [r5, r3]
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	00b3      	lsls	r3, r6, #2
 8003cd8:	58eb      	ldr	r3, [r5, r3]
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	08005ae8 	.word	0x08005ae8
 8003ce4:	08005ae8 	.word	0x08005ae8
 8003ce8:	08005aec 	.word	0x08005aec
 8003cec:	08005ae8 	.word	0x08005ae8

08003cf0 <__retarget_lock_acquire_recursive>:
 8003cf0:	4770      	bx	lr

08003cf2 <__retarget_lock_release_recursive>:
 8003cf2:	4770      	bx	lr

08003cf4 <memcpy>:
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	b510      	push	{r4, lr}
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d100      	bne.n	8003cfe <memcpy+0xa>
 8003cfc:	bd10      	pop	{r4, pc}
 8003cfe:	5ccc      	ldrb	r4, [r1, r3]
 8003d00:	54c4      	strb	r4, [r0, r3]
 8003d02:	3301      	adds	r3, #1
 8003d04:	e7f8      	b.n	8003cf8 <memcpy+0x4>
	...

08003d08 <_free_r>:
 8003d08:	b570      	push	{r4, r5, r6, lr}
 8003d0a:	0005      	movs	r5, r0
 8003d0c:	1e0c      	subs	r4, r1, #0
 8003d0e:	d010      	beq.n	8003d32 <_free_r+0x2a>
 8003d10:	3c04      	subs	r4, #4
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	da00      	bge.n	8003d1a <_free_r+0x12>
 8003d18:	18e4      	adds	r4, r4, r3
 8003d1a:	0028      	movs	r0, r5
 8003d1c:	f000 f8e0 	bl	8003ee0 <__malloc_lock>
 8003d20:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <_free_r+0x90>)
 8003d22:	6813      	ldr	r3, [r2, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d105      	bne.n	8003d34 <_free_r+0x2c>
 8003d28:	6063      	str	r3, [r4, #4]
 8003d2a:	6014      	str	r4, [r2, #0]
 8003d2c:	0028      	movs	r0, r5
 8003d2e:	f000 f8df 	bl	8003ef0 <__malloc_unlock>
 8003d32:	bd70      	pop	{r4, r5, r6, pc}
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d908      	bls.n	8003d4a <_free_r+0x42>
 8003d38:	6820      	ldr	r0, [r4, #0]
 8003d3a:	1821      	adds	r1, r4, r0
 8003d3c:	428b      	cmp	r3, r1
 8003d3e:	d1f3      	bne.n	8003d28 <_free_r+0x20>
 8003d40:	6819      	ldr	r1, [r3, #0]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	1809      	adds	r1, r1, r0
 8003d46:	6021      	str	r1, [r4, #0]
 8003d48:	e7ee      	b.n	8003d28 <_free_r+0x20>
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <_free_r+0x4e>
 8003d52:	42a3      	cmp	r3, r4
 8003d54:	d9f9      	bls.n	8003d4a <_free_r+0x42>
 8003d56:	6811      	ldr	r1, [r2, #0]
 8003d58:	1850      	adds	r0, r2, r1
 8003d5a:	42a0      	cmp	r0, r4
 8003d5c:	d10b      	bne.n	8003d76 <_free_r+0x6e>
 8003d5e:	6820      	ldr	r0, [r4, #0]
 8003d60:	1809      	adds	r1, r1, r0
 8003d62:	1850      	adds	r0, r2, r1
 8003d64:	6011      	str	r1, [r2, #0]
 8003d66:	4283      	cmp	r3, r0
 8003d68:	d1e0      	bne.n	8003d2c <_free_r+0x24>
 8003d6a:	6818      	ldr	r0, [r3, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	1841      	adds	r1, r0, r1
 8003d70:	6011      	str	r1, [r2, #0]
 8003d72:	6053      	str	r3, [r2, #4]
 8003d74:	e7da      	b.n	8003d2c <_free_r+0x24>
 8003d76:	42a0      	cmp	r0, r4
 8003d78:	d902      	bls.n	8003d80 <_free_r+0x78>
 8003d7a:	230c      	movs	r3, #12
 8003d7c:	602b      	str	r3, [r5, #0]
 8003d7e:	e7d5      	b.n	8003d2c <_free_r+0x24>
 8003d80:	6820      	ldr	r0, [r4, #0]
 8003d82:	1821      	adds	r1, r4, r0
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d103      	bne.n	8003d90 <_free_r+0x88>
 8003d88:	6819      	ldr	r1, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	1809      	adds	r1, r1, r0
 8003d8e:	6021      	str	r1, [r4, #0]
 8003d90:	6063      	str	r3, [r4, #4]
 8003d92:	6054      	str	r4, [r2, #4]
 8003d94:	e7ca      	b.n	8003d2c <_free_r+0x24>
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	20001044 	.word	0x20001044

08003d9c <sbrk_aligned>:
 8003d9c:	b570      	push	{r4, r5, r6, lr}
 8003d9e:	4e0f      	ldr	r6, [pc, #60]	@ (8003ddc <sbrk_aligned+0x40>)
 8003da0:	000d      	movs	r5, r1
 8003da2:	6831      	ldr	r1, [r6, #0]
 8003da4:	0004      	movs	r4, r0
 8003da6:	2900      	cmp	r1, #0
 8003da8:	d102      	bne.n	8003db0 <sbrk_aligned+0x14>
 8003daa:	f000 fb99 	bl	80044e0 <_sbrk_r>
 8003dae:	6030      	str	r0, [r6, #0]
 8003db0:	0029      	movs	r1, r5
 8003db2:	0020      	movs	r0, r4
 8003db4:	f000 fb94 	bl	80044e0 <_sbrk_r>
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	d103      	bne.n	8003dc4 <sbrk_aligned+0x28>
 8003dbc:	2501      	movs	r5, #1
 8003dbe:	426d      	negs	r5, r5
 8003dc0:	0028      	movs	r0, r5
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	1cc5      	adds	r5, r0, #3
 8003dc8:	439d      	bics	r5, r3
 8003dca:	42a8      	cmp	r0, r5
 8003dcc:	d0f8      	beq.n	8003dc0 <sbrk_aligned+0x24>
 8003dce:	1a29      	subs	r1, r5, r0
 8003dd0:	0020      	movs	r0, r4
 8003dd2:	f000 fb85 	bl	80044e0 <_sbrk_r>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d1f2      	bne.n	8003dc0 <sbrk_aligned+0x24>
 8003dda:	e7ef      	b.n	8003dbc <sbrk_aligned+0x20>
 8003ddc:	20001040 	.word	0x20001040

08003de0 <_malloc_r>:
 8003de0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003de2:	2203      	movs	r2, #3
 8003de4:	1ccb      	adds	r3, r1, #3
 8003de6:	4393      	bics	r3, r2
 8003de8:	3308      	adds	r3, #8
 8003dea:	0005      	movs	r5, r0
 8003dec:	001f      	movs	r7, r3
 8003dee:	2b0c      	cmp	r3, #12
 8003df0:	d234      	bcs.n	8003e5c <_malloc_r+0x7c>
 8003df2:	270c      	movs	r7, #12
 8003df4:	42b9      	cmp	r1, r7
 8003df6:	d833      	bhi.n	8003e60 <_malloc_r+0x80>
 8003df8:	0028      	movs	r0, r5
 8003dfa:	f000 f871 	bl	8003ee0 <__malloc_lock>
 8003dfe:	4e37      	ldr	r6, [pc, #220]	@ (8003edc <_malloc_r+0xfc>)
 8003e00:	6833      	ldr	r3, [r6, #0]
 8003e02:	001c      	movs	r4, r3
 8003e04:	2c00      	cmp	r4, #0
 8003e06:	d12f      	bne.n	8003e68 <_malloc_r+0x88>
 8003e08:	0039      	movs	r1, r7
 8003e0a:	0028      	movs	r0, r5
 8003e0c:	f7ff ffc6 	bl	8003d9c <sbrk_aligned>
 8003e10:	0004      	movs	r4, r0
 8003e12:	1c43      	adds	r3, r0, #1
 8003e14:	d15f      	bne.n	8003ed6 <_malloc_r+0xf6>
 8003e16:	6834      	ldr	r4, [r6, #0]
 8003e18:	9400      	str	r4, [sp, #0]
 8003e1a:	9b00      	ldr	r3, [sp, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d14a      	bne.n	8003eb6 <_malloc_r+0xd6>
 8003e20:	2c00      	cmp	r4, #0
 8003e22:	d052      	beq.n	8003eca <_malloc_r+0xea>
 8003e24:	6823      	ldr	r3, [r4, #0]
 8003e26:	0028      	movs	r0, r5
 8003e28:	18e3      	adds	r3, r4, r3
 8003e2a:	9900      	ldr	r1, [sp, #0]
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	f000 fb57 	bl	80044e0 <_sbrk_r>
 8003e32:	9b01      	ldr	r3, [sp, #4]
 8003e34:	4283      	cmp	r3, r0
 8003e36:	d148      	bne.n	8003eca <_malloc_r+0xea>
 8003e38:	6823      	ldr	r3, [r4, #0]
 8003e3a:	0028      	movs	r0, r5
 8003e3c:	1aff      	subs	r7, r7, r3
 8003e3e:	0039      	movs	r1, r7
 8003e40:	f7ff ffac 	bl	8003d9c <sbrk_aligned>
 8003e44:	3001      	adds	r0, #1
 8003e46:	d040      	beq.n	8003eca <_malloc_r+0xea>
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	19db      	adds	r3, r3, r7
 8003e4c:	6023      	str	r3, [r4, #0]
 8003e4e:	6833      	ldr	r3, [r6, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	2a00      	cmp	r2, #0
 8003e54:	d133      	bne.n	8003ebe <_malloc_r+0xde>
 8003e56:	9b00      	ldr	r3, [sp, #0]
 8003e58:	6033      	str	r3, [r6, #0]
 8003e5a:	e019      	b.n	8003e90 <_malloc_r+0xb0>
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	dac9      	bge.n	8003df4 <_malloc_r+0x14>
 8003e60:	230c      	movs	r3, #12
 8003e62:	602b      	str	r3, [r5, #0]
 8003e64:	2000      	movs	r0, #0
 8003e66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e68:	6821      	ldr	r1, [r4, #0]
 8003e6a:	1bc9      	subs	r1, r1, r7
 8003e6c:	d420      	bmi.n	8003eb0 <_malloc_r+0xd0>
 8003e6e:	290b      	cmp	r1, #11
 8003e70:	d90a      	bls.n	8003e88 <_malloc_r+0xa8>
 8003e72:	19e2      	adds	r2, r4, r7
 8003e74:	6027      	str	r7, [r4, #0]
 8003e76:	42a3      	cmp	r3, r4
 8003e78:	d104      	bne.n	8003e84 <_malloc_r+0xa4>
 8003e7a:	6032      	str	r2, [r6, #0]
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	6011      	str	r1, [r2, #0]
 8003e80:	6053      	str	r3, [r2, #4]
 8003e82:	e005      	b.n	8003e90 <_malloc_r+0xb0>
 8003e84:	605a      	str	r2, [r3, #4]
 8003e86:	e7f9      	b.n	8003e7c <_malloc_r+0x9c>
 8003e88:	6862      	ldr	r2, [r4, #4]
 8003e8a:	42a3      	cmp	r3, r4
 8003e8c:	d10e      	bne.n	8003eac <_malloc_r+0xcc>
 8003e8e:	6032      	str	r2, [r6, #0]
 8003e90:	0028      	movs	r0, r5
 8003e92:	f000 f82d 	bl	8003ef0 <__malloc_unlock>
 8003e96:	0020      	movs	r0, r4
 8003e98:	2207      	movs	r2, #7
 8003e9a:	300b      	adds	r0, #11
 8003e9c:	1d23      	adds	r3, r4, #4
 8003e9e:	4390      	bics	r0, r2
 8003ea0:	1ac2      	subs	r2, r0, r3
 8003ea2:	4298      	cmp	r0, r3
 8003ea4:	d0df      	beq.n	8003e66 <_malloc_r+0x86>
 8003ea6:	1a1b      	subs	r3, r3, r0
 8003ea8:	50a3      	str	r3, [r4, r2]
 8003eaa:	e7dc      	b.n	8003e66 <_malloc_r+0x86>
 8003eac:	605a      	str	r2, [r3, #4]
 8003eae:	e7ef      	b.n	8003e90 <_malloc_r+0xb0>
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	6864      	ldr	r4, [r4, #4]
 8003eb4:	e7a6      	b.n	8003e04 <_malloc_r+0x24>
 8003eb6:	9c00      	ldr	r4, [sp, #0]
 8003eb8:	6863      	ldr	r3, [r4, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	e7ad      	b.n	8003e1a <_malloc_r+0x3a>
 8003ebe:	001a      	movs	r2, r3
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	42a3      	cmp	r3, r4
 8003ec4:	d1fb      	bne.n	8003ebe <_malloc_r+0xde>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	e7da      	b.n	8003e80 <_malloc_r+0xa0>
 8003eca:	230c      	movs	r3, #12
 8003ecc:	0028      	movs	r0, r5
 8003ece:	602b      	str	r3, [r5, #0]
 8003ed0:	f000 f80e 	bl	8003ef0 <__malloc_unlock>
 8003ed4:	e7c6      	b.n	8003e64 <_malloc_r+0x84>
 8003ed6:	6007      	str	r7, [r0, #0]
 8003ed8:	e7da      	b.n	8003e90 <_malloc_r+0xb0>
 8003eda:	46c0      	nop			@ (mov r8, r8)
 8003edc:	20001044 	.word	0x20001044

08003ee0 <__malloc_lock>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	4802      	ldr	r0, [pc, #8]	@ (8003eec <__malloc_lock+0xc>)
 8003ee4:	f7ff ff04 	bl	8003cf0 <__retarget_lock_acquire_recursive>
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	2000103c 	.word	0x2000103c

08003ef0 <__malloc_unlock>:
 8003ef0:	b510      	push	{r4, lr}
 8003ef2:	4802      	ldr	r0, [pc, #8]	@ (8003efc <__malloc_unlock+0xc>)
 8003ef4:	f7ff fefd 	bl	8003cf2 <__retarget_lock_release_recursive>
 8003ef8:	bd10      	pop	{r4, pc}
 8003efa:	46c0      	nop			@ (mov r8, r8)
 8003efc:	2000103c 	.word	0x2000103c

08003f00 <__ssputs_r>:
 8003f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f02:	688e      	ldr	r6, [r1, #8]
 8003f04:	b085      	sub	sp, #20
 8003f06:	001f      	movs	r7, r3
 8003f08:	000c      	movs	r4, r1
 8003f0a:	680b      	ldr	r3, [r1, #0]
 8003f0c:	9002      	str	r0, [sp, #8]
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	42be      	cmp	r6, r7
 8003f12:	d830      	bhi.n	8003f76 <__ssputs_r+0x76>
 8003f14:	210c      	movs	r1, #12
 8003f16:	5e62      	ldrsh	r2, [r4, r1]
 8003f18:	2190      	movs	r1, #144	@ 0x90
 8003f1a:	00c9      	lsls	r1, r1, #3
 8003f1c:	420a      	tst	r2, r1
 8003f1e:	d028      	beq.n	8003f72 <__ssputs_r+0x72>
 8003f20:	2003      	movs	r0, #3
 8003f22:	6921      	ldr	r1, [r4, #16]
 8003f24:	1a5b      	subs	r3, r3, r1
 8003f26:	9301      	str	r3, [sp, #4]
 8003f28:	6963      	ldr	r3, [r4, #20]
 8003f2a:	4343      	muls	r3, r0
 8003f2c:	9801      	ldr	r0, [sp, #4]
 8003f2e:	0fdd      	lsrs	r5, r3, #31
 8003f30:	18ed      	adds	r5, r5, r3
 8003f32:	1c7b      	adds	r3, r7, #1
 8003f34:	181b      	adds	r3, r3, r0
 8003f36:	106d      	asrs	r5, r5, #1
 8003f38:	42ab      	cmp	r3, r5
 8003f3a:	d900      	bls.n	8003f3e <__ssputs_r+0x3e>
 8003f3c:	001d      	movs	r5, r3
 8003f3e:	0552      	lsls	r2, r2, #21
 8003f40:	d528      	bpl.n	8003f94 <__ssputs_r+0x94>
 8003f42:	0029      	movs	r1, r5
 8003f44:	9802      	ldr	r0, [sp, #8]
 8003f46:	f7ff ff4b 	bl	8003de0 <_malloc_r>
 8003f4a:	1e06      	subs	r6, r0, #0
 8003f4c:	d02c      	beq.n	8003fa8 <__ssputs_r+0xa8>
 8003f4e:	9a01      	ldr	r2, [sp, #4]
 8003f50:	6921      	ldr	r1, [r4, #16]
 8003f52:	f7ff fecf 	bl	8003cf4 <memcpy>
 8003f56:	89a2      	ldrh	r2, [r4, #12]
 8003f58:	4b18      	ldr	r3, [pc, #96]	@ (8003fbc <__ssputs_r+0xbc>)
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	2380      	movs	r3, #128	@ 0x80
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	9b01      	ldr	r3, [sp, #4]
 8003f64:	6126      	str	r6, [r4, #16]
 8003f66:	18f6      	adds	r6, r6, r3
 8003f68:	6026      	str	r6, [r4, #0]
 8003f6a:	003e      	movs	r6, r7
 8003f6c:	6165      	str	r5, [r4, #20]
 8003f6e:	1aed      	subs	r5, r5, r3
 8003f70:	60a5      	str	r5, [r4, #8]
 8003f72:	42be      	cmp	r6, r7
 8003f74:	d900      	bls.n	8003f78 <__ssputs_r+0x78>
 8003f76:	003e      	movs	r6, r7
 8003f78:	0032      	movs	r2, r6
 8003f7a:	9903      	ldr	r1, [sp, #12]
 8003f7c:	6820      	ldr	r0, [r4, #0]
 8003f7e:	f000 fa9b 	bl	80044b8 <memmove>
 8003f82:	2000      	movs	r0, #0
 8003f84:	68a3      	ldr	r3, [r4, #8]
 8003f86:	1b9b      	subs	r3, r3, r6
 8003f88:	60a3      	str	r3, [r4, #8]
 8003f8a:	6823      	ldr	r3, [r4, #0]
 8003f8c:	199b      	adds	r3, r3, r6
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	b005      	add	sp, #20
 8003f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f94:	002a      	movs	r2, r5
 8003f96:	9802      	ldr	r0, [sp, #8]
 8003f98:	f000 fabf 	bl	800451a <_realloc_r>
 8003f9c:	1e06      	subs	r6, r0, #0
 8003f9e:	d1e0      	bne.n	8003f62 <__ssputs_r+0x62>
 8003fa0:	6921      	ldr	r1, [r4, #16]
 8003fa2:	9802      	ldr	r0, [sp, #8]
 8003fa4:	f7ff feb0 	bl	8003d08 <_free_r>
 8003fa8:	230c      	movs	r3, #12
 8003faa:	2001      	movs	r0, #1
 8003fac:	9a02      	ldr	r2, [sp, #8]
 8003fae:	4240      	negs	r0, r0
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	89a2      	ldrh	r2, [r4, #12]
 8003fb4:	3334      	adds	r3, #52	@ 0x34
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	81a3      	strh	r3, [r4, #12]
 8003fba:	e7e9      	b.n	8003f90 <__ssputs_r+0x90>
 8003fbc:	fffffb7f 	.word	0xfffffb7f

08003fc0 <_svfiprintf_r>:
 8003fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fc2:	b0a1      	sub	sp, #132	@ 0x84
 8003fc4:	9003      	str	r0, [sp, #12]
 8003fc6:	001d      	movs	r5, r3
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	000f      	movs	r7, r1
 8003fcc:	0016      	movs	r6, r2
 8003fce:	061b      	lsls	r3, r3, #24
 8003fd0:	d511      	bpl.n	8003ff6 <_svfiprintf_r+0x36>
 8003fd2:	690b      	ldr	r3, [r1, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10e      	bne.n	8003ff6 <_svfiprintf_r+0x36>
 8003fd8:	2140      	movs	r1, #64	@ 0x40
 8003fda:	f7ff ff01 	bl	8003de0 <_malloc_r>
 8003fde:	6038      	str	r0, [r7, #0]
 8003fe0:	6138      	str	r0, [r7, #16]
 8003fe2:	2800      	cmp	r0, #0
 8003fe4:	d105      	bne.n	8003ff2 <_svfiprintf_r+0x32>
 8003fe6:	230c      	movs	r3, #12
 8003fe8:	9a03      	ldr	r2, [sp, #12]
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	2001      	movs	r0, #1
 8003fee:	4240      	negs	r0, r0
 8003ff0:	e0cf      	b.n	8004192 <_svfiprintf_r+0x1d2>
 8003ff2:	2340      	movs	r3, #64	@ 0x40
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	ac08      	add	r4, sp, #32
 8003ffa:	6163      	str	r3, [r4, #20]
 8003ffc:	3320      	adds	r3, #32
 8003ffe:	7663      	strb	r3, [r4, #25]
 8004000:	3310      	adds	r3, #16
 8004002:	76a3      	strb	r3, [r4, #26]
 8004004:	9507      	str	r5, [sp, #28]
 8004006:	0035      	movs	r5, r6
 8004008:	782b      	ldrb	r3, [r5, #0]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d001      	beq.n	8004012 <_svfiprintf_r+0x52>
 800400e:	2b25      	cmp	r3, #37	@ 0x25
 8004010:	d148      	bne.n	80040a4 <_svfiprintf_r+0xe4>
 8004012:	1bab      	subs	r3, r5, r6
 8004014:	9305      	str	r3, [sp, #20]
 8004016:	42b5      	cmp	r5, r6
 8004018:	d00b      	beq.n	8004032 <_svfiprintf_r+0x72>
 800401a:	0032      	movs	r2, r6
 800401c:	0039      	movs	r1, r7
 800401e:	9803      	ldr	r0, [sp, #12]
 8004020:	f7ff ff6e 	bl	8003f00 <__ssputs_r>
 8004024:	3001      	adds	r0, #1
 8004026:	d100      	bne.n	800402a <_svfiprintf_r+0x6a>
 8004028:	e0ae      	b.n	8004188 <_svfiprintf_r+0x1c8>
 800402a:	6963      	ldr	r3, [r4, #20]
 800402c:	9a05      	ldr	r2, [sp, #20]
 800402e:	189b      	adds	r3, r3, r2
 8004030:	6163      	str	r3, [r4, #20]
 8004032:	782b      	ldrb	r3, [r5, #0]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d100      	bne.n	800403a <_svfiprintf_r+0x7a>
 8004038:	e0a6      	b.n	8004188 <_svfiprintf_r+0x1c8>
 800403a:	2201      	movs	r2, #1
 800403c:	2300      	movs	r3, #0
 800403e:	4252      	negs	r2, r2
 8004040:	6062      	str	r2, [r4, #4]
 8004042:	a904      	add	r1, sp, #16
 8004044:	3254      	adds	r2, #84	@ 0x54
 8004046:	1852      	adds	r2, r2, r1
 8004048:	1c6e      	adds	r6, r5, #1
 800404a:	6023      	str	r3, [r4, #0]
 800404c:	60e3      	str	r3, [r4, #12]
 800404e:	60a3      	str	r3, [r4, #8]
 8004050:	7013      	strb	r3, [r2, #0]
 8004052:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004054:	4b54      	ldr	r3, [pc, #336]	@ (80041a8 <_svfiprintf_r+0x1e8>)
 8004056:	2205      	movs	r2, #5
 8004058:	0018      	movs	r0, r3
 800405a:	7831      	ldrb	r1, [r6, #0]
 800405c:	9305      	str	r3, [sp, #20]
 800405e:	f000 fa51 	bl	8004504 <memchr>
 8004062:	1c75      	adds	r5, r6, #1
 8004064:	2800      	cmp	r0, #0
 8004066:	d11f      	bne.n	80040a8 <_svfiprintf_r+0xe8>
 8004068:	6822      	ldr	r2, [r4, #0]
 800406a:	06d3      	lsls	r3, r2, #27
 800406c:	d504      	bpl.n	8004078 <_svfiprintf_r+0xb8>
 800406e:	2353      	movs	r3, #83	@ 0x53
 8004070:	a904      	add	r1, sp, #16
 8004072:	185b      	adds	r3, r3, r1
 8004074:	2120      	movs	r1, #32
 8004076:	7019      	strb	r1, [r3, #0]
 8004078:	0713      	lsls	r3, r2, #28
 800407a:	d504      	bpl.n	8004086 <_svfiprintf_r+0xc6>
 800407c:	2353      	movs	r3, #83	@ 0x53
 800407e:	a904      	add	r1, sp, #16
 8004080:	185b      	adds	r3, r3, r1
 8004082:	212b      	movs	r1, #43	@ 0x2b
 8004084:	7019      	strb	r1, [r3, #0]
 8004086:	7833      	ldrb	r3, [r6, #0]
 8004088:	2b2a      	cmp	r3, #42	@ 0x2a
 800408a:	d016      	beq.n	80040ba <_svfiprintf_r+0xfa>
 800408c:	0035      	movs	r5, r6
 800408e:	2100      	movs	r1, #0
 8004090:	200a      	movs	r0, #10
 8004092:	68e3      	ldr	r3, [r4, #12]
 8004094:	782a      	ldrb	r2, [r5, #0]
 8004096:	1c6e      	adds	r6, r5, #1
 8004098:	3a30      	subs	r2, #48	@ 0x30
 800409a:	2a09      	cmp	r2, #9
 800409c:	d950      	bls.n	8004140 <_svfiprintf_r+0x180>
 800409e:	2900      	cmp	r1, #0
 80040a0:	d111      	bne.n	80040c6 <_svfiprintf_r+0x106>
 80040a2:	e017      	b.n	80040d4 <_svfiprintf_r+0x114>
 80040a4:	3501      	adds	r5, #1
 80040a6:	e7af      	b.n	8004008 <_svfiprintf_r+0x48>
 80040a8:	9b05      	ldr	r3, [sp, #20]
 80040aa:	6822      	ldr	r2, [r4, #0]
 80040ac:	1ac0      	subs	r0, r0, r3
 80040ae:	2301      	movs	r3, #1
 80040b0:	4083      	lsls	r3, r0
 80040b2:	4313      	orrs	r3, r2
 80040b4:	002e      	movs	r6, r5
 80040b6:	6023      	str	r3, [r4, #0]
 80040b8:	e7cc      	b.n	8004054 <_svfiprintf_r+0x94>
 80040ba:	9b07      	ldr	r3, [sp, #28]
 80040bc:	1d19      	adds	r1, r3, #4
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	9107      	str	r1, [sp, #28]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	db01      	blt.n	80040ca <_svfiprintf_r+0x10a>
 80040c6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80040c8:	e004      	b.n	80040d4 <_svfiprintf_r+0x114>
 80040ca:	425b      	negs	r3, r3
 80040cc:	60e3      	str	r3, [r4, #12]
 80040ce:	2302      	movs	r3, #2
 80040d0:	4313      	orrs	r3, r2
 80040d2:	6023      	str	r3, [r4, #0]
 80040d4:	782b      	ldrb	r3, [r5, #0]
 80040d6:	2b2e      	cmp	r3, #46	@ 0x2e
 80040d8:	d10c      	bne.n	80040f4 <_svfiprintf_r+0x134>
 80040da:	786b      	ldrb	r3, [r5, #1]
 80040dc:	2b2a      	cmp	r3, #42	@ 0x2a
 80040de:	d134      	bne.n	800414a <_svfiprintf_r+0x18a>
 80040e0:	9b07      	ldr	r3, [sp, #28]
 80040e2:	3502      	adds	r5, #2
 80040e4:	1d1a      	adds	r2, r3, #4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	9207      	str	r2, [sp, #28]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	da01      	bge.n	80040f2 <_svfiprintf_r+0x132>
 80040ee:	2301      	movs	r3, #1
 80040f0:	425b      	negs	r3, r3
 80040f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80040f4:	4e2d      	ldr	r6, [pc, #180]	@ (80041ac <_svfiprintf_r+0x1ec>)
 80040f6:	2203      	movs	r2, #3
 80040f8:	0030      	movs	r0, r6
 80040fa:	7829      	ldrb	r1, [r5, #0]
 80040fc:	f000 fa02 	bl	8004504 <memchr>
 8004100:	2800      	cmp	r0, #0
 8004102:	d006      	beq.n	8004112 <_svfiprintf_r+0x152>
 8004104:	2340      	movs	r3, #64	@ 0x40
 8004106:	1b80      	subs	r0, r0, r6
 8004108:	4083      	lsls	r3, r0
 800410a:	6822      	ldr	r2, [r4, #0]
 800410c:	3501      	adds	r5, #1
 800410e:	4313      	orrs	r3, r2
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	7829      	ldrb	r1, [r5, #0]
 8004114:	2206      	movs	r2, #6
 8004116:	4826      	ldr	r0, [pc, #152]	@ (80041b0 <_svfiprintf_r+0x1f0>)
 8004118:	1c6e      	adds	r6, r5, #1
 800411a:	7621      	strb	r1, [r4, #24]
 800411c:	f000 f9f2 	bl	8004504 <memchr>
 8004120:	2800      	cmp	r0, #0
 8004122:	d038      	beq.n	8004196 <_svfiprintf_r+0x1d6>
 8004124:	4b23      	ldr	r3, [pc, #140]	@ (80041b4 <_svfiprintf_r+0x1f4>)
 8004126:	2b00      	cmp	r3, #0
 8004128:	d122      	bne.n	8004170 <_svfiprintf_r+0x1b0>
 800412a:	2207      	movs	r2, #7
 800412c:	9b07      	ldr	r3, [sp, #28]
 800412e:	3307      	adds	r3, #7
 8004130:	4393      	bics	r3, r2
 8004132:	3308      	adds	r3, #8
 8004134:	9307      	str	r3, [sp, #28]
 8004136:	6963      	ldr	r3, [r4, #20]
 8004138:	9a04      	ldr	r2, [sp, #16]
 800413a:	189b      	adds	r3, r3, r2
 800413c:	6163      	str	r3, [r4, #20]
 800413e:	e762      	b.n	8004006 <_svfiprintf_r+0x46>
 8004140:	4343      	muls	r3, r0
 8004142:	0035      	movs	r5, r6
 8004144:	2101      	movs	r1, #1
 8004146:	189b      	adds	r3, r3, r2
 8004148:	e7a4      	b.n	8004094 <_svfiprintf_r+0xd4>
 800414a:	2300      	movs	r3, #0
 800414c:	200a      	movs	r0, #10
 800414e:	0019      	movs	r1, r3
 8004150:	3501      	adds	r5, #1
 8004152:	6063      	str	r3, [r4, #4]
 8004154:	782a      	ldrb	r2, [r5, #0]
 8004156:	1c6e      	adds	r6, r5, #1
 8004158:	3a30      	subs	r2, #48	@ 0x30
 800415a:	2a09      	cmp	r2, #9
 800415c:	d903      	bls.n	8004166 <_svfiprintf_r+0x1a6>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0c8      	beq.n	80040f4 <_svfiprintf_r+0x134>
 8004162:	9109      	str	r1, [sp, #36]	@ 0x24
 8004164:	e7c6      	b.n	80040f4 <_svfiprintf_r+0x134>
 8004166:	4341      	muls	r1, r0
 8004168:	0035      	movs	r5, r6
 800416a:	2301      	movs	r3, #1
 800416c:	1889      	adds	r1, r1, r2
 800416e:	e7f1      	b.n	8004154 <_svfiprintf_r+0x194>
 8004170:	aa07      	add	r2, sp, #28
 8004172:	9200      	str	r2, [sp, #0]
 8004174:	0021      	movs	r1, r4
 8004176:	003a      	movs	r2, r7
 8004178:	4b0f      	ldr	r3, [pc, #60]	@ (80041b8 <_svfiprintf_r+0x1f8>)
 800417a:	9803      	ldr	r0, [sp, #12]
 800417c:	e000      	b.n	8004180 <_svfiprintf_r+0x1c0>
 800417e:	bf00      	nop
 8004180:	9004      	str	r0, [sp, #16]
 8004182:	9b04      	ldr	r3, [sp, #16]
 8004184:	3301      	adds	r3, #1
 8004186:	d1d6      	bne.n	8004136 <_svfiprintf_r+0x176>
 8004188:	89bb      	ldrh	r3, [r7, #12]
 800418a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800418c:	065b      	lsls	r3, r3, #25
 800418e:	d500      	bpl.n	8004192 <_svfiprintf_r+0x1d2>
 8004190:	e72c      	b.n	8003fec <_svfiprintf_r+0x2c>
 8004192:	b021      	add	sp, #132	@ 0x84
 8004194:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004196:	aa07      	add	r2, sp, #28
 8004198:	9200      	str	r2, [sp, #0]
 800419a:	0021      	movs	r1, r4
 800419c:	003a      	movs	r2, r7
 800419e:	4b06      	ldr	r3, [pc, #24]	@ (80041b8 <_svfiprintf_r+0x1f8>)
 80041a0:	9803      	ldr	r0, [sp, #12]
 80041a2:	f000 f87b 	bl	800429c <_printf_i>
 80041a6:	e7eb      	b.n	8004180 <_svfiprintf_r+0x1c0>
 80041a8:	08005ab4 	.word	0x08005ab4
 80041ac:	08005aba 	.word	0x08005aba
 80041b0:	08005abe 	.word	0x08005abe
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08003f01 	.word	0x08003f01

080041bc <_printf_common>:
 80041bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041be:	0016      	movs	r6, r2
 80041c0:	9301      	str	r3, [sp, #4]
 80041c2:	688a      	ldr	r2, [r1, #8]
 80041c4:	690b      	ldr	r3, [r1, #16]
 80041c6:	000c      	movs	r4, r1
 80041c8:	9000      	str	r0, [sp, #0]
 80041ca:	4293      	cmp	r3, r2
 80041cc:	da00      	bge.n	80041d0 <_printf_common+0x14>
 80041ce:	0013      	movs	r3, r2
 80041d0:	0022      	movs	r2, r4
 80041d2:	6033      	str	r3, [r6, #0]
 80041d4:	3243      	adds	r2, #67	@ 0x43
 80041d6:	7812      	ldrb	r2, [r2, #0]
 80041d8:	2a00      	cmp	r2, #0
 80041da:	d001      	beq.n	80041e0 <_printf_common+0x24>
 80041dc:	3301      	adds	r3, #1
 80041de:	6033      	str	r3, [r6, #0]
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	069b      	lsls	r3, r3, #26
 80041e4:	d502      	bpl.n	80041ec <_printf_common+0x30>
 80041e6:	6833      	ldr	r3, [r6, #0]
 80041e8:	3302      	adds	r3, #2
 80041ea:	6033      	str	r3, [r6, #0]
 80041ec:	6822      	ldr	r2, [r4, #0]
 80041ee:	2306      	movs	r3, #6
 80041f0:	0015      	movs	r5, r2
 80041f2:	401d      	ands	r5, r3
 80041f4:	421a      	tst	r2, r3
 80041f6:	d027      	beq.n	8004248 <_printf_common+0x8c>
 80041f8:	0023      	movs	r3, r4
 80041fa:	3343      	adds	r3, #67	@ 0x43
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	1e5a      	subs	r2, r3, #1
 8004200:	4193      	sbcs	r3, r2
 8004202:	6822      	ldr	r2, [r4, #0]
 8004204:	0692      	lsls	r2, r2, #26
 8004206:	d430      	bmi.n	800426a <_printf_common+0xae>
 8004208:	0022      	movs	r2, r4
 800420a:	9901      	ldr	r1, [sp, #4]
 800420c:	9800      	ldr	r0, [sp, #0]
 800420e:	9d08      	ldr	r5, [sp, #32]
 8004210:	3243      	adds	r2, #67	@ 0x43
 8004212:	47a8      	blx	r5
 8004214:	3001      	adds	r0, #1
 8004216:	d025      	beq.n	8004264 <_printf_common+0xa8>
 8004218:	2206      	movs	r2, #6
 800421a:	6823      	ldr	r3, [r4, #0]
 800421c:	2500      	movs	r5, #0
 800421e:	4013      	ands	r3, r2
 8004220:	2b04      	cmp	r3, #4
 8004222:	d105      	bne.n	8004230 <_printf_common+0x74>
 8004224:	6833      	ldr	r3, [r6, #0]
 8004226:	68e5      	ldr	r5, [r4, #12]
 8004228:	1aed      	subs	r5, r5, r3
 800422a:	43eb      	mvns	r3, r5
 800422c:	17db      	asrs	r3, r3, #31
 800422e:	401d      	ands	r5, r3
 8004230:	68a3      	ldr	r3, [r4, #8]
 8004232:	6922      	ldr	r2, [r4, #16]
 8004234:	4293      	cmp	r3, r2
 8004236:	dd01      	ble.n	800423c <_printf_common+0x80>
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	18ed      	adds	r5, r5, r3
 800423c:	2600      	movs	r6, #0
 800423e:	42b5      	cmp	r5, r6
 8004240:	d120      	bne.n	8004284 <_printf_common+0xc8>
 8004242:	2000      	movs	r0, #0
 8004244:	e010      	b.n	8004268 <_printf_common+0xac>
 8004246:	3501      	adds	r5, #1
 8004248:	68e3      	ldr	r3, [r4, #12]
 800424a:	6832      	ldr	r2, [r6, #0]
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	42ab      	cmp	r3, r5
 8004250:	ddd2      	ble.n	80041f8 <_printf_common+0x3c>
 8004252:	0022      	movs	r2, r4
 8004254:	2301      	movs	r3, #1
 8004256:	9901      	ldr	r1, [sp, #4]
 8004258:	9800      	ldr	r0, [sp, #0]
 800425a:	9f08      	ldr	r7, [sp, #32]
 800425c:	3219      	adds	r2, #25
 800425e:	47b8      	blx	r7
 8004260:	3001      	adds	r0, #1
 8004262:	d1f0      	bne.n	8004246 <_printf_common+0x8a>
 8004264:	2001      	movs	r0, #1
 8004266:	4240      	negs	r0, r0
 8004268:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800426a:	2030      	movs	r0, #48	@ 0x30
 800426c:	18e1      	adds	r1, r4, r3
 800426e:	3143      	adds	r1, #67	@ 0x43
 8004270:	7008      	strb	r0, [r1, #0]
 8004272:	0021      	movs	r1, r4
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	3145      	adds	r1, #69	@ 0x45
 8004278:	7809      	ldrb	r1, [r1, #0]
 800427a:	18a2      	adds	r2, r4, r2
 800427c:	3243      	adds	r2, #67	@ 0x43
 800427e:	3302      	adds	r3, #2
 8004280:	7011      	strb	r1, [r2, #0]
 8004282:	e7c1      	b.n	8004208 <_printf_common+0x4c>
 8004284:	0022      	movs	r2, r4
 8004286:	2301      	movs	r3, #1
 8004288:	9901      	ldr	r1, [sp, #4]
 800428a:	9800      	ldr	r0, [sp, #0]
 800428c:	9f08      	ldr	r7, [sp, #32]
 800428e:	321a      	adds	r2, #26
 8004290:	47b8      	blx	r7
 8004292:	3001      	adds	r0, #1
 8004294:	d0e6      	beq.n	8004264 <_printf_common+0xa8>
 8004296:	3601      	adds	r6, #1
 8004298:	e7d1      	b.n	800423e <_printf_common+0x82>
	...

0800429c <_printf_i>:
 800429c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800429e:	b08b      	sub	sp, #44	@ 0x2c
 80042a0:	9206      	str	r2, [sp, #24]
 80042a2:	000a      	movs	r2, r1
 80042a4:	3243      	adds	r2, #67	@ 0x43
 80042a6:	9307      	str	r3, [sp, #28]
 80042a8:	9005      	str	r0, [sp, #20]
 80042aa:	9203      	str	r2, [sp, #12]
 80042ac:	7e0a      	ldrb	r2, [r1, #24]
 80042ae:	000c      	movs	r4, r1
 80042b0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80042b2:	2a78      	cmp	r2, #120	@ 0x78
 80042b4:	d809      	bhi.n	80042ca <_printf_i+0x2e>
 80042b6:	2a62      	cmp	r2, #98	@ 0x62
 80042b8:	d80b      	bhi.n	80042d2 <_printf_i+0x36>
 80042ba:	2a00      	cmp	r2, #0
 80042bc:	d100      	bne.n	80042c0 <_printf_i+0x24>
 80042be:	e0bc      	b.n	800443a <_printf_i+0x19e>
 80042c0:	497b      	ldr	r1, [pc, #492]	@ (80044b0 <_printf_i+0x214>)
 80042c2:	9104      	str	r1, [sp, #16]
 80042c4:	2a58      	cmp	r2, #88	@ 0x58
 80042c6:	d100      	bne.n	80042ca <_printf_i+0x2e>
 80042c8:	e090      	b.n	80043ec <_printf_i+0x150>
 80042ca:	0025      	movs	r5, r4
 80042cc:	3542      	adds	r5, #66	@ 0x42
 80042ce:	702a      	strb	r2, [r5, #0]
 80042d0:	e022      	b.n	8004318 <_printf_i+0x7c>
 80042d2:	0010      	movs	r0, r2
 80042d4:	3863      	subs	r0, #99	@ 0x63
 80042d6:	2815      	cmp	r0, #21
 80042d8:	d8f7      	bhi.n	80042ca <_printf_i+0x2e>
 80042da:	f7fb ff19 	bl	8000110 <__gnu_thumb1_case_shi>
 80042de:	0016      	.short	0x0016
 80042e0:	fff6001f 	.word	0xfff6001f
 80042e4:	fff6fff6 	.word	0xfff6fff6
 80042e8:	001ffff6 	.word	0x001ffff6
 80042ec:	fff6fff6 	.word	0xfff6fff6
 80042f0:	fff6fff6 	.word	0xfff6fff6
 80042f4:	003600a1 	.word	0x003600a1
 80042f8:	fff60080 	.word	0xfff60080
 80042fc:	00b2fff6 	.word	0x00b2fff6
 8004300:	0036fff6 	.word	0x0036fff6
 8004304:	fff6fff6 	.word	0xfff6fff6
 8004308:	0084      	.short	0x0084
 800430a:	0025      	movs	r5, r4
 800430c:	681a      	ldr	r2, [r3, #0]
 800430e:	3542      	adds	r5, #66	@ 0x42
 8004310:	1d11      	adds	r1, r2, #4
 8004312:	6019      	str	r1, [r3, #0]
 8004314:	6813      	ldr	r3, [r2, #0]
 8004316:	702b      	strb	r3, [r5, #0]
 8004318:	2301      	movs	r3, #1
 800431a:	e0a0      	b.n	800445e <_printf_i+0x1c2>
 800431c:	6818      	ldr	r0, [r3, #0]
 800431e:	6809      	ldr	r1, [r1, #0]
 8004320:	1d02      	adds	r2, r0, #4
 8004322:	060d      	lsls	r5, r1, #24
 8004324:	d50b      	bpl.n	800433e <_printf_i+0xa2>
 8004326:	6806      	ldr	r6, [r0, #0]
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	2e00      	cmp	r6, #0
 800432c:	da03      	bge.n	8004336 <_printf_i+0x9a>
 800432e:	232d      	movs	r3, #45	@ 0x2d
 8004330:	9a03      	ldr	r2, [sp, #12]
 8004332:	4276      	negs	r6, r6
 8004334:	7013      	strb	r3, [r2, #0]
 8004336:	4b5e      	ldr	r3, [pc, #376]	@ (80044b0 <_printf_i+0x214>)
 8004338:	270a      	movs	r7, #10
 800433a:	9304      	str	r3, [sp, #16]
 800433c:	e018      	b.n	8004370 <_printf_i+0xd4>
 800433e:	6806      	ldr	r6, [r0, #0]
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	0649      	lsls	r1, r1, #25
 8004344:	d5f1      	bpl.n	800432a <_printf_i+0x8e>
 8004346:	b236      	sxth	r6, r6
 8004348:	e7ef      	b.n	800432a <_printf_i+0x8e>
 800434a:	6808      	ldr	r0, [r1, #0]
 800434c:	6819      	ldr	r1, [r3, #0]
 800434e:	c940      	ldmia	r1!, {r6}
 8004350:	0605      	lsls	r5, r0, #24
 8004352:	d402      	bmi.n	800435a <_printf_i+0xbe>
 8004354:	0640      	lsls	r0, r0, #25
 8004356:	d500      	bpl.n	800435a <_printf_i+0xbe>
 8004358:	b2b6      	uxth	r6, r6
 800435a:	6019      	str	r1, [r3, #0]
 800435c:	4b54      	ldr	r3, [pc, #336]	@ (80044b0 <_printf_i+0x214>)
 800435e:	270a      	movs	r7, #10
 8004360:	9304      	str	r3, [sp, #16]
 8004362:	2a6f      	cmp	r2, #111	@ 0x6f
 8004364:	d100      	bne.n	8004368 <_printf_i+0xcc>
 8004366:	3f02      	subs	r7, #2
 8004368:	0023      	movs	r3, r4
 800436a:	2200      	movs	r2, #0
 800436c:	3343      	adds	r3, #67	@ 0x43
 800436e:	701a      	strb	r2, [r3, #0]
 8004370:	6863      	ldr	r3, [r4, #4]
 8004372:	60a3      	str	r3, [r4, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	db03      	blt.n	8004380 <_printf_i+0xe4>
 8004378:	2104      	movs	r1, #4
 800437a:	6822      	ldr	r2, [r4, #0]
 800437c:	438a      	bics	r2, r1
 800437e:	6022      	str	r2, [r4, #0]
 8004380:	2e00      	cmp	r6, #0
 8004382:	d102      	bne.n	800438a <_printf_i+0xee>
 8004384:	9d03      	ldr	r5, [sp, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00c      	beq.n	80043a4 <_printf_i+0x108>
 800438a:	9d03      	ldr	r5, [sp, #12]
 800438c:	0030      	movs	r0, r6
 800438e:	0039      	movs	r1, r7
 8004390:	f7fb ff4e 	bl	8000230 <__aeabi_uidivmod>
 8004394:	9b04      	ldr	r3, [sp, #16]
 8004396:	3d01      	subs	r5, #1
 8004398:	5c5b      	ldrb	r3, [r3, r1]
 800439a:	702b      	strb	r3, [r5, #0]
 800439c:	0033      	movs	r3, r6
 800439e:	0006      	movs	r6, r0
 80043a0:	429f      	cmp	r7, r3
 80043a2:	d9f3      	bls.n	800438c <_printf_i+0xf0>
 80043a4:	2f08      	cmp	r7, #8
 80043a6:	d109      	bne.n	80043bc <_printf_i+0x120>
 80043a8:	6823      	ldr	r3, [r4, #0]
 80043aa:	07db      	lsls	r3, r3, #31
 80043ac:	d506      	bpl.n	80043bc <_printf_i+0x120>
 80043ae:	6862      	ldr	r2, [r4, #4]
 80043b0:	6923      	ldr	r3, [r4, #16]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	dc02      	bgt.n	80043bc <_printf_i+0x120>
 80043b6:	2330      	movs	r3, #48	@ 0x30
 80043b8:	3d01      	subs	r5, #1
 80043ba:	702b      	strb	r3, [r5, #0]
 80043bc:	9b03      	ldr	r3, [sp, #12]
 80043be:	1b5b      	subs	r3, r3, r5
 80043c0:	6123      	str	r3, [r4, #16]
 80043c2:	9b07      	ldr	r3, [sp, #28]
 80043c4:	0021      	movs	r1, r4
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	9805      	ldr	r0, [sp, #20]
 80043ca:	9b06      	ldr	r3, [sp, #24]
 80043cc:	aa09      	add	r2, sp, #36	@ 0x24
 80043ce:	f7ff fef5 	bl	80041bc <_printf_common>
 80043d2:	3001      	adds	r0, #1
 80043d4:	d148      	bne.n	8004468 <_printf_i+0x1cc>
 80043d6:	2001      	movs	r0, #1
 80043d8:	4240      	negs	r0, r0
 80043da:	b00b      	add	sp, #44	@ 0x2c
 80043dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043de:	2220      	movs	r2, #32
 80043e0:	6809      	ldr	r1, [r1, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	6022      	str	r2, [r4, #0]
 80043e6:	2278      	movs	r2, #120	@ 0x78
 80043e8:	4932      	ldr	r1, [pc, #200]	@ (80044b4 <_printf_i+0x218>)
 80043ea:	9104      	str	r1, [sp, #16]
 80043ec:	0021      	movs	r1, r4
 80043ee:	3145      	adds	r1, #69	@ 0x45
 80043f0:	700a      	strb	r2, [r1, #0]
 80043f2:	6819      	ldr	r1, [r3, #0]
 80043f4:	6822      	ldr	r2, [r4, #0]
 80043f6:	c940      	ldmia	r1!, {r6}
 80043f8:	0610      	lsls	r0, r2, #24
 80043fa:	d402      	bmi.n	8004402 <_printf_i+0x166>
 80043fc:	0650      	lsls	r0, r2, #25
 80043fe:	d500      	bpl.n	8004402 <_printf_i+0x166>
 8004400:	b2b6      	uxth	r6, r6
 8004402:	6019      	str	r1, [r3, #0]
 8004404:	07d3      	lsls	r3, r2, #31
 8004406:	d502      	bpl.n	800440e <_printf_i+0x172>
 8004408:	2320      	movs	r3, #32
 800440a:	4313      	orrs	r3, r2
 800440c:	6023      	str	r3, [r4, #0]
 800440e:	2e00      	cmp	r6, #0
 8004410:	d001      	beq.n	8004416 <_printf_i+0x17a>
 8004412:	2710      	movs	r7, #16
 8004414:	e7a8      	b.n	8004368 <_printf_i+0xcc>
 8004416:	2220      	movs	r2, #32
 8004418:	6823      	ldr	r3, [r4, #0]
 800441a:	4393      	bics	r3, r2
 800441c:	6023      	str	r3, [r4, #0]
 800441e:	e7f8      	b.n	8004412 <_printf_i+0x176>
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	680d      	ldr	r5, [r1, #0]
 8004424:	1d10      	adds	r0, r2, #4
 8004426:	6949      	ldr	r1, [r1, #20]
 8004428:	6018      	str	r0, [r3, #0]
 800442a:	6813      	ldr	r3, [r2, #0]
 800442c:	062e      	lsls	r6, r5, #24
 800442e:	d501      	bpl.n	8004434 <_printf_i+0x198>
 8004430:	6019      	str	r1, [r3, #0]
 8004432:	e002      	b.n	800443a <_printf_i+0x19e>
 8004434:	066d      	lsls	r5, r5, #25
 8004436:	d5fb      	bpl.n	8004430 <_printf_i+0x194>
 8004438:	8019      	strh	r1, [r3, #0]
 800443a:	2300      	movs	r3, #0
 800443c:	9d03      	ldr	r5, [sp, #12]
 800443e:	6123      	str	r3, [r4, #16]
 8004440:	e7bf      	b.n	80043c2 <_printf_i+0x126>
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	1d11      	adds	r1, r2, #4
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	6815      	ldr	r5, [r2, #0]
 800444a:	2100      	movs	r1, #0
 800444c:	0028      	movs	r0, r5
 800444e:	6862      	ldr	r2, [r4, #4]
 8004450:	f000 f858 	bl	8004504 <memchr>
 8004454:	2800      	cmp	r0, #0
 8004456:	d001      	beq.n	800445c <_printf_i+0x1c0>
 8004458:	1b40      	subs	r0, r0, r5
 800445a:	6060      	str	r0, [r4, #4]
 800445c:	6863      	ldr	r3, [r4, #4]
 800445e:	6123      	str	r3, [r4, #16]
 8004460:	2300      	movs	r3, #0
 8004462:	9a03      	ldr	r2, [sp, #12]
 8004464:	7013      	strb	r3, [r2, #0]
 8004466:	e7ac      	b.n	80043c2 <_printf_i+0x126>
 8004468:	002a      	movs	r2, r5
 800446a:	6923      	ldr	r3, [r4, #16]
 800446c:	9906      	ldr	r1, [sp, #24]
 800446e:	9805      	ldr	r0, [sp, #20]
 8004470:	9d07      	ldr	r5, [sp, #28]
 8004472:	47a8      	blx	r5
 8004474:	3001      	adds	r0, #1
 8004476:	d0ae      	beq.n	80043d6 <_printf_i+0x13a>
 8004478:	6823      	ldr	r3, [r4, #0]
 800447a:	079b      	lsls	r3, r3, #30
 800447c:	d415      	bmi.n	80044aa <_printf_i+0x20e>
 800447e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004480:	68e0      	ldr	r0, [r4, #12]
 8004482:	4298      	cmp	r0, r3
 8004484:	daa9      	bge.n	80043da <_printf_i+0x13e>
 8004486:	0018      	movs	r0, r3
 8004488:	e7a7      	b.n	80043da <_printf_i+0x13e>
 800448a:	0022      	movs	r2, r4
 800448c:	2301      	movs	r3, #1
 800448e:	9906      	ldr	r1, [sp, #24]
 8004490:	9805      	ldr	r0, [sp, #20]
 8004492:	9e07      	ldr	r6, [sp, #28]
 8004494:	3219      	adds	r2, #25
 8004496:	47b0      	blx	r6
 8004498:	3001      	adds	r0, #1
 800449a:	d09c      	beq.n	80043d6 <_printf_i+0x13a>
 800449c:	3501      	adds	r5, #1
 800449e:	68e3      	ldr	r3, [r4, #12]
 80044a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80044a2:	1a9b      	subs	r3, r3, r2
 80044a4:	42ab      	cmp	r3, r5
 80044a6:	dcf0      	bgt.n	800448a <_printf_i+0x1ee>
 80044a8:	e7e9      	b.n	800447e <_printf_i+0x1e2>
 80044aa:	2500      	movs	r5, #0
 80044ac:	e7f7      	b.n	800449e <_printf_i+0x202>
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	08005ac5 	.word	0x08005ac5
 80044b4:	08005ad6 	.word	0x08005ad6

080044b8 <memmove>:
 80044b8:	b510      	push	{r4, lr}
 80044ba:	4288      	cmp	r0, r1
 80044bc:	d806      	bhi.n	80044cc <memmove+0x14>
 80044be:	2300      	movs	r3, #0
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d008      	beq.n	80044d6 <memmove+0x1e>
 80044c4:	5ccc      	ldrb	r4, [r1, r3]
 80044c6:	54c4      	strb	r4, [r0, r3]
 80044c8:	3301      	adds	r3, #1
 80044ca:	e7f9      	b.n	80044c0 <memmove+0x8>
 80044cc:	188b      	adds	r3, r1, r2
 80044ce:	4298      	cmp	r0, r3
 80044d0:	d2f5      	bcs.n	80044be <memmove+0x6>
 80044d2:	3a01      	subs	r2, #1
 80044d4:	d200      	bcs.n	80044d8 <memmove+0x20>
 80044d6:	bd10      	pop	{r4, pc}
 80044d8:	5c8b      	ldrb	r3, [r1, r2]
 80044da:	5483      	strb	r3, [r0, r2]
 80044dc:	e7f9      	b.n	80044d2 <memmove+0x1a>
	...

080044e0 <_sbrk_r>:
 80044e0:	2300      	movs	r3, #0
 80044e2:	b570      	push	{r4, r5, r6, lr}
 80044e4:	4d06      	ldr	r5, [pc, #24]	@ (8004500 <_sbrk_r+0x20>)
 80044e6:	0004      	movs	r4, r0
 80044e8:	0008      	movs	r0, r1
 80044ea:	602b      	str	r3, [r5, #0]
 80044ec:	f7fc fda8 	bl	8001040 <_sbrk>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d103      	bne.n	80044fc <_sbrk_r+0x1c>
 80044f4:	682b      	ldr	r3, [r5, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d000      	beq.n	80044fc <_sbrk_r+0x1c>
 80044fa:	6023      	str	r3, [r4, #0]
 80044fc:	bd70      	pop	{r4, r5, r6, pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	20001038 	.word	0x20001038

08004504 <memchr>:
 8004504:	b2c9      	uxtb	r1, r1
 8004506:	1882      	adds	r2, r0, r2
 8004508:	4290      	cmp	r0, r2
 800450a:	d101      	bne.n	8004510 <memchr+0xc>
 800450c:	2000      	movs	r0, #0
 800450e:	4770      	bx	lr
 8004510:	7803      	ldrb	r3, [r0, #0]
 8004512:	428b      	cmp	r3, r1
 8004514:	d0fb      	beq.n	800450e <memchr+0xa>
 8004516:	3001      	adds	r0, #1
 8004518:	e7f6      	b.n	8004508 <memchr+0x4>

0800451a <_realloc_r>:
 800451a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800451c:	0006      	movs	r6, r0
 800451e:	000c      	movs	r4, r1
 8004520:	0015      	movs	r5, r2
 8004522:	2900      	cmp	r1, #0
 8004524:	d105      	bne.n	8004532 <_realloc_r+0x18>
 8004526:	0011      	movs	r1, r2
 8004528:	f7ff fc5a 	bl	8003de0 <_malloc_r>
 800452c:	0004      	movs	r4, r0
 800452e:	0020      	movs	r0, r4
 8004530:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004532:	2a00      	cmp	r2, #0
 8004534:	d103      	bne.n	800453e <_realloc_r+0x24>
 8004536:	f7ff fbe7 	bl	8003d08 <_free_r>
 800453a:	2400      	movs	r4, #0
 800453c:	e7f7      	b.n	800452e <_realloc_r+0x14>
 800453e:	f000 f81b 	bl	8004578 <_malloc_usable_size_r>
 8004542:	0007      	movs	r7, r0
 8004544:	4285      	cmp	r5, r0
 8004546:	d802      	bhi.n	800454e <_realloc_r+0x34>
 8004548:	0843      	lsrs	r3, r0, #1
 800454a:	42ab      	cmp	r3, r5
 800454c:	d3ef      	bcc.n	800452e <_realloc_r+0x14>
 800454e:	0029      	movs	r1, r5
 8004550:	0030      	movs	r0, r6
 8004552:	f7ff fc45 	bl	8003de0 <_malloc_r>
 8004556:	9001      	str	r0, [sp, #4]
 8004558:	2800      	cmp	r0, #0
 800455a:	d0ee      	beq.n	800453a <_realloc_r+0x20>
 800455c:	002a      	movs	r2, r5
 800455e:	42bd      	cmp	r5, r7
 8004560:	d900      	bls.n	8004564 <_realloc_r+0x4a>
 8004562:	003a      	movs	r2, r7
 8004564:	0021      	movs	r1, r4
 8004566:	9801      	ldr	r0, [sp, #4]
 8004568:	f7ff fbc4 	bl	8003cf4 <memcpy>
 800456c:	0021      	movs	r1, r4
 800456e:	0030      	movs	r0, r6
 8004570:	f7ff fbca 	bl	8003d08 <_free_r>
 8004574:	9c01      	ldr	r4, [sp, #4]
 8004576:	e7da      	b.n	800452e <_realloc_r+0x14>

08004578 <_malloc_usable_size_r>:
 8004578:	1f0b      	subs	r3, r1, #4
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	1f18      	subs	r0, r3, #4
 800457e:	2b00      	cmp	r3, #0
 8004580:	da01      	bge.n	8004586 <_malloc_usable_size_r+0xe>
 8004582:	580b      	ldr	r3, [r1, r0]
 8004584:	18c0      	adds	r0, r0, r3
 8004586:	4770      	bx	lr

08004588 <_init>:
 8004588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800458a:	46c0      	nop			@ (mov r8, r8)
 800458c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800458e:	bc08      	pop	{r3}
 8004590:	469e      	mov	lr, r3
 8004592:	4770      	bx	lr

08004594 <_fini>:
 8004594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800459a:	bc08      	pop	{r3}
 800459c:	469e      	mov	lr, r3
 800459e:	4770      	bx	lr

080045a0 <__FLASH_Program_Fast_veneer>:
 80045a0:	b401      	push	{r0}
 80045a2:	4802      	ldr	r0, [pc, #8]	@ (80045ac <__FLASH_Program_Fast_veneer+0xc>)
 80045a4:	4684      	mov	ip, r0
 80045a6:	bc01      	pop	{r0}
 80045a8:	4760      	bx	ip
 80045aa:	bf00      	nop
 80045ac:	20000085 	.word	0x20000085

Disassembly of section .data:

20000000 <commands>:
20000000:	080055bc 080055e0 08005608 08005630     .U...U...V..0V..
20000010:	0800564c 0800566c 08005690 080056b4     LV..lV...V...V..
20000020:	080056cc 080056e8                       .V...V..

20000028 <SystemCoreClock>:
20000028:	00f42400                                .$..

2000002c <uwTickPrio>:
2000002c:	00000004                                ....

20000030 <uwTickFreq>:
20000030:	00000001                                ....

20000034 <_impure_ptr>:
20000034:	20000038                                8.. 

20000038 <_impure_data>:
20000038:	00000000 20000f00 20000f68 20000fd0     ....... h.. ... 
	...

20000084 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
20000084:	b580      	push	{r7, lr}
20000086:	b088      	sub	sp, #32
20000088:	af00      	add	r7, sp, #0
2000008a:	6078      	str	r0, [r7, #4]
2000008c:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
2000008e:	231f      	movs	r3, #31
20000090:	18fb      	adds	r3, r7, r3
20000092:	2200      	movs	r2, #0
20000094:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
20000096:	687b      	ldr	r3, [r7, #4]
20000098:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
2000009a:	683b      	ldr	r3, [r7, #0]
2000009c:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
2000009e:	4b1a      	ldr	r3, [pc, #104]	@ (20000108 <FLASH_Program_Fast+0x84>)
200000a0:	695a      	ldr	r2, [r3, #20]
200000a2:	4b19      	ldr	r3, [pc, #100]	@ (20000108 <FLASH_Program_Fast+0x84>)
200000a4:	2180      	movs	r1, #128	@ 0x80
200000a6:	02c9      	lsls	r1, r1, #11
200000a8:	430a      	orrs	r2, r1
200000aa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
200000ac:	f3ef 8310 	mrs	r3, PRIMASK
200000b0:	60fb      	str	r3, [r7, #12]
  return(result);
200000b2:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
200000b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
200000b6:	b672      	cpsid	i
}
200000b8:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
200000ba:	e00f      	b.n	200000dc <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
200000bc:	697a      	ldr	r2, [r7, #20]
200000be:	69bb      	ldr	r3, [r7, #24]
200000c0:	6812      	ldr	r2, [r2, #0]
200000c2:	601a      	str	r2, [r3, #0]
    src += 4U;
200000c4:	697b      	ldr	r3, [r7, #20]
200000c6:	3304      	adds	r3, #4
200000c8:	617b      	str	r3, [r7, #20]
    dest += 4U;
200000ca:	69bb      	ldr	r3, [r7, #24]
200000cc:	3304      	adds	r3, #4
200000ce:	61bb      	str	r3, [r7, #24]
    index++;
200000d0:	211f      	movs	r1, #31
200000d2:	187b      	adds	r3, r7, r1
200000d4:	781a      	ldrb	r2, [r3, #0]
200000d6:	187b      	adds	r3, r7, r1
200000d8:	3201      	adds	r2, #1
200000da:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
200000dc:	231f      	movs	r3, #31
200000de:	18fb      	adds	r3, r7, r3
200000e0:	781b      	ldrb	r3, [r3, #0]
200000e2:	2b3f      	cmp	r3, #63	@ 0x3f
200000e4:	d9ea      	bls.n	200000bc <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
200000e6:	46c0      	nop			@ (mov r8, r8)
200000e8:	4b07      	ldr	r3, [pc, #28]	@ (20000108 <FLASH_Program_Fast+0x84>)
200000ea:	691a      	ldr	r2, [r3, #16]
200000ec:	2380      	movs	r3, #128	@ 0x80
200000ee:	025b      	lsls	r3, r3, #9
200000f0:	4013      	ands	r3, r2
200000f2:	d1f9      	bne.n	200000e8 <FLASH_Program_Fast+0x64>
200000f4:	693b      	ldr	r3, [r7, #16]
200000f6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
200000f8:	68bb      	ldr	r3, [r7, #8]
200000fa:	f383 8810 	msr	PRIMASK, r3
}
200000fe:	46c0      	nop			@ (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000100:	46c0      	nop			@ (mov r8, r8)
20000102:	46bd      	mov	sp, r7
20000104:	b008      	add	sp, #32
20000106:	bd80      	pop	{r7, pc}
20000108:	40022000 	.word	0x40022000
