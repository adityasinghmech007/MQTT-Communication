
Cert_upload.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003070  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001174  08003128  08003128  00004128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800429c  0800429c  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  0800429c  0800429c  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800429c  0800429c  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080042a4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008b4  20000018  080042bc  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  080042bc  000068cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b675  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc3  00000000  00000000  000116b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000838  00000000  00000000  00013378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000657  00000000  00000000  00013bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001512a  00000000  00000000  00014207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b568  00000000  00000000  00029331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083da9  00000000  00000000  00034899  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8642  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c14  00000000  00000000  000b8688  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000ba29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	20000018 	.word	0x20000018
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08003110 	.word	0x08003110

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	2000001c 	.word	0x2000001c
 80000fc:	08003110 	.word	0x08003110

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__udivsi3>:
 8000110:	2200      	movs	r2, #0
 8000112:	0843      	lsrs	r3, r0, #1
 8000114:	428b      	cmp	r3, r1
 8000116:	d374      	bcc.n	8000202 <__udivsi3+0xf2>
 8000118:	0903      	lsrs	r3, r0, #4
 800011a:	428b      	cmp	r3, r1
 800011c:	d35f      	bcc.n	80001de <__udivsi3+0xce>
 800011e:	0a03      	lsrs	r3, r0, #8
 8000120:	428b      	cmp	r3, r1
 8000122:	d344      	bcc.n	80001ae <__udivsi3+0x9e>
 8000124:	0b03      	lsrs	r3, r0, #12
 8000126:	428b      	cmp	r3, r1
 8000128:	d328      	bcc.n	800017c <__udivsi3+0x6c>
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d30d      	bcc.n	800014c <__udivsi3+0x3c>
 8000130:	22ff      	movs	r2, #255	@ 0xff
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	ba12      	rev	r2, r2
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d302      	bcc.n	8000142 <__udivsi3+0x32>
 800013c:	1212      	asrs	r2, r2, #8
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	d065      	beq.n	800020e <__udivsi3+0xfe>
 8000142:	0b03      	lsrs	r3, r0, #12
 8000144:	428b      	cmp	r3, r1
 8000146:	d319      	bcc.n	800017c <__udivsi3+0x6c>
 8000148:	e000      	b.n	800014c <__udivsi3+0x3c>
 800014a:	0a09      	lsrs	r1, r1, #8
 800014c:	0bc3      	lsrs	r3, r0, #15
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x46>
 8000152:	03cb      	lsls	r3, r1, #15
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b83      	lsrs	r3, r0, #14
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x52>
 800015e:	038b      	lsls	r3, r1, #14
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b43      	lsrs	r3, r0, #13
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x5e>
 800016a:	034b      	lsls	r3, r1, #13
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b03      	lsrs	r3, r0, #12
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x6a>
 8000176:	030b      	lsls	r3, r1, #12
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0ac3      	lsrs	r3, r0, #11
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x76>
 8000182:	02cb      	lsls	r3, r1, #11
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a83      	lsrs	r3, r0, #10
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x82>
 800018e:	028b      	lsls	r3, r1, #10
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a43      	lsrs	r3, r0, #9
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x8e>
 800019a:	024b      	lsls	r3, r1, #9
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a03      	lsrs	r3, r0, #8
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x9a>
 80001a6:	020b      	lsls	r3, r1, #8
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	d2cd      	bcs.n	800014a <__udivsi3+0x3a>
 80001ae:	09c3      	lsrs	r3, r0, #7
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xa8>
 80001b4:	01cb      	lsls	r3, r1, #7
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0983      	lsrs	r3, r0, #6
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xb4>
 80001c0:	018b      	lsls	r3, r1, #6
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0943      	lsrs	r3, r0, #5
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xc0>
 80001cc:	014b      	lsls	r3, r1, #5
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0903      	lsrs	r3, r0, #4
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xcc>
 80001d8:	010b      	lsls	r3, r1, #4
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	08c3      	lsrs	r3, r0, #3
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xd8>
 80001e4:	00cb      	lsls	r3, r1, #3
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0883      	lsrs	r3, r0, #2
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xe4>
 80001f0:	008b      	lsls	r3, r1, #2
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0843      	lsrs	r3, r0, #1
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xf0>
 80001fc:	004b      	lsls	r3, r1, #1
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	1a41      	subs	r1, r0, r1
 8000204:	d200      	bcs.n	8000208 <__udivsi3+0xf8>
 8000206:	4601      	mov	r1, r0
 8000208:	4152      	adcs	r2, r2
 800020a:	4610      	mov	r0, r2
 800020c:	4770      	bx	lr
 800020e:	e7ff      	b.n	8000210 <__udivsi3+0x100>
 8000210:	b501      	push	{r0, lr}
 8000212:	2000      	movs	r0, #0
 8000214:	f000 f806 	bl	8000224 <__aeabi_idiv0>
 8000218:	bd02      	pop	{r1, pc}
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <__aeabi_uidivmod>:
 800021c:	2900      	cmp	r1, #0
 800021e:	d0f7      	beq.n	8000210 <__udivsi3+0x100>
 8000220:	e776      	b.n	8000110 <__udivsi3>
 8000222:	4770      	bx	lr

08000224 <__aeabi_idiv0>:
 8000224:	4770      	bx	lr
 8000226:	46c0      	nop			@ (mov r8, r8)

08000228 <SIMTransmit>:
//The cmd argument consists of the AT command that is to be transmitted.
//The rcv_len and rcv_timeout functions are specific to the HAL_UART_Receive function for defining variable rcv_len and rcv_timeouts for different AT commands.
//The timeouts and reception length for different ATcommands used in the code are defined on observing the module responses with 2G and 4G networks.
//The timeouts and reception length can be optimized further while testing.

void SIMTransmit(const char *cmd, uint32_t rcv_len, uint32_t rcv_timeout) {
 8000228:	b590      	push	{r4, r7, lr}
 800022a:	b087      	sub	sp, #28
 800022c:	af00      	add	r7, sp, #0
 800022e:	60f8      	str	r0, [r7, #12]
 8000230:	60b9      	str	r1, [r7, #8]
 8000232:	607a      	str	r2, [r7, #4]
	//  memset(ATcommand,0,sizeof(ATcommand));
	memset(buffer, 0, sizeof(buffer));
 8000234:	2380      	movs	r3, #128	@ 0x80
 8000236:	011a      	lsls	r2, r3, #4
 8000238:	4b11      	ldr	r3, [pc, #68]	@ (8000280 <SIMTransmit+0x58>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f002 ff25 	bl	800308c <memset>
	HAL_StatusTypeDef error_tr;
	HAL_StatusTypeDef error_rc;
	//error_tr = HAL_UART_Transmit_IT(&huart3, (uint8_t *)cmd, strlen(cmd));
	//error_tr = HAL_UART_Transmit(&huart3, (uint8_t*) cmd, strlen(cmd), HAL_MAX_DELAY);
	error_tr = HAL_UART_Transmit_IT(&huart3, (uint8_t *)cmd, strlen(cmd));
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	0018      	movs	r0, r3
 8000246:	f7ff ff5b 	bl	8000100 <strlen>
 800024a:	0003      	movs	r3, r0
 800024c:	b29a      	uxth	r2, r3
 800024e:	2317      	movs	r3, #23
 8000250:	18fc      	adds	r4, r7, r3
 8000252:	68f9      	ldr	r1, [r7, #12]
 8000254:	4b0b      	ldr	r3, [pc, #44]	@ (8000284 <SIMTransmit+0x5c>)
 8000256:	0018      	movs	r0, r3
 8000258:	f001 fd52 	bl	8001d00 <HAL_UART_Transmit_IT>
 800025c:	0003      	movs	r3, r0
 800025e:	7023      	strb	r3, [r4, #0]
	//  HAL_Delay(2000);
	error_rc = HAL_UART_Receive(&huart3, buffer, rcv_len, rcv_timeout);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	b29a      	uxth	r2, r3
 8000264:	2316      	movs	r3, #22
 8000266:	18fc      	adds	r4, r7, r3
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4905      	ldr	r1, [pc, #20]	@ (8000280 <SIMTransmit+0x58>)
 800026c:	4805      	ldr	r0, [pc, #20]	@ (8000284 <SIMTransmit+0x5c>)
 800026e:	f001 fc61 	bl	8001b34 <HAL_UART_Receive>
 8000272:	0003      	movs	r3, r0
 8000274:	7023      	strb	r3, [r4, #0]


}
 8000276:	46c0      	nop			@ (mov r8, r8)
 8000278:	46bd      	mov	sp, r7
 800027a:	b007      	add	sp, #28
 800027c:	bd90      	pop	{r4, r7, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)
 8000280:	20000034 	.word	0x20000034
 8000284:	20000834 	.word	0x20000834

08000288 <uploadcertificate1>:
bool uploadcertificate1(const char *cert)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b084      	sub	sp, #16
 800028c:	af00      	add	r7, sp, #0
 800028e:	6078      	str	r0, [r7, #4]
    uint32_t cert_len = strlen(cert);
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	0018      	movs	r0, r3
 8000294:	f7ff ff34 	bl	8000100 <strlen>
 8000298:	0003      	movs	r3, r0
 800029a:	60fb      	str	r3, [r7, #12]
    SIMTransmit("AT+QFUPL=\"UFS:root\",1187,5\r\n", 80, 3000);
 800029c:	4a23      	ldr	r2, [pc, #140]	@ (800032c <uploadcertificate1+0xa4>)
 800029e:	4b24      	ldr	r3, [pc, #144]	@ (8000330 <uploadcertificate1+0xa8>)
 80002a0:	2150      	movs	r1, #80	@ 0x50
 80002a2:	0018      	movs	r0, r3
 80002a4:	f7ff ffc0 	bl	8000228 <SIMTransmit>

    if (strstr((char*) buffer, "CONNECT"))
 80002a8:	4a22      	ldr	r2, [pc, #136]	@ (8000334 <uploadcertificate1+0xac>)
 80002aa:	4b23      	ldr	r3, [pc, #140]	@ (8000338 <uploadcertificate1+0xb0>)
 80002ac:	0011      	movs	r1, r2
 80002ae:	0018      	movs	r0, r3
 80002b0:	f002 fef4 	bl	800309c <strstr>
 80002b4:	1e03      	subs	r3, r0, #0
 80002b6:	d016      	beq.n	80002e6 <uploadcertificate1+0x5e>
    {
        SIMTransmit((char*)cert, cert_len, 3000);
 80002b8:	4a1c      	ldr	r2, [pc, #112]	@ (800032c <uploadcertificate1+0xa4>)
 80002ba:	68f9      	ldr	r1, [r7, #12]
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	0018      	movs	r0, r3
 80002c0:	f7ff ffb2 	bl	8000228 <SIMTransmit>
        HAL_Delay(2000);
 80002c4:	23fa      	movs	r3, #250	@ 0xfa
 80002c6:	00db      	lsls	r3, r3, #3
 80002c8:	0018      	movs	r0, r3
 80002ca:	f000 fb87 	bl	80009dc <HAL_Delay>

        if (strstr((char*) buffer, "+QFUPL: 1187,2d19"))
 80002ce:	4a1b      	ldr	r2, [pc, #108]	@ (800033c <uploadcertificate1+0xb4>)
 80002d0:	4b19      	ldr	r3, [pc, #100]	@ (8000338 <uploadcertificate1+0xb0>)
 80002d2:	0011      	movs	r1, r2
 80002d4:	0018      	movs	r0, r3
 80002d6:	f002 fee1 	bl	800309c <strstr>
 80002da:	1e03      	subs	r3, r0, #0
 80002dc:	d001      	beq.n	80002e2 <uploadcertificate1+0x5a>
        {
            return true;
 80002de:	2301      	movs	r3, #1
 80002e0:	e01f      	b.n	8000322 <uploadcertificate1+0x9a>
        }
        return false;
 80002e2:	2300      	movs	r3, #0
 80002e4:	e01d      	b.n	8000322 <uploadcertificate1+0x9a>
    }
    else if (strstr((char*) buffer, "+CME ERROR: 407"))
 80002e6:	4a16      	ldr	r2, [pc, #88]	@ (8000340 <uploadcertificate1+0xb8>)
 80002e8:	4b13      	ldr	r3, [pc, #76]	@ (8000338 <uploadcertificate1+0xb0>)
 80002ea:	0011      	movs	r1, r2
 80002ec:	0018      	movs	r0, r3
 80002ee:	f002 fed5 	bl	800309c <strstr>
 80002f2:	1e03      	subs	r3, r0, #0
 80002f4:	d014      	beq.n	8000320 <uploadcertificate1+0x98>
    {
        SIMTransmit("AT+QFDEL=\"UFS:root\"\r\n", 50, 2000);
 80002f6:	23fa      	movs	r3, #250	@ 0xfa
 80002f8:	00da      	lsls	r2, r3, #3
 80002fa:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <uploadcertificate1+0xbc>)
 80002fc:	2132      	movs	r1, #50	@ 0x32
 80002fe:	0018      	movs	r0, r3
 8000300:	f7ff ff92 	bl	8000228 <SIMTransmit>
        if (strstr((char*) buffer, "OK"))
 8000304:	4a10      	ldr	r2, [pc, #64]	@ (8000348 <uploadcertificate1+0xc0>)
 8000306:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <uploadcertificate1+0xb0>)
 8000308:	0011      	movs	r1, r2
 800030a:	0018      	movs	r0, r3
 800030c:	f002 fec6 	bl	800309c <strstr>
 8000310:	1e03      	subs	r3, r0, #0
 8000312:	d005      	beq.n	8000320 <uploadcertificate1+0x98>
        {
            return uploadcertificate1(cert);  // Fixed to return the recursive call result
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	0018      	movs	r0, r3
 8000318:	f7ff ffb6 	bl	8000288 <uploadcertificate1>
 800031c:	0003      	movs	r3, r0
 800031e:	e000      	b.n	8000322 <uploadcertificate1+0x9a>
        }
    }
    return false;
 8000320:	2300      	movs	r3, #0
}
 8000322:	0018      	movs	r0, r3
 8000324:	46bd      	mov	sp, r7
 8000326:	b004      	add	sp, #16
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			@ (mov r8, r8)
 800032c:	00000bb8 	.word	0x00000bb8
 8000330:	08003128 	.word	0x08003128
 8000334:	08003148 	.word	0x08003148
 8000338:	20000034 	.word	0x20000034
 800033c:	08003150 	.word	0x08003150
 8000340:	08003164 	.word	0x08003164
 8000344:	08003174 	.word	0x08003174
 8000348:	0800318c 	.word	0x0800318c

0800034c <uploadcertificate2>:



bool uploadcertificate2(const char *cert) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b084      	sub	sp, #16
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
    uint32_t cert_len = strlen(cert);
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	0018      	movs	r0, r3
 8000358:	f7ff fed2 	bl	8000100 <strlen>
 800035c:	0003      	movs	r3, r0
 800035e:	60fb      	str	r3, [r7, #12]
    SIMTransmit("AT+QFUPL=\"UFS:cert\",1224,7\r\n", 80, 3000);
 8000360:	4a23      	ldr	r2, [pc, #140]	@ (80003f0 <uploadcertificate2+0xa4>)
 8000362:	4b24      	ldr	r3, [pc, #144]	@ (80003f4 <uploadcertificate2+0xa8>)
 8000364:	2150      	movs	r1, #80	@ 0x50
 8000366:	0018      	movs	r0, r3
 8000368:	f7ff ff5e 	bl	8000228 <SIMTransmit>

    if (strstr((char*) buffer, "CONNECT")) {
 800036c:	4a22      	ldr	r2, [pc, #136]	@ (80003f8 <uploadcertificate2+0xac>)
 800036e:	4b23      	ldr	r3, [pc, #140]	@ (80003fc <uploadcertificate2+0xb0>)
 8000370:	0011      	movs	r1, r2
 8000372:	0018      	movs	r0, r3
 8000374:	f002 fe92 	bl	800309c <strstr>
 8000378:	1e03      	subs	r3, r0, #0
 800037a:	d016      	beq.n	80003aa <uploadcertificate2+0x5e>
    	SIMTransmit((char*)cert, cert_len, 3000);
 800037c:	4a1c      	ldr	r2, [pc, #112]	@ (80003f0 <uploadcertificate2+0xa4>)
 800037e:	68f9      	ldr	r1, [r7, #12]
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	0018      	movs	r0, r3
 8000384:	f7ff ff50 	bl	8000228 <SIMTransmit>
    	HAL_Delay(2000);
 8000388:	23fa      	movs	r3, #250	@ 0xfa
 800038a:	00db      	lsls	r3, r3, #3
 800038c:	0018      	movs	r0, r3
 800038e:	f000 fb25 	bl	80009dc <HAL_Delay>

        if (strstr((char*) buffer, "+QFUPL: 1224,5977")) {
 8000392:	4a1b      	ldr	r2, [pc, #108]	@ (8000400 <uploadcertificate2+0xb4>)
 8000394:	4b19      	ldr	r3, [pc, #100]	@ (80003fc <uploadcertificate2+0xb0>)
 8000396:	0011      	movs	r1, r2
 8000398:	0018      	movs	r0, r3
 800039a:	f002 fe7f 	bl	800309c <strstr>
 800039e:	1e03      	subs	r3, r0, #0
 80003a0:	d001      	beq.n	80003a6 <uploadcertificate2+0x5a>
            return true;
 80003a2:	2301      	movs	r3, #1
 80003a4:	e01f      	b.n	80003e6 <uploadcertificate2+0x9a>
        }
        return false;
 80003a6:	2300      	movs	r3, #0
 80003a8:	e01d      	b.n	80003e6 <uploadcertificate2+0x9a>
    }else if (strstr((char*) buffer, "+CME ERROR: 407")) {
 80003aa:	4a16      	ldr	r2, [pc, #88]	@ (8000404 <uploadcertificate2+0xb8>)
 80003ac:	4b13      	ldr	r3, [pc, #76]	@ (80003fc <uploadcertificate2+0xb0>)
 80003ae:	0011      	movs	r1, r2
 80003b0:	0018      	movs	r0, r3
 80003b2:	f002 fe73 	bl	800309c <strstr>
 80003b6:	1e03      	subs	r3, r0, #0
 80003b8:	d014      	beq.n	80003e4 <uploadcertificate2+0x98>
        SIMTransmit("AT+QFDEL=\"UFS:cert\"\r\n", 50, 2000);
 80003ba:	23fa      	movs	r3, #250	@ 0xfa
 80003bc:	00da      	lsls	r2, r3, #3
 80003be:	4b12      	ldr	r3, [pc, #72]	@ (8000408 <uploadcertificate2+0xbc>)
 80003c0:	2132      	movs	r1, #50	@ 0x32
 80003c2:	0018      	movs	r0, r3
 80003c4:	f7ff ff30 	bl	8000228 <SIMTransmit>
        if (strstr((char*) buffer, "OK")) {
 80003c8:	4a10      	ldr	r2, [pc, #64]	@ (800040c <uploadcertificate2+0xc0>)
 80003ca:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <uploadcertificate2+0xb0>)
 80003cc:	0011      	movs	r1, r2
 80003ce:	0018      	movs	r0, r3
 80003d0:	f002 fe64 	bl	800309c <strstr>
 80003d4:	1e03      	subs	r3, r0, #0
 80003d6:	d005      	beq.n	80003e4 <uploadcertificate2+0x98>
            return uploadcertificate2(cert);  // Fixed to return the recursive call result
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	0018      	movs	r0, r3
 80003dc:	f7ff ffb6 	bl	800034c <uploadcertificate2>
 80003e0:	0003      	movs	r3, r0
 80003e2:	e000      	b.n	80003e6 <uploadcertificate2+0x9a>
        }
    }
    return false;
 80003e4:	2300      	movs	r3, #0
}
 80003e6:	0018      	movs	r0, r3
 80003e8:	46bd      	mov	sp, r7
 80003ea:	b004      	add	sp, #16
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	46c0      	nop			@ (mov r8, r8)
 80003f0:	00000bb8 	.word	0x00000bb8
 80003f4:	08003190 	.word	0x08003190
 80003f8:	08003148 	.word	0x08003148
 80003fc:	20000034 	.word	0x20000034
 8000400:	080031b0 	.word	0x080031b0
 8000404:	08003164 	.word	0x08003164
 8000408:	080031c4 	.word	0x080031c4
 800040c:	0800318c 	.word	0x0800318c

08000410 <uploadcertificate3>:


bool uploadcertificate3(const char *cert) {
 8000410:	b580      	push	{r7, lr}
 8000412:	b084      	sub	sp, #16
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
    uint32_t cert_len = strlen(cert);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	0018      	movs	r0, r3
 800041c:	f7ff fe70 	bl	8000100 <strlen>
 8000420:	0003      	movs	r3, r0
 8000422:	60fb      	str	r3, [r7, #12]
    SIMTransmit("AT+QFUPL=\"UFS:key\",1675,7\r\n", 80, 3000);
 8000424:	4a23      	ldr	r2, [pc, #140]	@ (80004b4 <uploadcertificate3+0xa4>)
 8000426:	4b24      	ldr	r3, [pc, #144]	@ (80004b8 <uploadcertificate3+0xa8>)
 8000428:	2150      	movs	r1, #80	@ 0x50
 800042a:	0018      	movs	r0, r3
 800042c:	f7ff fefc 	bl	8000228 <SIMTransmit>

    if (strstr((char*) buffer, "CONNECT")) {
 8000430:	4a22      	ldr	r2, [pc, #136]	@ (80004bc <uploadcertificate3+0xac>)
 8000432:	4b23      	ldr	r3, [pc, #140]	@ (80004c0 <uploadcertificate3+0xb0>)
 8000434:	0011      	movs	r1, r2
 8000436:	0018      	movs	r0, r3
 8000438:	f002 fe30 	bl	800309c <strstr>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d016      	beq.n	800046e <uploadcertificate3+0x5e>
    	SIMTransmit((char*)cert, cert_len, 3000);
 8000440:	4a1c      	ldr	r2, [pc, #112]	@ (80004b4 <uploadcertificate3+0xa4>)
 8000442:	68f9      	ldr	r1, [r7, #12]
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	0018      	movs	r0, r3
 8000448:	f7ff feee 	bl	8000228 <SIMTransmit>
    	HAL_Delay(2000);
 800044c:	23fa      	movs	r3, #250	@ 0xfa
 800044e:	00db      	lsls	r3, r3, #3
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fac3 	bl	80009dc <HAL_Delay>

        if (strstr((char*) buffer, "+QFUPL: 1675,526f")) {
 8000456:	4a1b      	ldr	r2, [pc, #108]	@ (80004c4 <uploadcertificate3+0xb4>)
 8000458:	4b19      	ldr	r3, [pc, #100]	@ (80004c0 <uploadcertificate3+0xb0>)
 800045a:	0011      	movs	r1, r2
 800045c:	0018      	movs	r0, r3
 800045e:	f002 fe1d 	bl	800309c <strstr>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <uploadcertificate3+0x5a>
            return true;
 8000466:	2301      	movs	r3, #1
 8000468:	e01f      	b.n	80004aa <uploadcertificate3+0x9a>
        }
        return false;
 800046a:	2300      	movs	r3, #0
 800046c:	e01d      	b.n	80004aa <uploadcertificate3+0x9a>
    }else if (strstr((char*) buffer, "+CME ERROR: 407")) {
 800046e:	4a16      	ldr	r2, [pc, #88]	@ (80004c8 <uploadcertificate3+0xb8>)
 8000470:	4b13      	ldr	r3, [pc, #76]	@ (80004c0 <uploadcertificate3+0xb0>)
 8000472:	0011      	movs	r1, r2
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fe11 	bl	800309c <strstr>
 800047a:	1e03      	subs	r3, r0, #0
 800047c:	d014      	beq.n	80004a8 <uploadcertificate3+0x98>
        SIMTransmit("AT+QFDEL=\"UFS:key\"\r\n", 50, 2000);
 800047e:	23fa      	movs	r3, #250	@ 0xfa
 8000480:	00da      	lsls	r2, r3, #3
 8000482:	4b12      	ldr	r3, [pc, #72]	@ (80004cc <uploadcertificate3+0xbc>)
 8000484:	2132      	movs	r1, #50	@ 0x32
 8000486:	0018      	movs	r0, r3
 8000488:	f7ff fece 	bl	8000228 <SIMTransmit>
        if (strstr((char*) buffer, "OK")) {
 800048c:	4a10      	ldr	r2, [pc, #64]	@ (80004d0 <uploadcertificate3+0xc0>)
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <uploadcertificate3+0xb0>)
 8000490:	0011      	movs	r1, r2
 8000492:	0018      	movs	r0, r3
 8000494:	f002 fe02 	bl	800309c <strstr>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d005      	beq.n	80004a8 <uploadcertificate3+0x98>
            return uploadcertificate3(cert);  // Fixed to return the recursive call result
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	0018      	movs	r0, r3
 80004a0:	f7ff ffb6 	bl	8000410 <uploadcertificate3>
 80004a4:	0003      	movs	r3, r0
 80004a6:	e000      	b.n	80004aa <uploadcertificate3+0x9a>
        }
    }
    return false;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	0018      	movs	r0, r3
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b004      	add	sp, #16
 80004b0:	bd80      	pop	{r7, pc}
 80004b2:	46c0      	nop			@ (mov r8, r8)
 80004b4:	00000bb8 	.word	0x00000bb8
 80004b8:	080031dc 	.word	0x080031dc
 80004bc:	08003148 	.word	0x08003148
 80004c0:	20000034 	.word	0x20000034
 80004c4:	080031f8 	.word	0x080031f8
 80004c8:	08003164 	.word	0x08003164
 80004cc:	0800320c 	.word	0x0800320c
 80004d0:	0800318c 	.word	0x0800318c

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b082      	sub	sp, #8
 80004d8:	af00      	add	r7, sp, #0
htjU5wKBgCH1H8RPY2X0N3fCkDRtyinue+qdt4FEtRZQtFgiEOgyYpF+fJ8dembW\n\
9nIrNYixDWgGx/zGUnE4mhqfcDiMg5baaDJyBMtGuU8wK3hMZ7KXLCBBA4szZDgK\n\
4UoUKJkA5Hc717o4fSli89/6b4U0IysMPwOLdOClsd8pjO3mcg25\n\
-----END RSA PRIVATE KEY-----\n\
";
  bool cert1_status = false;
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	2200      	movs	r2, #0
 80004de:	701a      	strb	r2, [r3, #0]
  bool cert2_status = false;
 80004e0:	1dbb      	adds	r3, r7, #6
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]
  bool cert3_status = false;
 80004e6:	1d7b      	adds	r3, r7, #5
 80004e8:	2200      	movs	r2, #0
 80004ea:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 f9f0 	bl	80008d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f842 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8bc 	bl	8000670 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80004f8:	f000 f886 	bl	8000608 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  while (!cert1_status){
 80004fc:	e009      	b.n	8000512 <main+0x3e>
	  cert1_status =  uploadcertificate1(ca_cert);
 80004fe:	4b1b      	ldr	r3, [pc, #108]	@ (800056c <main+0x98>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	0018      	movs	r0, r3
 8000504:	f7ff fec0 	bl	8000288 <uploadcertificate1>
 8000508:	0002      	movs	r2, r0
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	1e51      	subs	r1, r2, #1
 800050e:	418a      	sbcs	r2, r1
 8000510:	701a      	strb	r2, [r3, #0]
  while (!cert1_status){
 8000512:	1dfb      	adds	r3, r7, #7
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	2201      	movs	r2, #1
 8000518:	4053      	eors	r3, r2
 800051a:	b2db      	uxtb	r3, r3
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1ee      	bne.n	80004fe <main+0x2a>
  }
  while (!cert2_status){
 8000520:	e009      	b.n	8000536 <main+0x62>
	  cert2_status =  uploadcertificate2(client_cert);
 8000522:	4b13      	ldr	r3, [pc, #76]	@ (8000570 <main+0x9c>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	0018      	movs	r0, r3
 8000528:	f7ff ff10 	bl	800034c <uploadcertificate2>
 800052c:	0002      	movs	r2, r0
 800052e:	1dbb      	adds	r3, r7, #6
 8000530:	1e51      	subs	r1, r2, #1
 8000532:	418a      	sbcs	r2, r1
 8000534:	701a      	strb	r2, [r3, #0]
  while (!cert2_status){
 8000536:	1dbb      	adds	r3, r7, #6
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2201      	movs	r2, #1
 800053c:	4053      	eors	r3, r2
 800053e:	b2db      	uxtb	r3, r3
 8000540:	2b00      	cmp	r3, #0
 8000542:	d1ee      	bne.n	8000522 <main+0x4e>
  }
  while (!cert3_status){
 8000544:	e009      	b.n	800055a <main+0x86>
	  cert3_status =  uploadcertificate3(private_key);
 8000546:	4b0b      	ldr	r3, [pc, #44]	@ (8000574 <main+0xa0>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	0018      	movs	r0, r3
 800054c:	f7ff ff60 	bl	8000410 <uploadcertificate3>
 8000550:	0002      	movs	r2, r0
 8000552:	1d7b      	adds	r3, r7, #5
 8000554:	1e51      	subs	r1, r2, #1
 8000556:	418a      	sbcs	r2, r1
 8000558:	701a      	strb	r2, [r3, #0]
  while (!cert3_status){
 800055a:	1d7b      	adds	r3, r7, #5
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2201      	movs	r2, #1
 8000560:	4053      	eors	r3, r2
 8000562:	b2db      	uxtb	r3, r3
 8000564:	2b00      	cmp	r3, #0
 8000566:	d1ee      	bne.n	8000546 <main+0x72>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	46c0      	nop			@ (mov r8, r8)
 800056a:	e7fd      	b.n	8000568 <main+0x94>
 800056c:	20000000 	.word	0x20000000
 8000570:	20000004 	.word	0x20000004
 8000574:	20000008 	.word	0x20000008

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b590      	push	{r4, r7, lr}
 800057a:	b093      	sub	sp, #76	@ 0x4c
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	2414      	movs	r4, #20
 8000580:	193b      	adds	r3, r7, r4
 8000582:	0018      	movs	r0, r3
 8000584:	2334      	movs	r3, #52	@ 0x34
 8000586:	001a      	movs	r2, r3
 8000588:	2100      	movs	r1, #0
 800058a:	f002 fd7f 	bl	800308c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058e:	1d3b      	adds	r3, r7, #4
 8000590:	0018      	movs	r0, r3
 8000592:	2310      	movs	r3, #16
 8000594:	001a      	movs	r2, r3
 8000596:	2100      	movs	r1, #0
 8000598:	f002 fd78 	bl	800308c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2380      	movs	r3, #128	@ 0x80
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fd6b 	bl	800107c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2202      	movs	r2, #2
 80005aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	2280      	movs	r2, #128	@ 0x80
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	2200      	movs	r2, #0
 80005b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	2240      	movs	r2, #64	@ 0x40
 80005be:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	0018      	movs	r0, r3
 80005ca:	f000 fda3 	bl	8001114 <HAL_RCC_OscConfig>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80005d2:	f000 f8a9 	bl	8000728 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2207      	movs	r2, #7
 80005da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e2:	1d3b      	adds	r3, r7, #4
 80005e4:	2200      	movs	r2, #0
 80005e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2100      	movs	r1, #0
 80005f2:	0018      	movs	r0, r3
 80005f4:	f001 f89e 	bl	8001734 <HAL_RCC_ClockConfig>
 80005f8:	1e03      	subs	r3, r0, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80005fc:	f000 f894 	bl	8000728 <Error_Handler>
  }
}
 8000600:	46c0      	nop			@ (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b013      	add	sp, #76	@ 0x4c
 8000606:	bd90      	pop	{r4, r7, pc}

08000608 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800060c:	4b16      	ldr	r3, [pc, #88]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 800060e:	4a17      	ldr	r2, [pc, #92]	@ (800066c <MX_USART3_UART_Init+0x64>)
 8000610:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000612:	4b15      	ldr	r3, [pc, #84]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 8000614:	22e1      	movs	r2, #225	@ 0xe1
 8000616:	0252      	lsls	r2, r2, #9
 8000618:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b13      	ldr	r3, [pc, #76]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b11      	ldr	r3, [pc, #68]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000626:	4b10      	ldr	r3, [pc, #64]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b0e      	ldr	r3, [pc, #56]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b0d      	ldr	r3, [pc, #52]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b0b      	ldr	r3, [pc, #44]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800063e:	4b0a      	ldr	r3, [pc, #40]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 8000640:	2200      	movs	r2, #0
 8000642:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000644:	4b08      	ldr	r3, [pc, #32]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 8000646:	2200      	movs	r2, #0
 8000648:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800064a:	4b07      	ldr	r3, [pc, #28]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 800064c:	2200      	movs	r2, #0
 800064e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000650:	4b05      	ldr	r3, [pc, #20]	@ (8000668 <MX_USART3_UART_Init+0x60>)
 8000652:	0018      	movs	r0, r3
 8000654:	f001 fa18 	bl	8001a88 <HAL_UART_Init>
 8000658:	1e03      	subs	r3, r0, #0
 800065a:	d001      	beq.n	8000660 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800065c:	f000 f864 	bl	8000728 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000660:	46c0      	nop			@ (mov r8, r8)
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	20000834 	.word	0x20000834
 800066c:	40004800 	.word	0x40004800

08000670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b08b      	sub	sp, #44	@ 0x2c
 8000674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000676:	2414      	movs	r4, #20
 8000678:	193b      	adds	r3, r7, r4
 800067a:	0018      	movs	r0, r3
 800067c:	2314      	movs	r3, #20
 800067e:	001a      	movs	r2, r3
 8000680:	2100      	movs	r1, #0
 8000682:	f002 fd03 	bl	800308c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <MX_GPIO_Init+0xb4>)
 8000688:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <MX_GPIO_Init+0xb4>)
 800068c:	2104      	movs	r1, #4
 800068e:	430a      	orrs	r2, r1
 8000690:	635a      	str	r2, [r3, #52]	@ 0x34
 8000692:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <MX_GPIO_Init+0xb4>)
 8000694:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000696:	2204      	movs	r2, #4
 8000698:	4013      	ands	r3, r2
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069e:	4b21      	ldr	r3, [pc, #132]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006a2:	4b20      	ldr	r3, [pc, #128]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006a4:	2120      	movs	r1, #32
 80006a6:	430a      	orrs	r2, r1
 80006a8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006ae:	2220      	movs	r2, #32
 80006b0:	4013      	ands	r3, r2
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	4b1b      	ldr	r3, [pc, #108]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006bc:	2101      	movs	r1, #1
 80006be:	430a      	orrs	r2, r1
 80006c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006c2:	4b18      	ldr	r3, [pc, #96]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006c6:	2201      	movs	r2, #1
 80006c8:	4013      	ands	r3, r2
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006d2:	4b14      	ldr	r3, [pc, #80]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006d4:	2102      	movs	r1, #2
 80006d6:	430a      	orrs	r2, r1
 80006d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80006da:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <MX_GPIO_Init+0xb4>)
 80006dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006de:	2202      	movs	r2, #2
 80006e0:	4013      	ands	r3, r2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006e6:	23a0      	movs	r3, #160	@ 0xa0
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2200      	movs	r2, #0
 80006ec:	2120      	movs	r1, #32
 80006ee:	0018      	movs	r0, r3
 80006f0:	f000 fca6 	bl	8001040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 80006f4:	0021      	movs	r1, r4
 80006f6:	187b      	adds	r3, r7, r1
 80006f8:	2220      	movs	r2, #32
 80006fa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2201      	movs	r2, #1
 8000700:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	187b      	adds	r3, r7, r1
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000708:	187b      	adds	r3, r7, r1
 800070a:	2202      	movs	r2, #2
 800070c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 800070e:	187a      	adds	r2, r7, r1
 8000710:	23a0      	movs	r3, #160	@ 0xa0
 8000712:	05db      	lsls	r3, r3, #23
 8000714:	0011      	movs	r1, r2
 8000716:	0018      	movs	r0, r3
 8000718:	f000 fb2e 	bl	8000d78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800071c:	46c0      	nop			@ (mov r8, r8)
 800071e:	46bd      	mov	sp, r7
 8000720:	b00b      	add	sp, #44	@ 0x2c
 8000722:	bd90      	pop	{r4, r7, pc}
 8000724:	40021000 	.word	0x40021000

08000728 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800072c:	b672      	cpsid	i
}
 800072e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000730:	46c0      	nop			@ (mov r8, r8)
 8000732:	e7fd      	b.n	8000730 <Error_Handler+0x8>

08000734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073a:	4b0f      	ldr	r3, [pc, #60]	@ (8000778 <HAL_MspInit+0x44>)
 800073c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800073e:	4b0e      	ldr	r3, [pc, #56]	@ (8000778 <HAL_MspInit+0x44>)
 8000740:	2101      	movs	r1, #1
 8000742:	430a      	orrs	r2, r1
 8000744:	641a      	str	r2, [r3, #64]	@ 0x40
 8000746:	4b0c      	ldr	r3, [pc, #48]	@ (8000778 <HAL_MspInit+0x44>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074a:	2201      	movs	r2, #1
 800074c:	4013      	ands	r3, r2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000752:	4b09      	ldr	r3, [pc, #36]	@ (8000778 <HAL_MspInit+0x44>)
 8000754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000756:	4b08      	ldr	r3, [pc, #32]	@ (8000778 <HAL_MspInit+0x44>)
 8000758:	2180      	movs	r1, #128	@ 0x80
 800075a:	0549      	lsls	r1, r1, #21
 800075c:	430a      	orrs	r2, r1
 800075e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000760:	4b05      	ldr	r3, [pc, #20]	@ (8000778 <HAL_MspInit+0x44>)
 8000762:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000764:	2380      	movs	r3, #128	@ 0x80
 8000766:	055b      	lsls	r3, r3, #21
 8000768:	4013      	ands	r3, r2
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	46c0      	nop			@ (mov r8, r8)
 8000770:	46bd      	mov	sp, r7
 8000772:	b002      	add	sp, #8
 8000774:	bd80      	pop	{r7, pc}
 8000776:	46c0      	nop			@ (mov r8, r8)
 8000778:	40021000 	.word	0x40021000

0800077c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b08b      	sub	sp, #44	@ 0x2c
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	2414      	movs	r4, #20
 8000786:	193b      	adds	r3, r7, r4
 8000788:	0018      	movs	r0, r3
 800078a:	2314      	movs	r3, #20
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f002 fc7c 	bl	800308c <memset>
  if(huart->Instance==USART3)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1f      	ldr	r2, [pc, #124]	@ (8000818 <HAL_UART_MspInit+0x9c>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d137      	bne.n	800080e <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800079e:	4b1f      	ldr	r3, [pc, #124]	@ (800081c <HAL_UART_MspInit+0xa0>)
 80007a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a2:	4b1e      	ldr	r3, [pc, #120]	@ (800081c <HAL_UART_MspInit+0xa0>)
 80007a4:	2180      	movs	r1, #128	@ 0x80
 80007a6:	02c9      	lsls	r1, r1, #11
 80007a8:	430a      	orrs	r2, r1
 80007aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007ac:	4b1b      	ldr	r3, [pc, #108]	@ (800081c <HAL_UART_MspInit+0xa0>)
 80007ae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007b0:	2380      	movs	r3, #128	@ 0x80
 80007b2:	02db      	lsls	r3, r3, #11
 80007b4:	4013      	ands	r3, r2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ba:	4b18      	ldr	r3, [pc, #96]	@ (800081c <HAL_UART_MspInit+0xa0>)
 80007bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007be:	4b17      	ldr	r3, [pc, #92]	@ (800081c <HAL_UART_MspInit+0xa0>)
 80007c0:	2102      	movs	r1, #2
 80007c2:	430a      	orrs	r2, r1
 80007c4:	635a      	str	r2, [r3, #52]	@ 0x34
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <HAL_UART_MspInit+0xa0>)
 80007c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ca:	2202      	movs	r2, #2
 80007cc:	4013      	ands	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
 80007d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB0     ------> USART3_RX
    PB2     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80007d2:	0021      	movs	r1, r4
 80007d4:	187b      	adds	r3, r7, r1
 80007d6:	2205      	movs	r2, #5
 80007d8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	187b      	adds	r3, r7, r1
 80007dc:	2202      	movs	r2, #2
 80007de:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	187b      	adds	r3, r7, r1
 80007e2:	2200      	movs	r2, #0
 80007e4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	187b      	adds	r3, r7, r1
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 80007ec:	187b      	adds	r3, r7, r1
 80007ee:	2204      	movs	r2, #4
 80007f0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000820 <HAL_UART_MspInit+0xa4>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	0010      	movs	r0, r2
 80007fa:	f000 fabd 	bl	8000d78 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_4_IRQn, 0, 0);
 80007fe:	2200      	movs	r2, #0
 8000800:	2100      	movs	r1, #0
 8000802:	201d      	movs	r0, #29
 8000804:	f000 f9ba 	bl	8000b7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8000808:	201d      	movs	r0, #29
 800080a:	f000 f9cc 	bl	8000ba6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800080e:	46c0      	nop			@ (mov r8, r8)
 8000810:	46bd      	mov	sp, r7
 8000812:	b00b      	add	sp, #44	@ 0x2c
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	40004800 	.word	0x40004800
 800081c:	40021000 	.word	0x40021000
 8000820:	50000400 	.word	0x50000400

08000824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000828:	46c0      	nop			@ (mov r8, r8)
 800082a:	e7fd      	b.n	8000828 <NMI_Handler+0x4>

0800082c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	e7fd      	b.n	8000830 <HardFault_Handler+0x4>

08000834 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	46c0      	nop			@ (mov r8, r8)
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800084c:	f000 f8aa 	bl	80009a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000850:	46c0      	nop			@ (mov r8, r8)
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800085c:	4b03      	ldr	r3, [pc, #12]	@ (800086c <USART3_4_IRQHandler+0x14>)
 800085e:	0018      	movs	r0, r3
 8000860:	f001 faf6 	bl	8001e50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */

  /* USER CODE END USART3_4_IRQn 1 */
}
 8000864:	46c0      	nop			@ (mov r8, r8)
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	46c0      	nop			@ (mov r8, r8)
 800086c:	20000834 	.word	0x20000834

08000870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000874:	46c0      	nop			@ (mov r8, r8)
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800087c:	480d      	ldr	r0, [pc, #52]	@ (80008b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000880:	f7ff fff6 	bl	8000870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000884:	480c      	ldr	r0, [pc, #48]	@ (80008b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000886:	490d      	ldr	r1, [pc, #52]	@ (80008bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000888:	4a0d      	ldr	r2, [pc, #52]	@ (80008c0 <LoopForever+0xe>)
  movs r3, #0
 800088a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800088c:	e002      	b.n	8000894 <LoopCopyDataInit>

0800088e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000892:	3304      	adds	r3, #4

08000894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000898:	d3f9      	bcc.n	800088e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800089a:	4a0a      	ldr	r2, [pc, #40]	@ (80008c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800089c:	4c0a      	ldr	r4, [pc, #40]	@ (80008c8 <LoopForever+0x16>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a0:	e001      	b.n	80008a6 <LoopFillZerobss>

080008a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a4:	3204      	adds	r2, #4

080008a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a8:	d3fb      	bcc.n	80008a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008aa:	f002 fc0d 	bl	80030c8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80008ae:	f7ff fe11 	bl	80004d4 <main>

080008b2 <LoopForever>:

LoopForever:
  b LoopForever
 80008b2:	e7fe      	b.n	80008b2 <LoopForever>
  ldr   r0, =_estack
 80008b4:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80008b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008bc:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80008c0:	080042a4 	.word	0x080042a4
  ldr r2, =_sbss
 80008c4:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80008c8:	200008cc 	.word	0x200008cc

080008cc <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008cc:	e7fe      	b.n	80008cc <ADC1_IRQHandler>
	...

080008d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008dc:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <HAL_Init+0x3c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b0a      	ldr	r3, [pc, #40]	@ (800090c <HAL_Init+0x3c>)
 80008e2:	2180      	movs	r1, #128	@ 0x80
 80008e4:	0049      	lsls	r1, r1, #1
 80008e6:	430a      	orrs	r2, r1
 80008e8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008ea:	2000      	movs	r0, #0
 80008ec:	f000 f810 	bl	8000910 <HAL_InitTick>
 80008f0:	1e03      	subs	r3, r0, #0
 80008f2:	d003      	beq.n	80008fc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	2201      	movs	r2, #1
 80008f8:	701a      	strb	r2, [r3, #0]
 80008fa:	e001      	b.n	8000900 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff ff1a 	bl	8000734 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	781b      	ldrb	r3, [r3, #0]
}
 8000904:	0018      	movs	r0, r3
 8000906:	46bd      	mov	sp, r7
 8000908:	b002      	add	sp, #8
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40022000 	.word	0x40022000

08000910 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000918:	230f      	movs	r3, #15
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000920:	4b1d      	ldr	r3, [pc, #116]	@ (8000998 <HAL_InitTick+0x88>)
 8000922:	781b      	ldrb	r3, [r3, #0]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d02b      	beq.n	8000980 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000928:	4b1c      	ldr	r3, [pc, #112]	@ (800099c <HAL_InitTick+0x8c>)
 800092a:	681c      	ldr	r4, [r3, #0]
 800092c:	4b1a      	ldr	r3, [pc, #104]	@ (8000998 <HAL_InitTick+0x88>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	0019      	movs	r1, r3
 8000932:	23fa      	movs	r3, #250	@ 0xfa
 8000934:	0098      	lsls	r0, r3, #2
 8000936:	f7ff fbeb 	bl	8000110 <__udivsi3>
 800093a:	0003      	movs	r3, r0
 800093c:	0019      	movs	r1, r3
 800093e:	0020      	movs	r0, r4
 8000940:	f7ff fbe6 	bl	8000110 <__udivsi3>
 8000944:	0003      	movs	r3, r0
 8000946:	0018      	movs	r0, r3
 8000948:	f000 f93d 	bl	8000bc6 <HAL_SYSTICK_Config>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d112      	bne.n	8000976 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d80a      	bhi.n	800096c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	2301      	movs	r3, #1
 800095a:	425b      	negs	r3, r3
 800095c:	2200      	movs	r2, #0
 800095e:	0018      	movs	r0, r3
 8000960:	f000 f90c 	bl	8000b7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000964:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <HAL_InitTick+0x90>)
 8000966:	687a      	ldr	r2, [r7, #4]
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	e00d      	b.n	8000988 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800096c:	230f      	movs	r3, #15
 800096e:	18fb      	adds	r3, r7, r3
 8000970:	2201      	movs	r2, #1
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e008      	b.n	8000988 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000976:	230f      	movs	r3, #15
 8000978:	18fb      	adds	r3, r7, r3
 800097a:	2201      	movs	r2, #1
 800097c:	701a      	strb	r2, [r3, #0]
 800097e:	e003      	b.n	8000988 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000980:	230f      	movs	r3, #15
 8000982:	18fb      	adds	r3, r7, r3
 8000984:	2201      	movs	r2, #1
 8000986:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000988:	230f      	movs	r3, #15
 800098a:	18fb      	adds	r3, r7, r3
 800098c:	781b      	ldrb	r3, [r3, #0]
}
 800098e:	0018      	movs	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	b005      	add	sp, #20
 8000994:	bd90      	pop	{r4, r7, pc}
 8000996:	46c0      	nop			@ (mov r8, r8)
 8000998:	20000014 	.word	0x20000014
 800099c:	2000000c 	.word	0x2000000c
 80009a0:	20000010 	.word	0x20000010

080009a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HAL_IncTick+0x1c>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	001a      	movs	r2, r3
 80009ae:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	18d2      	adds	r2, r2, r3
 80009b4:	4b03      	ldr	r3, [pc, #12]	@ (80009c4 <HAL_IncTick+0x20>)
 80009b6:	601a      	str	r2, [r3, #0]
}
 80009b8:	46c0      	nop			@ (mov r8, r8)
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	46c0      	nop			@ (mov r8, r8)
 80009c0:	20000014 	.word	0x20000014
 80009c4:	200008c8 	.word	0x200008c8

080009c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  return uwTick;
 80009cc:	4b02      	ldr	r3, [pc, #8]	@ (80009d8 <HAL_GetTick+0x10>)
 80009ce:	681b      	ldr	r3, [r3, #0]
}
 80009d0:	0018      	movs	r0, r3
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	200008c8 	.word	0x200008c8

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff fff0 	bl	80009c8 <HAL_GetTick>
 80009e8:	0003      	movs	r3, r0
 80009ea:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	3301      	adds	r3, #1
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	001a      	movs	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	f7ff ffe0 	bl	80009c8 <HAL_GetTick>
 8000a08:	0002      	movs	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46c0      	nop			@ (mov r8, r8)
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b004      	add	sp, #16
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	20000014 	.word	0x20000014

08000a24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	1dfb      	adds	r3, r7, #7
 8000a2e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a36:	d809      	bhi.n	8000a4c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a38:	1dfb      	adds	r3, r7, #7
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	001a      	movs	r2, r3
 8000a3e:	231f      	movs	r3, #31
 8000a40:	401a      	ands	r2, r3
 8000a42:	4b04      	ldr	r3, [pc, #16]	@ (8000a54 <__NVIC_EnableIRQ+0x30>)
 8000a44:	2101      	movs	r1, #1
 8000a46:	4091      	lsls	r1, r2
 8000a48:	000a      	movs	r2, r1
 8000a4a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b002      	add	sp, #8
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	e000e100 	.word	0xe000e100

08000a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	6039      	str	r1, [r7, #0]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a66:	1dfb      	adds	r3, r7, #7
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8000a6c:	d828      	bhi.n	8000ac0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a6e:	4a2f      	ldr	r2, [pc, #188]	@ (8000b2c <__NVIC_SetPriority+0xd4>)
 8000a70:	1dfb      	adds	r3, r7, #7
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	b25b      	sxtb	r3, r3
 8000a76:	089b      	lsrs	r3, r3, #2
 8000a78:	33c0      	adds	r3, #192	@ 0xc0
 8000a7a:	009b      	lsls	r3, r3, #2
 8000a7c:	589b      	ldr	r3, [r3, r2]
 8000a7e:	1dfa      	adds	r2, r7, #7
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	0011      	movs	r1, r2
 8000a84:	2203      	movs	r2, #3
 8000a86:	400a      	ands	r2, r1
 8000a88:	00d2      	lsls	r2, r2, #3
 8000a8a:	21ff      	movs	r1, #255	@ 0xff
 8000a8c:	4091      	lsls	r1, r2
 8000a8e:	000a      	movs	r2, r1
 8000a90:	43d2      	mvns	r2, r2
 8000a92:	401a      	ands	r2, r3
 8000a94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	019b      	lsls	r3, r3, #6
 8000a9a:	22ff      	movs	r2, #255	@ 0xff
 8000a9c:	401a      	ands	r2, r3
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	4003      	ands	r3, r0
 8000aa8:	00db      	lsls	r3, r3, #3
 8000aaa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	481f      	ldr	r0, [pc, #124]	@ (8000b2c <__NVIC_SetPriority+0xd4>)
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	b25b      	sxtb	r3, r3
 8000ab4:	089b      	lsrs	r3, r3, #2
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	33c0      	adds	r3, #192	@ 0xc0
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000abe:	e031      	b.n	8000b24 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ac0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b30 <__NVIC_SetPriority+0xd8>)
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	0019      	movs	r1, r3
 8000ac8:	230f      	movs	r3, #15
 8000aca:	400b      	ands	r3, r1
 8000acc:	3b08      	subs	r3, #8
 8000ace:	089b      	lsrs	r3, r3, #2
 8000ad0:	3306      	adds	r3, #6
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	18d3      	adds	r3, r2, r3
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	1dfa      	adds	r2, r7, #7
 8000adc:	7812      	ldrb	r2, [r2, #0]
 8000ade:	0011      	movs	r1, r2
 8000ae0:	2203      	movs	r2, #3
 8000ae2:	400a      	ands	r2, r1
 8000ae4:	00d2      	lsls	r2, r2, #3
 8000ae6:	21ff      	movs	r1, #255	@ 0xff
 8000ae8:	4091      	lsls	r1, r2
 8000aea:	000a      	movs	r2, r1
 8000aec:	43d2      	mvns	r2, r2
 8000aee:	401a      	ands	r2, r3
 8000af0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	019b      	lsls	r3, r3, #6
 8000af6:	22ff      	movs	r2, #255	@ 0xff
 8000af8:	401a      	ands	r2, r3
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	0018      	movs	r0, r3
 8000b00:	2303      	movs	r3, #3
 8000b02:	4003      	ands	r3, r0
 8000b04:	00db      	lsls	r3, r3, #3
 8000b06:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b08:	4809      	ldr	r0, [pc, #36]	@ (8000b30 <__NVIC_SetPriority+0xd8>)
 8000b0a:	1dfb      	adds	r3, r7, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	001c      	movs	r4, r3
 8000b10:	230f      	movs	r3, #15
 8000b12:	4023      	ands	r3, r4
 8000b14:	3b08      	subs	r3, #8
 8000b16:	089b      	lsrs	r3, r3, #2
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	3306      	adds	r3, #6
 8000b1c:	009b      	lsls	r3, r3, #2
 8000b1e:	18c3      	adds	r3, r0, r3
 8000b20:	3304      	adds	r3, #4
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	46c0      	nop			@ (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b003      	add	sp, #12
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	e000e100 	.word	0xe000e100
 8000b30:	e000ed00 	.word	0xe000ed00

08000b34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	1e5a      	subs	r2, r3, #1
 8000b40:	2380      	movs	r3, #128	@ 0x80
 8000b42:	045b      	lsls	r3, r3, #17
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d301      	bcc.n	8000b4c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b48:	2301      	movs	r3, #1
 8000b4a:	e010      	b.n	8000b6e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <SysTick_Config+0x44>)
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	3a01      	subs	r2, #1
 8000b52:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2103      	movs	r1, #3
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f7ff ff7c 	bl	8000a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b60:	4b05      	ldr	r3, [pc, #20]	@ (8000b78 <SysTick_Config+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b66:	4b04      	ldr	r3, [pc, #16]	@ (8000b78 <SysTick_Config+0x44>)
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b6c:	2300      	movs	r3, #0
}
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	e000e010 	.word	0xe000e010

08000b7c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60b9      	str	r1, [r7, #8]
 8000b84:	607a      	str	r2, [r7, #4]
 8000b86:	210f      	movs	r1, #15
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	1c02      	adds	r2, r0, #0
 8000b8c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000b8e:	68ba      	ldr	r2, [r7, #8]
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	0011      	movs	r1, r2
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f7ff ff5d 	bl	8000a58 <__NVIC_SetPriority>
}
 8000b9e:	46c0      	nop			@ (mov r8, r8)
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	b004      	add	sp, #16
 8000ba4:	bd80      	pop	{r7, pc}

08000ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba6:	b580      	push	{r7, lr}
 8000ba8:	b082      	sub	sp, #8
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	0002      	movs	r2, r0
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	b25b      	sxtb	r3, r3
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff33 	bl	8000a24 <__NVIC_EnableIRQ>
}
 8000bbe:	46c0      	nop			@ (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	f7ff ffaf 	bl	8000b34 <SysTick_Config>
 8000bd6:	0003      	movs	r3, r0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d101      	bne.n	8000bf2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	e050      	b.n	8000c94 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2225      	movs	r2, #37	@ 0x25
 8000bf6:	5c9b      	ldrb	r3, [r3, r2]
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	d008      	beq.n	8000c10 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	2204      	movs	r2, #4
 8000c02:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2224      	movs	r2, #36	@ 0x24
 8000c08:	2100      	movs	r1, #0
 8000c0a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	e041      	b.n	8000c94 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	210e      	movs	r1, #14
 8000c1c:	438a      	bics	r2, r1
 8000c1e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2a:	491c      	ldr	r1, [pc, #112]	@ (8000c9c <HAL_DMA_Abort+0xbc>)
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	438a      	bics	r2, r1
 8000c3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8000c40:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <HAL_DMA_Abort+0xc0>)
 8000c42:	6859      	ldr	r1, [r3, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c48:	221c      	movs	r2, #28
 8000c4a:	4013      	ands	r3, r2
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	409a      	lsls	r2, r3
 8000c50:	4b13      	ldr	r3, [pc, #76]	@ (8000ca0 <HAL_DMA_Abort+0xc0>)
 8000c52:	430a      	orrs	r2, r1
 8000c54:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c5a:	687a      	ldr	r2, [r7, #4]
 8000c5c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000c5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d00c      	beq.n	8000c82 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c72:	490a      	ldr	r1, [pc, #40]	@ (8000c9c <HAL_DMA_Abort+0xbc>)
 8000c74:	400a      	ands	r2, r1
 8000c76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000c80:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2225      	movs	r2, #37	@ 0x25
 8000c86:	2101      	movs	r1, #1
 8000c88:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2224      	movs	r2, #36	@ 0x24
 8000c8e:	2100      	movs	r1, #0
 8000c90:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000c92:	2300      	movs	r3, #0
}
 8000c94:	0018      	movs	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	fffffeff 	.word	0xfffffeff
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cac:	210f      	movs	r1, #15
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2225      	movs	r2, #37	@ 0x25
 8000cb8:	5c9b      	ldrb	r3, [r3, r2]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d006      	beq.n	8000cce <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2204      	movs	r2, #4
 8000cc4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2201      	movs	r2, #1
 8000cca:	701a      	strb	r2, [r3, #0]
 8000ccc:	e049      	b.n	8000d62 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	210e      	movs	r1, #14
 8000cda:	438a      	bics	r2, r1
 8000cdc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2101      	movs	r1, #1
 8000cea:	438a      	bics	r2, r1
 8000cec:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf8:	491d      	ldr	r1, [pc, #116]	@ (8000d70 <HAL_DMA_Abort_IT+0xcc>)
 8000cfa:	400a      	ands	r2, r1
 8000cfc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8000cfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000d74 <HAL_DMA_Abort_IT+0xd0>)
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d06:	221c      	movs	r2, #28
 8000d08:	4013      	ands	r3, r2
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	409a      	lsls	r2, r3
 8000d0e:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_DMA_Abort_IT+0xd0>)
 8000d10:	430a      	orrs	r2, r1
 8000d12:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000d1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d00c      	beq.n	8000d40 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000d30:	490f      	ldr	r1, [pc, #60]	@ (8000d70 <HAL_DMA_Abort_IT+0xcc>)
 8000d32:	400a      	ands	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000d3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2225      	movs	r2, #37	@ 0x25
 8000d44:	2101      	movs	r1, #1
 8000d46:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2224      	movs	r2, #36	@ 0x24
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d004      	beq.n	8000d62 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	0010      	movs	r0, r2
 8000d60:	4798      	blx	r3
    }
  }
  return status;
 8000d62:	230f      	movs	r3, #15
 8000d64:	18fb      	adds	r3, r7, r3
 8000d66:	781b      	ldrb	r3, [r3, #0]
}
 8000d68:	0018      	movs	r0, r3
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	b004      	add	sp, #16
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	fffffeff 	.word	0xfffffeff
 8000d74:	40020000 	.word	0x40020000

08000d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d86:	e147      	b.n	8001018 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2101      	movs	r1, #1
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4091      	lsls	r1, r2
 8000d92:	000a      	movs	r2, r1
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d100      	bne.n	8000da0 <HAL_GPIO_Init+0x28>
 8000d9e:	e138      	b.n	8001012 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2203      	movs	r2, #3
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d005      	beq.n	8000db8 <HAL_GPIO_Init+0x40>
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2203      	movs	r2, #3
 8000db2:	4013      	ands	r3, r2
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d130      	bne.n	8000e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	689b      	ldr	r3, [r3, #8]
 8000dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	409a      	lsls	r2, r3
 8000dc6:	0013      	movs	r3, r2
 8000dc8:	43da      	mvns	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	68da      	ldr	r2, [r3, #12]
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dee:	2201      	movs	r2, #1
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
 8000df4:	0013      	movs	r3, r2
 8000df6:	43da      	mvns	r2, r3
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	091b      	lsrs	r3, r3, #4
 8000e04:	2201      	movs	r2, #1
 8000e06:	401a      	ands	r2, r3
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	0013      	movs	r3, r2
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2203      	movs	r2, #3
 8000e20:	4013      	ands	r3, r2
 8000e22:	2b03      	cmp	r3, #3
 8000e24:	d017      	beq.n	8000e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	68db      	ldr	r3, [r3, #12]
 8000e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	2203      	movs	r2, #3
 8000e32:	409a      	lsls	r2, r3
 8000e34:	0013      	movs	r3, r2
 8000e36:	43da      	mvns	r2, r3
 8000e38:	693b      	ldr	r3, [r7, #16]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	689a      	ldr	r2, [r3, #8]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	409a      	lsls	r2, r3
 8000e48:	0013      	movs	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2203      	movs	r2, #3
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d123      	bne.n	8000eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	08da      	lsrs	r2, r3, #3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	3208      	adds	r2, #8
 8000e6a:	0092      	lsls	r2, r2, #2
 8000e6c:	58d3      	ldr	r3, [r2, r3]
 8000e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	2207      	movs	r2, #7
 8000e74:	4013      	ands	r3, r2
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	220f      	movs	r2, #15
 8000e7a:	409a      	lsls	r2, r3
 8000e7c:	0013      	movs	r3, r2
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4013      	ands	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	2107      	movs	r1, #7
 8000e8e:	400b      	ands	r3, r1
 8000e90:	009b      	lsls	r3, r3, #2
 8000e92:	409a      	lsls	r2, r3
 8000e94:	0013      	movs	r3, r2
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	08da      	lsrs	r2, r3, #3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3208      	adds	r2, #8
 8000ea4:	0092      	lsls	r2, r2, #2
 8000ea6:	6939      	ldr	r1, [r7, #16]
 8000ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	2203      	movs	r2, #3
 8000eb6:	409a      	lsls	r2, r3
 8000eb8:	0013      	movs	r3, r2
 8000eba:	43da      	mvns	r2, r3
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	401a      	ands	r2, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	409a      	lsls	r2, r3
 8000ed0:	0013      	movs	r3, r2
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	685a      	ldr	r2, [r3, #4]
 8000ee2:	23c0      	movs	r3, #192	@ 0xc0
 8000ee4:	029b      	lsls	r3, r3, #10
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	d100      	bne.n	8000eec <HAL_GPIO_Init+0x174>
 8000eea:	e092      	b.n	8001012 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8000eec:	4a50      	ldr	r2, [pc, #320]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	089b      	lsrs	r3, r3, #2
 8000ef2:	3318      	adds	r3, #24
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	589b      	ldr	r3, [r3, r2]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	2203      	movs	r2, #3
 8000efe:	4013      	ands	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	220f      	movs	r2, #15
 8000f04:	409a      	lsls	r2, r3
 8000f06:	0013      	movs	r3, r2
 8000f08:	43da      	mvns	r2, r3
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	23a0      	movs	r3, #160	@ 0xa0
 8000f14:	05db      	lsls	r3, r3, #23
 8000f16:	429a      	cmp	r2, r3
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x1ca>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a45      	ldr	r2, [pc, #276]	@ (8001034 <HAL_GPIO_Init+0x2bc>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x1c6>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a44      	ldr	r2, [pc, #272]	@ (8001038 <HAL_GPIO_Init+0x2c0>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x1c2>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a43      	ldr	r2, [pc, #268]	@ (800103c <HAL_GPIO_Init+0x2c4>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x1be>
 8000f32:	2303      	movs	r3, #3
 8000f34:	e006      	b.n	8000f44 <HAL_GPIO_Init+0x1cc>
 8000f36:	2305      	movs	r3, #5
 8000f38:	e004      	b.n	8000f44 <HAL_GPIO_Init+0x1cc>
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	e002      	b.n	8000f44 <HAL_GPIO_Init+0x1cc>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_GPIO_Init+0x1cc>
 8000f42:	2300      	movs	r3, #0
 8000f44:	697a      	ldr	r2, [r7, #20]
 8000f46:	2103      	movs	r1, #3
 8000f48:	400a      	ands	r2, r1
 8000f4a:	00d2      	lsls	r2, r2, #3
 8000f4c:	4093      	lsls	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8000f54:	4936      	ldr	r1, [pc, #216]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	089b      	lsrs	r3, r3, #2
 8000f5a:	3318      	adds	r3, #24
 8000f5c:	009b      	lsls	r3, r3, #2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f62:	4b33      	ldr	r3, [pc, #204]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	43da      	mvns	r2, r3
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	2380      	movs	r3, #128	@ 0x80
 8000f78:	035b      	lsls	r3, r3, #13
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f86:	4b2a      	ldr	r3, [pc, #168]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000f88:	693a      	ldr	r2, [r7, #16]
 8000f8a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8000f8c:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685a      	ldr	r2, [r3, #4]
 8000fa0:	2380      	movs	r3, #128	@ 0x80
 8000fa2:	039b      	lsls	r3, r3, #14
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000fb2:	693a      	ldr	r2, [r7, #16]
 8000fb4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fb6:	4a1e      	ldr	r2, [pc, #120]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000fb8:	2384      	movs	r3, #132	@ 0x84
 8000fba:	58d3      	ldr	r3, [r2, r3]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43da      	mvns	r2, r3
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685a      	ldr	r2, [r3, #4]
 8000fcc:	2380      	movs	r3, #128	@ 0x80
 8000fce:	029b      	lsls	r3, r3, #10
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fdc:	4914      	ldr	r1, [pc, #80]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000fde:	2284      	movs	r2, #132	@ 0x84
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8000fe4:	4a12      	ldr	r2, [pc, #72]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 8000fe6:	2380      	movs	r3, #128	@ 0x80
 8000fe8:	58d3      	ldr	r3, [r2, r3]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685a      	ldr	r2, [r3, #4]
 8000ffa:	2380      	movs	r3, #128	@ 0x80
 8000ffc:	025b      	lsls	r3, r3, #9
 8000ffe:	4013      	ands	r3, r2
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800100a:	4909      	ldr	r1, [pc, #36]	@ (8001030 <HAL_GPIO_Init+0x2b8>)
 800100c:	2280      	movs	r2, #128	@ 0x80
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	3301      	adds	r3, #1
 8001016:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	40da      	lsrs	r2, r3
 8001020:	1e13      	subs	r3, r2, #0
 8001022:	d000      	beq.n	8001026 <HAL_GPIO_Init+0x2ae>
 8001024:	e6b0      	b.n	8000d88 <HAL_GPIO_Init+0x10>
  }
}
 8001026:	46c0      	nop			@ (mov r8, r8)
 8001028:	46c0      	nop			@ (mov r8, r8)
 800102a:	46bd      	mov	sp, r7
 800102c:	b006      	add	sp, #24
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021800 	.word	0x40021800
 8001034:	50000400 	.word	0x50000400
 8001038:	50000800 	.word	0x50000800
 800103c:	50000c00 	.word	0x50000c00

08001040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	0008      	movs	r0, r1
 800104a:	0011      	movs	r1, r2
 800104c:	1cbb      	adds	r3, r7, #2
 800104e:	1c02      	adds	r2, r0, #0
 8001050:	801a      	strh	r2, [r3, #0]
 8001052:	1c7b      	adds	r3, r7, #1
 8001054:	1c0a      	adds	r2, r1, #0
 8001056:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001058:	1c7b      	adds	r3, r7, #1
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d004      	beq.n	800106a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001060:	1cbb      	adds	r3, r7, #2
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001068:	e003      	b.n	8001072 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800106a:	1cbb      	adds	r3, r7, #2
 800106c:	881a      	ldrh	r2, [r3, #0]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001072:	46c0      	nop			@ (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	@ (80010f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800108a:	4013      	ands	r3, r2
 800108c:	0019      	movs	r1, r3
 800108e:	4b17      	ldr	r3, [pc, #92]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	430a      	orrs	r2, r1
 8001094:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	429a      	cmp	r2, r3
 800109e:	d11f      	bne.n	80010e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	0013      	movs	r3, r2
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	189b      	adds	r3, r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4912      	ldr	r1, [pc, #72]	@ (80010f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80010ae:	0018      	movs	r0, r3
 80010b0:	f7ff f82e 	bl	8000110 <__udivsi3>
 80010b4:	0003      	movs	r3, r0
 80010b6:	3301      	adds	r3, #1
 80010b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ba:	e008      	b.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e001      	b.n	80010ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80010ca:	2303      	movs	r3, #3
 80010cc:	e009      	b.n	80010e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80010d0:	695a      	ldr	r2, [r3, #20]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	401a      	ands	r2, r3
 80010d8:	2380      	movs	r3, #128	@ 0x80
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	429a      	cmp	r2, r3
 80010de:	d0ed      	beq.n	80010bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	0018      	movs	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	b004      	add	sp, #16
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	46c0      	nop			@ (mov r8, r8)
 80010ec:	40007000 	.word	0x40007000
 80010f0:	fffff9ff 	.word	0xfffff9ff
 80010f4:	2000000c 	.word	0x2000000c
 80010f8:	000f4240 	.word	0x000f4240

080010fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001100:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001102:	689a      	ldr	r2, [r3, #8]
 8001104:	23e0      	movs	r3, #224	@ 0xe0
 8001106:	01db      	lsls	r3, r3, #7
 8001108:	4013      	ands	r3, r2
}
 800110a:	0018      	movs	r0, r3
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000

08001114 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d101      	bne.n	8001126 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001122:	2301      	movs	r3, #1
 8001124:	e2f3      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2201      	movs	r2, #1
 800112c:	4013      	ands	r3, r2
 800112e:	d100      	bne.n	8001132 <HAL_RCC_OscConfig+0x1e>
 8001130:	e07c      	b.n	800122c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001132:	4bc3      	ldr	r3, [pc, #780]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2238      	movs	r2, #56	@ 0x38
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800113c:	4bc0      	ldr	r3, [pc, #768]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	2203      	movs	r2, #3
 8001142:	4013      	ands	r3, r2
 8001144:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b10      	cmp	r3, #16
 800114a:	d102      	bne.n	8001152 <HAL_RCC_OscConfig+0x3e>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	2b03      	cmp	r3, #3
 8001150:	d002      	beq.n	8001158 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	2b08      	cmp	r3, #8
 8001156:	d10b      	bne.n	8001170 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001158:	4bb9      	ldr	r3, [pc, #740]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2380      	movs	r3, #128	@ 0x80
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	4013      	ands	r3, r2
 8001162:	d062      	beq.n	800122a <HAL_RCC_OscConfig+0x116>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	2b00      	cmp	r3, #0
 800116a:	d15e      	bne.n	800122a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	e2ce      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685a      	ldr	r2, [r3, #4]
 8001174:	2380      	movs	r3, #128	@ 0x80
 8001176:	025b      	lsls	r3, r3, #9
 8001178:	429a      	cmp	r2, r3
 800117a:	d107      	bne.n	800118c <HAL_RCC_OscConfig+0x78>
 800117c:	4bb0      	ldr	r3, [pc, #704]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4baf      	ldr	r3, [pc, #700]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001182:	2180      	movs	r1, #128	@ 0x80
 8001184:	0249      	lsls	r1, r1, #9
 8001186:	430a      	orrs	r2, r1
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	e020      	b.n	80011ce <HAL_RCC_OscConfig+0xba>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	685a      	ldr	r2, [r3, #4]
 8001190:	23a0      	movs	r3, #160	@ 0xa0
 8001192:	02db      	lsls	r3, r3, #11
 8001194:	429a      	cmp	r2, r3
 8001196:	d10e      	bne.n	80011b6 <HAL_RCC_OscConfig+0xa2>
 8001198:	4ba9      	ldr	r3, [pc, #676]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4ba8      	ldr	r3, [pc, #672]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	02c9      	lsls	r1, r1, #11
 80011a2:	430a      	orrs	r2, r1
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	4ba6      	ldr	r3, [pc, #664]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	4ba5      	ldr	r3, [pc, #660]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	430a      	orrs	r2, r1
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	e00b      	b.n	80011ce <HAL_RCC_OscConfig+0xba>
 80011b6:	4ba2      	ldr	r3, [pc, #648]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	4ba1      	ldr	r3, [pc, #644]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80011bc:	49a1      	ldr	r1, [pc, #644]	@ (8001444 <HAL_RCC_OscConfig+0x330>)
 80011be:	400a      	ands	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	4b9f      	ldr	r3, [pc, #636]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4b9e      	ldr	r3, [pc, #632]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80011c8:	499f      	ldr	r1, [pc, #636]	@ (8001448 <HAL_RCC_OscConfig+0x334>)
 80011ca:	400a      	ands	r2, r1
 80011cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d014      	beq.n	8001200 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d6:	f7ff fbf7 	bl	80009c8 <HAL_GetTick>
 80011da:	0003      	movs	r3, r0
 80011dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fbf2 	bl	80009c8 <HAL_GetTick>
 80011e4:	0002      	movs	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	@ 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e28d      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011f2:	4b93      	ldr	r3, [pc, #588]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	029b      	lsls	r3, r3, #10
 80011fa:	4013      	ands	r3, r2
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0xcc>
 80011fe:	e015      	b.n	800122c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001200:	f7ff fbe2 	bl	80009c8 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800120a:	f7ff fbdd 	bl	80009c8 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b64      	cmp	r3, #100	@ 0x64
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e278      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800121c:	4b88      	ldr	r3, [pc, #544]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	@ 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	d1f0      	bne.n	800120a <HAL_RCC_OscConfig+0xf6>
 8001228:	e000      	b.n	800122c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2202      	movs	r2, #2
 8001232:	4013      	ands	r3, r2
 8001234:	d100      	bne.n	8001238 <HAL_RCC_OscConfig+0x124>
 8001236:	e099      	b.n	800136c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001238:	4b81      	ldr	r3, [pc, #516]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2238      	movs	r2, #56	@ 0x38
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001242:	4b7f      	ldr	r3, [pc, #508]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2203      	movs	r2, #3
 8001248:	4013      	ands	r3, r2
 800124a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800124c:	69bb      	ldr	r3, [r7, #24]
 800124e:	2b10      	cmp	r3, #16
 8001250:	d102      	bne.n	8001258 <HAL_RCC_OscConfig+0x144>
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d002      	beq.n	800125e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d135      	bne.n	80012ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800125e:	4b78      	ldr	r3, [pc, #480]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	2380      	movs	r3, #128	@ 0x80
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4013      	ands	r3, r2
 8001268:	d005      	beq.n	8001276 <HAL_RCC_OscConfig+0x162>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e24b      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001276:	4b72      	ldr	r3, [pc, #456]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	4a74      	ldr	r2, [pc, #464]	@ (800144c <HAL_RCC_OscConfig+0x338>)
 800127c:	4013      	ands	r3, r2
 800127e:	0019      	movs	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	695b      	ldr	r3, [r3, #20]
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	4b6e      	ldr	r3, [pc, #440]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001288:	430a      	orrs	r2, r1
 800128a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d112      	bne.n	80012b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001292:	4b6b      	ldr	r3, [pc, #428]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a6e      	ldr	r2, [pc, #440]	@ (8001450 <HAL_RCC_OscConfig+0x33c>)
 8001298:	4013      	ands	r3, r2
 800129a:	0019      	movs	r1, r3
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691a      	ldr	r2, [r3, #16]
 80012a0:	4b67      	ldr	r3, [pc, #412]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012a6:	4b66      	ldr	r3, [pc, #408]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	0adb      	lsrs	r3, r3, #11
 80012ac:	2207      	movs	r2, #7
 80012ae:	4013      	ands	r3, r2
 80012b0:	4a68      	ldr	r2, [pc, #416]	@ (8001454 <HAL_RCC_OscConfig+0x340>)
 80012b2:	40da      	lsrs	r2, r3
 80012b4:	4b68      	ldr	r3, [pc, #416]	@ (8001458 <HAL_RCC_OscConfig+0x344>)
 80012b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012b8:	4b68      	ldr	r3, [pc, #416]	@ (800145c <HAL_RCC_OscConfig+0x348>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff fb27 	bl	8000910 <HAL_InitTick>
 80012c2:	1e03      	subs	r3, r0, #0
 80012c4:	d051      	beq.n	800136a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e221      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d030      	beq.n	8001334 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a5e      	ldr	r2, [pc, #376]	@ (8001450 <HAL_RCC_OscConfig+0x33c>)
 80012d8:	4013      	ands	r3, r2
 80012da:	0019      	movs	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	691a      	ldr	r2, [r3, #16]
 80012e0:	4b57      	ldr	r3, [pc, #348]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80012e2:	430a      	orrs	r2, r1
 80012e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80012e6:	4b56      	ldr	r3, [pc, #344]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	4b55      	ldr	r3, [pc, #340]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80012ec:	2180      	movs	r1, #128	@ 0x80
 80012ee:	0049      	lsls	r1, r1, #1
 80012f0:	430a      	orrs	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012f4:	f7ff fb68 	bl	80009c8 <HAL_GetTick>
 80012f8:	0003      	movs	r3, r0
 80012fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012fc:	e008      	b.n	8001310 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012fe:	f7ff fb63 	bl	80009c8 <HAL_GetTick>
 8001302:	0002      	movs	r2, r0
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	1ad3      	subs	r3, r2, r3
 8001308:	2b02      	cmp	r3, #2
 800130a:	d901      	bls.n	8001310 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e1fe      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001310:	4b4b      	ldr	r3, [pc, #300]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	2380      	movs	r3, #128	@ 0x80
 8001316:	00db      	lsls	r3, r3, #3
 8001318:	4013      	ands	r3, r2
 800131a:	d0f0      	beq.n	80012fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800131c:	4b48      	ldr	r3, [pc, #288]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	4a4a      	ldr	r2, [pc, #296]	@ (800144c <HAL_RCC_OscConfig+0x338>)
 8001322:	4013      	ands	r3, r2
 8001324:	0019      	movs	r1, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	695b      	ldr	r3, [r3, #20]
 800132a:	021a      	lsls	r2, r3, #8
 800132c:	4b44      	ldr	r3, [pc, #272]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800132e:	430a      	orrs	r2, r1
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	e01b      	b.n	800136c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001334:	4b42      	ldr	r3, [pc, #264]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b41      	ldr	r3, [pc, #260]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800133a:	4949      	ldr	r1, [pc, #292]	@ (8001460 <HAL_RCC_OscConfig+0x34c>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001340:	f7ff fb42 	bl	80009c8 <HAL_GetTick>
 8001344:	0003      	movs	r3, r0
 8001346:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001348:	e008      	b.n	800135c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800134a:	f7ff fb3d 	bl	80009c8 <HAL_GetTick>
 800134e:	0002      	movs	r2, r0
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	1ad3      	subs	r3, r2, r3
 8001354:	2b02      	cmp	r3, #2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e1d8      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800135c:	4b38      	ldr	r3, [pc, #224]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	00db      	lsls	r3, r3, #3
 8001364:	4013      	ands	r3, r2
 8001366:	d1f0      	bne.n	800134a <HAL_RCC_OscConfig+0x236>
 8001368:	e000      	b.n	800136c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800136a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2208      	movs	r2, #8
 8001372:	4013      	ands	r3, r2
 8001374:	d047      	beq.n	8001406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001376:	4b32      	ldr	r3, [pc, #200]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	2238      	movs	r2, #56	@ 0x38
 800137c:	4013      	ands	r3, r2
 800137e:	2b18      	cmp	r3, #24
 8001380:	d10a      	bne.n	8001398 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001382:	4b2f      	ldr	r3, [pc, #188]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d03c      	beq.n	8001406 <HAL_RCC_OscConfig+0x2f2>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d138      	bne.n	8001406 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e1ba      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d019      	beq.n	80013d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013a0:	4b27      	ldr	r3, [pc, #156]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80013a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013a4:	4b26      	ldr	r3, [pc, #152]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	430a      	orrs	r2, r1
 80013aa:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ac:	f7ff fb0c 	bl	80009c8 <HAL_GetTick>
 80013b0:	0003      	movs	r3, r0
 80013b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013b4:	e008      	b.n	80013c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013b6:	f7ff fb07 	bl	80009c8 <HAL_GetTick>
 80013ba:	0002      	movs	r2, r0
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	1ad3      	subs	r3, r2, r3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e1a2      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80013ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013cc:	2202      	movs	r2, #2
 80013ce:	4013      	ands	r3, r2
 80013d0:	d0f1      	beq.n	80013b6 <HAL_RCC_OscConfig+0x2a2>
 80013d2:	e018      	b.n	8001406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80013d6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80013da:	2101      	movs	r1, #1
 80013dc:	438a      	bics	r2, r1
 80013de:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013e0:	f7ff faf2 	bl	80009c8 <HAL_GetTick>
 80013e4:	0003      	movs	r3, r0
 80013e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013e8:	e008      	b.n	80013fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ea:	f7ff faed 	bl	80009c8 <HAL_GetTick>
 80013ee:	0002      	movs	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d901      	bls.n	80013fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80013f8:	2303      	movs	r3, #3
 80013fa:	e188      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80013fc:	4b10      	ldr	r3, [pc, #64]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 80013fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001400:	2202      	movs	r2, #2
 8001402:	4013      	ands	r3, r2
 8001404:	d1f1      	bne.n	80013ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2204      	movs	r2, #4
 800140c:	4013      	ands	r3, r2
 800140e:	d100      	bne.n	8001412 <HAL_RCC_OscConfig+0x2fe>
 8001410:	e0c6      	b.n	80015a0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001412:	231f      	movs	r3, #31
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800141a:	4b09      	ldr	r3, [pc, #36]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2238      	movs	r2, #56	@ 0x38
 8001420:	4013      	ands	r3, r2
 8001422:	2b20      	cmp	r3, #32
 8001424:	d11e      	bne.n	8001464 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001426:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <HAL_RCC_OscConfig+0x32c>)
 8001428:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142a:	2202      	movs	r2, #2
 800142c:	4013      	ands	r3, r2
 800142e:	d100      	bne.n	8001432 <HAL_RCC_OscConfig+0x31e>
 8001430:	e0b6      	b.n	80015a0 <HAL_RCC_OscConfig+0x48c>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d000      	beq.n	800143c <HAL_RCC_OscConfig+0x328>
 800143a:	e0b1      	b.n	80015a0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e166      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
 8001440:	40021000 	.word	0x40021000
 8001444:	fffeffff 	.word	0xfffeffff
 8001448:	fffbffff 	.word	0xfffbffff
 800144c:	ffff80ff 	.word	0xffff80ff
 8001450:	ffffc7ff 	.word	0xffffc7ff
 8001454:	00f42400 	.word	0x00f42400
 8001458:	2000000c 	.word	0x2000000c
 800145c:	20000010 	.word	0x20000010
 8001460:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001464:	4bac      	ldr	r3, [pc, #688]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001466:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	055b      	lsls	r3, r3, #21
 800146c:	4013      	ands	r3, r2
 800146e:	d101      	bne.n	8001474 <HAL_RCC_OscConfig+0x360>
 8001470:	2301      	movs	r3, #1
 8001472:	e000      	b.n	8001476 <HAL_RCC_OscConfig+0x362>
 8001474:	2300      	movs	r3, #0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d011      	beq.n	800149e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4ba7      	ldr	r3, [pc, #668]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800147c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800147e:	4ba6      	ldr	r3, [pc, #664]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001480:	2180      	movs	r1, #128	@ 0x80
 8001482:	0549      	lsls	r1, r1, #21
 8001484:	430a      	orrs	r2, r1
 8001486:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001488:	4ba3      	ldr	r3, [pc, #652]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800148a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800148c:	2380      	movs	r3, #128	@ 0x80
 800148e:	055b      	lsls	r3, r3, #21
 8001490:	4013      	ands	r3, r2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001496:	231f      	movs	r3, #31
 8001498:	18fb      	adds	r3, r7, r3
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800149e:	4b9f      	ldr	r3, [pc, #636]	@ (800171c <HAL_RCC_OscConfig+0x608>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	2380      	movs	r3, #128	@ 0x80
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4013      	ands	r3, r2
 80014a8:	d11a      	bne.n	80014e0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014aa:	4b9c      	ldr	r3, [pc, #624]	@ (800171c <HAL_RCC_OscConfig+0x608>)
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	4b9b      	ldr	r3, [pc, #620]	@ (800171c <HAL_RCC_OscConfig+0x608>)
 80014b0:	2180      	movs	r1, #128	@ 0x80
 80014b2:	0049      	lsls	r1, r1, #1
 80014b4:	430a      	orrs	r2, r1
 80014b6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa86 	bl	80009c8 <HAL_GetTick>
 80014bc:	0003      	movs	r3, r0
 80014be:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	e008      	b.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c2:	f7ff fa81 	bl	80009c8 <HAL_GetTick>
 80014c6:	0002      	movs	r2, r0
 80014c8:	693b      	ldr	r3, [r7, #16]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d901      	bls.n	80014d4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80014d0:	2303      	movs	r3, #3
 80014d2:	e11c      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014d4:	4b91      	ldr	r3, [pc, #580]	@ (800171c <HAL_RCC_OscConfig+0x608>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	@ 0x80
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	4013      	ands	r3, r2
 80014de:	d0f0      	beq.n	80014c2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x3e2>
 80014e8:	4b8b      	ldr	r3, [pc, #556]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80014ea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014ec:	4b8a      	ldr	r3, [pc, #552]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80014ee:	2101      	movs	r1, #1
 80014f0:	430a      	orrs	r2, r1
 80014f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014f4:	e01c      	b.n	8001530 <HAL_RCC_OscConfig+0x41c>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	2b05      	cmp	r3, #5
 80014fc:	d10c      	bne.n	8001518 <HAL_RCC_OscConfig+0x404>
 80014fe:	4b86      	ldr	r3, [pc, #536]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001500:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001502:	4b85      	ldr	r3, [pc, #532]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001504:	2104      	movs	r1, #4
 8001506:	430a      	orrs	r2, r1
 8001508:	65da      	str	r2, [r3, #92]	@ 0x5c
 800150a:	4b83      	ldr	r3, [pc, #524]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800150c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800150e:	4b82      	ldr	r3, [pc, #520]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001510:	2101      	movs	r1, #1
 8001512:	430a      	orrs	r2, r1
 8001514:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001516:	e00b      	b.n	8001530 <HAL_RCC_OscConfig+0x41c>
 8001518:	4b7f      	ldr	r3, [pc, #508]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800151a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800151c:	4b7e      	ldr	r3, [pc, #504]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800151e:	2101      	movs	r1, #1
 8001520:	438a      	bics	r2, r1
 8001522:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001524:	4b7c      	ldr	r3, [pc, #496]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001526:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001528:	4b7b      	ldr	r3, [pc, #492]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800152a:	2104      	movs	r1, #4
 800152c:	438a      	bics	r2, r1
 800152e:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d014      	beq.n	8001562 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001538:	f7ff fa46 	bl	80009c8 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001540:	e009      	b.n	8001556 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001542:	f7ff fa41 	bl	80009c8 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	4a74      	ldr	r2, [pc, #464]	@ (8001720 <HAL_RCC_OscConfig+0x60c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e0db      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001556:	4b70      	ldr	r3, [pc, #448]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800155a:	2202      	movs	r2, #2
 800155c:	4013      	ands	r3, r2
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x42e>
 8001560:	e013      	b.n	800158a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001562:	f7ff fa31 	bl	80009c8 <HAL_GetTick>
 8001566:	0003      	movs	r3, r0
 8001568:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800156a:	e009      	b.n	8001580 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156c:	f7ff fa2c 	bl	80009c8 <HAL_GetTick>
 8001570:	0002      	movs	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	4a6a      	ldr	r2, [pc, #424]	@ (8001720 <HAL_RCC_OscConfig+0x60c>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0c6      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001580:	4b65      	ldr	r3, [pc, #404]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001582:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001584:	2202      	movs	r2, #2
 8001586:	4013      	ands	r3, r2
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800158a:	231f      	movs	r3, #31
 800158c:	18fb      	adds	r3, r7, r3
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	4b60      	ldr	r3, [pc, #384]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001598:	4b5f      	ldr	r3, [pc, #380]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800159a:	4962      	ldr	r1, [pc, #392]	@ (8001724 <HAL_RCC_OscConfig+0x610>)
 800159c:	400a      	ands	r2, r1
 800159e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	69db      	ldr	r3, [r3, #28]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d100      	bne.n	80015aa <HAL_RCC_OscConfig+0x496>
 80015a8:	e0b0      	b.n	800170c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2238      	movs	r2, #56	@ 0x38
 80015b0:	4013      	ands	r3, r2
 80015b2:	2b10      	cmp	r3, #16
 80015b4:	d100      	bne.n	80015b8 <HAL_RCC_OscConfig+0x4a4>
 80015b6:	e078      	b.n	80016aa <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d153      	bne.n	8001668 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c0:	4b55      	ldr	r3, [pc, #340]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	4b54      	ldr	r3, [pc, #336]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80015c6:	4958      	ldr	r1, [pc, #352]	@ (8001728 <HAL_RCC_OscConfig+0x614>)
 80015c8:	400a      	ands	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015cc:	f7ff f9fc 	bl	80009c8 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d6:	f7ff f9f7 	bl	80009c8 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e092      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	2380      	movs	r3, #128	@ 0x80
 80015ee:	049b      	lsls	r3, r3, #18
 80015f0:	4013      	ands	r3, r2
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015f4:	4b48      	ldr	r3, [pc, #288]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	4a4c      	ldr	r2, [pc, #304]	@ (800172c <HAL_RCC_OscConfig+0x618>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6a1a      	ldr	r2, [r3, #32]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800160c:	021b      	lsls	r3, r3, #8
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161a:	431a      	orrs	r2, r3
 800161c:	4b3e      	ldr	r3, [pc, #248]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001622:	4b3d      	ldr	r3, [pc, #244]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	4b3c      	ldr	r3, [pc, #240]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001628:	2180      	movs	r1, #128	@ 0x80
 800162a:	0449      	lsls	r1, r1, #17
 800162c:	430a      	orrs	r2, r1
 800162e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001630:	4b39      	ldr	r3, [pc, #228]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001632:	68da      	ldr	r2, [r3, #12]
 8001634:	4b38      	ldr	r3, [pc, #224]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001636:	2180      	movs	r1, #128	@ 0x80
 8001638:	0549      	lsls	r1, r1, #21
 800163a:	430a      	orrs	r2, r1
 800163c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff f9c3 	bl	80009c8 <HAL_GetTick>
 8001642:	0003      	movs	r3, r0
 8001644:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff f9be 	bl	80009c8 <HAL_GetTick>
 800164c:	0002      	movs	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e059      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165a:	4b2f      	ldr	r3, [pc, #188]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	2380      	movs	r3, #128	@ 0x80
 8001660:	049b      	lsls	r3, r3, #18
 8001662:	4013      	ands	r3, r2
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x534>
 8001666:	e051      	b.n	800170c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b2b      	ldr	r3, [pc, #172]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	4b2a      	ldr	r3, [pc, #168]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800166e:	492e      	ldr	r1, [pc, #184]	@ (8001728 <HAL_RCC_OscConfig+0x614>)
 8001670:	400a      	ands	r2, r1
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff f9a8 	bl	80009c8 <HAL_GetTick>
 8001678:	0003      	movs	r3, r0
 800167a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff f9a3 	bl	80009c8 <HAL_GetTick>
 8001682:	0002      	movs	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e03e      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001690:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	2380      	movs	r3, #128	@ 0x80
 8001696:	049b      	lsls	r3, r3, #18
 8001698:	4013      	ands	r3, r2
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800169c:	4b1e      	ldr	r3, [pc, #120]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 800169e:	68da      	ldr	r2, [r3, #12]
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80016a2:	4923      	ldr	r1, [pc, #140]	@ (8001730 <HAL_RCC_OscConfig+0x61c>)
 80016a4:	400a      	ands	r2, r1
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	e030      	b.n	800170c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e02b      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80016b6:	4b18      	ldr	r3, [pc, #96]	@ (8001718 <HAL_RCC_OscConfig+0x604>)
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	2203      	movs	r2, #3
 80016c0:	401a      	ands	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a1b      	ldr	r3, [r3, #32]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d11e      	bne.n	8001708 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	2270      	movs	r2, #112	@ 0x70
 80016ce:	401a      	ands	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d117      	bne.n	8001708 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	23fe      	movs	r3, #254	@ 0xfe
 80016dc:	01db      	lsls	r3, r3, #7
 80016de:	401a      	ands	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d10e      	bne.n	8001708 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	23f8      	movs	r3, #248	@ 0xf8
 80016ee:	039b      	lsls	r3, r3, #14
 80016f0:	401a      	ands	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	0f5b      	lsrs	r3, r3, #29
 80016fe:	075a      	lsls	r2, r3, #29
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b008      	add	sp, #32
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			@ (mov r8, r8)
 8001718:	40021000 	.word	0x40021000
 800171c:	40007000 	.word	0x40007000
 8001720:	00001388 	.word	0x00001388
 8001724:	efffffff 	.word	0xefffffff
 8001728:	feffffff 	.word	0xfeffffff
 800172c:	1fc1808c 	.word	0x1fc1808c
 8001730:	effefffc 	.word	0xeffefffc

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0e9      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b76      	ldr	r3, [pc, #472]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2207      	movs	r2, #7
 800174e:	4013      	ands	r3, r2
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d91e      	bls.n	8001794 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b73      	ldr	r3, [pc, #460]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2207      	movs	r2, #7
 800175c:	4393      	bics	r3, r2
 800175e:	0019      	movs	r1, r3
 8001760:	4b70      	ldr	r3, [pc, #448]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	430a      	orrs	r2, r1
 8001766:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001768:	f7ff f92e 	bl	80009c8 <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001770:	e009      	b.n	8001786 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001772:	f7ff f929 	bl	80009c8 <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4a6a      	ldr	r2, [pc, #424]	@ (8001928 <HAL_RCC_ClockConfig+0x1f4>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e0ca      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001786:	4b67      	ldr	r3, [pc, #412]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2207      	movs	r2, #7
 800178c:	4013      	ands	r3, r2
 800178e:	683a      	ldr	r2, [r7, #0]
 8001790:	429a      	cmp	r2, r3
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2202      	movs	r2, #2
 800179a:	4013      	ands	r3, r2
 800179c:	d015      	beq.n	80017ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2204      	movs	r2, #4
 80017a4:	4013      	ands	r3, r2
 80017a6:	d006      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017a8:	4b60      	ldr	r3, [pc, #384]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	689a      	ldr	r2, [r3, #8]
 80017ac:	4b5f      	ldr	r3, [pc, #380]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017ae:	21e0      	movs	r1, #224	@ 0xe0
 80017b0:	01c9      	lsls	r1, r1, #7
 80017b2:	430a      	orrs	r2, r1
 80017b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b6:	4b5d      	ldr	r3, [pc, #372]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001930 <HAL_RCC_ClockConfig+0x1fc>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689a      	ldr	r2, [r3, #8]
 80017c4:	4b59      	ldr	r3, [pc, #356]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2201      	movs	r2, #1
 80017d0:	4013      	ands	r3, r2
 80017d2:	d057      	beq.n	8001884 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d107      	bne.n	80017ec <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017dc:	4b53      	ldr	r3, [pc, #332]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	029b      	lsls	r3, r3, #10
 80017e4:	4013      	ands	r3, r2
 80017e6:	d12b      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e097      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d107      	bne.n	8001804 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017f4:	4b4d      	ldr	r3, [pc, #308]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2380      	movs	r3, #128	@ 0x80
 80017fa:	049b      	lsls	r3, r3, #18
 80017fc:	4013      	ands	r3, r2
 80017fe:	d11f      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	e08b      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d107      	bne.n	800181c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800180c:	4b47      	ldr	r3, [pc, #284]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	2380      	movs	r3, #128	@ 0x80
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	4013      	ands	r3, r2
 8001816:	d113      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001818:	2301      	movs	r3, #1
 800181a:	e07f      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	2b03      	cmp	r3, #3
 8001822:	d106      	bne.n	8001832 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001824:	4b41      	ldr	r3, [pc, #260]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001826:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001828:	2202      	movs	r2, #2
 800182a:	4013      	ands	r3, r2
 800182c:	d108      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e074      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001832:	4b3e      	ldr	r3, [pc, #248]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001834:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001836:	2202      	movs	r2, #2
 8001838:	4013      	ands	r3, r2
 800183a:	d101      	bne.n	8001840 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e06d      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001840:	4b3a      	ldr	r3, [pc, #232]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	2207      	movs	r2, #7
 8001846:	4393      	bics	r3, r2
 8001848:	0019      	movs	r1, r3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685a      	ldr	r2, [r3, #4]
 800184e:	4b37      	ldr	r3, [pc, #220]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001854:	f7ff f8b8 	bl	80009c8 <HAL_GetTick>
 8001858:	0003      	movs	r3, r0
 800185a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185c:	e009      	b.n	8001872 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185e:	f7ff f8b3 	bl	80009c8 <HAL_GetTick>
 8001862:	0002      	movs	r2, r0
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	4a2f      	ldr	r2, [pc, #188]	@ (8001928 <HAL_RCC_ClockConfig+0x1f4>)
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e054      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2e      	ldr	r3, [pc, #184]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	2238      	movs	r2, #56	@ 0x38
 8001878:	401a      	ands	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	429a      	cmp	r2, r3
 8001882:	d1ec      	bne.n	800185e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2207      	movs	r2, #7
 800188a:	4013      	ands	r3, r2
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d21e      	bcs.n	80018d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2207      	movs	r2, #7
 8001898:	4393      	bics	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	4b21      	ldr	r3, [pc, #132]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	430a      	orrs	r2, r1
 80018a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80018a4:	f7ff f890 	bl	80009c8 <HAL_GetTick>
 80018a8:	0003      	movs	r3, r0
 80018aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018ac:	e009      	b.n	80018c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018ae:	f7ff f88b 	bl	80009c8 <HAL_GetTick>
 80018b2:	0002      	movs	r2, r0
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001928 <HAL_RCC_ClockConfig+0x1f4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e02c      	b.n	800191c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <HAL_RCC_ClockConfig+0x1f0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2207      	movs	r2, #7
 80018c8:	4013      	ands	r3, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d1ee      	bne.n	80018ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2204      	movs	r2, #4
 80018d6:	4013      	ands	r3, r2
 80018d8:	d009      	beq.n	80018ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018da:	4b14      	ldr	r3, [pc, #80]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	4a15      	ldr	r2, [pc, #84]	@ (8001934 <HAL_RCC_ClockConfig+0x200>)
 80018e0:	4013      	ands	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	4b10      	ldr	r3, [pc, #64]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80018ea:	430a      	orrs	r2, r1
 80018ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018ee:	f000 f829 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 80018f2:	0001      	movs	r1, r0
 80018f4:	4b0d      	ldr	r3, [pc, #52]	@ (800192c <HAL_RCC_ClockConfig+0x1f8>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	0a1b      	lsrs	r3, r3, #8
 80018fa:	220f      	movs	r2, #15
 80018fc:	401a      	ands	r2, r3
 80018fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_RCC_ClockConfig+0x204>)
 8001900:	0092      	lsls	r2, r2, #2
 8001902:	58d3      	ldr	r3, [r2, r3]
 8001904:	221f      	movs	r2, #31
 8001906:	4013      	ands	r3, r2
 8001908:	000a      	movs	r2, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b0b      	ldr	r3, [pc, #44]	@ (800193c <HAL_RCC_ClockConfig+0x208>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_ClockConfig+0x20c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0018      	movs	r0, r3
 8001916:	f7fe fffb 	bl	8000910 <HAL_InitTick>
 800191a:	0003      	movs	r3, r0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b004      	add	sp, #16
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40022000 	.word	0x40022000
 8001928:	00001388 	.word	0x00001388
 800192c:	40021000 	.word	0x40021000
 8001930:	fffff0ff 	.word	0xfffff0ff
 8001934:	ffff8fff 	.word	0xffff8fff
 8001938:	08004224 	.word	0x08004224
 800193c:	2000000c 	.word	0x2000000c
 8001940:	20000010 	.word	0x20000010

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800194a:	4b3c      	ldr	r3, [pc, #240]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2238      	movs	r2, #56	@ 0x38
 8001950:	4013      	ands	r3, r2
 8001952:	d10f      	bne.n	8001974 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001954:	4b39      	ldr	r3, [pc, #228]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	0adb      	lsrs	r3, r3, #11
 800195a:	2207      	movs	r2, #7
 800195c:	4013      	ands	r3, r2
 800195e:	2201      	movs	r2, #1
 8001960:	409a      	lsls	r2, r3
 8001962:	0013      	movs	r3, r2
 8001964:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001966:	6839      	ldr	r1, [r7, #0]
 8001968:	4835      	ldr	r0, [pc, #212]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 800196a:	f7fe fbd1 	bl	8000110 <__udivsi3>
 800196e:	0003      	movs	r3, r0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	e05d      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001974:	4b31      	ldr	r3, [pc, #196]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2238      	movs	r2, #56	@ 0x38
 800197a:	4013      	ands	r3, r2
 800197c:	2b08      	cmp	r3, #8
 800197e:	d102      	bne.n	8001986 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001980:	4b30      	ldr	r3, [pc, #192]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x100>)
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	e054      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001986:	4b2d      	ldr	r3, [pc, #180]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2238      	movs	r2, #56	@ 0x38
 800198c:	4013      	ands	r3, r2
 800198e:	2b10      	cmp	r3, #16
 8001990:	d138      	bne.n	8001a04 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001992:	4b2a      	ldr	r3, [pc, #168]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001994:	68db      	ldr	r3, [r3, #12]
 8001996:	2203      	movs	r2, #3
 8001998:	4013      	ands	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800199c:	4b27      	ldr	r3, [pc, #156]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	2207      	movs	r2, #7
 80019a4:	4013      	ands	r3, r2
 80019a6:	3301      	adds	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2b03      	cmp	r3, #3
 80019ae:	d10d      	bne.n	80019cc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80019b0:	68b9      	ldr	r1, [r7, #8]
 80019b2:	4824      	ldr	r0, [pc, #144]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x100>)
 80019b4:	f7fe fbac 	bl	8000110 <__udivsi3>
 80019b8:	0003      	movs	r3, r0
 80019ba:	0019      	movs	r1, r3
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	227f      	movs	r2, #127	@ 0x7f
 80019c4:	4013      	ands	r3, r2
 80019c6:	434b      	muls	r3, r1
 80019c8:	617b      	str	r3, [r7, #20]
        break;
 80019ca:	e00d      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	481c      	ldr	r0, [pc, #112]	@ (8001a40 <HAL_RCC_GetSysClockFreq+0xfc>)
 80019d0:	f7fe fb9e 	bl	8000110 <__udivsi3>
 80019d4:	0003      	movs	r3, r0
 80019d6:	0019      	movs	r1, r3
 80019d8:	4b18      	ldr	r3, [pc, #96]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	227f      	movs	r2, #127	@ 0x7f
 80019e0:	4013      	ands	r3, r2
 80019e2:	434b      	muls	r3, r1
 80019e4:	617b      	str	r3, [r7, #20]
        break;
 80019e6:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80019e8:	4b14      	ldr	r3, [pc, #80]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 80019ea:	68db      	ldr	r3, [r3, #12]
 80019ec:	0f5b      	lsrs	r3, r3, #29
 80019ee:	2207      	movs	r2, #7
 80019f0:	4013      	ands	r3, r2
 80019f2:	3301      	adds	r3, #1
 80019f4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	6978      	ldr	r0, [r7, #20]
 80019fa:	f7fe fb89 	bl	8000110 <__udivsi3>
 80019fe:	0003      	movs	r3, r0
 8001a00:	613b      	str	r3, [r7, #16]
 8001a02:	e015      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001a04:	4b0d      	ldr	r3, [pc, #52]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	2238      	movs	r2, #56	@ 0x38
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b20      	cmp	r3, #32
 8001a0e:	d103      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	021b      	lsls	r3, r3, #8
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	e00b      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001a18:	4b08      	ldr	r3, [pc, #32]	@ (8001a3c <HAL_RCC_GetSysClockFreq+0xf8>)
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	2238      	movs	r2, #56	@ 0x38
 8001a1e:	4013      	ands	r3, r2
 8001a20:	2b18      	cmp	r3, #24
 8001a22:	d103      	bne.n	8001a2c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a24:	23fa      	movs	r3, #250	@ 0xfa
 8001a26:	01db      	lsls	r3, r3, #7
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	e001      	b.n	8001a30 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001a30:	693b      	ldr	r3, [r7, #16]
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b006      	add	sp, #24
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			@ (mov r8, r8)
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	00f42400 	.word	0x00f42400
 8001a44:	007a1200 	.word	0x007a1200

08001a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	@ (8001a58 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	46c0      	nop			@ (mov r8, r8)
 8001a58:	2000000c 	.word	0x2000000c

08001a5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a5c:	b5b0      	push	{r4, r5, r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001a60:	f7ff fff2 	bl	8001a48 <HAL_RCC_GetHCLKFreq>
 8001a64:	0004      	movs	r4, r0
 8001a66:	f7ff fb49 	bl	80010fc <LL_RCC_GetAPB1Prescaler>
 8001a6a:	0003      	movs	r3, r0
 8001a6c:	0b1a      	lsrs	r2, r3, #12
 8001a6e:	4b05      	ldr	r3, [pc, #20]	@ (8001a84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a70:	0092      	lsls	r2, r2, #2
 8001a72:	58d3      	ldr	r3, [r2, r3]
 8001a74:	221f      	movs	r2, #31
 8001a76:	4013      	ands	r3, r2
 8001a78:	40dc      	lsrs	r4, r3
 8001a7a:	0023      	movs	r3, r4
}
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bdb0      	pop	{r4, r5, r7, pc}
 8001a82:	46c0      	nop			@ (mov r8, r8)
 8001a84:	08004264 	.word	0x08004264

08001a88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e046      	b.n	8001b28 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2288      	movs	r2, #136	@ 0x88
 8001a9e:	589b      	ldr	r3, [r3, r2]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d107      	bne.n	8001ab4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2284      	movs	r2, #132	@ 0x84
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	f7fe fe64 	bl	800077c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2288      	movs	r2, #136	@ 0x88
 8001ab8:	2124      	movs	r1, #36	@ 0x24
 8001aba:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	438a      	bics	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 fea0 	bl	800281c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 fcf8 	bl	80024d4 <UART_SetConfig>
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d101      	bne.n	8001aee <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e01c      	b.n	8001b28 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	490d      	ldr	r1, [pc, #52]	@ (8001b30 <HAL_UART_Init+0xa8>)
 8001afa:	400a      	ands	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	212a      	movs	r1, #42	@ 0x2a
 8001b0a:	438a      	bics	r2, r1
 8001b0c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2101      	movs	r1, #1
 8001b1a:	430a      	orrs	r2, r1
 8001b1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	0018      	movs	r0, r3
 8001b22:	f000 ff2f 	bl	8002984 <UART_CheckIdleState>
 8001b26:	0003      	movs	r3, r0
}
 8001b28:	0018      	movs	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	b002      	add	sp, #8
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	ffffb7ff 	.word	0xffffb7ff

08001b34 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08a      	sub	sp, #40	@ 0x28
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	1dbb      	adds	r3, r7, #6
 8001b42:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	228c      	movs	r2, #140	@ 0x8c
 8001b48:	589b      	ldr	r3, [r3, r2]
 8001b4a:	2b20      	cmp	r3, #32
 8001b4c:	d000      	beq.n	8001b50 <HAL_UART_Receive+0x1c>
 8001b4e:	e0d0      	b.n	8001cf2 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_UART_Receive+0x2a>
 8001b56:	1dbb      	adds	r3, r7, #6
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0c8      	b.n	8001cf4 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	2380      	movs	r3, #128	@ 0x80
 8001b68:	015b      	lsls	r3, r3, #5
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d109      	bne.n	8001b82 <HAL_UART_Receive+0x4e>
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d105      	bne.n	8001b82 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2201      	movs	r2, #1
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	d001      	beq.n	8001b82 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e0b8      	b.n	8001cf4 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2290      	movs	r2, #144	@ 0x90
 8001b86:	2100      	movs	r1, #0
 8001b88:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	228c      	movs	r2, #140	@ 0x8c
 8001b8e:	2122      	movs	r1, #34	@ 0x22
 8001b90:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2200      	movs	r2, #0
 8001b96:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b98:	f7fe ff16 	bl	80009c8 <HAL_GetTick>
 8001b9c:	0003      	movs	r3, r0
 8001b9e:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1dba      	adds	r2, r7, #6
 8001ba4:	215c      	movs	r1, #92	@ 0x5c
 8001ba6:	8812      	ldrh	r2, [r2, #0]
 8001ba8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	1dba      	adds	r2, r7, #6
 8001bae:	215e      	movs	r1, #94	@ 0x5e
 8001bb0:	8812      	ldrh	r2, [r2, #0]
 8001bb2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	015b      	lsls	r3, r3, #5
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d10d      	bne.n	8001bdc <HAL_UART_Receive+0xa8>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d104      	bne.n	8001bd2 <HAL_UART_Receive+0x9e>
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2260      	movs	r2, #96	@ 0x60
 8001bcc:	494b      	ldr	r1, [pc, #300]	@ (8001cfc <HAL_UART_Receive+0x1c8>)
 8001bce:	5299      	strh	r1, [r3, r2]
 8001bd0:	e02e      	b.n	8001c30 <HAL_UART_Receive+0xfc>
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2260      	movs	r2, #96	@ 0x60
 8001bd6:	21ff      	movs	r1, #255	@ 0xff
 8001bd8:	5299      	strh	r1, [r3, r2]
 8001bda:	e029      	b.n	8001c30 <HAL_UART_Receive+0xfc>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10d      	bne.n	8001c00 <HAL_UART_Receive+0xcc>
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	691b      	ldr	r3, [r3, #16]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d104      	bne.n	8001bf6 <HAL_UART_Receive+0xc2>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2260      	movs	r2, #96	@ 0x60
 8001bf0:	21ff      	movs	r1, #255	@ 0xff
 8001bf2:	5299      	strh	r1, [r3, r2]
 8001bf4:	e01c      	b.n	8001c30 <HAL_UART_Receive+0xfc>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2260      	movs	r2, #96	@ 0x60
 8001bfa:	217f      	movs	r1, #127	@ 0x7f
 8001bfc:	5299      	strh	r1, [r3, r2]
 8001bfe:	e017      	b.n	8001c30 <HAL_UART_Receive+0xfc>
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	2380      	movs	r3, #128	@ 0x80
 8001c06:	055b      	lsls	r3, r3, #21
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10d      	bne.n	8001c28 <HAL_UART_Receive+0xf4>
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	691b      	ldr	r3, [r3, #16]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d104      	bne.n	8001c1e <HAL_UART_Receive+0xea>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2260      	movs	r2, #96	@ 0x60
 8001c18:	217f      	movs	r1, #127	@ 0x7f
 8001c1a:	5299      	strh	r1, [r3, r2]
 8001c1c:	e008      	b.n	8001c30 <HAL_UART_Receive+0xfc>
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2260      	movs	r2, #96	@ 0x60
 8001c22:	213f      	movs	r1, #63	@ 0x3f
 8001c24:	5299      	strh	r1, [r3, r2]
 8001c26:	e003      	b.n	8001c30 <HAL_UART_Receive+0xfc>
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2260      	movs	r2, #96	@ 0x60
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8001c30:	2312      	movs	r3, #18
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	68fa      	ldr	r2, [r7, #12]
 8001c36:	2160      	movs	r1, #96	@ 0x60
 8001c38:	5a52      	ldrh	r2, [r2, r1]
 8001c3a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	2380      	movs	r3, #128	@ 0x80
 8001c42:	015b      	lsls	r3, r3, #5
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d108      	bne.n	8001c5a <HAL_UART_Receive+0x126>
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d104      	bne.n	8001c5a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	e003      	b.n	8001c62 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8001c5a:	68bb      	ldr	r3, [r7, #8]
 8001c5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8001c62:	e03a      	b.n	8001cda <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	0013      	movs	r3, r2
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2120      	movs	r1, #32
 8001c72:	f000 ff31 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 8001c76:	1e03      	subs	r3, r0, #0
 8001c78:	d005      	beq.n	8001c86 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	228c      	movs	r2, #140	@ 0x8c
 8001c7e:	2120      	movs	r1, #32
 8001c80:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e036      	b.n	8001cf4 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d10e      	bne.n	8001caa <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	2212      	movs	r2, #18
 8001c96:	18ba      	adds	r2, r7, r2
 8001c98:	8812      	ldrh	r2, [r2, #0]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	3302      	adds	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	e00e      	b.n	8001cc8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2212      	movs	r2, #18
 8001cb4:	18ba      	adds	r2, r7, r2
 8001cb6:	8812      	ldrh	r2, [r2, #0]
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	4013      	ands	r3, r2
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	225e      	movs	r2, #94	@ 0x5e
 8001ccc:	5a9b      	ldrh	r3, [r3, r2]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	3b01      	subs	r3, #1
 8001cd2:	b299      	uxth	r1, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	225e      	movs	r2, #94	@ 0x5e
 8001cd8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	225e      	movs	r2, #94	@ 0x5e
 8001cde:	5a9b      	ldrh	r3, [r3, r2]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1be      	bne.n	8001c64 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	228c      	movs	r2, #140	@ 0x8c
 8001cea:	2120      	movs	r1, #32
 8001cec:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	e000      	b.n	8001cf4 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8001cf2:	2302      	movs	r3, #2
  }
}
 8001cf4:	0018      	movs	r0, r3
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	b008      	add	sp, #32
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	000001ff 	.word	0x000001ff

08001d00 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b08c      	sub	sp, #48	@ 0x30
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	60f8      	str	r0, [r7, #12]
 8001d08:	60b9      	str	r1, [r7, #8]
 8001d0a:	1dbb      	adds	r3, r7, #6
 8001d0c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2288      	movs	r2, #136	@ 0x88
 8001d12:	589b      	ldr	r3, [r3, r2]
 8001d14:	2b20      	cmp	r3, #32
 8001d16:	d000      	beq.n	8001d1a <HAL_UART_Transmit_IT+0x1a>
 8001d18:	e08d      	b.n	8001e36 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <HAL_UART_Transmit_IT+0x28>
 8001d20:	1dbb      	adds	r3, r7, #6
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e085      	b.n	8001e38 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	689a      	ldr	r2, [r3, #8]
 8001d30:	2380      	movs	r3, #128	@ 0x80
 8001d32:	015b      	lsls	r3, r3, #5
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d109      	bne.n	8001d4c <HAL_UART_Transmit_IT+0x4c>
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d105      	bne.n	8001d4c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	2201      	movs	r2, #1
 8001d44:	4013      	ands	r3, r2
 8001d46:	d001      	beq.n	8001d4c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e075      	b.n	8001e38 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	1dba      	adds	r2, r7, #6
 8001d56:	2154      	movs	r1, #84	@ 0x54
 8001d58:	8812      	ldrh	r2, [r2, #0]
 8001d5a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	1dba      	adds	r2, r7, #6
 8001d60:	2156      	movs	r1, #86	@ 0x56
 8001d62:	8812      	ldrh	r2, [r2, #0]
 8001d64:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2290      	movs	r2, #144	@ 0x90
 8001d70:	2100      	movs	r1, #0
 8001d72:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2288      	movs	r2, #136	@ 0x88
 8001d78:	2121      	movs	r1, #33	@ 0x21
 8001d7a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d80:	2380      	movs	r3, #128	@ 0x80
 8001d82:	059b      	lsls	r3, r3, #22
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d12a      	bne.n	8001dde <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	689a      	ldr	r2, [r3, #8]
 8001d8c:	2380      	movs	r3, #128	@ 0x80
 8001d8e:	015b      	lsls	r3, r3, #5
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d107      	bne.n	8001da4 <HAL_UART_Transmit_IT+0xa4>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4a28      	ldr	r2, [pc, #160]	@ (8001e40 <HAL_UART_Transmit_IT+0x140>)
 8001da0:	679a      	str	r2, [r3, #120]	@ 0x78
 8001da2:	e002      	b.n	8001daa <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4a27      	ldr	r2, [pc, #156]	@ (8001e44 <HAL_UART_Transmit_IT+0x144>)
 8001da8:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001daa:	f3ef 8310 	mrs	r3, PRIMASK
 8001dae:	61fb      	str	r3, [r7, #28]
  return(result);
 8001db0:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8001db2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db4:	2301      	movs	r3, #1
 8001db6:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001db8:	6a3b      	ldr	r3, [r7, #32]
 8001dba:	f383 8810 	msr	PRIMASK, r3
}
 8001dbe:	46c0      	nop			@ (mov r8, r8)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2180      	movs	r1, #128	@ 0x80
 8001dcc:	0409      	lsls	r1, r1, #16
 8001dce:	430a      	orrs	r2, r1
 8001dd0:	609a      	str	r2, [r3, #8]
 8001dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd8:	f383 8810 	msr	PRIMASK, r3
}
 8001ddc:	e029      	b.n	8001e32 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	2380      	movs	r3, #128	@ 0x80
 8001de4:	015b      	lsls	r3, r3, #5
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d107      	bne.n	8001dfa <HAL_UART_Transmit_IT+0xfa>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	691b      	ldr	r3, [r3, #16]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d103      	bne.n	8001dfa <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	4a14      	ldr	r2, [pc, #80]	@ (8001e48 <HAL_UART_Transmit_IT+0x148>)
 8001df6:	679a      	str	r2, [r3, #120]	@ 0x78
 8001df8:	e002      	b.n	8001e00 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4a13      	ldr	r2, [pc, #76]	@ (8001e4c <HAL_UART_Transmit_IT+0x14c>)
 8001dfe:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001e00:	f3ef 8310 	mrs	r3, PRIMASK
 8001e04:	613b      	str	r3, [r7, #16]
  return(result);
 8001e06:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f383 8810 	msr	PRIMASK, r3
}
 8001e14:	46c0      	nop			@ (mov r8, r8)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2180      	movs	r1, #128	@ 0x80
 8001e22:	430a      	orrs	r2, r1
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	f383 8810 	msr	PRIMASK, r3
}
 8001e30:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8001e32:	2300      	movs	r3, #0
 8001e34:	e000      	b.n	8001e38 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8001e36:	2302      	movs	r3, #2
  }
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b00c      	add	sp, #48	@ 0x30
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	08002f11 	.word	0x08002f11
 8001e44:	08002e25 	.word	0x08002e25
 8001e48:	08002d67 	.word	0x08002d67
 8001e4c:	08002cb3 	.word	0x08002cb3

08001e50 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b0aa      	sub	sp, #168	@ 0xa8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	69db      	ldr	r3, [r3, #28]
 8001e5e:	22a4      	movs	r2, #164	@ 0xa4
 8001e60:	18b9      	adds	r1, r7, r2
 8001e62:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	20a0      	movs	r0, #160	@ 0xa0
 8001e6c:	1839      	adds	r1, r7, r0
 8001e6e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	249c      	movs	r4, #156	@ 0x9c
 8001e78:	1939      	adds	r1, r7, r4
 8001e7a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001e7c:	0011      	movs	r1, r2
 8001e7e:	18bb      	adds	r3, r7, r2
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4aa2      	ldr	r2, [pc, #648]	@ (800210c <HAL_UART_IRQHandler+0x2bc>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	2298      	movs	r2, #152	@ 0x98
 8001e88:	18bd      	adds	r5, r7, r2
 8001e8a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8001e8c:	18bb      	adds	r3, r7, r2
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d11a      	bne.n	8001eca <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8001e94:	187b      	adds	r3, r7, r1
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2220      	movs	r2, #32
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d015      	beq.n	8001eca <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8001e9e:	183b      	adds	r3, r7, r0
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d105      	bne.n	8001eb4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8001ea8:	193b      	adds	r3, r7, r4
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	2380      	movs	r3, #128	@ 0x80
 8001eae:	055b      	lsls	r3, r3, #21
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	d00a      	beq.n	8001eca <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d100      	bne.n	8001ebe <HAL_UART_IRQHandler+0x6e>
 8001ebc:	e2dc      	b.n	8002478 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	0010      	movs	r0, r2
 8001ec6:	4798      	blx	r3
      }
      return;
 8001ec8:	e2d6      	b.n	8002478 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8001eca:	2398      	movs	r3, #152	@ 0x98
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d100      	bne.n	8001ed6 <HAL_UART_IRQHandler+0x86>
 8001ed4:	e122      	b.n	800211c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8001ed6:	239c      	movs	r3, #156	@ 0x9c
 8001ed8:	18fb      	adds	r3, r7, r3
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a8c      	ldr	r2, [pc, #560]	@ (8002110 <HAL_UART_IRQHandler+0x2c0>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	d106      	bne.n	8001ef0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8001ee2:	23a0      	movs	r3, #160	@ 0xa0
 8001ee4:	18fb      	adds	r3, r7, r3
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a8a      	ldr	r2, [pc, #552]	@ (8002114 <HAL_UART_IRQHandler+0x2c4>)
 8001eea:	4013      	ands	r3, r2
 8001eec:	d100      	bne.n	8001ef0 <HAL_UART_IRQHandler+0xa0>
 8001eee:	e115      	b.n	800211c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001ef0:	23a4      	movs	r3, #164	@ 0xa4
 8001ef2:	18fb      	adds	r3, r7, r3
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	4013      	ands	r3, r2
 8001efa:	d012      	beq.n	8001f22 <HAL_UART_IRQHandler+0xd2>
 8001efc:	23a0      	movs	r3, #160	@ 0xa0
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	005b      	lsls	r3, r3, #1
 8001f06:	4013      	ands	r3, r2
 8001f08:	d00b      	beq.n	8001f22 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2201      	movs	r2, #1
 8001f10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2290      	movs	r2, #144	@ 0x90
 8001f16:	589b      	ldr	r3, [r3, r2]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	431a      	orrs	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2190      	movs	r1, #144	@ 0x90
 8001f20:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f22:	23a4      	movs	r3, #164	@ 0xa4
 8001f24:	18fb      	adds	r3, r7, r3
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d011      	beq.n	8001f52 <HAL_UART_IRQHandler+0x102>
 8001f2e:	239c      	movs	r3, #156	@ 0x9c
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2201      	movs	r2, #1
 8001f36:	4013      	ands	r3, r2
 8001f38:	d00b      	beq.n	8001f52 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2290      	movs	r2, #144	@ 0x90
 8001f46:	589b      	ldr	r3, [r3, r2]
 8001f48:	2204      	movs	r2, #4
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2190      	movs	r1, #144	@ 0x90
 8001f50:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001f52:	23a4      	movs	r3, #164	@ 0xa4
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2204      	movs	r2, #4
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d011      	beq.n	8001f82 <HAL_UART_IRQHandler+0x132>
 8001f5e:	239c      	movs	r3, #156	@ 0x9c
 8001f60:	18fb      	adds	r3, r7, r3
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2201      	movs	r2, #1
 8001f66:	4013      	ands	r3, r2
 8001f68:	d00b      	beq.n	8001f82 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2204      	movs	r2, #4
 8001f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2290      	movs	r2, #144	@ 0x90
 8001f76:	589b      	ldr	r3, [r3, r2]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2190      	movs	r1, #144	@ 0x90
 8001f80:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8001f82:	23a4      	movs	r3, #164	@ 0xa4
 8001f84:	18fb      	adds	r3, r7, r3
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2208      	movs	r2, #8
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d017      	beq.n	8001fbe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001f8e:	23a0      	movs	r3, #160	@ 0xa0
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2220      	movs	r2, #32
 8001f96:	4013      	ands	r3, r2
 8001f98:	d105      	bne.n	8001fa6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8001f9a:	239c      	movs	r3, #156	@ 0x9c
 8001f9c:	18fb      	adds	r3, r7, r3
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a5b      	ldr	r2, [pc, #364]	@ (8002110 <HAL_UART_IRQHandler+0x2c0>)
 8001fa2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8001fa4:	d00b      	beq.n	8001fbe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2208      	movs	r2, #8
 8001fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2290      	movs	r2, #144	@ 0x90
 8001fb2:	589b      	ldr	r3, [r3, r2]
 8001fb4:	2208      	movs	r2, #8
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2190      	movs	r1, #144	@ 0x90
 8001fbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8001fbe:	23a4      	movs	r3, #164	@ 0xa4
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	2380      	movs	r3, #128	@ 0x80
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d013      	beq.n	8001ff4 <HAL_UART_IRQHandler+0x1a4>
 8001fcc:	23a0      	movs	r3, #160	@ 0xa0
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	2380      	movs	r3, #128	@ 0x80
 8001fd4:	04db      	lsls	r3, r3, #19
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	d00c      	beq.n	8001ff4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2280      	movs	r2, #128	@ 0x80
 8001fe0:	0112      	lsls	r2, r2, #4
 8001fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2290      	movs	r2, #144	@ 0x90
 8001fe8:	589b      	ldr	r3, [r3, r2]
 8001fea:	2220      	movs	r2, #32
 8001fec:	431a      	orrs	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2190      	movs	r1, #144	@ 0x90
 8001ff2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2290      	movs	r2, #144	@ 0x90
 8001ff8:	589b      	ldr	r3, [r3, r2]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d100      	bne.n	8002000 <HAL_UART_IRQHandler+0x1b0>
 8001ffe:	e23d      	b.n	800247c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002000:	23a4      	movs	r3, #164	@ 0xa4
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2220      	movs	r2, #32
 8002008:	4013      	ands	r3, r2
 800200a:	d015      	beq.n	8002038 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800200c:	23a0      	movs	r3, #160	@ 0xa0
 800200e:	18fb      	adds	r3, r7, r3
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2220      	movs	r2, #32
 8002014:	4013      	ands	r3, r2
 8002016:	d106      	bne.n	8002026 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002018:	239c      	movs	r3, #156	@ 0x9c
 800201a:	18fb      	adds	r3, r7, r3
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	2380      	movs	r3, #128	@ 0x80
 8002020:	055b      	lsls	r3, r3, #21
 8002022:	4013      	ands	r3, r2
 8002024:	d008      	beq.n	8002038 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800202a:	2b00      	cmp	r3, #0
 800202c:	d004      	beq.n	8002038 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	0010      	movs	r0, r2
 8002036:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2290      	movs	r2, #144	@ 0x90
 800203c:	589b      	ldr	r3, [r3, r2]
 800203e:	2194      	movs	r1, #148	@ 0x94
 8002040:	187a      	adds	r2, r7, r1
 8002042:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2240      	movs	r2, #64	@ 0x40
 800204c:	4013      	ands	r3, r2
 800204e:	2b40      	cmp	r3, #64	@ 0x40
 8002050:	d004      	beq.n	800205c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002052:	187b      	adds	r3, r7, r1
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2228      	movs	r2, #40	@ 0x28
 8002058:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800205a:	d04c      	beq.n	80020f6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	0018      	movs	r0, r3
 8002060:	f000 fdaa 	bl	8002bb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2240      	movs	r2, #64	@ 0x40
 800206c:	4013      	ands	r3, r2
 800206e:	2b40      	cmp	r3, #64	@ 0x40
 8002070:	d13c      	bne.n	80020ec <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002072:	f3ef 8310 	mrs	r3, PRIMASK
 8002076:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002078:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800207a:	2090      	movs	r0, #144	@ 0x90
 800207c:	183a      	adds	r2, r7, r0
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002084:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002086:	f383 8810 	msr	PRIMASK, r3
}
 800208a:	46c0      	nop			@ (mov r8, r8)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2140      	movs	r1, #64	@ 0x40
 8002098:	438a      	bics	r2, r1
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	183b      	adds	r3, r7, r0
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80020a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80020a4:	f383 8810 	msr	PRIMASK, r3
}
 80020a8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2280      	movs	r2, #128	@ 0x80
 80020ae:	589b      	ldr	r3, [r3, r2]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d016      	beq.n	80020e2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2280      	movs	r2, #128	@ 0x80
 80020b8:	589b      	ldr	r3, [r3, r2]
 80020ba:	4a17      	ldr	r2, [pc, #92]	@ (8002118 <HAL_UART_IRQHandler+0x2c8>)
 80020bc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2280      	movs	r2, #128	@ 0x80
 80020c2:	589b      	ldr	r3, [r3, r2]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f7fe fded 	bl	8000ca4 <HAL_DMA_Abort_IT>
 80020ca:	1e03      	subs	r3, r0, #0
 80020cc:	d01c      	beq.n	8002108 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2280      	movs	r2, #128	@ 0x80
 80020d2:	589b      	ldr	r3, [r3, r2]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	2180      	movs	r1, #128	@ 0x80
 80020da:	5852      	ldr	r2, [r2, r1]
 80020dc:	0010      	movs	r0, r2
 80020de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e0:	e012      	b.n	8002108 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	0018      	movs	r0, r3
 80020e6:	f000 f9e1 	bl	80024ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ea:	e00d      	b.n	8002108 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	0018      	movs	r0, r3
 80020f0:	f000 f9dc 	bl	80024ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f4:	e008      	b.n	8002108 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	0018      	movs	r0, r3
 80020fa:	f000 f9d7 	bl	80024ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2290      	movs	r2, #144	@ 0x90
 8002102:	2100      	movs	r1, #0
 8002104:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002106:	e1b9      	b.n	800247c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	46c0      	nop			@ (mov r8, r8)
    return;
 800210a:	e1b7      	b.n	800247c <HAL_UART_IRQHandler+0x62c>
 800210c:	0000080f 	.word	0x0000080f
 8002110:	10000001 	.word	0x10000001
 8002114:	04000120 	.word	0x04000120
 8002118:	08002c85 	.word	0x08002c85

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002120:	2b01      	cmp	r3, #1
 8002122:	d000      	beq.n	8002126 <HAL_UART_IRQHandler+0x2d6>
 8002124:	e13e      	b.n	80023a4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002126:	23a4      	movs	r3, #164	@ 0xa4
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2210      	movs	r2, #16
 800212e:	4013      	ands	r3, r2
 8002130:	d100      	bne.n	8002134 <HAL_UART_IRQHandler+0x2e4>
 8002132:	e137      	b.n	80023a4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002134:	23a0      	movs	r3, #160	@ 0xa0
 8002136:	18fb      	adds	r3, r7, r3
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2210      	movs	r2, #16
 800213c:	4013      	ands	r3, r2
 800213e:	d100      	bne.n	8002142 <HAL_UART_IRQHandler+0x2f2>
 8002140:	e130      	b.n	80023a4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2210      	movs	r2, #16
 8002148:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2240      	movs	r2, #64	@ 0x40
 8002152:	4013      	ands	r3, r2
 8002154:	2b40      	cmp	r3, #64	@ 0x40
 8002156:	d000      	beq.n	800215a <HAL_UART_IRQHandler+0x30a>
 8002158:	e0a4      	b.n	80022a4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2280      	movs	r2, #128	@ 0x80
 800215e:	589b      	ldr	r3, [r3, r2]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	217e      	movs	r1, #126	@ 0x7e
 8002166:	187b      	adds	r3, r7, r1
 8002168:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800216a:	187b      	adds	r3, r7, r1
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d100      	bne.n	8002174 <HAL_UART_IRQHandler+0x324>
 8002172:	e185      	b.n	8002480 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	225c      	movs	r2, #92	@ 0x5c
 8002178:	5a9b      	ldrh	r3, [r3, r2]
 800217a:	187a      	adds	r2, r7, r1
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d300      	bcc.n	8002184 <HAL_UART_IRQHandler+0x334>
 8002182:	e17d      	b.n	8002480 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	187a      	adds	r2, r7, r1
 8002188:	215e      	movs	r1, #94	@ 0x5e
 800218a:	8812      	ldrh	r2, [r2, #0]
 800218c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2280      	movs	r2, #128	@ 0x80
 8002192:	589b      	ldr	r3, [r3, r2]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2220      	movs	r2, #32
 800219a:	4013      	ands	r3, r2
 800219c:	d170      	bne.n	8002280 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800219e:	f3ef 8310 	mrs	r3, PRIMASK
 80021a2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80021a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80021a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80021a8:	2301      	movs	r3, #1
 80021aa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ae:	f383 8810 	msr	PRIMASK, r3
}
 80021b2:	46c0      	nop			@ (mov r8, r8)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	49b4      	ldr	r1, [pc, #720]	@ (8002490 <HAL_UART_IRQHandler+0x640>)
 80021c0:	400a      	ands	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ca:	f383 8810 	msr	PRIMASK, r3
}
 80021ce:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021d0:	f3ef 8310 	mrs	r3, PRIMASK
 80021d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80021d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80021da:	2301      	movs	r3, #1
 80021dc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021e0:	f383 8810 	msr	PRIMASK, r3
}
 80021e4:	46c0      	nop			@ (mov r8, r8)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	689a      	ldr	r2, [r3, #8]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	2101      	movs	r1, #1
 80021f2:	438a      	bics	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
 80021f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021f8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80021fc:	f383 8810 	msr	PRIMASK, r3
}
 8002200:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002202:	f3ef 8310 	mrs	r3, PRIMASK
 8002206:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002208:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800220a:	673b      	str	r3, [r7, #112]	@ 0x70
 800220c:	2301      	movs	r3, #1
 800220e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002212:	f383 8810 	msr	PRIMASK, r3
}
 8002216:	46c0      	nop			@ (mov r8, r8)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2140      	movs	r1, #64	@ 0x40
 8002224:	438a      	bics	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800222a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800222e:	f383 8810 	msr	PRIMASK, r3
}
 8002232:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	228c      	movs	r2, #140	@ 0x8c
 8002238:	2120      	movs	r1, #32
 800223a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002242:	f3ef 8310 	mrs	r3, PRIMASK
 8002246:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800224a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800224c:	2301      	movs	r3, #1
 800224e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002250:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002252:	f383 8810 	msr	PRIMASK, r3
}
 8002256:	46c0      	nop			@ (mov r8, r8)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2110      	movs	r1, #16
 8002264:	438a      	bics	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800226a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800226c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800226e:	f383 8810 	msr	PRIMASK, r3
}
 8002272:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2280      	movs	r2, #128	@ 0x80
 8002278:	589b      	ldr	r3, [r3, r2]
 800227a:	0018      	movs	r0, r3
 800227c:	f7fe fcb0 	bl	8000be0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2202      	movs	r2, #2
 8002284:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	225c      	movs	r2, #92	@ 0x5c
 800228a:	5a9a      	ldrh	r2, [r3, r2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	215e      	movs	r1, #94	@ 0x5e
 8002290:	5a5b      	ldrh	r3, [r3, r1]
 8002292:	b29b      	uxth	r3, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	b29a      	uxth	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0011      	movs	r1, r2
 800229c:	0018      	movs	r0, r3
 800229e:	f000 f90d 	bl	80024bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80022a2:	e0ed      	b.n	8002480 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	225c      	movs	r2, #92	@ 0x5c
 80022a8:	5a99      	ldrh	r1, [r3, r2]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	225e      	movs	r2, #94	@ 0x5e
 80022ae:	5a9b      	ldrh	r3, [r3, r2]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	208e      	movs	r0, #142	@ 0x8e
 80022b4:	183b      	adds	r3, r7, r0
 80022b6:	1a8a      	subs	r2, r1, r2
 80022b8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	225e      	movs	r2, #94	@ 0x5e
 80022be:	5a9b      	ldrh	r3, [r3, r2]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d100      	bne.n	80022c8 <HAL_UART_IRQHandler+0x478>
 80022c6:	e0dd      	b.n	8002484 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 80022c8:	183b      	adds	r3, r7, r0
 80022ca:	881b      	ldrh	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d100      	bne.n	80022d2 <HAL_UART_IRQHandler+0x482>
 80022d0:	e0d8      	b.n	8002484 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022d2:	f3ef 8310 	mrs	r3, PRIMASK
 80022d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80022d8:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80022da:	2488      	movs	r4, #136	@ 0x88
 80022dc:	193a      	adds	r2, r7, r4
 80022de:	6013      	str	r3, [r2, #0]
 80022e0:	2301      	movs	r3, #1
 80022e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f383 8810 	msr	PRIMASK, r3
}
 80022ea:	46c0      	nop			@ (mov r8, r8)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4967      	ldr	r1, [pc, #412]	@ (8002494 <HAL_UART_IRQHandler+0x644>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	193b      	adds	r3, r7, r4
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f383 8810 	msr	PRIMASK, r3
}
 8002308:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800230a:	f3ef 8310 	mrs	r3, PRIMASK
 800230e:	61bb      	str	r3, [r7, #24]
  return(result);
 8002310:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002312:	2484      	movs	r4, #132	@ 0x84
 8002314:	193a      	adds	r2, r7, r4
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	2301      	movs	r3, #1
 800231a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f383 8810 	msr	PRIMASK, r3
}
 8002322:	46c0      	nop			@ (mov r8, r8)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	495a      	ldr	r1, [pc, #360]	@ (8002498 <HAL_UART_IRQHandler+0x648>)
 8002330:	400a      	ands	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	193b      	adds	r3, r7, r4
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	f383 8810 	msr	PRIMASK, r3
}
 8002340:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	228c      	movs	r2, #140	@ 0x8c
 8002346:	2120      	movs	r1, #32
 8002348:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2200      	movs	r2, #0
 8002354:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002356:	f3ef 8310 	mrs	r3, PRIMASK
 800235a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800235c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800235e:	2480      	movs	r4, #128	@ 0x80
 8002360:	193a      	adds	r2, r7, r4
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	2301      	movs	r3, #1
 8002366:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800236a:	f383 8810 	msr	PRIMASK, r3
}
 800236e:	46c0      	nop			@ (mov r8, r8)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2110      	movs	r1, #16
 800237c:	438a      	bics	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	193b      	adds	r3, r7, r4
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002388:	f383 8810 	msr	PRIMASK, r3
}
 800238c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002394:	183b      	adds	r3, r7, r0
 8002396:	881a      	ldrh	r2, [r3, #0]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f000 f88d 	bl	80024bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80023a2:	e06f      	b.n	8002484 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80023a4:	23a4      	movs	r3, #164	@ 0xa4
 80023a6:	18fb      	adds	r3, r7, r3
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	2380      	movs	r3, #128	@ 0x80
 80023ac:	035b      	lsls	r3, r3, #13
 80023ae:	4013      	ands	r3, r2
 80023b0:	d010      	beq.n	80023d4 <HAL_UART_IRQHandler+0x584>
 80023b2:	239c      	movs	r3, #156	@ 0x9c
 80023b4:	18fb      	adds	r3, r7, r3
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	2380      	movs	r3, #128	@ 0x80
 80023ba:	03db      	lsls	r3, r3, #15
 80023bc:	4013      	ands	r3, r2
 80023be:	d009      	beq.n	80023d4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2280      	movs	r2, #128	@ 0x80
 80023c6:	0352      	lsls	r2, r2, #13
 80023c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	0018      	movs	r0, r3
 80023ce:	f000 fe45 	bl	800305c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80023d2:	e05a      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80023d4:	23a4      	movs	r3, #164	@ 0xa4
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2280      	movs	r2, #128	@ 0x80
 80023dc:	4013      	ands	r3, r2
 80023de:	d016      	beq.n	800240e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80023e0:	23a0      	movs	r3, #160	@ 0xa0
 80023e2:	18fb      	adds	r3, r7, r3
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2280      	movs	r2, #128	@ 0x80
 80023e8:	4013      	ands	r3, r2
 80023ea:	d106      	bne.n	80023fa <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80023ec:	239c      	movs	r3, #156	@ 0x9c
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	041b      	lsls	r3, r3, #16
 80023f6:	4013      	ands	r3, r2
 80023f8:	d009      	beq.n	800240e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d042      	beq.n	8002488 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	0010      	movs	r0, r2
 800240a:	4798      	blx	r3
    }
    return;
 800240c:	e03c      	b.n	8002488 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800240e:	23a4      	movs	r3, #164	@ 0xa4
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2240      	movs	r2, #64	@ 0x40
 8002416:	4013      	ands	r3, r2
 8002418:	d00a      	beq.n	8002430 <HAL_UART_IRQHandler+0x5e0>
 800241a:	23a0      	movs	r3, #160	@ 0xa0
 800241c:	18fb      	adds	r3, r7, r3
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2240      	movs	r2, #64	@ 0x40
 8002422:	4013      	ands	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	0018      	movs	r0, r3
 800242a:	f000 fdeb 	bl	8003004 <UART_EndTransmit_IT>
    return;
 800242e:	e02c      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002430:	23a4      	movs	r3, #164	@ 0xa4
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	2380      	movs	r3, #128	@ 0x80
 8002438:	041b      	lsls	r3, r3, #16
 800243a:	4013      	ands	r3, r2
 800243c:	d00b      	beq.n	8002456 <HAL_UART_IRQHandler+0x606>
 800243e:	23a0      	movs	r3, #160	@ 0xa0
 8002440:	18fb      	adds	r3, r7, r3
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	2380      	movs	r3, #128	@ 0x80
 8002446:	05db      	lsls	r3, r3, #23
 8002448:	4013      	ands	r3, r2
 800244a:	d004      	beq.n	8002456 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fe14 	bl	800307c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002454:	e019      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002456:	23a4      	movs	r3, #164	@ 0xa4
 8002458:	18fb      	adds	r3, r7, r3
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2380      	movs	r3, #128	@ 0x80
 800245e:	045b      	lsls	r3, r3, #17
 8002460:	4013      	ands	r3, r2
 8002462:	d012      	beq.n	800248a <HAL_UART_IRQHandler+0x63a>
 8002464:	23a0      	movs	r3, #160	@ 0xa0
 8002466:	18fb      	adds	r3, r7, r3
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b00      	cmp	r3, #0
 800246c:	da0d      	bge.n	800248a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	0018      	movs	r0, r3
 8002472:	f000 fdfb 	bl	800306c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002476:	e008      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
      return;
 8002478:	46c0      	nop			@ (mov r8, r8)
 800247a:	e006      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
    return;
 800247c:	46c0      	nop			@ (mov r8, r8)
 800247e:	e004      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
      return;
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	e002      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
      return;
 8002484:	46c0      	nop			@ (mov r8, r8)
 8002486:	e000      	b.n	800248a <HAL_UART_IRQHandler+0x63a>
    return;
 8002488:	46c0      	nop			@ (mov r8, r8)
  }
}
 800248a:	46bd      	mov	sp, r7
 800248c:	b02a      	add	sp, #168	@ 0xa8
 800248e:	bdb0      	pop	{r4, r5, r7, pc}
 8002490:	fffffeff 	.word	0xfffffeff
 8002494:	fffffedf 	.word	0xfffffedf
 8002498:	effffffe 	.word	0xeffffffe

0800249c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80024a4:	46c0      	nop			@ (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024b4:	46c0      	nop			@ (mov r8, r8)
 80024b6:	46bd      	mov	sp, r7
 80024b8:	b002      	add	sp, #8
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	000a      	movs	r2, r1
 80024c6:	1cbb      	adds	r3, r7, #2
 80024c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024ca:	46c0      	nop			@ (mov r8, r8)
 80024cc:	46bd      	mov	sp, r7
 80024ce:	b002      	add	sp, #8
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024dc:	231a      	movs	r3, #26
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	2200      	movs	r2, #0
 80024e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	689a      	ldr	r2, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	695b      	ldr	r3, [r3, #20]
 80024f2:	431a      	orrs	r2, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	69db      	ldr	r3, [r3, #28]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4abc      	ldr	r2, [pc, #752]	@ (80027f4 <UART_SetConfig+0x320>)
 8002504:	4013      	ands	r3, r2
 8002506:	0019      	movs	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69fa      	ldr	r2, [r7, #28]
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4ab7      	ldr	r2, [pc, #732]	@ (80027f8 <UART_SetConfig+0x324>)
 800251a:	4013      	ands	r3, r2
 800251c:	0019      	movs	r1, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	430a      	orrs	r2, r1
 8002528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	69fa      	ldr	r2, [r7, #28]
 8002536:	4313      	orrs	r3, r2
 8002538:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4aae      	ldr	r2, [pc, #696]	@ (80027fc <UART_SetConfig+0x328>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002556:	220f      	movs	r2, #15
 8002558:	4393      	bics	r3, r2
 800255a:	0019      	movs	r1, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4aa4      	ldr	r2, [pc, #656]	@ (8002800 <UART_SetConfig+0x32c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d127      	bne.n	80025c2 <UART_SetConfig+0xee>
 8002572:	4ba4      	ldr	r3, [pc, #656]	@ (8002804 <UART_SetConfig+0x330>)
 8002574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002576:	2203      	movs	r2, #3
 8002578:	4013      	ands	r3, r2
 800257a:	2b03      	cmp	r3, #3
 800257c:	d017      	beq.n	80025ae <UART_SetConfig+0xda>
 800257e:	d81b      	bhi.n	80025b8 <UART_SetConfig+0xe4>
 8002580:	2b02      	cmp	r3, #2
 8002582:	d00a      	beq.n	800259a <UART_SetConfig+0xc6>
 8002584:	d818      	bhi.n	80025b8 <UART_SetConfig+0xe4>
 8002586:	2b00      	cmp	r3, #0
 8002588:	d002      	beq.n	8002590 <UART_SetConfig+0xbc>
 800258a:	2b01      	cmp	r3, #1
 800258c:	d00a      	beq.n	80025a4 <UART_SetConfig+0xd0>
 800258e:	e013      	b.n	80025b8 <UART_SetConfig+0xe4>
 8002590:	231b      	movs	r3, #27
 8002592:	18fb      	adds	r3, r7, r3
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
 8002598:	e058      	b.n	800264c <UART_SetConfig+0x178>
 800259a:	231b      	movs	r3, #27
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2202      	movs	r2, #2
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e053      	b.n	800264c <UART_SetConfig+0x178>
 80025a4:	231b      	movs	r3, #27
 80025a6:	18fb      	adds	r3, r7, r3
 80025a8:	2204      	movs	r2, #4
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e04e      	b.n	800264c <UART_SetConfig+0x178>
 80025ae:	231b      	movs	r3, #27
 80025b0:	18fb      	adds	r3, r7, r3
 80025b2:	2208      	movs	r2, #8
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e049      	b.n	800264c <UART_SetConfig+0x178>
 80025b8:	231b      	movs	r3, #27
 80025ba:	18fb      	adds	r3, r7, r3
 80025bc:	2210      	movs	r2, #16
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e044      	b.n	800264c <UART_SetConfig+0x178>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a90      	ldr	r2, [pc, #576]	@ (8002808 <UART_SetConfig+0x334>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d127      	bne.n	800261c <UART_SetConfig+0x148>
 80025cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002804 <UART_SetConfig+0x330>)
 80025ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d0:	220c      	movs	r2, #12
 80025d2:	4013      	ands	r3, r2
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d017      	beq.n	8002608 <UART_SetConfig+0x134>
 80025d8:	d81b      	bhi.n	8002612 <UART_SetConfig+0x13e>
 80025da:	2b08      	cmp	r3, #8
 80025dc:	d00a      	beq.n	80025f4 <UART_SetConfig+0x120>
 80025de:	d818      	bhi.n	8002612 <UART_SetConfig+0x13e>
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <UART_SetConfig+0x116>
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d00a      	beq.n	80025fe <UART_SetConfig+0x12a>
 80025e8:	e013      	b.n	8002612 <UART_SetConfig+0x13e>
 80025ea:	231b      	movs	r3, #27
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	e02b      	b.n	800264c <UART_SetConfig+0x178>
 80025f4:	231b      	movs	r3, #27
 80025f6:	18fb      	adds	r3, r7, r3
 80025f8:	2202      	movs	r2, #2
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e026      	b.n	800264c <UART_SetConfig+0x178>
 80025fe:	231b      	movs	r3, #27
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	2204      	movs	r2, #4
 8002604:	701a      	strb	r2, [r3, #0]
 8002606:	e021      	b.n	800264c <UART_SetConfig+0x178>
 8002608:	231b      	movs	r3, #27
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2208      	movs	r2, #8
 800260e:	701a      	strb	r2, [r3, #0]
 8002610:	e01c      	b.n	800264c <UART_SetConfig+0x178>
 8002612:	231b      	movs	r3, #27
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	2210      	movs	r2, #16
 8002618:	701a      	strb	r2, [r3, #0]
 800261a:	e017      	b.n	800264c <UART_SetConfig+0x178>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7a      	ldr	r2, [pc, #488]	@ (800280c <UART_SetConfig+0x338>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d104      	bne.n	8002630 <UART_SetConfig+0x15c>
 8002626:	231b      	movs	r3, #27
 8002628:	18fb      	adds	r3, r7, r3
 800262a:	2200      	movs	r2, #0
 800262c:	701a      	strb	r2, [r3, #0]
 800262e:	e00d      	b.n	800264c <UART_SetConfig+0x178>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a76      	ldr	r2, [pc, #472]	@ (8002810 <UART_SetConfig+0x33c>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d104      	bne.n	8002644 <UART_SetConfig+0x170>
 800263a:	231b      	movs	r3, #27
 800263c:	18fb      	adds	r3, r7, r3
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
 8002642:	e003      	b.n	800264c <UART_SetConfig+0x178>
 8002644:	231b      	movs	r3, #27
 8002646:	18fb      	adds	r3, r7, r3
 8002648:	2210      	movs	r2, #16
 800264a:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69da      	ldr	r2, [r3, #28]
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	429a      	cmp	r2, r3
 8002656:	d000      	beq.n	800265a <UART_SetConfig+0x186>
 8002658:	e065      	b.n	8002726 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800265a:	231b      	movs	r3, #27
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	2b08      	cmp	r3, #8
 8002662:	d015      	beq.n	8002690 <UART_SetConfig+0x1bc>
 8002664:	dc18      	bgt.n	8002698 <UART_SetConfig+0x1c4>
 8002666:	2b04      	cmp	r3, #4
 8002668:	d00d      	beq.n	8002686 <UART_SetConfig+0x1b2>
 800266a:	dc15      	bgt.n	8002698 <UART_SetConfig+0x1c4>
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <UART_SetConfig+0x1a2>
 8002670:	2b02      	cmp	r3, #2
 8002672:	d005      	beq.n	8002680 <UART_SetConfig+0x1ac>
 8002674:	e010      	b.n	8002698 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002676:	f7ff f9f1 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 800267a:	0003      	movs	r3, r0
 800267c:	617b      	str	r3, [r7, #20]
        break;
 800267e:	e012      	b.n	80026a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002680:	4b64      	ldr	r3, [pc, #400]	@ (8002814 <UART_SetConfig+0x340>)
 8002682:	617b      	str	r3, [r7, #20]
        break;
 8002684:	e00f      	b.n	80026a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002686:	f7ff f95d 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 800268a:	0003      	movs	r3, r0
 800268c:	617b      	str	r3, [r7, #20]
        break;
 800268e:	e00a      	b.n	80026a6 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002690:	2380      	movs	r3, #128	@ 0x80
 8002692:	021b      	lsls	r3, r3, #8
 8002694:	617b      	str	r3, [r7, #20]
        break;
 8002696:	e006      	b.n	80026a6 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800269c:	231a      	movs	r3, #26
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
        break;
 80026a4:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <UART_SetConfig+0x1da>
 80026ac:	e08d      	b.n	80027ca <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026b2:	4b59      	ldr	r3, [pc, #356]	@ (8002818 <UART_SetConfig+0x344>)
 80026b4:	0052      	lsls	r2, r2, #1
 80026b6:	5ad3      	ldrh	r3, [r2, r3]
 80026b8:	0019      	movs	r1, r3
 80026ba:	6978      	ldr	r0, [r7, #20]
 80026bc:	f7fd fd28 	bl	8000110 <__udivsi3>
 80026c0:	0003      	movs	r3, r0
 80026c2:	005a      	lsls	r2, r3, #1
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	085b      	lsrs	r3, r3, #1
 80026ca:	18d2      	adds	r2, r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	0019      	movs	r1, r3
 80026d2:	0010      	movs	r0, r2
 80026d4:	f7fd fd1c 	bl	8000110 <__udivsi3>
 80026d8:	0003      	movs	r3, r0
 80026da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b0f      	cmp	r3, #15
 80026e0:	d91c      	bls.n	800271c <UART_SetConfig+0x248>
 80026e2:	693a      	ldr	r2, [r7, #16]
 80026e4:	2380      	movs	r3, #128	@ 0x80
 80026e6:	025b      	lsls	r3, r3, #9
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d217      	bcs.n	800271c <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	200e      	movs	r0, #14
 80026f2:	183b      	adds	r3, r7, r0
 80026f4:	210f      	movs	r1, #15
 80026f6:	438a      	bics	r2, r1
 80026f8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	085b      	lsrs	r3, r3, #1
 80026fe:	b29b      	uxth	r3, r3
 8002700:	2207      	movs	r2, #7
 8002702:	4013      	ands	r3, r2
 8002704:	b299      	uxth	r1, r3
 8002706:	183b      	adds	r3, r7, r0
 8002708:	183a      	adds	r2, r7, r0
 800270a:	8812      	ldrh	r2, [r2, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	183a      	adds	r2, r7, r0
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	e056      	b.n	80027ca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800271c:	231a      	movs	r3, #26
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
 8002724:	e051      	b.n	80027ca <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002726:	231b      	movs	r3, #27
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b08      	cmp	r3, #8
 800272e:	d015      	beq.n	800275c <UART_SetConfig+0x288>
 8002730:	dc18      	bgt.n	8002764 <UART_SetConfig+0x290>
 8002732:	2b04      	cmp	r3, #4
 8002734:	d00d      	beq.n	8002752 <UART_SetConfig+0x27e>
 8002736:	dc15      	bgt.n	8002764 <UART_SetConfig+0x290>
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <UART_SetConfig+0x26e>
 800273c:	2b02      	cmp	r3, #2
 800273e:	d005      	beq.n	800274c <UART_SetConfig+0x278>
 8002740:	e010      	b.n	8002764 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002742:	f7ff f98b 	bl	8001a5c <HAL_RCC_GetPCLK1Freq>
 8002746:	0003      	movs	r3, r0
 8002748:	617b      	str	r3, [r7, #20]
        break;
 800274a:	e012      	b.n	8002772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800274c:	4b31      	ldr	r3, [pc, #196]	@ (8002814 <UART_SetConfig+0x340>)
 800274e:	617b      	str	r3, [r7, #20]
        break;
 8002750:	e00f      	b.n	8002772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002752:	f7ff f8f7 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8002756:	0003      	movs	r3, r0
 8002758:	617b      	str	r3, [r7, #20]
        break;
 800275a:	e00a      	b.n	8002772 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800275c:	2380      	movs	r3, #128	@ 0x80
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	617b      	str	r3, [r7, #20]
        break;
 8002762:	e006      	b.n	8002772 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8002764:	2300      	movs	r3, #0
 8002766:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002768:	231a      	movs	r3, #26
 800276a:	18fb      	adds	r3, r7, r3
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
        break;
 8002770:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d028      	beq.n	80027ca <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800277c:	4b26      	ldr	r3, [pc, #152]	@ (8002818 <UART_SetConfig+0x344>)
 800277e:	0052      	lsls	r2, r2, #1
 8002780:	5ad3      	ldrh	r3, [r2, r3]
 8002782:	0019      	movs	r1, r3
 8002784:	6978      	ldr	r0, [r7, #20]
 8002786:	f7fd fcc3 	bl	8000110 <__udivsi3>
 800278a:	0003      	movs	r3, r0
 800278c:	001a      	movs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	18d2      	adds	r2, r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	0019      	movs	r1, r3
 800279c:	0010      	movs	r0, r2
 800279e:	f7fd fcb7 	bl	8000110 <__udivsi3>
 80027a2:	0003      	movs	r3, r0
 80027a4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2b0f      	cmp	r3, #15
 80027aa:	d90a      	bls.n	80027c2 <UART_SetConfig+0x2ee>
 80027ac:	693a      	ldr	r2, [r7, #16]
 80027ae:	2380      	movs	r3, #128	@ 0x80
 80027b0:	025b      	lsls	r3, r3, #9
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d205      	bcs.n	80027c2 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	e003      	b.n	80027ca <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80027c2:	231a      	movs	r3, #26
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	226a      	movs	r2, #106	@ 0x6a
 80027ce:	2101      	movs	r1, #1
 80027d0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2268      	movs	r2, #104	@ 0x68
 80027d6:	2101      	movs	r1, #1
 80027d8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2200      	movs	r2, #0
 80027e4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80027e6:	231a      	movs	r3, #26
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	781b      	ldrb	r3, [r3, #0]
}
 80027ec:	0018      	movs	r0, r3
 80027ee:	46bd      	mov	sp, r7
 80027f0:	b008      	add	sp, #32
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	cfff69f3 	.word	0xcfff69f3
 80027f8:	ffffcfff 	.word	0xffffcfff
 80027fc:	11fff4ff 	.word	0x11fff4ff
 8002800:	40013800 	.word	0x40013800
 8002804:	40021000 	.word	0x40021000
 8002808:	40004400 	.word	0x40004400
 800280c:	40004800 	.word	0x40004800
 8002810:	40004c00 	.word	0x40004c00
 8002814:	00f42400 	.word	0x00f42400
 8002818:	08004284 	.word	0x08004284

0800281c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002828:	2208      	movs	r2, #8
 800282a:	4013      	ands	r3, r2
 800282c:	d00b      	beq.n	8002846 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4a4a      	ldr	r2, [pc, #296]	@ (8002960 <UART_AdvFeatureConfig+0x144>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	430a      	orrs	r2, r1
 8002844:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284a:	2201      	movs	r2, #1
 800284c:	4013      	ands	r3, r2
 800284e:	d00b      	beq.n	8002868 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	4a43      	ldr	r2, [pc, #268]	@ (8002964 <UART_AdvFeatureConfig+0x148>)
 8002858:	4013      	ands	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	2202      	movs	r2, #2
 800286e:	4013      	ands	r3, r2
 8002870:	d00b      	beq.n	800288a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	4a3b      	ldr	r2, [pc, #236]	@ (8002968 <UART_AdvFeatureConfig+0x14c>)
 800287a:	4013      	ands	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	430a      	orrs	r2, r1
 8002888:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800288e:	2204      	movs	r2, #4
 8002890:	4013      	ands	r3, r2
 8002892:	d00b      	beq.n	80028ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4a34      	ldr	r2, [pc, #208]	@ (800296c <UART_AdvFeatureConfig+0x150>)
 800289c:	4013      	ands	r3, r2
 800289e:	0019      	movs	r1, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b0:	2210      	movs	r2, #16
 80028b2:	4013      	ands	r3, r2
 80028b4:	d00b      	beq.n	80028ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	4a2c      	ldr	r2, [pc, #176]	@ (8002970 <UART_AdvFeatureConfig+0x154>)
 80028be:	4013      	ands	r3, r2
 80028c0:	0019      	movs	r1, r3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d2:	2220      	movs	r2, #32
 80028d4:	4013      	ands	r3, r2
 80028d6:	d00b      	beq.n	80028f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	4a25      	ldr	r2, [pc, #148]	@ (8002974 <UART_AdvFeatureConfig+0x158>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	0019      	movs	r1, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	430a      	orrs	r2, r1
 80028ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f4:	2240      	movs	r2, #64	@ 0x40
 80028f6:	4013      	ands	r3, r2
 80028f8:	d01d      	beq.n	8002936 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	4a1d      	ldr	r2, [pc, #116]	@ (8002978 <UART_AdvFeatureConfig+0x15c>)
 8002902:	4013      	ands	r3, r2
 8002904:	0019      	movs	r1, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	430a      	orrs	r2, r1
 8002910:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002916:	2380      	movs	r3, #128	@ 0x80
 8002918:	035b      	lsls	r3, r3, #13
 800291a:	429a      	cmp	r2, r3
 800291c:	d10b      	bne.n	8002936 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	4a15      	ldr	r2, [pc, #84]	@ (800297c <UART_AdvFeatureConfig+0x160>)
 8002926:	4013      	ands	r3, r2
 8002928:	0019      	movs	r1, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800293a:	2280      	movs	r2, #128	@ 0x80
 800293c:	4013      	ands	r3, r2
 800293e:	d00b      	beq.n	8002958 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a0e      	ldr	r2, [pc, #56]	@ (8002980 <UART_AdvFeatureConfig+0x164>)
 8002948:	4013      	ands	r3, r2
 800294a:	0019      	movs	r1, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	605a      	str	r2, [r3, #4]
  }
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}
 8002960:	ffff7fff 	.word	0xffff7fff
 8002964:	fffdffff 	.word	0xfffdffff
 8002968:	fffeffff 	.word	0xfffeffff
 800296c:	fffbffff 	.word	0xfffbffff
 8002970:	ffffefff 	.word	0xffffefff
 8002974:	ffffdfff 	.word	0xffffdfff
 8002978:	ffefffff 	.word	0xffefffff
 800297c:	ff9fffff 	.word	0xff9fffff
 8002980:	fff7ffff 	.word	0xfff7ffff

08002984 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b092      	sub	sp, #72	@ 0x48
 8002988:	af02      	add	r7, sp, #8
 800298a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2290      	movs	r2, #144	@ 0x90
 8002990:	2100      	movs	r1, #0
 8002992:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002994:	f7fe f818 	bl	80009c8 <HAL_GetTick>
 8002998:	0003      	movs	r3, r0
 800299a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2208      	movs	r2, #8
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b08      	cmp	r3, #8
 80029a8:	d12d      	bne.n	8002a06 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ac:	2280      	movs	r2, #128	@ 0x80
 80029ae:	0391      	lsls	r1, r2, #14
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	4a47      	ldr	r2, [pc, #284]	@ (8002ad0 <UART_CheckIdleState+0x14c>)
 80029b4:	9200      	str	r2, [sp, #0]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f000 f88e 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 80029bc:	1e03      	subs	r3, r0, #0
 80029be:	d022      	beq.n	8002a06 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029c0:	f3ef 8310 	mrs	r3, PRIMASK
 80029c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80029c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80029ca:	2301      	movs	r3, #1
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d0:	f383 8810 	msr	PRIMASK, r3
}
 80029d4:	46c0      	nop			@ (mov r8, r8)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2180      	movs	r1, #128	@ 0x80
 80029e2:	438a      	bics	r2, r1
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ec:	f383 8810 	msr	PRIMASK, r3
}
 80029f0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2288      	movs	r2, #136	@ 0x88
 80029f6:	2120      	movs	r1, #32
 80029f8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2284      	movs	r2, #132	@ 0x84
 80029fe:	2100      	movs	r1, #0
 8002a00:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e060      	b.n	8002ac8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	4013      	ands	r3, r2
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d146      	bne.n	8002aa2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002a14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a16:	2280      	movs	r2, #128	@ 0x80
 8002a18:	03d1      	lsls	r1, r2, #15
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	4a2c      	ldr	r2, [pc, #176]	@ (8002ad0 <UART_CheckIdleState+0x14c>)
 8002a1e:	9200      	str	r2, [sp, #0]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f000 f859 	bl	8002ad8 <UART_WaitOnFlagUntilTimeout>
 8002a26:	1e03      	subs	r3, r0, #0
 8002a28:	d03b      	beq.n	8002aa2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002a2e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a30:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a32:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a34:	2301      	movs	r3, #1
 8002a36:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	f383 8810 	msr	PRIMASK, r3
}
 8002a3e:	46c0      	nop			@ (mov r8, r8)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4922      	ldr	r1, [pc, #136]	@ (8002ad4 <UART_CheckIdleState+0x150>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	f383 8810 	msr	PRIMASK, r3
}
 8002a5a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a5c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a60:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a62:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a64:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a66:	2301      	movs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f383 8810 	msr	PRIMASK, r3
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	438a      	bics	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a86:	6a3b      	ldr	r3, [r7, #32]
 8002a88:	f383 8810 	msr	PRIMASK, r3
}
 8002a8c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	228c      	movs	r2, #140	@ 0x8c
 8002a92:	2120      	movs	r1, #32
 8002a94:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2284      	movs	r2, #132	@ 0x84
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e012      	b.n	8002ac8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2288      	movs	r2, #136	@ 0x88
 8002aa6:	2120      	movs	r1, #32
 8002aa8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	228c      	movs	r2, #140	@ 0x8c
 8002aae:	2120      	movs	r1, #32
 8002ab0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2284      	movs	r2, #132	@ 0x84
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	0018      	movs	r0, r3
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b010      	add	sp, #64	@ 0x40
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	01ffffff 	.word	0x01ffffff
 8002ad4:	fffffedf 	.word	0xfffffedf

08002ad8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	1dfb      	adds	r3, r7, #7
 8002ae6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ae8:	e051      	b.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	3301      	adds	r3, #1
 8002aee:	d04e      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002af0:	f7fd ff6a 	bl	80009c8 <HAL_GetTick>
 8002af4:	0002      	movs	r2, r0
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d302      	bcc.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e051      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2204      	movs	r2, #4
 8002b12:	4013      	ands	r3, r2
 8002b14:	d03b      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b80      	cmp	r3, #128	@ 0x80
 8002b1a:	d038      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb6>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2b40      	cmp	r3, #64	@ 0x40
 8002b20:	d035      	beq.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	69db      	ldr	r3, [r3, #28]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d111      	bne.n	8002b54 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2208      	movs	r2, #8
 8002b36:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	0018      	movs	r0, r3
 8002b3c:	f000 f83c 	bl	8002bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2290      	movs	r2, #144	@ 0x90
 8002b44:	2108      	movs	r1, #8
 8002b46:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2284      	movs	r2, #132	@ 0x84
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e02c      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	69da      	ldr	r2, [r3, #28]
 8002b5a:	2380      	movs	r3, #128	@ 0x80
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	401a      	ands	r2, r3
 8002b60:	2380      	movs	r3, #128	@ 0x80
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d112      	bne.n	8002b8e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2280      	movs	r2, #128	@ 0x80
 8002b6e:	0112      	lsls	r2, r2, #4
 8002b70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f81f 	bl	8002bb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2290      	movs	r2, #144	@ 0x90
 8002b7e:	2120      	movs	r1, #32
 8002b80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2284      	movs	r2, #132	@ 0x84
 8002b86:	2100      	movs	r1, #0
 8002b88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e00f      	b.n	8002bae <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	69db      	ldr	r3, [r3, #28]
 8002b94:	68ba      	ldr	r2, [r7, #8]
 8002b96:	4013      	ands	r3, r2
 8002b98:	68ba      	ldr	r2, [r7, #8]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	425a      	negs	r2, r3
 8002b9e:	4153      	adcs	r3, r2
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	1dfb      	adds	r3, r7, #7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d09e      	beq.n	8002aea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b08e      	sub	sp, #56	@ 0x38
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bc0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bc4:	617b      	str	r3, [r7, #20]
  return(result);
 8002bc6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	f383 8810 	msr	PRIMASK, r3
}
 8002bd4:	46c0      	nop			@ (mov r8, r8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4926      	ldr	r1, [pc, #152]	@ (8002c7c <UART_EndRxTransfer+0xc4>)
 8002be2:	400a      	ands	r2, r1
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002be8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f383 8810 	msr	PRIMASK, r3
}
 8002bf0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bf2:	f3ef 8310 	mrs	r3, PRIMASK
 8002bf6:	623b      	str	r3, [r7, #32]
  return(result);
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002bfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			@ (mov r8, r8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	689a      	ldr	r2, [r3, #8]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	491b      	ldr	r1, [pc, #108]	@ (8002c80 <UART_EndRxTransfer+0xc8>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	f383 8810 	msr	PRIMASK, r3
}
 8002c22:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d118      	bne.n	8002c5e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002c2c:	f3ef 8310 	mrs	r3, PRIMASK
 8002c30:	60bb      	str	r3, [r7, #8]
  return(result);
 8002c32:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c36:	2301      	movs	r3, #1
 8002c38:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f383 8810 	msr	PRIMASK, r3
}
 8002c40:	46c0      	nop			@ (mov r8, r8)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2110      	movs	r1, #16
 8002c4e:	438a      	bics	r2, r1
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c54:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f383 8810 	msr	PRIMASK, r3
}
 8002c5c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	228c      	movs	r2, #140	@ 0x8c
 8002c62:	2120      	movs	r1, #32
 8002c64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8002c72:	46c0      	nop			@ (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b00e      	add	sp, #56	@ 0x38
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			@ (mov r8, r8)
 8002c7c:	fffffedf 	.word	0xfffffedf
 8002c80:	effffffe 	.word	0xeffffffe

08002c84 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	225e      	movs	r2, #94	@ 0x5e
 8002c96:	2100      	movs	r1, #0
 8002c98:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2256      	movs	r2, #86	@ 0x56
 8002c9e:	2100      	movs	r1, #0
 8002ca0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	0018      	movs	r0, r3
 8002ca6:	f7ff fc01 	bl	80024ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002caa:	46c0      	nop			@ (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b08a      	sub	sp, #40	@ 0x28
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2288      	movs	r2, #136	@ 0x88
 8002cbe:	589b      	ldr	r3, [r3, r2]
 8002cc0:	2b21      	cmp	r3, #33	@ 0x21
 8002cc2:	d14c      	bne.n	8002d5e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2256      	movs	r2, #86	@ 0x56
 8002cc8:	5a9b      	ldrh	r3, [r3, r2]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d132      	bne.n	8002d36 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002cd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002cd4:	60bb      	str	r3, [r7, #8]
  return(result);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cda:	2301      	movs	r3, #1
 8002cdc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f383 8810 	msr	PRIMASK, r3
}
 8002ce4:	46c0      	nop			@ (mov r8, r8)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2180      	movs	r1, #128	@ 0x80
 8002cf2:	438a      	bics	r2, r1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	f383 8810 	msr	PRIMASK, r3
}
 8002d00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d02:	f3ef 8310 	mrs	r3, PRIMASK
 8002d06:	617b      	str	r3, [r7, #20]
  return(result);
 8002d08:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	f383 8810 	msr	PRIMASK, r3
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2140      	movs	r1, #64	@ 0x40
 8002d24:	430a      	orrs	r2, r1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f383 8810 	msr	PRIMASK, r3
}
 8002d32:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002d34:	e013      	b.n	8002d5e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d3a:	781a      	ldrb	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d46:	1c5a      	adds	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2256      	movs	r2, #86	@ 0x56
 8002d50:	5a9b      	ldrh	r3, [r3, r2]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b299      	uxth	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2256      	movs	r2, #86	@ 0x56
 8002d5c:	5299      	strh	r1, [r3, r2]
}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	46bd      	mov	sp, r7
 8002d62:	b00a      	add	sp, #40	@ 0x28
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b08c      	sub	sp, #48	@ 0x30
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2288      	movs	r2, #136	@ 0x88
 8002d72:	589b      	ldr	r3, [r3, r2]
 8002d74:	2b21      	cmp	r3, #33	@ 0x21
 8002d76:	d151      	bne.n	8002e1c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2256      	movs	r2, #86	@ 0x56
 8002d7c:	5a9b      	ldrh	r3, [r3, r2]
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d132      	bne.n	8002dea <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002d84:	f3ef 8310 	mrs	r3, PRIMASK
 8002d88:	60fb      	str	r3, [r7, #12]
  return(result);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002d8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d8e:	2301      	movs	r3, #1
 8002d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	f383 8810 	msr	PRIMASK, r3
}
 8002d98:	46c0      	nop			@ (mov r8, r8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2180      	movs	r1, #128	@ 0x80
 8002da6:	438a      	bics	r2, r1
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f383 8810 	msr	PRIMASK, r3
}
 8002db4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002db6:	f3ef 8310 	mrs	r3, PRIMASK
 8002dba:	61bb      	str	r3, [r7, #24]
  return(result);
 8002dbc:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002dbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f383 8810 	msr	PRIMASK, r3
}
 8002dca:	46c0      	nop			@ (mov r8, r8)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2140      	movs	r1, #64	@ 0x40
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	f383 8810 	msr	PRIMASK, r3
}
 8002de6:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002de8:	e018      	b.n	8002e1c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	001a      	movs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	05d2      	lsls	r2, r2, #23
 8002dfc:	0dd2      	lsrs	r2, r2, #23
 8002dfe:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e04:	1c9a      	adds	r2, r3, #2
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2256      	movs	r2, #86	@ 0x56
 8002e0e:	5a9b      	ldrh	r3, [r3, r2]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	3b01      	subs	r3, #1
 8002e14:	b299      	uxth	r1, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2256      	movs	r2, #86	@ 0x56
 8002e1a:	5299      	strh	r1, [r3, r2]
}
 8002e1c:	46c0      	nop			@ (mov r8, r8)
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	b00c      	add	sp, #48	@ 0x30
 8002e22:	bd80      	pop	{r7, pc}

08002e24 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08c      	sub	sp, #48	@ 0x30
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2288      	movs	r2, #136	@ 0x88
 8002e30:	589b      	ldr	r3, [r3, r2]
 8002e32:	2b21      	cmp	r3, #33	@ 0x21
 8002e34:	d165      	bne.n	8002f02 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002e36:	232e      	movs	r3, #46	@ 0x2e
 8002e38:	18fb      	adds	r3, r7, r3
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	216a      	movs	r1, #106	@ 0x6a
 8002e3e:	5a52      	ldrh	r2, [r2, r1]
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	e059      	b.n	8002ef8 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2256      	movs	r2, #86	@ 0x56
 8002e48:	5a9b      	ldrh	r3, [r3, r2]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d133      	bne.n	8002eb8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e50:	f3ef 8310 	mrs	r3, PRIMASK
 8002e54:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e56:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002e58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	f383 8810 	msr	PRIMASK, r3
}
 8002e64:	46c0      	nop			@ (mov r8, r8)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4926      	ldr	r1, [pc, #152]	@ (8002f0c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	609a      	str	r2, [r3, #8]
 8002e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	f383 8810 	msr	PRIMASK, r3
}
 8002e80:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002e82:	f3ef 8310 	mrs	r3, PRIMASK
 8002e86:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e88:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002e8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	f383 8810 	msr	PRIMASK, r3
}
 8002e96:	46c0      	nop			@ (mov r8, r8)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2140      	movs	r1, #64	@ 0x40
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f383 8810 	msr	PRIMASK, r3
}
 8002eb2:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8002eb4:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8002eb6:	e024      	b.n	8002f02 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2280      	movs	r2, #128	@ 0x80
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d013      	beq.n	8002eec <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ec8:	781a      	ldrb	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ed4:	1c5a      	adds	r2, r3, #1
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2256      	movs	r2, #86	@ 0x56
 8002ede:	5a9b      	ldrh	r3, [r3, r2]
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	b299      	uxth	r1, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2256      	movs	r2, #86	@ 0x56
 8002eea:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002eec:	212e      	movs	r1, #46	@ 0x2e
 8002eee:	187b      	adds	r3, r7, r1
 8002ef0:	881a      	ldrh	r2, [r3, #0]
 8002ef2:	187b      	adds	r3, r7, r1
 8002ef4:	3a01      	subs	r2, #1
 8002ef6:	801a      	strh	r2, [r3, #0]
 8002ef8:	232e      	movs	r3, #46	@ 0x2e
 8002efa:	18fb      	adds	r3, r7, r3
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1a0      	bne.n	8002e44 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b00c      	add	sp, #48	@ 0x30
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
 8002f0c:	ff7fffff 	.word	0xff7fffff

08002f10 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b08c      	sub	sp, #48	@ 0x30
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2288      	movs	r2, #136	@ 0x88
 8002f1c:	589b      	ldr	r3, [r3, r2]
 8002f1e:	2b21      	cmp	r3, #33	@ 0x21
 8002f20:	d16a      	bne.n	8002ff8 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002f22:	232e      	movs	r3, #46	@ 0x2e
 8002f24:	18fb      	adds	r3, r7, r3
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	216a      	movs	r1, #106	@ 0x6a
 8002f2a:	5a52      	ldrh	r2, [r2, r1]
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	e05e      	b.n	8002fee <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2256      	movs	r2, #86	@ 0x56
 8002f34:	5a9b      	ldrh	r3, [r3, r2]
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d133      	bne.n	8002fa4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f40:	60bb      	str	r3, [r7, #8]
  return(result);
 8002f42:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f46:	2301      	movs	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f383 8810 	msr	PRIMASK, r3
}
 8002f50:	46c0      	nop			@ (mov r8, r8)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4928      	ldr	r1, [pc, #160]	@ (8003000 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8002f5e:	400a      	ands	r2, r1
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f64:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	f383 8810 	msr	PRIMASK, r3
}
 8002f6c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f72:	617b      	str	r3, [r7, #20]
  return(result);
 8002f74:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f76:	623b      	str	r3, [r7, #32]
 8002f78:	2301      	movs	r3, #1
 8002f7a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f383 8810 	msr	PRIMASK, r3
}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2140      	movs	r1, #64	@ 0x40
 8002f90:	430a      	orrs	r2, r1
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f383 8810 	msr	PRIMASK, r3
}
 8002f9e:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 8002fa0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8002fa2:	e029      	b.n	8002ff8 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	2280      	movs	r2, #128	@ 0x80
 8002fac:	4013      	ands	r3, r2
 8002fae:	d018      	beq.n	8002fe2 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	001a      	movs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	05d2      	lsls	r2, r2, #23
 8002fc2:	0dd2      	lsrs	r2, r2, #23
 8002fc4:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fca:	1c9a      	adds	r2, r3, #2
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2256      	movs	r2, #86	@ 0x56
 8002fd4:	5a9b      	ldrh	r3, [r3, r2]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b299      	uxth	r1, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2256      	movs	r2, #86	@ 0x56
 8002fe0:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8002fe2:	212e      	movs	r1, #46	@ 0x2e
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	881a      	ldrh	r2, [r3, #0]
 8002fe8:	187b      	adds	r3, r7, r1
 8002fea:	3a01      	subs	r2, #1
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	232e      	movs	r3, #46	@ 0x2e
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	881b      	ldrh	r3, [r3, #0]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d19b      	bne.n	8002f30 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8002ff8:	46c0      	nop			@ (mov r8, r8)
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	b00c      	add	sp, #48	@ 0x30
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	ff7fffff 	.word	0xff7fffff

08003004 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b086      	sub	sp, #24
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800300c:	f3ef 8310 	mrs	r3, PRIMASK
 8003010:	60bb      	str	r3, [r7, #8]
  return(result);
 8003012:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003014:	617b      	str	r3, [r7, #20]
 8003016:	2301      	movs	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	f383 8810 	msr	PRIMASK, r3
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2140      	movs	r1, #64	@ 0x40
 800302e:	438a      	bics	r2, r1
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	f383 8810 	msr	PRIMASK, r3
}
 800303c:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2288      	movs	r2, #136	@ 0x88
 8003042:	2120      	movs	r1, #32
 8003044:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff fa24 	bl	800249c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	46bd      	mov	sp, r7
 8003058:	b006      	add	sp, #24
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	46bd      	mov	sp, r7
 8003068:	b002      	add	sp, #8
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003074:	46c0      	nop			@ (mov r8, r8)
 8003076:	46bd      	mov	sp, r7
 8003078:	b002      	add	sp, #8
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003084:	46c0      	nop			@ (mov r8, r8)
 8003086:	46bd      	mov	sp, r7
 8003088:	b002      	add	sp, #8
 800308a:	bd80      	pop	{r7, pc}

0800308c <memset>:
 800308c:	0003      	movs	r3, r0
 800308e:	1882      	adds	r2, r0, r2
 8003090:	4293      	cmp	r3, r2
 8003092:	d100      	bne.n	8003096 <memset+0xa>
 8003094:	4770      	bx	lr
 8003096:	7019      	strb	r1, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	e7f9      	b.n	8003090 <memset+0x4>

0800309c <strstr>:
 800309c:	780a      	ldrb	r2, [r1, #0]
 800309e:	b530      	push	{r4, r5, lr}
 80030a0:	2a00      	cmp	r2, #0
 80030a2:	d10c      	bne.n	80030be <strstr+0x22>
 80030a4:	bd30      	pop	{r4, r5, pc}
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d108      	bne.n	80030bc <strstr+0x20>
 80030aa:	2301      	movs	r3, #1
 80030ac:	5ccc      	ldrb	r4, [r1, r3]
 80030ae:	2c00      	cmp	r4, #0
 80030b0:	d0f8      	beq.n	80030a4 <strstr+0x8>
 80030b2:	5cc5      	ldrb	r5, [r0, r3]
 80030b4:	42a5      	cmp	r5, r4
 80030b6:	d101      	bne.n	80030bc <strstr+0x20>
 80030b8:	3301      	adds	r3, #1
 80030ba:	e7f7      	b.n	80030ac <strstr+0x10>
 80030bc:	3001      	adds	r0, #1
 80030be:	7803      	ldrb	r3, [r0, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d1f0      	bne.n	80030a6 <strstr+0xa>
 80030c4:	0018      	movs	r0, r3
 80030c6:	e7ed      	b.n	80030a4 <strstr+0x8>

080030c8 <__libc_init_array>:
 80030c8:	b570      	push	{r4, r5, r6, lr}
 80030ca:	2600      	movs	r6, #0
 80030cc:	4c0c      	ldr	r4, [pc, #48]	@ (8003100 <__libc_init_array+0x38>)
 80030ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003104 <__libc_init_array+0x3c>)
 80030d0:	1b64      	subs	r4, r4, r5
 80030d2:	10a4      	asrs	r4, r4, #2
 80030d4:	42a6      	cmp	r6, r4
 80030d6:	d109      	bne.n	80030ec <__libc_init_array+0x24>
 80030d8:	2600      	movs	r6, #0
 80030da:	f000 f819 	bl	8003110 <_init>
 80030de:	4c0a      	ldr	r4, [pc, #40]	@ (8003108 <__libc_init_array+0x40>)
 80030e0:	4d0a      	ldr	r5, [pc, #40]	@ (800310c <__libc_init_array+0x44>)
 80030e2:	1b64      	subs	r4, r4, r5
 80030e4:	10a4      	asrs	r4, r4, #2
 80030e6:	42a6      	cmp	r6, r4
 80030e8:	d105      	bne.n	80030f6 <__libc_init_array+0x2e>
 80030ea:	bd70      	pop	{r4, r5, r6, pc}
 80030ec:	00b3      	lsls	r3, r6, #2
 80030ee:	58eb      	ldr	r3, [r5, r3]
 80030f0:	4798      	blx	r3
 80030f2:	3601      	adds	r6, #1
 80030f4:	e7ee      	b.n	80030d4 <__libc_init_array+0xc>
 80030f6:	00b3      	lsls	r3, r6, #2
 80030f8:	58eb      	ldr	r3, [r5, r3]
 80030fa:	4798      	blx	r3
 80030fc:	3601      	adds	r6, #1
 80030fe:	e7f2      	b.n	80030e6 <__libc_init_array+0x1e>
 8003100:	0800429c 	.word	0x0800429c
 8003104:	0800429c 	.word	0x0800429c
 8003108:	080042a0 	.word	0x080042a0
 800310c:	0800429c 	.word	0x0800429c

08003110 <_init>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	46c0      	nop			@ (mov r8, r8)
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr

0800311c <_fini>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	46c0      	nop			@ (mov r8, r8)
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr
